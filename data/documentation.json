{"@GDScript": {"brief_description": "Built-in GDScript functions.", "category": "Core", "constants": [{"description": "Constant that represents how many times the diameter of a circle fits around its perimeter.", "name": "PI", "value": "3.141593"}, {"description": "The circle constant, the circumference of the unit circle.", "name": "TAU", "value": "6.283185"}, {"description": "A positive infinity. (For negative infinity, use -INF).", "name": "INF", "value": "inf"}, {"description": "Macro constant that expands to an expression of type float that represents a NaN.\n\t\t\tThe NaN values are used to identify undefined or non-representable values for floating-point elements, such as the square root of negative numbers or the result of 0/0.", "name": "NAN", "value": "nan"}], "demos": {"links": []}, "description": "List of core built-in GDScript functions. Math functions and other utilities. Everything else is provided by objects. (Keywords: builtin, built in, global functions.)", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "r8", "type": "int"}, {"description": "", "index": "1", "name": "g8", "type": "int"}, {"description": "", "index": "2", "name": "b8", "type": "int"}, {"default": "255", "description": "", "index": "3", "name": "a8", "type": "int"}], "description": "Returns a 32 bit color with red, green, blue and alpha channels. Each channel has 8 bits of information ranging from 0 to 255.\n\t\t\t\t[code]r8[/code] red channel\n\t\t\t\t[code]g8[/code] green channel\n\t\t\t\t[code]b8[/code] blue channel\n\t\t\t\t[code]a8[/code] alpha channel\n\t\t\t\t[codeblock]\n\t\t\t\tred = Color8(255, 0, 0)\n\t\t\t\t[/codeblock]", "name": "Color8", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "1.0", "description": "", "index": "1", "name": "alpha", "type": "float"}], "description": "Returns a color according to the standardised [code]name[/code] with [code]alpha[/code] ranging from 0 to 1.\n\t\t\t\t[codeblock]\n\t\t\t\tred = ColorN(\"red\", 1)\n\t\t\t\t[/codeblock]\n\t\t\t\tSupported color names:\n\t\t\t\t\"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\", \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\", \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflower\", \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\", \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\", \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\", \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\", \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\", \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\", \"gold\", \"goldenrod\", \"gray\", \"webgray\", \"green\", \"webgreen\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\", \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrod\", \"lightgray\", \"lightgreen\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\", \"maroon\", \"webmaroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\", \"navajowhite\", \"navyblue\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\", \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\", \"purple\", \"webpurple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\", \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\", \"whitesmoke\", \"yellow\", \"yellowgreen\".", "name": "ColorN", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the absolute value of parameter [code]s[/code]  (i.e. unsigned value, works for integer and float).\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 1\n\t\t\t\ta = abs(-1)\n\t\t\t\t[/codeblock]", "name": "abs", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the arc cosine of [code]s[/code] in radians. Use to get the angle of cosine [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# c is 0.523599 or 30 degrees if converted with rad2deg(s)\n\t\t\t\tc = acos(0.866025)\n\t\t\t\t[/codeblock]", "name": "acos", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the arc sine of [code]s[/code] in radians. Use to get the angle of sine [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# s is 0.523599 or 30 degrees if converted with rad2deg(s)\n\t\t\t\ts = asin(0.5)\n\t\t\t\t[/codeblock]", "name": "asin", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "condition", "type": "bool"}], "description": "Assert that the [code]condition[/code] is true. If the [code]condition[/code] is false a fatal error is generated and the program is halted. Useful for debugging to make sure a value is always true.\n\t\t\t\t[codeblock]\n\t\t\t\t# Speed should always be between 0 and 20\n\t\t\t\tspeed = -10\n\t\t\t\tassert(speed < 20) # Is true and program continues\n\t\t\t\tassert(speed >= 0) # Is false and program stops\n\t\t\t\tassert(speed >= 0 && speed < 20) # Or combined\n\t\t\t\t[/codeblock]", "name": "assert", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the arc tangent of [code]s[/code] in radians. Use it to get the angle from an angle's tangent in trigonometry: [code]atan(tan(angle)) == angle[/code].\n\t\t\t\tThe method cannot know in which quadrant the angle should fall. See [method atan2] if you always want an exact angle.\n\t\t\t\t[codeblock]\n\t\t\t\ta = atan(0.5) # a is 0.463648\n\t\t\t\t[/codeblock]", "name": "atan", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "float"}, {"description": "", "index": "1", "name": "y", "type": "float"}], "description": "Returns the arc tangent of [code]y/x[/code] in radians. Use to get the angle of tangent [code]y/x[/code]. To compute the value, the method takes into account the sign of both arguments in order to determine the quadrant.\n\t\t\t\t[codeblock]\n\t\t\t\ta = atan(0,-1) # a is 3.141593\n\t\t\t\t[/codeblock]", "name": "atan2", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "bytes", "type": "PoolByteArray"}], "description": "Decodes a byte array back to a value.", "name": "bytes2var", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "float"}, {"description": "", "index": "1", "name": "y", "type": "float"}], "description": "Converts a 2D point expressed in the cartesian coordinate system (x and y axis) to the polar coordinate system (a distance from the origin and an angle).", "name": "cartesian2polar", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Rounds [code]s[/code] upward, returning the smallest integral value that is not less than [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\ti = ceil(1.45)  # i is 2\n\t\t\t\ti = ceil(1.001) # i is 2\n\t\t\t\t[/codeblock]", "name": "ceil", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "ascii", "type": "int"}], "description": "Returns a character as a String of the given ASCII code.\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 'A'\n\t\t\t\ta = char(65)\n\t\t\t\t# a is 'a'\n\t\t\t\ta = char(65+32)\n\t\t\t\t[/codeblock]", "name": "char", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}, {"description": "", "index": "1", "name": "min", "type": "float"}, {"description": "", "index": "2", "name": "max", "type": "float"}], "description": "Clamps [code]value[/code] and returns a value not less than [code]min[/code] and not more than [code]max[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tspeed = 1000\n\t\t\t\t# a is 20\n\t\t\t\ta = clamp(speed, 1, 20)\n\n\t\t\t\tspeed = -10\n\t\t\t\t# a is 1\n\t\t\t\ta = clamp(speed, 1, 20)\n\t\t\t\t[/codeblock]", "name": "clamp", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "Variant"}, {"description": "", "index": "1", "name": "type", "type": "int"}], "description": "Converts from a type to another in the best way possible. The [code]type[/code] parameter uses the enum TYPE_* in [@GlobalScope].\n\t\t\t\t[codeblock]\n\t\t\t\ta = Vector2(1, 0)\n\t\t\t\t# prints 1\n\t\t\t\tprint(a.length())\n\t\t\t\ta = convert(a, TYPE_STRING)\n\t\t\t\t# prints 6\n\t\t\t\t# (1, 0) is 6 characters\n\t\t\t\tprint(a.length())\n\t\t\t\t[/codeblock]", "name": "convert", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the cosine of angle [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\t# prints 1 and -1\n\t\t\t\tprint(cos(PI*2))\n\t\t\t\tprint(cos(PI))\n\t\t\t\t[/codeblock]", "name": "cos", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the hyperbolic cosine of [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\t# prints 1.543081\n\t\t\t\tprint(cosh(1))\n\t\t\t\t[/codeblock]", "name": "cosh", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "db", "type": "float"}], "description": "Converts from decibels to linear energy (audio).", "name": "db2linear", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "step", "type": "float"}], "description": "Returns the position of the first non-zero digit, after the decimal point.\n\t\t\t\t[codeblock]\n\t\t\t\t# n is 2\n\t\t\t\tn = decimals(0.035)\n\t\t\t\t[/codeblock]", "name": "decimals", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}, {"description": "", "index": "1", "name": "amount", "type": "float"}, {"description": "", "index": "2", "name": "step", "type": "float"}], "description": "Returns the result of [code]value[/code] decreased by [code]step[/code] * [code]amount[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# a = 59\n\t\t\t\ta = dectime(60, 10, 0.1))\n\t\t\t\t[/codeblock]", "name": "dectime", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "deg", "type": "float"}], "description": "Returns degrees converted to radians.\n\t\t\t\t[codeblock]\n\t\t\t\t# r is 3.141593\n\t\t\t\tr = deg2rad(180)\n\t\t\t\t[/codeblock]", "name": "deg2rad", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "dict", "type": "Dictionary"}], "description": "Converts a previously converted instance to a dictionary, back into an instance. Useful for deserializing.", "name": "dict2inst", "return_": {"description": "", "type": "Object"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}, {"description": "", "index": "1", "name": "curve", "type": "float"}], "description": "Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in.", "name": "ease", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "The natural exponential function. It raises the mathematical constant [b]e[/b] to the power of [code]s[/code] and returns it.\n\t\t\t\t[b]e[/b] has an approximate value of 2.71828.\n\t\t\t\t[codeblock]\n\t\t\t\ta = exp(2) # approximately 7.39\n\t\t\t\t[/codeblock]", "name": "exp", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Rounds [code]s[/code] to the closest smaller integer and returns it.\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 2\n\t\t\t\ta = floor(2.99)\n\t\t\t\t# a is -3\n\t\t\t\ta = floor(-2.99)\n\t\t\t\t[/codeblock]", "name": "floor", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "float"}, {"description": "", "index": "1", "name": "y", "type": "float"}], "description": "Returns the floating-point remainder of [code]x/y[/code].\n\t\t\t\t[codeblock]\n\t\t\t\t# remainder is 1.5\n\t\t\t\tvar remainder = fmod(7, 5.5)\n\t\t\t\t[/codeblock]", "name": "fmod", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "float"}, {"description": "", "index": "1", "name": "y", "type": "float"}], "description": "Returns the floating-point remainder of [code]x/y[/code] that wraps equally in positive and negative.\n\t\t\t\t[codeblock]\n\t\t\t\tvar i = -10;\n\t\t\t\twhile i < 0:\n\t\t\t\t    prints(i, fposmod(i, 10))\n\t\t\t\t    i += 1\n\t\t\t\t[/codeblock]\n\t\t\t\tProduces:\n\t\t\t\t[codeblock]\n\t\t\t\t-10 10\n\t\t\t\t-9 1\n\t\t\t\t-8 2\n\t\t\t\t-7 3\n\t\t\t\t-6 4\n\t\t\t\t-5 5\n\t\t\t\t-4 6\n\t\t\t\t-3 7\n\t\t\t\t-2 8\n\t\t\t\t-1 9\n\t\t\t\t[/codeblock]", "name": "fposmod", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "Object"}, {"description": "", "index": "1", "name": "funcname", "type": "String"}], "description": "Returns a reference to the specified function [code]funcname[/code] in the [code]instance[/code] node. As functions aren't first-class objects in GDscript, use [code]funcref[/code] to store a [FuncRef] in a variable and call it later.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc foo():\n\t\t\t\t    return(\"bar\")\n\n\t\t\t\ta = funcref(self, \"foo\")\n\t\t\t\tprint(a.call_func()) # prints bar\n\t\t\t\t[/codeblock]", "name": "funcref", "return_": {"description": "", "type": "FuncRef"}}, {"arguments": [], "description": "", "name": "get_stack", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "var", "type": "Variant"}], "description": "Returns the integer hash of the variable passed.\n\t\t\t\t[codeblock]\n\t\t\t\tprint(hash(\"a\")) # prints 177670\n\t\t\t\t[/codeblock]", "name": "hash", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "inst", "type": "Object"}], "description": "Returns the passed instance converted to a dictionary (useful for serializing).\n\t\t\t\t[codeblock]\n\t\t\t\tvar foo = \"bar\"\n\t\t\t\tfunc _ready():\n\t\t\t\t    var d = inst2dict(self)\n\t\t\t\t    print(d.keys())\n\t\t\t\t    print(d.values())\n\t\t\t\t[/codeblock]\n\t\t\t\tPrints out:\n\t\t\t\t[codeblock]\n\t\t\t\t[@subpath, @path, foo]\n\t\t\t\t[, res://test.gd, bar]\n\t\t\t\t[/codeblock]", "name": "inst2dict", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"description": "", "index": "0", "name": "instance_id", "type": "int"}], "description": "Returns the Object that corresponds to [code]instance_id[/code]. All Objects have a unique instance ID.\n\t\t\t\t[codeblock]\n\t\t\t\tvar foo = \"bar\"\n\t\t\t\tfunc _ready():\n\t\t\t\t    var id = get_instance_id()\n\t\t\t\t    var inst = instance_from_id(id)\n\t\t\t\t    print(inst.foo) # prints bar\n\t\t\t\t[/codeblock]", "name": "instance_from_id", "return_": {"description": "", "type": "Object"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "float"}, {"description": "", "index": "1", "name": "to", "type": "float"}, {"description": "", "index": "2", "name": "weight", "type": "float"}], "description": "Returns a normalized value considering the given range.\n\t\t\t\t[codeblock]\n\t\t\t\tinverse_lerp(3, 5, 4) # returns 0.5\n\t\t\t\t[/codeblock]", "name": "inverse_lerp", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns True/False whether [code]s[/code] is an infinity value (either positive infinity or negative infinity).", "name": "is_inf", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "Object"}], "description": "", "name": "is_instance_valid", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns True/False whether [code]s[/code] is a NaN (Not-A-Number) value.", "name": "is_nan", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "var", "type": "Variant"}], "description": "Returns length of Variant [code]var[/code]. Length is the character count of String, element count of Array, size of Dictionary, etc.\n\t\t\t\t[b]Note:[/b] Generates a fatal error if Variant can not provide a length.\n\t\t\t\t[codeblock]\n\t\t\t\ta = [1, 2, 3, 4]\n\t\t\t\tlen(a) # returns 4\n\t\t\t\t[/codeblock]", "name": "len", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Variant"}, {"description": "", "index": "1", "name": "to", "type": "Variant"}, {"description": "", "index": "2", "name": "weight", "type": "float"}], "description": "Linearly interpolates between two values by a normalized value.\n\t\t\t\t[codeblock]\n\t\t\t\tlerp(1, 3, 0.5) # returns 2\n\t\t\t\t[/codeblock]", "name": "lerp", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "nrg", "type": "float"}], "description": "Converts from linear energy to decibels (audio).", "name": "linear2db", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Loads a resource from the filesystem located at [code]path[/code].\n\t\t\t\t[b]Note:[/b] Resource paths can be obtained by right clicking on a resource in the Assets Panel and choosing \"Copy Path\".\n\t\t\t\t[codeblock]\n\t\t\t\t# load a scene called main located in the root of the project directory\n\t\t\t\tvar main = load(\"res://main.tscn\")\n\t\t\t\t[/codeblock]", "name": "load", "return_": {"description": "", "type": "Resource"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Natural logarithm. The amount of time needed to reach a certain level of continuous growth.\n\t\t\t\t[b]Note:[/b] This is not the same as the log function on your calculator which is a base 10 logarithm.\n\t\t\t\t[codeblock]\n\t\t\t\tlog(10) # returns 2.302585\n\t\t\t\t[/codeblock]", "name": "log", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "a", "type": "float"}, {"description": "", "index": "1", "name": "b", "type": "float"}], "description": "Returns the maximum of two values.\n\t\t\t\t[codeblock]\n\t\t\t\tmax(1,2) # returns 2\n\t\t\t\tmax(-3.99, -4) # returns -3.99\n\t\t\t\t[/codeblock]", "name": "max", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "a", "type": "float"}, {"description": "", "index": "1", "name": "b", "type": "float"}], "description": "Returns the minimum of two values.\n\t\t\t\t[codeblock]\n\t\t\t\tmin(1,2) # returns 1\n\t\t\t\tmin(-3.99, -4) # returns -4\n\t\t\t\t[/codeblock]", "name": "min", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Returns the nearest larger power of 2 for integer [code]value[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tnearest_po2(3) # returns 4\n\t\t\t\tnearest_po2(4) # returns 4\n\t\t\t\tnearest_po2(5) # returns 8\n\t\t\t\t[/codeblock]", "name": "nearest_po2", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "json", "type": "String"}], "description": "Parse JSON text to a Variant (use [method typeof] to check if it is what you expect).\n\t\t\t\tBe aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to [float] types.\n\t\t\t\tNote that JSON objects do not preserve key order like Godot dictionaries, thus you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:\n\t\t\t\t[codeblock]\n\t\t\t\tp = parse_json('[\"a\", \"b\", \"c\"]')\n\t\t\t\tif typeof(p) == TYPE_ARRAY:\n\t\t\t\t    print(p[0]) # prints a\n\t\t\t\telse:\n\t\t\t\t    print(\"unexpected results\")\n\t\t\t\t[/codeblock]", "name": "parse_json", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "r", "type": "float"}, {"description": "", "index": "1", "name": "th", "type": "float"}], "description": "Converts a 2D point expressed in the polar coordinate system (a distance from the origin [code]r[/code] and an angle [code]th[/code]) to the cartesian coordinate system (x and y axis).", "name": "polar2cartesian", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "float"}, {"description": "", "index": "1", "name": "y", "type": "float"}], "description": "Returns the result of [code]x[/code] raised to the power of [code]y[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tpow(2,5) # returns 32\n\t\t\t\t[/codeblock]", "name": "pow", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Returns a resource from the filesystem that is loaded during script parsing.\n\t\t\t\t[b]Note:[/b] Resource paths can be obtained by right clicking on a resource in the Assets Panel and choosing \"Copy Path\".\n\t\t\t\t[codeblock]\n\t\t\t\t# load a scene called main located in the root of the project directory\n\t\t\t\tvar main = preload(\"res://main.tscn\")\n\t\t\t\t[/codeblock]", "name": "preload", "return_": {"description": "", "type": "Resource"}}, {"arguments": [], "description": "Converts one or more arguments to strings in the best way possible and prints them to the console.\n\t\t\t\t[codeblock]\n\t\t\t\ta = [1,2,3]\n\t\t\t\tprint(\"a\",\"b\",a) # prints ab[1, 2, 3]\n\t\t\t\t[/codeblock]", "name": "print", "qualifiers": "vararg", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "print_debug", "qualifiers": "vararg", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Prints a stack track at code location, only works when running with debugger turned on.\n\t\t\t\tOutput in the console would look something like this:\n\t\t\t\t[codeblock]\n\t\t\t\tFrame 0 - res://test.gd:16 in function '_process'\n\t\t\t\t[/codeblock]", "name": "print_stack", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Prints one or more arguments to strings in the best way possible to standard error line.\n\t\t\t\t[codeblock]\n\t\t\t\tprinterr(\"prints to stderr\")\n\t\t\t\t[/codeblock]", "name": "printerr", "qualifiers": "vararg", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Prints one or more arguments to strings in the best way possible to console. No newline is added at the end.\n\t\t\t\t[codeblock]\n\t\t\t\tprintraw(\"A\")\n\t\t\t\tprintraw(\"B\")\n\t\t\t\t# prints AB\n\t\t\t\t[/codeblock]", "name": "printraw", "qualifiers": "vararg", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Prints one or more arguments to the console with a space between each argument.\n\t\t\t\t[codeblock]\n\t\t\t\tprints(\"A\", \"B\", \"C\") # prints A B C\n\t\t\t\t[/codeblock]", "name": "prints", "qualifiers": "vararg", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Prints one or more arguments to the console with a tab between each argument.\n\t\t\t\t[codeblock]\n\t\t\t\tprintt(\"A\", \"B\", \"C\") # prints A       B       C\n\t\t\t\t[/codeblock]", "name": "printt", "qualifiers": "vararg", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rad", "type": "float"}], "description": "Converts from radians to degrees.\n\t\t\t\t[codeblock]\n\t\t\t\trad2deg(0.523599) # returns 30\n\t\t\t\t[/codeblock]", "name": "rad2deg", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "float"}, {"description": "", "index": "1", "name": "to", "type": "float"}], "description": "Random range, any floating point value between [code]from[/code] and [code]to[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tprints(rand_range(0, 1), rand_range(0, 1)) # prints 0.135591 0.405263\n\t\t\t\t[/codeblock]", "name": "rand_range", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "seed", "type": "int"}], "description": "Random from seed: pass a [code]seed[/code], and an array with both number and new seed is returned. \"Seed\" here refers to the internal state of the pseudo random number generator. The internal state of the current implementation is 64 bits.", "name": "rand_seed", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns a random floating point value between 0 and 1.\n\t\t\t\t[codeblock]\n\t\t\t\trandf() # returns 0.375671\n\t\t\t\t[/codeblock]", "name": "randf", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns a random 32 bit integer. Use remainder to obtain a random value between 0 and N (where N is smaller than 2^32 -1).\n\t\t\t\t[codeblock]\n\t\t\t\trandi() % 20      # returns random number between 0 and 19\n\t\t\t\trandi() % 100     # returns random number between 0 and 99\n\t\t\t\trandi() % 100 + 1 # returns random number between 1 and 100\n\t\t\t\t[/codeblock]", "name": "randi", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Randomizes the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _ready():\n\t\t\t\t    randomize()\n\t\t\t\t[/codeblock]", "name": "randomize", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns an array with the given range. Range can be 1 argument N (0 to N-1), two arguments (initial, final-1) or three arguments (initial, final-1, increment).\n\t\t\t\t[codeblock]\n\t\t\t\tfor i in range(4):\n\t\t\t\t    print(i)\n\t\t\t\tfor i in range(2, 5):\n\t\t\t\t    print(i)\n\t\t\t\tfor i in range(0, 6, 2):\n\t\t\t\t    print(i)\n\t\t\t\t[/codeblock]\n\t\t\t\tOutput:\n\t\t\t\t[codeblock]\n\t\t\t\t0\n\t\t\t\t1\n\t\t\t\t2\n\t\t\t\t3\n\n\t\t\t\t2\n\t\t\t\t3\n\t\t\t\t4\n\n\t\t\t\t0\n\t\t\t\t2\n\t\t\t\t4\n\t\t\t\t[/codeblock]", "name": "range", "qualifiers": "vararg", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}, {"description": "", "index": "1", "name": "istart", "type": "float"}, {"description": "", "index": "2", "name": "istop", "type": "float"}, {"description": "", "index": "3", "name": "ostart", "type": "float"}, {"description": "", "index": "4", "name": "ostop", "type": "float"}], "description": "Maps a [code]value[/code] from range [code][istart, istop][/code] to [code][ostart, ostop][/code].\n\t\t\t\t[codeblock]\n\t\t\t\trange_lerp(75, 0, 100, -1, 1) # returns 0.5\n\t\t\t\t[/codeblock]", "name": "range_lerp", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the integral value that is nearest to [code]s[/code], with halfway cases rounded away from zero.\n\t\t\t\t[codeblock]\n\t\t\t\tround(2.6) # returns 3\n\t\t\t\t[/codeblock]", "name": "round", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "seed", "type": "int"}], "description": "Sets seed for the random number generator.\n\t\t\t\t[codeblock]\n\t\t\t\tmy_seed = \"Godot Rocks\"\n\t\t\t\tseed(my_seed.hash())\n\t\t\t\t[/codeblock]", "name": "seed", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the sign of [code]s[/code]: -1 or 1. Returns 0 if [code]s[/code] is 0.\n\t\t\t\t[codeblock]\n\t\t\t\tsign(-6) # returns -1\n\t\t\t\tsign(0)  # returns 0\n\t\t\t\tsign(6)  # returns 1\n\t\t\t\t[/codeblock]", "name": "sign", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the sine of angle [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\tsin(0.523599) # returns 0.5\n\t\t\t\t[/codeblock]", "name": "sin", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the hyperbolic sine of [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\ta = log(2.0) # returns 0.693147\n\t\t\t\tsinh(a) # returns 0.75\n\t\t\t\t[/codeblock]", "name": "sinh", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the square root of [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tsqrt(9) # returns 3\n\t\t\t\t[/codeblock]", "name": "sqrt", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}, {"description": "", "index": "1", "name": "step", "type": "float"}], "description": "Snaps float value [code]s[/code] to a given [code]step[/code].", "name": "stepify", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Converts one or more arguments to string in the best way possible.\n\t\t\t\t[codeblock]\n\t\t\t\tvar a = [10, 20, 30]\n\t\t\t\tvar b = str(a);\n\t\t\t\tlen(a) # returns 3\n\t\t\t\tlen(b) # returns 12\n\t\t\t\t[/codeblock]", "name": "str", "qualifiers": "vararg", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "string", "type": "String"}], "description": "Converts a formatted string that was returned by [method var2str] to the original value.\n\t\t\t\t[codeblock]\n\t\t\t\ta = '{ \"a\": 1, \"b\": 2 }'\n\t\t\t\tb = str2var(a)\n\t\t\t\tprint(b['a']) # prints 1\n\t\t\t\t[/codeblock]", "name": "str2var", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the tangent of angle [code]s[/code] in radians.\n\t\t\t\t[codeblock]\n\t\t\t\ttan( deg2rad(45) ) # returns 1\n\t\t\t\t[/codeblock]", "name": "tan", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "s", "type": "float"}], "description": "Returns the hyperbolic tangent of [code]s[/code].\n\t\t\t\t[codeblock]\n\t\t\t\ta = log(2.0) # returns 0.693147\n\t\t\t\ttanh(a)      # returns 0.6\n\t\t\t\t[/codeblock]", "name": "tanh", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "var", "type": "Variant"}], "description": "Converts a Variant [code]var[/code] to JSON text and return the result. Useful for serializing data to store or send over the network.\n\t\t\t\t[codeblock]\n\t\t\t\ta = { 'a': 1, 'b': 2 }\n\t\t\t\tb = to_json(a)\n\t\t\t\tprint(b) # {\"a\":1, \"b\":2}\n\t\t\t\t[/codeblock]", "name": "to_json", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Returns whether the given class exists in [ClassDB].\n\t\t\t\t[codeblock]\n\t\t\t\ttype_exists(\"Sprite\") # returns true\n\t\t\t\ttype_exists(\"Variant\") # returns false\n\t\t\t\t[/codeblock]", "name": "type_exists", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "Variant"}], "description": "Returns the internal type of the given Variant object, using the TYPE_* enum in [@GlobalScope].\n\t\t\t\t[codeblock]\n\t\t\t\tp = parse_json('[\"a\", \"b\", \"c\"]')\n\t\t\t\tif typeof(p) == TYPE_ARRAY:\n\t\t\t\t    print(p[0]) # prints a\n\t\t\t\telse:\n\t\t\t\t    print(\"unexpected results\")\n\t\t\t\t[/codeblock]", "name": "typeof", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "json", "type": "String"}], "description": "Checks that [code]json[/code] is valid JSON data. Returns empty string if valid. Returns error message if not valid.\n\t\t\t\t[codeblock]\n\t\t\t\tj = to_json([1, 2, 3])\n\t\t\t\tv = validate_json(j)\n\t\t\t\tif not v:\n\t\t\t\t    print(\"valid\")\n\t\t\t\telse:\n\t\t\t\t    prints(\"invalid\", v)\n\t\t\t\t[/codeblock]", "name": "validate_json", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "var", "type": "Variant"}], "description": "Encodes a variable value to a byte array.", "name": "var2bytes", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [{"description": "", "index": "0", "name": "var", "type": "Variant"}], "description": "Converts a Variant [code]var[/code] to a formatted string that can later be parsed using [method str2var].\n\t\t\t\t[codeblock]\n\t\t\t\ta = { 'a': 1, 'b': 2 }\n\t\t\t\tprint(var2str(a))\n\t\t\t\t[/codeblock]\n\t\t\t\tprints\n\t\t\t\t[codeblock]\n\t\t\t\t{\n\t\t\t\t\"a\": 1,\n\t\t\t\t\"b\": 2\n\t\t\t\t}\n\t\t\t\t[/codeblock]", "name": "var2str", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "obj", "type": "Object"}], "description": "Returns a weak reference to an object.\n\t\t\t\tA weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it.", "name": "weakref", "return_": {"description": "", "type": "WeakRef"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}, {"description": "", "index": "1", "name": "min", "type": "float"}, {"description": "", "index": "2", "name": "max", "type": "float"}], "description": "Wraps float [code]value[/code] between [code]min[/code] and [code]max[/code].\n\t\t\t\tUsable for creating loop-alike behavior or infinite surfaces.\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 0.5\n\t\t\t\ta = wrapf(10.5, 0.0, 10.0)\n\t\t\t\t[/codeblock]\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 9.5\n\t\t\t\ta = wrapf(-0.5, 0.0, 10.0)\n\t\t\t\t[/codeblock]\n\t\t\t\t[codeblock]\n\t\t\t\t# infinite loop between 0.0 and 0.99\n\t\t\t\tf = wrapf(f + 0.1, 0.0, 1.0)\n\t\t\t\t[/codeblock]", "name": "wrapf", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}, {"description": "", "index": "1", "name": "min", "type": "int"}, {"description": "", "index": "2", "name": "max", "type": "int"}], "description": "Wraps integer [code]value[/code] between [code]min[/code] and [code]max[/code].\n\t\t\t\tUsable for creating loop-alike behavior or infinite surfaces.\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 0\n\t\t\t\ta = wrapi(10, 0, 10)\n\t\t\t\t[/codeblock]\n\t\t\t\t[codeblock]\n\t\t\t\t# a is 9\n\t\t\t\ta = wrapi(-1, 0, 10)\n\t\t\t\t[/codeblock]\n\t\t\t\t[codeblock]\n\t\t\t\t# infinite loop between 0 and 9\n\t\t\t\tframe = wrapi(frame + 1, 0, 10)\n\t\t\t\t[/codeblock]", "name": "wrapi", "return_": {"description": "", "type": "int"}}, {"arguments": [{"default": "null", "description": "", "index": "0", "name": "object", "type": "Object"}, {"default": "\"\"", "description": "", "index": "1", "name": "signal", "type": "String"}], "description": "Stops the function execution and returns the current suspended state to the calling function.\n\t\t\t\tFrom the caller, call [method GDScriptFunctionState.resume] on the state to resume execution. This invalidates the state. Within the resumed function, [code]yield()[/code] returns whatever was passed to the [code]resume()[/code] function call.\n\t\t\t\tIf passed an object and a signal, the execution is resumed when the object emits the given signal. In this case, [code]yield()[/code] returns the argument passed to [code]emit_signal()[/code] if the signal takes only one argument, or an array containing all the arguments passed to [code]emit_signal()[/code] if the signal takes multiple arguments.", "name": "yield", "return_": {"description": "", "type": "GDScriptFunctionState"}}], "name": "@GDScript", "signals": [], "tutorials": {"links": []}}, "@GlobalScope": {"brief_description": "Global scope constants and variables.", "category": "Core", "constants": [{"description": "Left margin, used usually for [Control] or [StyleBox] derived classes.", "enum": "Margin", "name": "MARGIN_LEFT", "value": "0"}, {"description": "Top margin, used usually for [Control] or [StyleBox] derived classes.", "enum": "Margin", "name": "MARGIN_TOP", "value": "1"}, {"description": "Right margin, used usually for [Control] or [StyleBox] derived classes.", "enum": "Margin", "name": "MARGIN_RIGHT", "value": "2"}, {"description": "Bottom margin, used usually for [Control] or [StyleBox] derived classes.", "enum": "Margin", "name": "MARGIN_BOTTOM", "value": "3"}, {"description": "", "enum": "Corner", "name": "CORNER_TOP_LEFT", "value": "0"}, {"description": "", "enum": "Corner", "name": "CORNER_TOP_RIGHT", "value": "1"}, {"description": "", "enum": "Corner", "name": "CORNER_BOTTOM_RIGHT", "value": "2"}, {"description": "", "enum": "Corner", "name": "CORNER_BOTTOM_LEFT", "value": "3"}, {"description": "General vertical alignment, used usually for [Separator], [ScrollBar], [Slider], etc.", "enum": "Orientation", "name": "VERTICAL", "value": "1"}, {"description": "General horizontal alignment, used usually for [Separator], [ScrollBar], [Slider], etc.", "enum": "Orientation", "name": "HORIZONTAL", "value": "0"}, {"description": "Horizontal left alignment, usually for text-derived classes.", "enum": "HAlign", "name": "HALIGN_LEFT", "value": "0"}, {"description": "Horizontal center alignment, usually for text-derived classes.", "enum": "HAlign", "name": "HALIGN_CENTER", "value": "1"}, {"description": "Horizontal right alignment, usually for text-derived classes.", "enum": "HAlign", "name": "HALIGN_RIGHT", "value": "2"}, {"description": "Vertical top alignment, usually for text-derived classes.", "enum": "VAlign", "name": "VALIGN_TOP", "value": "0"}, {"description": "Vertical center alignment, usually for text-derived classes.", "enum": "VAlign", "name": "VALIGN_CENTER", "value": "1"}, {"description": "Vertical bottom alignment, usually for text-derived classes.", "enum": "VAlign", "name": "VALIGN_BOTTOM", "value": "2"}, {"description": "Scancodes with this bit applied are non printable.", "name": "SPKEY", "value": "16777216"}, {"description": "Escape Key", "enum": "KeyList", "name": "KEY_ESCAPE", "value": "16777217"}, {"description": "Tab Key", "enum": "KeyList", "name": "KEY_TAB", "value": "16777218"}, {"description": "Shift-Tab Key", "enum": "KeyList", "name": "KEY_BACKTAB", "value": "16777219"}, {"description": "Backspace Key", "enum": "KeyList", "name": "KEY_BACKSPACE", "value": "16777220"}, {"description": "Return Key (On Main Keyboard)", "enum": "KeyList", "name": "KEY_ENTER", "value": "16777221"}, {"description": "Enter Key (On Numpad)", "enum": "KeyList", "name": "KEY_KP_ENTER", "value": "16777222"}, {"description": "Insert Key", "enum": "KeyList", "name": "KEY_INSERT", "value": "16777223"}, {"description": "Delete Key", "enum": "KeyList", "name": "KEY_DELETE", "value": "16777224"}, {"description": "Pause Key", "enum": "KeyList", "name": "KEY_PAUSE", "value": "16777225"}, {"description": "Printscreen Key", "enum": "KeyList", "name": "KEY_PRINT", "value": "16777226"}, {"description": "System Request Key", "enum": "KeyList", "name": "KEY_SYSREQ", "value": "16777227"}, {"description": "Clear Key", "enum": "KeyList", "name": "KEY_CLEAR", "value": "16777228"}, {"description": "Home Key", "enum": "KeyList", "name": "KEY_HOME", "value": "16777229"}, {"description": "End Key", "enum": "KeyList", "name": "KEY_END", "value": "16777230"}, {"description": "Left Arrow Key", "enum": "KeyList", "name": "KEY_LEFT", "value": "16777231"}, {"description": "Up Arrow Key", "enum": "KeyList", "name": "KEY_UP", "value": "16777232"}, {"description": "Right Arrow Key", "enum": "KeyList", "name": "KEY_RIGHT", "value": "16777233"}, {"description": "Down Arrow Key", "enum": "KeyList", "name": "KEY_DOWN", "value": "16777234"}, {"description": "Pageup Key", "enum": "KeyList", "name": "KEY_PAGEUP", "value": "16777235"}, {"description": "Pagedown Key", "enum": "KeyList", "name": "KEY_PAGEDOWN", "value": "16777236"}, {"description": "Shift Key", "enum": "KeyList", "name": "KEY_SHIFT", "value": "16777237"}, {"description": "Control Key", "enum": "KeyList", "name": "KEY_CONTROL", "value": "16777238"}, {"description": "Meta Key", "enum": "KeyList", "name": "KEY_META", "value": "16777239"}, {"description": "Alt Key", "enum": "KeyList", "name": "KEY_ALT", "value": "16777240"}, {"description": "Capslock Key", "enum": "KeyList", "name": "KEY_CAPSLOCK", "value": "16777241"}, {"description": "Numlock Key", "enum": "KeyList", "name": "KEY_NUMLOCK", "value": "16777242"}, {"description": "Scrolllock Key", "enum": "KeyList", "name": "KEY_SCROLLLOCK", "value": "16777243"}, {"description": "F1 Key", "enum": "KeyList", "name": "KEY_F1", "value": "16777244"}, {"description": "F2 Key", "enum": "KeyList", "name": "KEY_F2", "value": "16777245"}, {"description": "F3 Key", "enum": "KeyList", "name": "KEY_F3", "value": "16777246"}, {"description": "F4 Key", "enum": "KeyList", "name": "KEY_F4", "value": "16777247"}, {"description": "F5 Key", "enum": "KeyList", "name": "KEY_F5", "value": "16777248"}, {"description": "F6 Key", "enum": "KeyList", "name": "KEY_F6", "value": "16777249"}, {"description": "F7 Key", "enum": "KeyList", "name": "KEY_F7", "value": "16777250"}, {"description": "F8 Key", "enum": "KeyList", "name": "KEY_F8", "value": "16777251"}, {"description": "F9 Key", "enum": "KeyList", "name": "KEY_F9", "value": "16777252"}, {"description": "F10 Key", "enum": "KeyList", "name": "KEY_F10", "value": "16777253"}, {"description": "F11 Key", "enum": "KeyList", "name": "KEY_F11", "value": "16777254"}, {"description": "F12 Key", "enum": "KeyList", "name": "KEY_F12", "value": "16777255"}, {"description": "F13 Key", "enum": "KeyList", "name": "KEY_F13", "value": "16777256"}, {"description": "F14 Key", "enum": "KeyList", "name": "KEY_F14", "value": "16777257"}, {"description": "F15 Key", "enum": "KeyList", "name": "KEY_F15", "value": "16777258"}, {"description": "F16 Key", "enum": "KeyList", "name": "KEY_F16", "value": "16777259"}, {"description": "Multiply Key on Numpad", "enum": "KeyList", "name": "KEY_KP_MULTIPLY", "value": "16777345"}, {"description": "Divide Key on Numpad", "enum": "KeyList", "name": "KEY_KP_DIVIDE", "value": "16777346"}, {"description": "Subtract Key on Numpad", "enum": "KeyList", "name": "KEY_KP_SUBTRACT", "value": "16777347"}, {"description": "Period Key on Numpad", "enum": "KeyList", "name": "KEY_KP_PERIOD", "value": "16777348"}, {"description": "Add Key on Numpad", "enum": "KeyList", "name": "KEY_KP_ADD", "value": "16777349"}, {"description": "Number 0 on Numpad", "enum": "KeyList", "name": "KEY_KP_0", "value": "16777350"}, {"description": "Number 1 on Numpad", "enum": "KeyList", "name": "KEY_KP_1", "value": "16777351"}, {"description": "Number 2 on Numpad", "enum": "KeyList", "name": "KEY_KP_2", "value": "16777352"}, {"description": "Number 3 on Numpad", "enum": "KeyList", "name": "KEY_KP_3", "value": "16777353"}, {"description": "Number 4 on Numpad", "enum": "KeyList", "name": "KEY_KP_4", "value": "16777354"}, {"description": "Number 5 on Numpad", "enum": "KeyList", "name": "KEY_KP_5", "value": "16777355"}, {"description": "Number 6 on Numpad", "enum": "KeyList", "name": "KEY_KP_6", "value": "16777356"}, {"description": "Number 7 on Numpad", "enum": "KeyList", "name": "KEY_KP_7", "value": "16777357"}, {"description": "Number 8 on Numpad", "enum": "KeyList", "name": "KEY_KP_8", "value": "16777358"}, {"description": "Number 9 on Numpad", "enum": "KeyList", "name": "KEY_KP_9", "value": "16777359"}, {"description": "Left Super Key (Windows Key)", "enum": "KeyList", "name": "KEY_SUPER_L", "value": "16777260"}, {"description": "Right Super Key (Windows Key)", "enum": "KeyList", "name": "KEY_SUPER_R", "value": "16777261"}, {"description": "Context menu key", "enum": "KeyList", "name": "KEY_MENU", "value": "16777262"}, {"description": "Left Hyper Key", "enum": "KeyList", "name": "KEY_HYPER_L", "value": "16777263"}, {"description": "Right Hyper Key", "enum": "KeyList", "name": "KEY_HYPER_R", "value": "16777264"}, {"description": "Help key", "enum": "KeyList", "name": "KEY_HELP", "value": "16777265"}, {"description": "Left Direction Key", "enum": "KeyList", "name": "KEY_DIRECTION_L", "value": "16777266"}, {"description": "Right Direction Key", "enum": "KeyList", "name": "KEY_DIRECTION_R", "value": "16777267"}, {"description": "Back key", "enum": "KeyList", "name": "KEY_BACK", "value": "16777280"}, {"description": "Forward key", "enum": "KeyList", "name": "KEY_FORWARD", "value": "16777281"}, {"description": "Stop key", "enum": "KeyList", "name": "KEY_STOP", "value": "16777282"}, {"description": "Refresh key", "enum": "KeyList", "name": "KEY_REFRESH", "value": "16777283"}, {"description": "Volume down key", "enum": "KeyList", "name": "KEY_VOLUMEDOWN", "value": "16777284"}, {"description": "Mute volume key", "enum": "KeyList", "name": "KEY_VOLUMEMUTE", "value": "16777285"}, {"description": "Volume up key", "enum": "KeyList", "name": "KEY_VOLUMEUP", "value": "16777286"}, {"description": "Bass Boost Key", "enum": "KeyList", "name": "KEY_BASSBOOST", "value": "16777287"}, {"description": "Bass Up Key", "enum": "KeyList", "name": "KEY_BASSUP", "value": "16777288"}, {"description": "Bass Down Key", "enum": "KeyList", "name": "KEY_BASSDOWN", "value": "16777289"}, {"description": "Treble Up Key", "enum": "KeyList", "name": "KEY_TREBLEUP", "value": "16777290"}, {"description": "Treble Down Key", "enum": "KeyList", "name": "KEY_TREBLEDOWN", "value": "16777291"}, {"description": "Media play key", "enum": "KeyList", "name": "KEY_MEDIAPLAY", "value": "16777292"}, {"description": "Media stop key", "enum": "KeyList", "name": "KEY_MEDIASTOP", "value": "16777293"}, {"description": "Previous song key", "enum": "KeyList", "name": "KEY_MEDIAPREVIOUS", "value": "16777294"}, {"description": "Next song key", "enum": "KeyList", "name": "KEY_MEDIANEXT", "value": "16777295"}, {"description": "Media record key", "enum": "KeyList", "name": "KEY_MEDIARECORD", "value": "16777296"}, {"description": "Home page key", "enum": "KeyList", "name": "KEY_HOMEPAGE", "value": "16777297"}, {"description": "Favorites key", "enum": "KeyList", "name": "KEY_FAVORITES", "value": "16777298"}, {"description": "Search key", "enum": "KeyList", "name": "KEY_SEARCH", "value": "16777299"}, {"description": "Standby Key", "enum": "KeyList", "name": "KEY_STANDBY", "value": "16777300"}, {"description": "Open URL / Launch Browser Key", "enum": "KeyList", "name": "KEY_OPENURL", "value": "16777301"}, {"description": "Launch Mail Key", "enum": "KeyList", "name": "KEY_LAUNCHMAIL", "value": "16777302"}, {"description": "Launch Media Key", "enum": "KeyList", "name": "KEY_LAUNCHMEDIA", "value": "16777303"}, {"description": "Launch Shortcut 0 Key", "enum": "KeyList", "name": "KEY_LAUNCH0", "value": "16777304"}, {"description": "Launch Shortcut 1 Key", "enum": "KeyList", "name": "KEY_LAUNCH1", "value": "16777305"}, {"description": "Launch Shortcut 2 Key", "enum": "KeyList", "name": "KEY_LAUNCH2", "value": "16777306"}, {"description": "Launch Shortcut 3 Key", "enum": "KeyList", "name": "KEY_LAUNCH3", "value": "16777307"}, {"description": "Launch Shortcut 4 Key", "enum": "KeyList", "name": "KEY_LAUNCH4", "value": "16777308"}, {"description": "Launch Shortcut 5 Key", "enum": "KeyList", "name": "KEY_LAUNCH5", "value": "16777309"}, {"description": "Launch Shortcut 6 Key", "enum": "KeyList", "name": "KEY_LAUNCH6", "value": "16777310"}, {"description": "Launch Shortcut 7 Key", "enum": "KeyList", "name": "KEY_LAUNCH7", "value": "16777311"}, {"description": "Launch Shortcut 8 Key", "enum": "KeyList", "name": "KEY_LAUNCH8", "value": "16777312"}, {"description": "Launch Shortcut 9 Key", "enum": "KeyList", "name": "KEY_LAUNCH9", "value": "16777313"}, {"description": "Launch Shortcut A Key", "enum": "KeyList", "name": "KEY_LAUNCHA", "value": "16777314"}, {"description": "Launch Shortcut B Key", "enum": "KeyList", "name": "KEY_LAUNCHB", "value": "16777315"}, {"description": "Launch Shortcut C Key", "enum": "KeyList", "name": "KEY_LAUNCHC", "value": "16777316"}, {"description": "Launch Shortcut D Key", "enum": "KeyList", "name": "KEY_LAUNCHD", "value": "16777317"}, {"description": "Launch Shortcut E Key", "enum": "KeyList", "name": "KEY_LAUNCHE", "value": "16777318"}, {"description": "Launch Shortcut F Key", "enum": "KeyList", "name": "KEY_LAUNCHF", "value": "16777319"}, {"description": "Unknown Key", "enum": "KeyList", "name": "KEY_UNKNOWN", "value": "33554431"}, {"description": "Space Key", "enum": "KeyList", "name": "KEY_SPACE", "value": "32"}, {"description": "! key", "enum": "KeyList", "name": "KEY_EXCLAM", "value": "33"}, {"description": "\" key", "enum": "KeyList", "name": "KEY_QUOTEDBL", "value": "34"}, {"description": "# key", "enum": "KeyList", "name": "KEY_NUMBERSIGN", "value": "35"}, {"description": "$ key", "enum": "KeyList", "name": "KEY_DOLLAR", "value": "36"}, {"description": "% key", "enum": "KeyList", "name": "KEY_PERCENT", "value": "37"}, {"description": "& key", "enum": "KeyList", "name": "KEY_AMPERSAND", "value": "38"}, {"description": "' key", "enum": "KeyList", "name": "KEY_APOSTROPHE", "value": "39"}, {"description": "( key", "enum": "KeyList", "name": "KEY_PARENLEFT", "value": "40"}, {"description": ") key", "enum": "KeyList", "name": "KEY_PARENRIGHT", "value": "41"}, {"description": "* key", "enum": "KeyList", "name": "KEY_ASTERISK", "value": "42"}, {"description": "+ key", "enum": "KeyList", "name": "KEY_PLUS", "value": "43"}, {"description": ", key", "enum": "KeyList", "name": "KEY_COMMA", "value": "44"}, {"description": "- key", "enum": "KeyList", "name": "KEY_MINUS", "value": "45"}, {"description": ". key", "enum": "KeyList", "name": "KEY_PERIOD", "value": "46"}, {"description": "/ key", "enum": "KeyList", "name": "KEY_SLASH", "value": "47"}, {"description": "Number 0", "enum": "KeyList", "name": "KEY_0", "value": "48"}, {"description": "Number 1", "enum": "KeyList", "name": "KEY_1", "value": "49"}, {"description": "Number 2", "enum": "KeyList", "name": "KEY_2", "value": "50"}, {"description": "Number 3", "enum": "KeyList", "name": "KEY_3", "value": "51"}, {"description": "Number 4", "enum": "KeyList", "name": "KEY_4", "value": "52"}, {"description": "Number 5", "enum": "KeyList", "name": "KEY_5", "value": "53"}, {"description": "Number 6", "enum": "KeyList", "name": "KEY_6", "value": "54"}, {"description": "Number 7", "enum": "KeyList", "name": "KEY_7", "value": "55"}, {"description": "Number 8", "enum": "KeyList", "name": "KEY_8", "value": "56"}, {"description": "Number 9", "enum": "KeyList", "name": "KEY_9", "value": "57"}, {"description": ": key", "enum": "KeyList", "name": "KEY_COLON", "value": "58"}, {"description": "; key", "enum": "KeyList", "name": "KEY_SEMICOLON", "value": "59"}, {"description": "Lower than key", "enum": "KeyList", "name": "KEY_LESS", "value": "60"}, {"description": "= key", "enum": "KeyList", "name": "KEY_EQUAL", "value": "61"}, {"description": "Greater than key", "enum": "KeyList", "name": "KEY_GREATER", "value": "62"}, {"description": "? key", "enum": "KeyList", "name": "KEY_QUESTION", "value": "63"}, {"description": "@ key", "enum": "KeyList", "name": "KEY_AT", "value": "64"}, {"description": "A Key", "enum": "KeyList", "name": "KEY_A", "value": "65"}, {"description": "B Key", "enum": "KeyList", "name": "KEY_B", "value": "66"}, {"description": "C Key", "enum": "KeyList", "name": "KEY_C", "value": "67"}, {"description": "D Key", "enum": "KeyList", "name": "KEY_D", "value": "68"}, {"description": "E Key", "enum": "KeyList", "name": "KEY_E", "value": "69"}, {"description": "F Key", "enum": "KeyList", "name": "KEY_F", "value": "70"}, {"description": "G Key", "enum": "KeyList", "name": "KEY_G", "value": "71"}, {"description": "H Key", "enum": "KeyList", "name": "KEY_H", "value": "72"}, {"description": "I Key", "enum": "KeyList", "name": "KEY_I", "value": "73"}, {"description": "J Key", "enum": "KeyList", "name": "KEY_J", "value": "74"}, {"description": "K Key", "enum": "KeyList", "name": "KEY_K", "value": "75"}, {"description": "L Key", "enum": "KeyList", "name": "KEY_L", "value": "76"}, {"description": "M Key", "enum": "KeyList", "name": "KEY_M", "value": "77"}, {"description": "N Key", "enum": "KeyList", "name": "KEY_N", "value": "78"}, {"description": "O Key", "enum": "KeyList", "name": "KEY_O", "value": "79"}, {"description": "P Key", "enum": "KeyList", "name": "KEY_P", "value": "80"}, {"description": "Q Key", "enum": "KeyList", "name": "KEY_Q", "value": "81"}, {"description": "R Key", "enum": "KeyList", "name": "KEY_R", "value": "82"}, {"description": "S Key", "enum": "KeyList", "name": "KEY_S", "value": "83"}, {"description": "T Key", "enum": "KeyList", "name": "KEY_T", "value": "84"}, {"description": "U Key", "enum": "KeyList", "name": "KEY_U", "value": "85"}, {"description": "V Key", "enum": "KeyList", "name": "KEY_V", "value": "86"}, {"description": "W Key", "enum": "KeyList", "name": "KEY_W", "value": "87"}, {"description": "X Key", "enum": "KeyList", "name": "KEY_X", "value": "88"}, {"description": "Y Key", "enum": "KeyList", "name": "KEY_Y", "value": "89"}, {"description": "Z Key", "enum": "KeyList", "name": "KEY_Z", "value": "90"}, {"description": "[ key", "enum": "KeyList", "name": "KEY_BRACKETLEFT", "value": "91"}, {"description": "\\ key", "enum": "KeyList", "name": "KEY_BACKSLASH", "value": "92"}, {"description": "] key", "enum": "KeyList", "name": "KEY_BRACKETRIGHT", "value": "93"}, {"description": "^ key", "enum": "KeyList", "name": "KEY_ASCIICIRCUM", "value": "94"}, {"description": "_ key", "enum": "KeyList", "name": "KEY_UNDERSCORE", "value": "95"}, {"description": "Left Quote Key", "enum": "KeyList", "name": "KEY_QUOTELEFT", "value": "96"}, {"description": "{ key", "enum": "KeyList", "name": "KEY_BRACELEFT", "value": "123"}, {"description": "| key", "enum": "KeyList", "name": "KEY_BAR", "value": "124"}, {"description": "} key", "enum": "KeyList", "name": "KEY_BRACERIGHT", "value": "125"}, {"description": "~ key", "enum": "KeyList", "name": "KEY_ASCIITILDE", "value": "126"}, {"description": "", "enum": "KeyList", "name": "KEY_NOBREAKSPACE", "value": "160"}, {"description": "", "enum": "KeyList", "name": "KEY_EXCLAMDOWN", "value": "161"}, {"description": "\u00a2 key", "enum": "KeyList", "name": "KEY_CENT", "value": "162"}, {"description": "", "enum": "KeyList", "name": "KEY_STERLING", "value": "163"}, {"description": "", "enum": "KeyList", "name": "KEY_CURRENCY", "value": "164"}, {"description": "Yen Key", "enum": "KeyList", "name": "KEY_YEN", "value": "165"}, {"description": "\u00a6 key", "enum": "KeyList", "name": "KEY_BROKENBAR", "value": "166"}, {"description": "\u00a7 key", "enum": "KeyList", "name": "KEY_SECTION", "value": "167"}, {"description": "\u00a8 key", "enum": "KeyList", "name": "KEY_DIAERESIS", "value": "168"}, {"description": "\u00a9 key", "enum": "KeyList", "name": "KEY_COPYRIGHT", "value": "169"}, {"description": "", "enum": "KeyList", "name": "KEY_ORDFEMININE", "value": "170"}, {"description": "\u00ab key", "enum": "KeyList", "name": "KEY_GUILLEMOTLEFT", "value": "171"}, {"description": "\u00bb key", "enum": "KeyList", "name": "KEY_NOTSIGN", "value": "172"}, {"description": "\u2010 key", "enum": "KeyList", "name": "KEY_HYPHEN", "value": "173"}, {"description": "\u00ae key", "enum": "KeyList", "name": "KEY_REGISTERED", "value": "174"}, {"description": "Macron Key", "enum": "KeyList", "name": "KEY_MACRON", "value": "175"}, {"description": "\u00b0 key", "enum": "KeyList", "name": "KEY_DEGREE", "value": "176"}, {"description": "\u00b1 key", "enum": "KeyList", "name": "KEY_PLUSMINUS", "value": "177"}, {"description": "\u00b2 key", "enum": "KeyList", "name": "KEY_TWOSUPERIOR", "value": "178"}, {"description": "\u00b3 key", "enum": "KeyList", "name": "KEY_THREESUPERIOR", "value": "179"}, {"description": "\u00b4 key", "enum": "KeyList", "name": "KEY_ACUTE", "value": "180"}, {"description": "\u00b5 key", "enum": "KeyList", "name": "KEY_MU", "value": "181"}, {"description": "Paragraph Key", "enum": "KeyList", "name": "KEY_PARAGRAPH", "value": "182"}, {"description": "\u00b7 key", "enum": "KeyList", "name": "KEY_PERIODCENTERED", "value": "183"}, {"description": "\u00ac key", "enum": "KeyList", "name": "KEY_CEDILLA", "value": "184"}, {"description": "\u00b9 key", "enum": "KeyList", "name": "KEY_ONESUPERIOR", "value": "185"}, {"description": "\u2642 key", "enum": "KeyList", "name": "KEY_MASCULINE", "value": "186"}, {"description": "\u00bb key", "enum": "KeyList", "name": "KEY_GUILLEMOTRIGHT", "value": "187"}, {"description": "\u00bc key", "enum": "KeyList", "name": "KEY_ONEQUARTER", "value": "188"}, {"description": "\u00bd key", "enum": "KeyList", "name": "KEY_ONEHALF", "value": "189"}, {"description": "\u00be key", "enum": "KeyList", "name": "KEY_THREEQUARTERS", "value": "190"}, {"description": "\u00bf key", "enum": "KeyList", "name": "KEY_QUESTIONDOWN", "value": "191"}, {"description": "\u00e0 key", "enum": "KeyList", "name": "KEY_AGRAVE", "value": "192"}, {"description": "\u00e1 key", "enum": "KeyList", "name": "KEY_AACUTE", "value": "193"}, {"description": "\u00e2 key", "enum": "KeyList", "name": "KEY_ACIRCUMFLEX", "value": "194"}, {"description": "\u00e3 key", "enum": "KeyList", "name": "KEY_ATILDE", "value": "195"}, {"description": "\u00e4 key", "enum": "KeyList", "name": "KEY_ADIAERESIS", "value": "196"}, {"description": "\u00e5 key", "enum": "KeyList", "name": "KEY_ARING", "value": "197"}, {"description": "\u00e6 key", "enum": "KeyList", "name": "KEY_AE", "value": "198"}, {"description": "\u00e7 key", "enum": "KeyList", "name": "KEY_CCEDILLA", "value": "199"}, {"description": "\u00e8 key", "enum": "KeyList", "name": "KEY_EGRAVE", "value": "200"}, {"description": "\u00e9 key", "enum": "KeyList", "name": "KEY_EACUTE", "value": "201"}, {"description": "\u00ea key", "enum": "KeyList", "name": "KEY_ECIRCUMFLEX", "value": "202"}, {"description": "\u00eb key", "enum": "KeyList", "name": "KEY_EDIAERESIS", "value": "203"}, {"description": "\u00ec key", "enum": "KeyList", "name": "KEY_IGRAVE", "value": "204"}, {"description": "\u00ed key", "enum": "KeyList", "name": "KEY_IACUTE", "value": "205"}, {"description": "\u00ee key", "enum": "KeyList", "name": "KEY_ICIRCUMFLEX", "value": "206"}, {"description": "\u00eb key", "enum": "KeyList", "name": "KEY_IDIAERESIS", "value": "207"}, {"description": "\u00f0 key", "enum": "KeyList", "name": "KEY_ETH", "value": "208"}, {"description": "\u00f1 key", "enum": "KeyList", "name": "KEY_NTILDE", "value": "209"}, {"description": "\u00f2 key", "enum": "KeyList", "name": "KEY_OGRAVE", "value": "210"}, {"description": "\u00f3 key", "enum": "KeyList", "name": "KEY_OACUTE", "value": "211"}, {"description": "\u00f4 key", "enum": "KeyList", "name": "KEY_OCIRCUMFLEX", "value": "212"}, {"description": "\u00f5 key", "enum": "KeyList", "name": "KEY_OTILDE", "value": "213"}, {"description": "\u00f6 key", "enum": "KeyList", "name": "KEY_ODIAERESIS", "value": "214"}, {"description": "\u00d7 key", "enum": "KeyList", "name": "KEY_MULTIPLY", "value": "215"}, {"description": "\u00f8 key", "enum": "KeyList", "name": "KEY_OOBLIQUE", "value": "216"}, {"description": "\u00f9 key", "enum": "KeyList", "name": "KEY_UGRAVE", "value": "217"}, {"description": "\u00fa key", "enum": "KeyList", "name": "KEY_UACUTE", "value": "218"}, {"description": "\u00fb key", "enum": "KeyList", "name": "KEY_UCIRCUMFLEX", "value": "219"}, {"description": "\u00fc key", "enum": "KeyList", "name": "KEY_UDIAERESIS", "value": "220"}, {"description": "\u00fd key", "enum": "KeyList", "name": "KEY_YACUTE", "value": "221"}, {"description": "\u00fe key", "enum": "KeyList", "name": "KEY_THORN", "value": "222"}, {"description": "\u00df key", "enum": "KeyList", "name": "KEY_SSHARP", "value": "223"}, {"description": "\u00f7 key", "enum": "KeyList", "name": "KEY_DIVISION", "value": "247"}, {"description": "\u00ff key", "enum": "KeyList", "name": "KEY_YDIAERESIS", "value": "255"}, {"description": "Key Code Mask", "enum": "KeyModifierMask", "name": "KEY_CODE_MASK", "value": "33554431"}, {"description": "Modifier Key Mask", "enum": "KeyModifierMask", "name": "KEY_MODIFIER_MASK", "value": "-16777216"}, {"description": "Shift Key Mask", "enum": "KeyModifierMask", "name": "KEY_MASK_SHIFT", "value": "33554432"}, {"description": "Alt Key Mask", "enum": "KeyModifierMask", "name": "KEY_MASK_ALT", "value": "67108864"}, {"description": "Meta Key Mask", "enum": "KeyModifierMask", "name": "KEY_MASK_META", "value": "134217728"}, {"description": "CTRL Key Mask", "enum": "KeyModifierMask", "name": "KEY_MASK_CTRL", "value": "268435456"}, {"description": "CMD Key Mask", "enum": "KeyModifierMask", "name": "KEY_MASK_CMD", "value": "268435456"}, {"description": "Keypad Key Mask", "enum": "KeyModifierMask", "name": "KEY_MASK_KPAD", "value": "536870912"}, {"description": "Group Switch Key Mask", "enum": "KeyModifierMask", "name": "KEY_MASK_GROUP_SWITCH", "value": "1073741824"}, {"description": "Left Mouse Button", "enum": "ButtonList", "name": "BUTTON_LEFT", "value": "1"}, {"description": "Right Mouse Button", "enum": "ButtonList", "name": "BUTTON_RIGHT", "value": "2"}, {"description": "Middle Mouse Button", "enum": "ButtonList", "name": "BUTTON_MIDDLE", "value": "3"}, {"description": "", "enum": "ButtonList", "name": "BUTTON_XBUTTON1", "value": "8"}, {"description": "", "enum": "ButtonList", "name": "BUTTON_XBUTTON2", "value": "9"}, {"description": "Mouse wheel up", "enum": "ButtonList", "name": "BUTTON_WHEEL_UP", "value": "4"}, {"description": "Mouse wheel down", "enum": "ButtonList", "name": "BUTTON_WHEEL_DOWN", "value": "5"}, {"description": "Mouse wheel left button", "enum": "ButtonList", "name": "BUTTON_WHEEL_LEFT", "value": "6"}, {"description": "Mouse wheel right button", "enum": "ButtonList", "name": "BUTTON_WHEEL_RIGHT", "value": "7"}, {"description": "Left Mouse Button Mask", "enum": "ButtonList", "name": "BUTTON_MASK_LEFT", "value": "1"}, {"description": "Right Mouse Button Mask", "enum": "ButtonList", "name": "BUTTON_MASK_RIGHT", "value": "2"}, {"description": "Middle Mouse Button Mask", "enum": "ButtonList", "name": "BUTTON_MASK_MIDDLE", "value": "4"}, {"description": "", "enum": "ButtonList", "name": "BUTTON_MASK_XBUTTON1", "value": "128"}, {"description": "", "enum": "ButtonList", "name": "BUTTON_MASK_XBUTTON2", "value": "256"}, {"description": "Joypad Button 0", "enum": "JoystickList", "name": "JOY_BUTTON_0", "value": "0"}, {"description": "Joypad Button 1", "enum": "JoystickList", "name": "JOY_BUTTON_1", "value": "1"}, {"description": "Joypad Button 2", "enum": "JoystickList", "name": "JOY_BUTTON_2", "value": "2"}, {"description": "Joypad Button 3", "enum": "JoystickList", "name": "JOY_BUTTON_3", "value": "3"}, {"description": "Joypad Button 4", "enum": "JoystickList", "name": "JOY_BUTTON_4", "value": "4"}, {"description": "Joypad Button 5", "enum": "JoystickList", "name": "JOY_BUTTON_5", "value": "5"}, {"description": "Joypad Button 6", "enum": "JoystickList", "name": "JOY_BUTTON_6", "value": "6"}, {"description": "Joypad Button 7", "enum": "JoystickList", "name": "JOY_BUTTON_7", "value": "7"}, {"description": "Joypad Button 8", "enum": "JoystickList", "name": "JOY_BUTTON_8", "value": "8"}, {"description": "Joypad Button 9", "enum": "JoystickList", "name": "JOY_BUTTON_9", "value": "9"}, {"description": "Joypad Button 10", "enum": "JoystickList", "name": "JOY_BUTTON_10", "value": "10"}, {"description": "Joypad Button 11", "enum": "JoystickList", "name": "JOY_BUTTON_11", "value": "11"}, {"description": "Joypad Button 12", "enum": "JoystickList", "name": "JOY_BUTTON_12", "value": "12"}, {"description": "Joypad Button 13", "enum": "JoystickList", "name": "JOY_BUTTON_13", "value": "13"}, {"description": "Joypad Button 14", "enum": "JoystickList", "name": "JOY_BUTTON_14", "value": "14"}, {"description": "Joypad Button 15", "enum": "JoystickList", "name": "JOY_BUTTON_15", "value": "15"}, {"description": "Joypad Button 16", "enum": "JoystickList", "name": "JOY_BUTTON_MAX", "value": "16"}, {"description": "DUALSHOCK circle button", "enum": "JoystickList", "name": "JOY_SONY_CIRCLE", "value": "1"}, {"description": "DUALSHOCK X button", "enum": "JoystickList", "name": "JOY_SONY_X", "value": "0"}, {"description": "DUALSHOCK square button", "enum": "JoystickList", "name": "JOY_SONY_SQUARE", "value": "2"}, {"description": "DUALSHOCK triangle button", "enum": "JoystickList", "name": "JOY_SONY_TRIANGLE", "value": "3"}, {"description": "XBOX controller B button", "enum": "JoystickList", "name": "JOY_XBOX_B", "value": "1"}, {"description": "XBOX controller A button", "enum": "JoystickList", "name": "JOY_XBOX_A", "value": "0"}, {"description": "XBOX controller X button", "enum": "JoystickList", "name": "JOY_XBOX_X", "value": "2"}, {"description": "XBOX controller Y button", "enum": "JoystickList", "name": "JOY_XBOX_Y", "value": "3"}, {"description": "DualShock controller A button", "enum": "JoystickList", "name": "JOY_DS_A", "value": "1"}, {"description": "DualShock controller B button", "enum": "JoystickList", "name": "JOY_DS_B", "value": "0"}, {"description": "DualShock controller X button", "enum": "JoystickList", "name": "JOY_DS_X", "value": "3"}, {"description": "DualShock controller Y button", "enum": "JoystickList", "name": "JOY_DS_Y", "value": "2"}, {"description": "Joypad Button Select", "enum": "JoystickList", "name": "JOY_SELECT", "value": "10"}, {"description": "Joypad Button Start", "enum": "JoystickList", "name": "JOY_START", "value": "11"}, {"description": "Joypad DPad Up", "enum": "JoystickList", "name": "JOY_DPAD_UP", "value": "12"}, {"description": "Joypad DPad Down", "enum": "JoystickList", "name": "JOY_DPAD_DOWN", "value": "13"}, {"description": "Joypad DPad Left", "enum": "JoystickList", "name": "JOY_DPAD_LEFT", "value": "14"}, {"description": "Joypad DPad Right", "enum": "JoystickList", "name": "JOY_DPAD_RIGHT", "value": "15"}, {"description": "Joypad Left Shoulder Button", "enum": "JoystickList", "name": "JOY_L", "value": "4"}, {"description": "Joypad Left Trigger", "enum": "JoystickList", "name": "JOY_L2", "value": "6"}, {"description": "Joypad Left Stick Click", "enum": "JoystickList", "name": "JOY_L3", "value": "8"}, {"description": "Joypad Right Shoulder Button", "enum": "JoystickList", "name": "JOY_R", "value": "5"}, {"description": "Joypad Right Trigger", "enum": "JoystickList", "name": "JOY_R2", "value": "7"}, {"description": "Joypad Right Stick Click", "enum": "JoystickList", "name": "JOY_R3", "value": "9"}, {"description": "Joypad Left Stick Horizontal Axis", "enum": "JoystickList", "name": "JOY_AXIS_0", "value": "0"}, {"description": "Joypad Left Stick Vertical Axis", "enum": "JoystickList", "name": "JOY_AXIS_1", "value": "1"}, {"description": "Joypad Right Stick Horizontal Axis", "enum": "JoystickList", "name": "JOY_AXIS_2", "value": "2"}, {"description": "Joypad Right Stick Vertical Axis", "enum": "JoystickList", "name": "JOY_AXIS_3", "value": "3"}, {"description": "", "enum": "JoystickList", "name": "JOY_AXIS_4", "value": "4"}, {"description": "", "enum": "JoystickList", "name": "JOY_AXIS_5", "value": "5"}, {"description": "Joypad Left Trigger Analog Axis", "enum": "JoystickList", "name": "JOY_AXIS_6", "value": "6"}, {"description": "Joypad Right Trigger Analog Axis", "enum": "JoystickList", "name": "JOY_AXIS_7", "value": "7"}, {"description": "", "enum": "JoystickList", "name": "JOY_AXIS_8", "value": "8"}, {"description": "", "enum": "JoystickList", "name": "JOY_AXIS_9", "value": "9"}, {"description": "", "enum": "JoystickList", "name": "JOY_AXIS_MAX", "value": "10"}, {"description": "Joypad Left Stick Horizontal Axis", "enum": "JoystickList", "name": "JOY_ANALOG_LX", "value": "0"}, {"description": "Joypad Left Stick Vertical Axis", "enum": "JoystickList", "name": "JOY_ANALOG_LY", "value": "1"}, {"description": "Joypad Right Stick Horizontal Axis", "enum": "JoystickList", "name": "JOY_ANALOG_RX", "value": "2"}, {"description": "Joypad Right Stick Vertical Axis", "enum": "JoystickList", "name": "JOY_ANALOG_RY", "value": "3"}, {"description": "Joypad Left Analog Trigger", "enum": "JoystickList", "name": "JOY_ANALOG_L2", "value": "6"}, {"description": "Joypad Right Analog Trigger", "enum": "JoystickList", "name": "JOY_ANALOG_R2", "value": "7"}, {"description": "", "enum": "MidiMessageList", "name": "MIDI_MESSAGE_NOTE_OFF", "value": "8"}, {"description": "", "enum": "MidiMessageList", "name": "MIDI_MESSAGE_NOTE_ON", "value": "9"}, {"description": "", "enum": "MidiMessageList", "name": "MIDI_MESSAGE_AFTERTOUCH", "value": "10"}, {"description": "", "enum": "MidiMessageList", "name": "MIDI_MESSAGE_CONTROL_CHANGE", "value": "11"}, {"description": "", "enum": "MidiMessageList", "name": "MIDI_MESSAGE_PROGRAM_CHANGE", "value": "12"}, {"description": "", "enum": "MidiMessageList", "name": "MIDI_MESSAGE_CHANNEL_PRESSURE", "value": "13"}, {"description": "", "enum": "MidiMessageList", "name": "MIDI_MESSAGE_PITCH_BEND", "value": "14"}, {"description": "Functions that return Error return OK when no error occurred. Most functions don't return errors and/or just print errors to STDOUT.", "enum": "Error", "name": "OK", "value": "0"}, {"description": "Generic error.", "enum": "Error", "name": "FAILED", "value": "1"}, {"description": "Unavailable error", "enum": "Error", "name": "ERR_UNAVAILABLE", "value": "2"}, {"description": "Unconfigured error", "enum": "Error", "name": "ERR_UNCONFIGURED", "value": "3"}, {"description": "Unauthorized error", "enum": "Error", "name": "ERR_UNAUTHORIZED", "value": "4"}, {"description": "Parameter range error", "enum": "Error", "name": "ERR_PARAMETER_RANGE_ERROR", "value": "5"}, {"description": "Out of memory (OOM) error", "enum": "Error", "name": "ERR_OUT_OF_MEMORY", "value": "6"}, {"description": "File: Not found error", "enum": "Error", "name": "ERR_FILE_NOT_FOUND", "value": "7"}, {"description": "File: Bad drive error", "enum": "Error", "name": "ERR_FILE_BAD_DRIVE", "value": "8"}, {"description": "File: Bad path error", "enum": "Error", "name": "ERR_FILE_BAD_PATH", "value": "9"}, {"description": "File: No permission error", "enum": "Error", "name": "ERR_FILE_NO_PERMISSION", "value": "10"}, {"description": "File: Already in use error", "enum": "Error", "name": "ERR_FILE_ALREADY_IN_USE", "value": "11"}, {"description": "File: Can't open error", "enum": "Error", "name": "ERR_FILE_CANT_OPEN", "value": "12"}, {"description": "File: Can't write error", "enum": "Error", "name": "ERR_FILE_CANT_WRITE", "value": "13"}, {"description": "File: Can't read error", "enum": "Error", "name": "ERR_FILE_CANT_READ", "value": "14"}, {"description": "File: Unrecognized error", "enum": "Error", "name": "ERR_FILE_UNRECOGNIZED", "value": "15"}, {"description": "File: Corrupt error", "enum": "Error", "name": "ERR_FILE_CORRUPT", "value": "16"}, {"description": "File: Missing dependencies error", "enum": "Error", "name": "ERR_FILE_MISSING_DEPENDENCIES", "value": "17"}, {"description": "File: End of file (EOF) error", "enum": "Error", "name": "ERR_FILE_EOF", "value": "18"}, {"description": "Can't open error", "enum": "Error", "name": "ERR_CANT_OPEN", "value": "19"}, {"description": "Can't create error", "enum": "Error", "name": "ERR_CANT_CREATE", "value": "20"}, {"description": "Parse error", "enum": "Error", "name": "ERR_PARSE_ERROR", "value": "43"}, {"description": "Query failed error", "enum": "Error", "name": "ERR_QUERY_FAILED", "value": "21"}, {"description": "Already in use error", "enum": "Error", "name": "ERR_ALREADY_IN_USE", "value": "22"}, {"description": "Locked error", "enum": "Error", "name": "ERR_LOCKED", "value": "23"}, {"description": "Timeout error", "enum": "Error", "name": "ERR_TIMEOUT", "value": "24"}, {"description": "Can't acquire resource error", "enum": "Error", "name": "ERR_CANT_ACQUIRE_RESOURCE", "value": "28"}, {"description": "Invalid data error", "enum": "Error", "name": "ERR_INVALID_DATA", "value": "30"}, {"description": "Invalid parameter error", "enum": "Error", "name": "ERR_INVALID_PARAMETER", "value": "31"}, {"description": "Already exists error", "enum": "Error", "name": "ERR_ALREADY_EXISTS", "value": "32"}, {"description": "Does not exist error", "enum": "Error", "name": "ERR_DOES_NOT_EXIST", "value": "33"}, {"description": "Database: Read error", "enum": "Error", "name": "ERR_DATABASE_CANT_READ", "value": "34"}, {"description": "Database: Write error", "enum": "Error", "name": "ERR_DATABASE_CANT_WRITE", "value": "35"}, {"description": "Compilation failed error", "enum": "Error", "name": "ERR_COMPILATION_FAILED", "value": "36"}, {"description": "Method not found error", "enum": "Error", "name": "ERR_METHOD_NOT_FOUND", "value": "37"}, {"description": "Linking failed error", "enum": "Error", "name": "ERR_LINK_FAILED", "value": "38"}, {"description": "Script failed error", "enum": "Error", "name": "ERR_SCRIPT_FAILED", "value": "39"}, {"description": "Cycling link (import cycle) error", "enum": "Error", "name": "ERR_CYCLIC_LINK", "value": "40"}, {"description": "Busy error", "enum": "Error", "name": "ERR_BUSY", "value": "44"}, {"description": "Help error", "enum": "Error", "name": "ERR_HELP", "value": "46"}, {"description": "Bug error", "enum": "Error", "name": "ERR_BUG", "value": "47"}, {"description": "No hint for edited property.", "enum": "PropertyHint", "name": "PROPERTY_HINT_NONE", "value": "0"}, {"description": "Hints that the string is a range, defined as \"min,max\" or \"min,max,step\". This is valid for integers and floats.", "enum": "PropertyHint", "name": "PROPERTY_HINT_RANGE", "value": "1"}, {"description": "Hints that the string is an exponential range, defined as \"min,max\" or \"min,max,step\". This is valid for integers and floats.", "enum": "PropertyHint", "name": "PROPERTY_HINT_EXP_RANGE", "value": "2"}, {"description": "Property hint for an enumerated value, like \"Hello,Something,Else\". This is valid for integer, float and string properties.", "enum": "PropertyHint", "name": "PROPERTY_HINT_ENUM", "value": "3"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_EXP_EASING", "value": "4"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_LENGTH", "value": "5"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_KEY_ACCEL", "value": "7"}, {"description": "Property hint for a bitmask description, for bits 0,1,2,3 and 5 the hint would be like \"Bit0,Bit1,Bit2,Bit3,,Bit5\". Valid only for integers.", "enum": "PropertyHint", "name": "PROPERTY_HINT_FLAGS", "value": "8"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_LAYERS_2D_RENDER", "value": "9"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_LAYERS_2D_PHYSICS", "value": "10"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_LAYERS_3D_RENDER", "value": "11"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_LAYERS_3D_PHYSICS", "value": "12"}, {"description": "String property is a file (so pop up a file dialog when edited). Hint string can be a set of wildcards like \"*.doc\".", "enum": "PropertyHint", "name": "PROPERTY_HINT_FILE", "value": "13"}, {"description": "String property is a directory (so pop up a file dialog when edited).", "enum": "PropertyHint", "name": "PROPERTY_HINT_DIR", "value": "14"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_GLOBAL_FILE", "value": "15"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_GLOBAL_DIR", "value": "16"}, {"description": "String property is a resource, so open the resource popup menu when edited.", "enum": "PropertyHint", "name": "PROPERTY_HINT_RESOURCE_TYPE", "value": "17"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_MULTILINE_TEXT", "value": "18"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_PLACEHOLDER_TEXT", "value": "19"}, {"description": "", "enum": "PropertyHint", "name": "PROPERTY_HINT_COLOR_NO_ALPHA", "value": "20"}, {"description": "Hints that the image is compressed using lossy compression.", "enum": "PropertyHint", "name": "PROPERTY_HINT_IMAGE_COMPRESS_LOSSY", "value": "21"}, {"description": "Hints that the image is compressed using lossless compression.", "enum": "PropertyHint", "name": "PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS", "value": "22"}, {"description": "Property will be used as storage (default).", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_STORAGE", "value": "1"}, {"description": "Property will be visible in editor (default).", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_EDITOR", "value": "2"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_NETWORK", "value": "4"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_EDITOR_HELPER", "value": "8"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_CHECKABLE", "value": "16"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_CHECKED", "value": "32"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_INTERNATIONALIZED", "value": "64"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_GROUP", "value": "128"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_CATEGORY", "value": "256"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_STORE_IF_NONZERO", "value": "512"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_STORE_IF_NONONE", "value": "1024"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_NO_INSTANCE_STATE", "value": "2048"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_RESTART_IF_CHANGED", "value": "4096"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_SCRIPT_VARIABLE", "value": "8192"}, {"description": "Default usage (storage and editor).", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_DEFAULT", "value": "7"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_DEFAULT_INTL", "value": "71"}, {"description": "", "enum": "PropertyUsageFlags", "name": "PROPERTY_USAGE_NOEDITOR", "value": "5"}, {"description": "Flag for normal method", "enum": "MethodFlags", "name": "METHOD_FLAG_NORMAL", "value": "1"}, {"description": "Flag for editor method", "enum": "MethodFlags", "name": "METHOD_FLAG_EDITOR", "value": "2"}, {"description": "", "enum": "MethodFlags", "name": "METHOD_FLAG_NOSCRIPT", "value": "4"}, {"description": "Flag for constant method", "enum": "MethodFlags", "name": "METHOD_FLAG_CONST", "value": "8"}, {"description": "", "enum": "MethodFlags", "name": "METHOD_FLAG_REVERSE", "value": "16"}, {"description": "Flag for virtual method", "enum": "MethodFlags", "name": "METHOD_FLAG_VIRTUAL", "value": "32"}, {"description": "Flag for method from script", "enum": "MethodFlags", "name": "METHOD_FLAG_FROM_SCRIPT", "value": "64"}, {"description": "Default method flags", "enum": "MethodFlags", "name": "METHOD_FLAGS_DEFAULT", "value": "1"}, {"description": "Variable is of type nil (only applied for null).", "enum": "Variant.Type", "name": "TYPE_NIL", "value": "0"}, {"description": "Variable is of type [bool].", "enum": "Variant.Type", "name": "TYPE_BOOL", "value": "1"}, {"description": "Variable is of type [int].", "enum": "Variant.Type", "name": "TYPE_INT", "value": "2"}, {"description": "Variable is of type [float]/real.", "enum": "Variant.Type", "name": "TYPE_REAL", "value": "3"}, {"description": "Variable is of type [String].", "enum": "Variant.Type", "name": "TYPE_STRING", "value": "4"}, {"description": "Variable is of type [Vector2].", "enum": "Variant.Type", "name": "TYPE_VECTOR2", "value": "5"}, {"description": "Variable is of type [Rect2].", "enum": "Variant.Type", "name": "TYPE_RECT2", "value": "6"}, {"description": "Variable is of type [Vector3].", "enum": "Variant.Type", "name": "TYPE_VECTOR3", "value": "7"}, {"description": "Variable is of type [Transform2D].", "enum": "Variant.Type", "name": "TYPE_TRANSFORM2D", "value": "8"}, {"description": "Variable is of type [Plane].", "enum": "Variant.Type", "name": "TYPE_PLANE", "value": "9"}, {"description": "Variable is of type [Quat].", "enum": "Variant.Type", "name": "TYPE_QUAT", "value": "10"}, {"description": "Variable is of type [AABB].", "enum": "Variant.Type", "name": "TYPE_AABB", "value": "11"}, {"description": "Variable is of type [Basis].", "enum": "Variant.Type", "name": "TYPE_BASIS", "value": "12"}, {"description": "Variable is of type [Transform].", "enum": "Variant.Type", "name": "TYPE_TRANSFORM", "value": "13"}, {"description": "Variable is of type [Color].", "enum": "Variant.Type", "name": "TYPE_COLOR", "value": "14"}, {"description": "Variable is of type [NodePath].", "enum": "Variant.Type", "name": "TYPE_NODE_PATH", "value": "15"}, {"description": "Variable is of type [RID].", "enum": "Variant.Type", "name": "TYPE_RID", "value": "16"}, {"description": "Variable is of type [Object].", "enum": "Variant.Type", "name": "TYPE_OBJECT", "value": "17"}, {"description": "Variable is of type [Dictionary].", "enum": "Variant.Type", "name": "TYPE_DICTIONARY", "value": "18"}, {"description": "Variable is of type [Array].", "enum": "Variant.Type", "name": "TYPE_ARRAY", "value": "19"}, {"description": "Variable is of type [PoolByteArray].", "enum": "Variant.Type", "name": "TYPE_RAW_ARRAY", "value": "20"}, {"description": "Variable is of type [PoolIntArray].", "enum": "Variant.Type", "name": "TYPE_INT_ARRAY", "value": "21"}, {"description": "Variable is of type [PoolRealArray].", "enum": "Variant.Type", "name": "TYPE_REAL_ARRAY", "value": "22"}, {"description": "Variable is of type [PoolStringArray].", "enum": "Variant.Type", "name": "TYPE_STRING_ARRAY", "value": "23"}, {"description": "Variable is of type [PoolVector2Array].", "enum": "Variant.Type", "name": "TYPE_VECTOR2_ARRAY", "value": "24"}, {"description": "Variable is of type [PoolVector3Array].", "enum": "Variant.Type", "name": "TYPE_VECTOR3_ARRAY", "value": "25"}, {"description": "Variable is of type [PoolColorArray].", "enum": "Variant.Type", "name": "TYPE_COLOR_ARRAY", "value": "26"}, {"description": "Marker for end of type constants.", "enum": "Variant.Type", "name": "TYPE_MAX", "value": "27"}, {"description": "", "enum": "Variant.Operator", "name": "OP_EQUAL", "value": "0"}, {"description": "", "enum": "Variant.Operator", "name": "OP_NOT_EQUAL", "value": "1"}, {"description": "", "enum": "Variant.Operator", "name": "OP_LESS", "value": "2"}, {"description": "", "enum": "Variant.Operator", "name": "OP_LESS_EQUAL", "value": "3"}, {"description": "", "enum": "Variant.Operator", "name": "OP_GREATER", "value": "4"}, {"description": "", "enum": "Variant.Operator", "name": "OP_GREATER_EQUAL", "value": "5"}, {"description": "", "enum": "Variant.Operator", "name": "OP_ADD", "value": "6"}, {"description": "", "enum": "Variant.Operator", "name": "OP_SUBTRACT", "value": "7"}, {"description": "", "enum": "Variant.Operator", "name": "OP_MULTIPLY", "value": "8"}, {"description": "", "enum": "Variant.Operator", "name": "OP_DIVIDE", "value": "9"}, {"description": "", "enum": "Variant.Operator", "name": "OP_NEGATE", "value": "10"}, {"description": "", "enum": "Variant.Operator", "name": "OP_POSITIVE", "value": "11"}, {"description": "", "enum": "Variant.Operator", "name": "OP_MODULE", "value": "12"}, {"description": "", "enum": "Variant.Operator", "name": "OP_STRING_CONCAT", "value": "13"}, {"description": "", "enum": "Variant.Operator", "name": "OP_SHIFT_LEFT", "value": "14"}, {"description": "", "enum": "Variant.Operator", "name": "OP_SHIFT_RIGHT", "value": "15"}, {"description": "", "enum": "Variant.Operator", "name": "OP_BIT_AND", "value": "16"}, {"description": "", "enum": "Variant.Operator", "name": "OP_BIT_OR", "value": "17"}, {"description": "", "enum": "Variant.Operator", "name": "OP_BIT_XOR", "value": "18"}, {"description": "", "enum": "Variant.Operator", "name": "OP_BIT_NEGATE", "value": "19"}, {"description": "", "enum": "Variant.Operator", "name": "OP_AND", "value": "20"}, {"description": "", "enum": "Variant.Operator", "name": "OP_OR", "value": "21"}, {"description": "", "enum": "Variant.Operator", "name": "OP_XOR", "value": "22"}, {"description": "", "enum": "Variant.Operator", "name": "OP_NOT", "value": "23"}, {"description": "", "enum": "Variant.Operator", "name": "OP_IN", "value": "24"}, {"description": "", "enum": "Variant.Operator", "name": "OP_MAX", "value": "25"}], "demos": {"links": []}, "description": "Global scope constants and variables. This is all that resides in the globals, constants regarding error codes, scancodes, property hints, etc. It's not much.\n\t\tSingletons are also documented here, since they can be accessed from anywhere.", "members": [{"description": "[ARVRServer] singleton", "getter": "", "name": "ARVRServer", "setter": "", "type": "ARVRServer"}, {"description": "[AudioServer] singleton", "getter": "", "name": "AudioServer", "setter": "", "type": "AudioServer"}, {"description": "[ClassDB] singleton", "getter": "", "name": "ClassDB", "setter": "", "type": "ClassDB"}, {"description": "[Engine] singleton", "getter": "", "name": "Engine", "setter": "", "type": "Engine"}, {"description": "[Geometry] singleton", "getter": "", "name": "Geometry", "setter": "", "type": "Geometry"}, {"description": "", "getter": "", "name": "GodotSharp", "setter": "", "type": "GodotSharp"}, {"description": "[IP] singleton", "getter": "", "name": "IP", "setter": "", "type": "IP"}, {"description": "[Input] singleton", "getter": "", "name": "Input", "setter": "", "type": "Input"}, {"description": "[InputMap] singleton", "getter": "", "name": "InputMap", "setter": "", "type": "InputMap"}, {"description": "[JSON] singleton", "getter": "", "name": "JSON", "setter": "", "type": "JSON"}, {"description": "[JavaScript] singleton", "getter": "", "name": "JavaScript", "setter": "", "type": "JavaScript"}, {"description": "[Marshalls] singleton", "getter": "", "name": "Marshalls", "setter": "", "type": "Reference"}, {"description": "[OS] singleton", "getter": "", "name": "OS", "setter": "", "type": "OS"}, {"description": "[Performance] singleton", "getter": "", "name": "Performance", "setter": "", "type": "Performance"}, {"description": "[Physics2DServer] singleton", "getter": "", "name": "Physics2DServer", "setter": "", "type": "Physics2DServer"}, {"description": "[PhysicsServer] singleton", "getter": "", "name": "PhysicsServer", "setter": "", "type": "PhysicsServer"}, {"description": "[ProjectSettings] singleton", "getter": "", "name": "ProjectSettings", "setter": "", "type": "ProjectSettings"}, {"description": "[ResourceLoader] singleton", "getter": "", "name": "ResourceLoader", "setter": "", "type": "ResourceLoader"}, {"description": "[ResourceSaver] singleton", "getter": "", "name": "ResourceSaver", "setter": "", "type": "ResourceSaver"}, {"description": "[TranslationServer] singleton", "getter": "", "name": "TranslationServer", "setter": "", "type": "TranslationServer"}, {"description": "[VisualScriptEditor] singleton", "getter": "", "name": "VisualScriptEditor", "setter": "", "type": "VisualScriptEditor"}, {"description": "[VisualServer] singleton", "getter": "", "name": "VisualServer", "setter": "", "type": "VisualServer"}], "methods": [], "name": "@GlobalScope", "signals": [], "tutorials": {"links": []}}, "@NativeScript": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "members": [], "methods": [], "name": "@NativeScript", "signals": [], "tutorials": {"links": []}}, "@VisualScript": {"brief_description": "Built-in visual script functions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A list of built-in visual script functions, see [VisualScriptBuiltinFunc] and [VisualScript].", "members": [], "methods": [], "name": "@VisualScript", "signals": [], "tutorials": {"links": []}}, "AABB": {"brief_description": "Axis-Aligned Bounding Box.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "AABB consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.", "members": [{"description": "Ending corner.", "getter": "", "name": "end", "setter": "", "type": "Vector3"}, {"description": "Beginning corner.", "getter": "", "name": "position", "setter": "", "type": "Vector3"}, {"description": "Size from position to end.", "getter": "", "name": "size", "setter": "", "type": "Vector3"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector3"}, {"description": "", "index": "1", "name": "size", "type": "Vector3"}], "description": "Optional constructor, accepts position and size.", "name": "AABB", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "with", "type": "AABB"}], "description": "Returns [code]true[/code] if this [code]AABB[/code] completely encloses another one.", "name": "encloses", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "to_point", "type": "Vector3"}], "description": "Returns this [code]AABB[/code] expanded to include a given point.", "name": "expand", "return_": {"description": "", "type": "AABB"}}, {"arguments": [], "description": "Gets the area of the [code]AABB[/code].", "name": "get_area", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Gets the position of the 8 endpoints of the [code]AABB[/code] in space.", "name": "get_endpoint", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns the normalized longest axis of the [code]AABB[/code].", "name": "get_longest_axis", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns the index of the longest axis of the [code]AABB[/code] (according to [Vector3]::AXIS* enum).", "name": "get_longest_axis_index", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the scalar length of the longest axis of the [code]AABB[/code].", "name": "get_longest_axis_size", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the normalized shortest axis of the [code]AABB[/code].", "name": "get_shortest_axis", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns the index of the shortest axis of the [code]AABB[/code] (according to [Vector3]::AXIS* enum).", "name": "get_shortest_axis_index", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the scalar length of the shortest axis of the [code]AABB[/code].", "name": "get_shortest_axis_size", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "dir", "type": "Vector3"}], "description": "Returns the support point in a given direction. This is useful for collision detection algorithms.", "name": "get_support", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "by", "type": "float"}], "description": "Returns a copy of the [code]AABB[/code] grown a given amount of units towards all the sides.", "name": "grow", "return_": {"description": "", "type": "AABB"}}, {"arguments": [], "description": "Returns [code]true[/code] if the [code]AABB[/code] is flat or empty.", "name": "has_no_area", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the [code]AABB[/code] is empty.", "name": "has_no_surface", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector3"}], "description": "Returns [code]true[/code] if the [code]AABB[/code] contains a point.", "name": "has_point", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "with", "type": "AABB"}], "description": "Returns the intersection between two [code]AABB[/code]. An empty AABB (size 0,0,0) is returned on failure.", "name": "intersection", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "with", "type": "AABB"}], "description": "Returns [code]true[/code] if the [code]AABB[/code] overlaps with another.", "name": "intersects", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "plane", "type": "Plane"}], "description": "Returns [code]true[/code] if the [code]AABB[/code] is on both sides of a plane.", "name": "intersects_plane", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}, {"description": "", "index": "1", "name": "to", "type": "Vector3"}], "description": "Returns [code]true[/code] if the [code]AABB[/code] intersects the line segment between [code]from[/code] and [code]to[/code].", "name": "intersects_segment", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "with", "type": "AABB"}], "description": "Returns a larger AABB that contains this AABB and [code]with[/code].", "name": "merge", "return_": {"description": "", "type": "AABB"}}], "name": "AABB", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/math/index.html"}]}}, "ARVRAnchor": {"brief_description": "Anchor point in AR Space.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "The ARVR Anchor point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them.\n\t\tThis node is mapped to one of the anchors through its unique id. When you receive a signal that a new anchor is available you should add this node to your scene for that anchor. You can predefine nodes and set the id and the nodes will simply remain on 0,0,0 until a plane is recognised.\n\t\tKeep in mind that as long as plane detection is enable the size, placing and orientation of an anchor will be updates as the detection logic learns more about the real world out there especially if only part of the surface is in view.", "inherits": "Spatial", "members": [{"description": "The anchor's id. You can set this before the anchor itself exists. The first anchor gets an id of [code]1[/code], the second an id of [code]2[/code], etc. When anchors get removed, the engine can then assign the corresponding id to new anchors. The most common situation where anchors 'disappear' is when the AR server identifies that two anchors represent different parts of the same plane and merges them.", "getter": "get_anchor_id", "name": "anchor_id", "setter": "set_anchor_id", "type": "int"}], "methods": [{"arguments": [], "description": "Returns the name given to this anchor.", "name": "get_anchor_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns true if the anchor is being tracked and false if no anchor with this id is currently known.", "name": "get_is_active", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns a plane aligned with our anchor, handy for intersection testing", "name": "get_plane", "qualifiers": "const", "return_": {"description": "", "type": "Plane"}}, {"arguments": [], "description": "Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table.", "name": "get_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}], "name": "ARVRAnchor", "signals": [], "tutorials": {"links": []}}, "ARVRCamera": {"brief_description": "A camera node with a few overrules for AR/VR applied such as location tracking.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This is a helper spatial node for our camera, note that if stereoscopic rendering is applicable (VR-HMD) most of the camera properties are ignored as the HMD information overrides them. The only properties that can be trusted are the near and far planes.\n\t\tThe position and orientation of this node is automatically updated by the ARVR Server to represent the location of the HMD if such tracking is available and can thus be used by game logic. Note that in contrast to the ARVR Controller the render thread has access to the most up to date tracking data of the HMD and the location of the ARVRCamera can lag a few milliseconds behind what is used for rendering as a result.", "inherits": "Camera", "members": [], "methods": [], "name": "ARVRCamera", "signals": [], "tutorials": {"links": []}}, "ARVRController": {"brief_description": "A spatial node representing a spatially tracked controller.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy pass throughs to the state of buttons and such on the controllers.\n\t\tControllers are linked by their id. You can create controller nodes before the controllers are available. Say your game always uses two controllers (one for each hand) you can predefine the controllers with id 1 and 2 and they will become active as soon as the controllers are identified. If you expect additional controllers to be used you should react to the signals and add ARVRController nodes to your scene.\n\t\tThe position of the controller node is automatically updated by the ARVR Server. This makes this node ideal to add child  nodes to visualise the controller.", "inherits": "Spatial", "members": [{"description": "The controller's id.\n\t\t\tA controller id of 0 is unbound and will always result in an inactive node. Controller id 1 is reserved for the first controller that identifies itself as the left hand controller and id 2 is reserved for the first controller that identifies itself as the right hand controller.\n\t\t\tFor any other controller that the [ARVRServer] detects we continue with controller id 3.\n\t\t\tWhen a controller is turned off, its slot is freed. This ensures controllers will keep the same id even when controllers with lower ids are turned off.", "getter": "get_controller_id", "name": "controller_id", "setter": "set_controller_id", "type": "int"}, {"description": "The degree to which the tracker rumbles. Ranges from [code]0.0[/code] to [code]1.0[/code] with precision [code].01[/code]. If changed, updates [member ARVRPositionalTracker.rumble] accordingly.", "getter": "get_rumble", "name": "rumble", "setter": "set_rumble", "type": "float"}], "methods": [{"arguments": [], "description": "If active, returns the name of the associated controller if provided by the AR/VR SDK used.", "name": "get_controller_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the hand holding this controller, if known. See TRACKER_* constants in [ARVRPositionalTracker].", "name": "get_hand", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns [code]true[/code] if the bound controller is active. ARVR systems attempt to track active controllers.", "name": "get_is_active", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "int"}], "description": "Returns the value of the given axis for things like triggers, touchpads, etc. that are embedded into the controller.", "name": "get_joystick_axis", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the ID of the joystick object bound to this. Every controller tracked by the ARVR Server that has buttons and axis will also be registered as a joystick within Godot. This means that all the normal joystick tracking and input mapping will work for buttons and axis found on the AR/VR controllers. This ID is purely offered as information so you can link up the controller with its joystick entry.", "name": "get_joystick_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "button", "type": "int"}], "description": "Returns [code]true[/code] if the button at index [code]button[/code] is pressed.", "name": "is_button_pressed", "qualifiers": "const", "return_": {"description": "", "type": "int"}}], "name": "ARVRController", "signals": [{"arguments": [{"description": "", "index": "0", "name": "button", "type": "int"}], "description": "Emitted when a button on this controller is pressed.", "name": "button_pressed"}, {"arguments": [{"description": "", "index": "0", "name": "button", "type": "int"}], "description": "Emitted when a button on this controller is released.", "name": "button_release"}], "tutorials": {"links": []}}, "ARVRInterface": {"brief_description": "Base class for ARVR interface implementation.", "category": "Core", "constants": [{"description": "No ARVR capabilities.", "enum": "Capabilities", "name": "ARVR_NONE", "value": "0"}, {"description": "This interface can work with normal rendering output (non-HMD based AR).", "enum": "Capabilities", "name": "ARVR_MONO", "value": "1"}, {"description": "This interface supports stereoscopic rendering.", "enum": "Capabilities", "name": "ARVR_STEREO", "value": "2"}, {"description": "This interface support AR (video background and real world tracking).", "enum": "Capabilities", "name": "ARVR_AR", "value": "4"}, {"description": "This interface outputs to an external device, if the main viewport is used the on screen output is an unmodified buffer of either the left or right eye (stretched if the viewport size is not changed to the same aspect ratio of get_render_targetsize. Using a separate viewport node frees up the main viewport for other purposes.", "enum": "Capabilities", "name": "ARVR_EXTERNAL", "value": "8"}, {"description": "Mono output, this is mostly used internally when retrieving positioning information for our camera node or when stereo scopic rendering is not supported.", "enum": "Eyes", "name": "EYE_MONO", "value": "0"}, {"description": "Left eye output, this is mostly used internally when rendering the image for the left eye and obtaining positioning and projection information.", "enum": "Eyes", "name": "EYE_LEFT", "value": "1"}, {"description": "Right eye output, this is mostly used internally when rendering the image for the right eye and obtaining positioning and projection information.", "enum": "Eyes", "name": "EYE_RIGHT", "value": "2"}, {"description": "Tracking is behaving as expected.", "enum": "Tracking_status", "name": "ARVR_NORMAL_TRACKING", "value": "0"}, {"description": "Tracking is hindered by excessive motion, player is moving faster then tracking can keep up.", "enum": "Tracking_status", "name": "ARVR_EXCESSIVE_MOTION", "value": "1"}, {"description": "Tracking is hindered by insufficient features, it's too dark (for camera based tracking), player is blocked, etc.", "enum": "Tracking_status", "name": "ARVR_INSUFFICIENT_FEATURES", "value": "2"}, {"description": "We don't know the status of the tracking or this interface does not provide feedback.", "enum": "Tracking_status", "name": "ARVR_UNKNOWN_TRACKING", "value": "3"}, {"description": "Tracking is not functional (camera not plugged in or obscured, lighthouses turned off, etc.)", "enum": "Tracking_status", "name": "ARVR_NOT_TRACKING", "value": "4"}], "demos": {"links": []}, "description": "This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDNative modules (note that for GDNative the subclass ARVRScriptInterface should be used). Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.\n\t\tInterfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through ARVRServer.", "inherits": "Reference", "members": [{"description": "On an AR interface, is our anchor detection enabled?", "getter": "get_anchor_detection_is_enabled", "name": "ar_is_anchor_detection_enabled", "setter": "set_anchor_detection_is_enabled", "type": "bool"}, {"description": "Has this interface been initialized?", "getter": "is_initialized", "name": "interface_is_initialized", "setter": "set_is_initialized", "type": "bool"}, {"description": "Is this our primary interface?", "getter": "is_primary", "name": "interface_is_primary", "setter": "set_is_primary", "type": "bool"}], "methods": [{"arguments": [], "description": "Returns a combination of flags providing information about the capabilities of this interface.", "name": "get_capabilities", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the name of this interface (OpenVR, OpenHMD, ARKit, etc).", "name": "get_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the resolution at which we should render our intermediate results before things like lens distortion are applied by the VR platform.", "name": "get_render_targetsize", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "If supported, returns the status of our tracking. This will allow you to provide feedback to the user whether there are issues with positional tracking.", "name": "get_tracking_status", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Call this to initialize this interface. The first interface that is initialized is identified as the primary interface and it will be used for rendering output.\n\t\t\t\tAfter initializing the interface you want to use you then need to enable the AR/VR mode of a viewport and rendering should commence. \n\t\t\t\tNote that you must enable the AR/VR mode on the main viewport for any device that uses the main output of Godot such as for mobile VR. \n\t\t\t\tIf you do this for a platform that handles its own output (such as OpenVR) Godot will show just one eye without distortion on screen. Alternatively you can add a separate viewport node to your scene and enable AR/VR on that viewport and it will be used to output to the HMD leaving you free to do anything you like in the main window such as using a separate camera as a spectator camera or render out something completely different.\n\t\t\t\tWhile currently not used you can activate additional interfaces, you may wish to do this if you want to track controllers from other platforms. However at this point in time only one interface can render to an HMD.", "name": "initialize", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns true if the current output of this interface is in stereo.", "name": "is_stereo", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Turns the interface off.", "name": "uninitialize", "return_": {"description": "", "type": "void"}}], "name": "ARVRInterface", "signals": [], "tutorials": {"links": []}}, "ARVROrigin": {"brief_description": "Our origin point in AR/VR.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world.\n\t\tThere should be only one of these nodes in your scene and you must have one. All the ARVRCamera, ARVRController and ARVRAnchor nodes should be direct children of this node for spatial tracking to work correctly.\n\t\tIt is the position of this node that you update when you're character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point.\n\t\tSo say that your character is driving a car, the ARVROrigin node should be a child node of this car. If you implement a teleport system to move your character, you change the position of this node. Etc.", "inherits": "Spatial", "members": [{"description": "Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 meter in the real world.\n\t\t\tNote that this method is a passthrough to the [ARVRServer] itself.", "getter": "get_world_scale", "name": "world_scale", "setter": "set_world_scale", "type": "float"}], "methods": [], "name": "ARVROrigin", "signals": [], "tutorials": {"links": []}}, "ARVRPositionalTracker": {"brief_description": "A tracked object", "category": "Core", "constants": [{"description": "The hand this tracker is held in is unknown or not applicable.", "enum": "TrackerHand", "name": "TRACKER_HAND_UNKNOWN", "value": "0"}, {"description": "This tracker is the left hand controller.", "enum": "TrackerHand", "name": "TRACKER_LEFT_HAND", "value": "1"}, {"description": "This tracker is the right hand controller.", "enum": "TrackerHand", "name": "TRACKER_RIGHT_HAND", "value": "2"}], "demos": {"links": []}, "description": "An instance of this object represents a device that is tracked such as a controller or anchor point. HMDs aren't represented here as they are fully handled internally.\n\t\tAs controllers are turned on and the AR/VR interface detects them instances of this object are automatically added to this list of active tracking objects accessible through the ARVRServer\n\t\tThe ARVRController and ARVRAnchor both consume objects of this type and should be the objects you use in game. The positional trackers are just the under the hood objects that make this all work and are mostly exposed so GDNative based interfaces can interact with them.", "inherits": "Object", "members": [{"description": "The degree to which the tracker rumbles. Ranges from [code]0.0[/code] to [code]1.0[/code] with precision [code].01[/code].", "getter": "get_rumble", "name": "rumble", "setter": "set_rumble", "type": "float"}], "methods": [{"arguments": [], "description": "Returns the hand holding this tracker, if known. See TRACKER_* constants.", "name": "get_hand", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "If this is a controller that is being tracked the controller will also be represented by a joystick entry with this id.", "name": "get_joy_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the controller or anchor point's name if available.", "name": "get_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the controller's orientation matrix.", "name": "get_orientation", "qualifiers": "const", "return_": {"description": "", "type": "Basis"}}, {"arguments": [], "description": "Returns the world-space controller position.", "name": "get_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns [code]true[/code] if this device tracks orientation.", "name": "get_tracks_orientation", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this device tracks position.", "name": "get_tracks_position", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "adjust_by_reference_frame", "type": "bool"}], "description": "Returns the transform combining this device's orientation and position.", "name": "get_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [], "description": "Returns the tracker's type.", "name": "get_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}], "name": "ARVRPositionalTracker", "signals": [], "tutorials": {"links": []}}, "ARVRServer": {"brief_description": "This is our AR/VR Server.", "category": "Core", "constants": [{"description": "Our tracker tracks the location of a controller.", "enum": "TrackerType", "name": "TRACKER_CONTROLLER", "value": "1"}, {"description": "Our tracker tracks the location of a base station.", "enum": "TrackerType", "name": "TRACKER_BASESTATION", "value": "2"}, {"description": "Our tracker tracks the location and size of an AR anchor.", "enum": "TrackerType", "name": "TRACKER_ANCHOR", "value": "4"}, {"description": "Used internally to filter trackers of any known type.", "enum": "TrackerType", "name": "TRACKER_ANY_KNOWN", "value": "127"}, {"description": "Used internally if we haven't set the tracker type yet.", "enum": "TrackerType", "name": "TRACKER_UNKNOWN", "value": "128"}, {"description": "Used internally to select all trackers.", "enum": "TrackerType", "name": "TRACKER_ANY", "value": "255"}, {"description": "Fully reset the orientation of the HMD. Regardless of what direction the user is looking to in the real world. The user will look dead ahead in the virtual world.", "enum": "RotationMode", "name": "RESET_FULL_ROTATION", "value": "0"}, {"description": "Resets the orientation but keeps the tilt of the device. So if we're looking down, we keep looking down but heading will be reset.", "enum": "RotationMode", "name": "RESET_BUT_KEEP_TILT", "value": "1"}, {"description": "Does not reset the orientation of the HMD, only the position of the player gets centered.", "enum": "RotationMode", "name": "DONT_RESET_ROTATION", "value": "2"}], "demos": {"links": []}, "description": "The AR/VR Server is the heart of our AR/VR solution and handles all the processing.", "inherits": "Object", "members": [{"description": "", "getter": "get_primary_interface", "name": "primary_interface", "setter": "set_primary_interface", "type": "ARVRInterface"}, {"description": "Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 meter in the real world.", "getter": "get_world_scale", "name": "world_scale", "setter": "set_world_scale", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "rotation_mode", "type": "int"}, {"description": "", "index": "1", "name": "keep_height", "type": "bool"}], "description": "This is a really important function to understand correctly. AR and VR platforms all handle positioning slightly differently.\n\t\t\t\tFor platforms that do not offer spatial tracking our origin point (0,0,0) is the location of our HMD but you have little control over the direction the player is facing in the real world.\n\t\t\t\tFor platforms that do offer spatial tracking our origin point depends very much on the system. For OpenVR our origin point is usually the center of the tracking space, on the ground. For other platforms its often the location of the tracking camera.\n\t\t\t\tThis method allows you to center our tracker on the location of the HMD, it will take the current location of the HMD and use that to adjust all our tracking data in essence realigning the real world to your players current position in your game world.\n\t\t\t\tFor this method to produce usable results tracking information should be available and this often takes a few frames after starting your game.\n\t\t\t\tYou should call this method after a few seconds have passed, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, and when implementing a teleport mechanism.", "name": "center_on_hmd", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Find an interface by its name. Say that you're making a game that uses specific capabilities of an AR/VR platform you can find the interface for that platform by name and initialize it.", "name": "find_interface", "qualifiers": "const", "return_": {"description": "", "type": "ARVRInterface"}}, {"arguments": [], "description": "Returns the primary interface's transformation.", "name": "get_hmd_transform", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Get the interface registered at a given index in our list of interfaces.", "name": "get_interface", "qualifiers": "const", "return_": {"description": "", "type": "ARVRInterface"}}, {"arguments": [], "description": "Get the number of interfaces currently registered with the AR/VR server. If you're game supports multiple AR/VR platforms you can look through the available interface and either present the user with a selection or simply try an initialize each interface and use the first one that returns true.", "name": "get_interface_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns a list of available interfaces with both id and name of the interface.", "name": "get_interfaces", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "", "name": "get_last_commit_usec", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_last_frame_usec", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_last_process_usec", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Gets our reference frame transform, mostly used internally and exposed for GDNative build interfaces.", "name": "get_reference_frame", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Get the positional tracker at the given ID.", "name": "get_tracker", "qualifiers": "const", "return_": {"description": "", "type": "ARVRPositionalTracker"}}, {"arguments": [], "description": "Get the number of trackers currently registered.", "name": "get_tracker_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}], "name": "ARVRServer", "signals": [{"arguments": [{"description": "", "index": "0", "name": "interface_name", "type": "String"}], "description": "Signal send when a new interface has been added.", "name": "interface_added"}, {"arguments": [{"description": "", "index": "0", "name": "interface_name", "type": "String"}], "description": "Signal send when an interface is removed.", "name": "interface_removed"}, {"arguments": [{"description": "", "index": "0", "name": "tracker_name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "int"}, {"description": "", "index": "2", "name": "id", "type": "int"}], "description": "Signal send when a new tracker has been added. If you don't use a fixed number of controllers or if you're using ARVRAnchors for an AR solution it is important to react to this signal and add the appropriate ARVRController or ARVRAnchor node related to this new tracker.", "name": "tracker_added"}, {"arguments": [{"description": "", "index": "0", "name": "tracker_name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "int"}, {"description": "", "index": "2", "name": "id", "type": "int"}], "description": "Signal send when a tracker is removed, you should remove any ARVRController or ARVRAnchor points if applicable. This is not mandatory, the nodes simply become inactive and will be made active again when a new tracker becomes available (i.e. a new controller is switched on that takes the place of the previous one).", "name": "tracker_removed"}], "tutorials": {"links": []}}, "AStar": {"brief_description": "AStar class representation that uses vectors as edges.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting an efficiently directed path between multiple points. It enjoys widespread use due to its performance and accuracy. Godot's A* implementation make use of vectors as points.\n\t\tYou must add points manually with [method AStar.add_point] and create segments manually with [method AStar.connect_points]. So you can test if there is a path between two points with the [method AStar.are_points_connected] function, get the list of existing ids in the found path with [method AStar.get_id_path], or the points list with [method AStar.get_point_path].", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from_id", "type": "int"}, {"description": "", "index": "1", "name": "to_id", "type": "int"}], "description": "Called when computing the cost between two connected points.", "name": "_compute_cost", "qualifiers": "virtual", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "from_id", "type": "int"}, {"description": "", "index": "1", "name": "to_id", "type": "int"}], "description": "Called when estimating the cost between a point and the path's ending point.", "name": "_estimate_cost", "qualifiers": "virtual", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "position", "type": "Vector3"}, {"default": "1.0", "description": "", "index": "2", "name": "weight_scale", "type": "float"}], "description": "Adds a new point at the given position with the given identifier. The algorithm prefers points with lower [code]weight_scale[/code] to form a path. The [code]id[/code] must be 0 or larger, and the [code]weight_scale[/code] must be 1 or larger.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\n\t\t\t\tas.add_point(1, Vector3(1,0,0), 4) # Adds the point (1,0,0) with weight_scale=4 and id=1\n\t\t\t\t[/codeblock]\n\t\t\t\tIf there already exists a point for the given id, its position and weight scale are updated to the given values.", "name": "add_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "to_id", "type": "int"}], "description": "Returns whether there is a connection/segment between the given points.", "name": "are_points_connected", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Clears all the points and segments.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "to_id", "type": "int"}, {"default": "true", "description": "", "index": "2", "name": "bidirectional", "type": "bool"}], "description": "Creates a segment between the given points.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\n\t\t\t\tas.add_point(1, Vector3(1,1,0))\n\t\t\t\tas.add_point(2, Vector3(0,5,0))\n\n\t\t\t\tas.connect_points(1, 2, false) # If bidirectional=false it's only possible to go from point 1 to point 2\n\t\t\t\t                               # and not from point 2 to point 1.\n\t\t\t\t[/codeblock]", "name": "connect_points", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "to_id", "type": "int"}], "description": "Deletes the segment between the given points.", "name": "disconnect_points", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the next available point id with no point associated to it.", "name": "get_available_point_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "to_position", "type": "Vector3"}], "description": "Returns the id of the closest point to [code]to_position[/code]. Returns -1 if there are no points in the points pool.", "name": "get_closest_point", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "to_position", "type": "Vector3"}], "description": "Returns the closest position to [code]to_position[/code] that resides inside a segment between two connected points.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\n\t\t\t\tas.add_point(1, Vector3(0,0,0))\n\t\t\t\tas.add_point(2, Vector3(0,5,0))\n\n\t\t\t\tas.connect_points(1, 2)\n\n\t\t\t\tvar res = as.get_closest_position_in_segment(Vector3(3,3,0)) # returns (0, 3, 0)\n\t\t\t\t[/codeblock]\n\t\t\t\tThe result is in the segment that goes from [code]y=0[/code] to [code]y=5[/code]. It's the closest position in the segment to the given point.", "name": "get_closest_position_in_segment", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "from_id", "type": "int"}, {"description": "", "index": "1", "name": "to_id", "type": "int"}], "description": "Returns an array with the ids of the points that form the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\n\t\t\t\tas.add_point(1, Vector3(0,0,0))\n\t\t\t\tas.add_point(2, Vector3(0,1,0), 1) # default weight is 1\n\t\t\t\tas.add_point(3, Vector3(1,1,0))\n\t\t\t\tas.add_point(4, Vector3(2,0,0))\n\n\t\t\t\tas.connect_points(1, 2, false)\n\t\t\t\tas.connect_points(2, 3, false)\n\t\t\t\tas.connect_points(4, 3, false)\n\t\t\t\tas.connect_points(1, 4, false)\n\t\t\t\tas.connect_points(5, 4, false)\n\n\t\t\t\tvar res = as.get_id_path(1, 3) # returns [1, 2, 3]\n\t\t\t\t[/codeblock]\n\t\t\t\tIf you change the 2nd point's weight to 3, then the result will be [code][1, 4, 3][/code] instead, because now even though the distance is longer, it's \"easier\" to get through point 4 than through point 2.", "name": "get_id_path", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns an array with the ids of the points that form the connect with the given point.\n\t\t\t\t[codeblock]\n\t\t\t\tvar as = AStar.new()\n\n\t\t\t\tas.add_point(1, Vector3(0,0,0))\n\t\t\t\tas.add_point(2, Vector3(0,1,0))\n\t\t\t\tas.add_point(3, Vector3(1,1,0))\n\t\t\t\tas.add_point(4, Vector3(2,0,0))\n\n\t\t\t\tas.connect_points(1, 2, true)\n\t\t\t\tas.connect_points(1, 3, true)\n\n\t\t\t\tvar neighbors = as.get_point_connections(1) # returns [2, 3]\n\t\t\t\t[/codeblock]", "name": "get_point_connections", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "from_id", "type": "int"}, {"description": "", "index": "1", "name": "to_id", "type": "int"}], "description": "Returns an array with the points that are in the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.", "name": "get_point_path", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the position of the point associated with the given id.", "name": "get_point_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the weight scale of the point associated with the given id.", "name": "get_point_weight_scale", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns an array of all points.", "name": "get_points", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns whether a point associated with the given id exists.", "name": "has_point", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Removes the point associated with the given id from the points pool.", "name": "remove_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "position", "type": "Vector3"}], "description": "Sets the position for the point with the given id.", "name": "set_point_position", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "weight_scale", "type": "float"}], "description": "Sets the [code]weight_scale[/code] for the point with the given id.", "name": "set_point_weight_scale", "return_": {"description": "", "type": "void"}}], "name": "AStar", "signals": [], "tutorials": {"links": []}}, "AcceptDialog": {"brief_description": "Base dialog for user notification.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result.", "inherits": "WindowDialog", "members": [{"description": "If [code]true[/code] the dialog is hidden when the OK button is pressed. You can set it to [code]false[/code] if you want to do e.g. input validation when receiving the [signal confirmed] signal, and handle hiding the dialog in your own logic. Default value: [code]true[/code].\n\t\t\tNote: Some nodes derived from this class can have a different default value, and potentially their own built-in logic overriding this setting. For example [FileDialog] defaults to [code]false[/code], and has its own input validation code that is called when you press OK, which eventually hides the dialog if the input is valid. As such this property can't be used in [FileDialog] to disable hiding the dialog when pressing OK.", "getter": "get_hide_on_ok", "name": "dialog_hide_on_ok", "setter": "set_hide_on_ok", "type": "bool"}, {"description": "The text displayed by this dialog.", "getter": "get_text", "name": "dialog_text", "setter": "set_text", "type": "String"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}, {"default": "false", "description": "", "index": "1", "name": "right", "type": "bool"}, {"default": "\"\"", "description": "", "index": "2", "name": "action", "type": "String"}], "description": "Adds a button with label [i]text[/i] and a custom [i]action[/i] to the dialog and returns the created button. [i]action[/i] will be passed to the [signal custom_action] signal when pressed.\n\t\t\t\tIf [code]true[/code], [i]right[/i] will place the button to the right of any sibling buttons. Default value: [code]false[/code].", "name": "add_button", "return_": {"description": "", "type": "Button"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Adds a button with label [i]name[/i] and a cancel action to the dialog and returns the created button.", "name": "add_cancel", "return_": {"description": "", "type": "Button"}}, {"arguments": [], "description": "Return the label used for built-in text.", "name": "get_label", "return_": {"description": "", "type": "Label"}}, {"arguments": [], "description": "Return the OK Button.", "name": "get_ok", "return_": {"description": "", "type": "Button"}}, {"arguments": [{"description": "", "index": "0", "name": "line_edit", "type": "Node"}], "description": "Registers a [LineEdit] in the dialog. When the enter key is pressed, the dialog will be accepted.", "name": "register_text_enter", "return_": {"description": "", "type": "void"}}], "name": "AcceptDialog", "signals": [{"arguments": [], "description": "Emitted when the dialog is accepted, i.e. the OK button is pressed.", "name": "confirmed"}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Emitted when a custom button is pressed. See [method add_button].", "name": "custom_action"}], "tutorials": {"links": []}}, "AnimatedSprite": {"brief_description": "Sprite node that can use multiple textures for animation.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel.", "inherits": "Node2D", "members": [{"description": "The current animation from the [code]frames[/code] resource. If this value changes, the [code]frame[/code] counter is reset.", "getter": "get_animation", "name": "animation", "setter": "set_animation", "type": "String"}, {"description": "If [code]true[/code] texture will be centered. Default value: [code]true[/code].", "getter": "is_centered", "name": "centered", "setter": "set_centered", "type": "bool"}, {"description": "If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code].", "getter": "is_flipped_h", "name": "flip_h", "setter": "set_flip_h", "type": "bool"}, {"description": "If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code].", "getter": "is_flipped_v", "name": "flip_v", "setter": "set_flip_v", "type": "bool"}, {"description": "The displayed animation frame's index.", "getter": "get_frame", "name": "frame", "setter": "set_frame", "type": "int"}, {"description": "The [SpriteFrames] resource containing the animation(s).", "getter": "get_sprite_frames", "name": "frames", "setter": "set_sprite_frames", "type": "SpriteFrames"}, {"description": "The texture's drawing offset.", "getter": "get_offset", "name": "offset", "setter": "set_offset", "type": "Vector2"}, {"description": "If [code]true[/code] the [member animation] is currently playing.", "getter": "_is_playing", "name": "playing", "setter": "_set_playing", "type": "bool"}, {"description": "", "getter": "get_speed_scale", "name": "speed_scale", "setter": "set_speed_scale", "type": "float"}], "methods": [{"arguments": [], "description": "Return true if an animation if currently being played.", "name": "is_playing", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"default": "\"\"", "description": "", "index": "0", "name": "anim", "type": "String"}], "description": "Play the animation set in parameter. If no parameter is provided, the current animation is played.", "name": "play", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Stop the current animation (does not reset the frame counter).", "name": "stop", "return_": {"description": "", "type": "void"}}], "name": "AnimatedSprite", "signals": [{"arguments": [], "description": "Emitted when the animation is finished (when it plays the last frame). If the animation is looping, this signal is emitted every time the last frame is drawn.", "name": "animation_finished"}, {"arguments": [], "description": "Emitted when [member frame] changed.", "name": "frame_changed"}], "tutorials": {"links": []}}, "AnimatedSprite3D": {"brief_description": "2D sprite node in 3D world, that can use multiple 2D textures for animation.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel.", "inherits": "SpriteBase3D", "members": [{"description": "The current animation from the [code]frames[/code] resource. If this value changes, the [code]frame[/code] counter is reset.", "getter": "get_animation", "name": "animation", "setter": "set_animation", "type": "String"}, {"description": "The displayed animation frame's index.", "getter": "get_frame", "name": "frame", "setter": "set_frame", "type": "int"}, {"description": "The [SpriteFrames] resource containing the animation(s).", "getter": "get_sprite_frames", "name": "frames", "setter": "set_sprite_frames", "type": "SpriteFrames"}, {"description": "If [code]true[/code] the [member animation] is currently playing.", "getter": "_is_playing", "name": "playing", "setter": "_set_playing", "type": "bool"}], "methods": [{"arguments": [], "description": "Return true if an animation if currently being played.", "name": "is_playing", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"default": "\"\"", "description": "", "index": "0", "name": "anim", "type": "String"}], "description": "Play the animation set in parameter. If no parameter is provided, the current animation is played.", "name": "play", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Stop the current animation (does not reset the frame counter).", "name": "stop", "return_": {"description": "", "type": "void"}}], "name": "AnimatedSprite3D", "signals": [{"arguments": [], "description": "Emitted when [member frame] changed.", "name": "frame_changed"}], "tutorials": {"links": []}}, "AnimatedTexture": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Texture", "members": [{"description": "", "getter": "get_fps", "name": "fps", "setter": "set_fps", "type": "float"}, {"description": "", "getter": "get_frame_delay", "name": "frame_0/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_0/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_1/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_1/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_10/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_10/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_100/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_100/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_101/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_101/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_102/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_102/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_103/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_103/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_104/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_104/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_105/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_105/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_106/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_106/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_107/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_107/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_108/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_108/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_109/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_109/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_11/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_11/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_110/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_110/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_111/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_111/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_112/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_112/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_113/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_113/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_114/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_114/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_115/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_115/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_116/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_116/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_117/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_117/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_118/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_118/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_119/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_119/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_12/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_12/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_120/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_120/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_121/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_121/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_122/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_122/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_123/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_123/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_124/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_124/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_125/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_125/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_126/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_126/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_127/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_127/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_128/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_128/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_129/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_129/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_13/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_13/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_130/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_130/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_131/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_131/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_132/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_132/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_133/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_133/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_134/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_134/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_135/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_135/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_136/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_136/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_137/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_137/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_138/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_138/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_139/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_139/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_14/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_14/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_140/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_140/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_141/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_141/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_142/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_142/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_143/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_143/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_144/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_144/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_145/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_145/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_146/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_146/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_147/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_147/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_148/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_148/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_149/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_149/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_15/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_15/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_150/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_150/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_151/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_151/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_152/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_152/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_153/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_153/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_154/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_154/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_155/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_155/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_156/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_156/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_157/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_157/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_158/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_158/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_159/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_159/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_16/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_16/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_160/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_160/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_161/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_161/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_162/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_162/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_163/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_163/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_164/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_164/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_165/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_165/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_166/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_166/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_167/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_167/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_168/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_168/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_169/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_169/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_17/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_17/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_170/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_170/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_171/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_171/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_172/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_172/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_173/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_173/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_174/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_174/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_175/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_175/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_176/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_176/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_177/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_177/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_178/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_178/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_179/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_179/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_18/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_18/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_180/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_180/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_181/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_181/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_182/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_182/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_183/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_183/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_184/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_184/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_185/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_185/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_186/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_186/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_187/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_187/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_188/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_188/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_189/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_189/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_19/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_19/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_190/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_190/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_191/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_191/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_192/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_192/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_193/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_193/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_194/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_194/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_195/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_195/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_196/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_196/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_197/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_197/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_198/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_198/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_199/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_199/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_2/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_2/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_20/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_20/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_200/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_200/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_201/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_201/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_202/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_202/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_203/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_203/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_204/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_204/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_205/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_205/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_206/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_206/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_207/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_207/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_208/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_208/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_209/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_209/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_21/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_21/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_210/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_210/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_211/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_211/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_212/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_212/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_213/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_213/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_214/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_214/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_215/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_215/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_216/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_216/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_217/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_217/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_218/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_218/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_219/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_219/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_22/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_22/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_220/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_220/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_221/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_221/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_222/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_222/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_223/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_223/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_224/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_224/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_225/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_225/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_226/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_226/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_227/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_227/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_228/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_228/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_229/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_229/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_23/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_23/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_230/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_230/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_231/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_231/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_232/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_232/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_233/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_233/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_234/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_234/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_235/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_235/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_236/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_236/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_237/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_237/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_238/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_238/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_239/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_239/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_24/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_24/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_240/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_240/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_241/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_241/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_242/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_242/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_243/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_243/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_244/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_244/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_245/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_245/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_246/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_246/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_247/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_247/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_248/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_248/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_249/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_249/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_25/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_25/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_250/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_250/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_251/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_251/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_252/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_252/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_253/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_253/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_254/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_254/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_255/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_255/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_26/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_26/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_27/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_27/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_28/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_28/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_29/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_29/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_3/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_3/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_30/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_30/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_31/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_31/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_32/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_32/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_33/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_33/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_34/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_34/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_35/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_35/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_36/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_36/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_37/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_37/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_38/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_38/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_39/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_39/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_4/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_4/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_40/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_40/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_41/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_41/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_42/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_42/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_43/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_43/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_44/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_44/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_45/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_45/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_46/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_46/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_47/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_47/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_48/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_48/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_49/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_49/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_5/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_5/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_50/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_50/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_51/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_51/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_52/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_52/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_53/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_53/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_54/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_54/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_55/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_55/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_56/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_56/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_57/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_57/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_58/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_58/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_59/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_59/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_6/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_6/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_60/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_60/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_61/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_61/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_62/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_62/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_63/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_63/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_64/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_64/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_65/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_65/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_66/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_66/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_67/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_67/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_68/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_68/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_69/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_69/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_7/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_7/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_70/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_70/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_71/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_71/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_72/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_72/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_73/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_73/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_74/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_74/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_75/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_75/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_76/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_76/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_77/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_77/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_78/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_78/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_79/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_79/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_8/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_8/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_80/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_80/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_81/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_81/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_82/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_82/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_83/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_83/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_84/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_84/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_85/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_85/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_86/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_86/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_87/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_87/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_88/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_88/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_89/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_89/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_9/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_9/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_90/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_90/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_91/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_91/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_92/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_92/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_93/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_93/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_94/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_94/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_95/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_95/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_96/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_96/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_97/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_97/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_98/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_98/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frame_delay", "name": "frame_99/delay_sec", "setter": "set_frame_delay", "type": "float"}, {"description": "", "getter": "get_frame_texture", "name": "frame_99/texture", "setter": "set_frame_texture", "type": "Texture"}, {"description": "", "getter": "get_frames", "name": "frames", "setter": "set_frames", "type": "int"}], "methods": [], "name": "AnimatedTexture", "signals": [], "tutorials": {"links": []}}, "Animation": {"brief_description": "Contains data used to animate everything in the engine.", "category": "Core", "constants": [{"description": "Value tracks set values in node properties, but only those which can be Interpolated.", "enum": "TrackType", "name": "TYPE_VALUE", "value": "0"}, {"description": "Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are Interpolated.", "enum": "TrackType", "name": "TYPE_TRANSFORM", "value": "1"}, {"description": "Method tracks call functions with given arguments per key.", "enum": "TrackType", "name": "TYPE_METHOD", "value": "2"}, {"description": "", "enum": "TrackType", "name": "TYPE_BEZIER", "value": "3"}, {"description": "", "enum": "TrackType", "name": "TYPE_AUDIO", "value": "4"}, {"description": "", "enum": "TrackType", "name": "TYPE_ANIMATION", "value": "5"}, {"description": "No interpolation (nearest value).", "enum": "InterpolationType", "name": "INTERPOLATION_NEAREST", "value": "0"}, {"description": "Linear interpolation.", "enum": "InterpolationType", "name": "INTERPOLATION_LINEAR", "value": "1"}, {"description": "Cubic interpolation.", "enum": "InterpolationType", "name": "INTERPOLATION_CUBIC", "value": "2"}, {"description": "Update between keyframes.", "enum": "UpdateMode", "name": "UPDATE_CONTINUOUS", "value": "0"}, {"description": "Update at the keyframes and hold the value.", "enum": "UpdateMode", "name": "UPDATE_DISCRETE", "value": "1"}, {"description": "Update at the keyframes.", "enum": "UpdateMode", "name": "UPDATE_TRIGGER", "value": "2"}, {"description": "", "enum": "UpdateMode", "name": "UPDATE_CAPTURE", "value": "3"}], "demos": {"links": []}, "description": "An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.\n\t\tAnimations are just data containers, and must be added to odes such as an [AnimationPlayer] or [AnimationTreePlayer] to be played back.", "inherits": "Resource", "members": [{"description": "The total length of the animation (in seconds). Note that length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping.", "getter": "get_length", "name": "length", "setter": "set_length", "type": "float"}, {"description": "A flag indicating that the animation must loop. This is uses for correct interpolation of animation cycles, and for hinting the player that it must restart the animation.", "getter": "has_loop", "name": "loop", "setter": "set_loop", "type": "bool"}, {"description": "The animation step value.", "getter": "get_step", "name": "step", "setter": "set_step", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"default": "-1", "description": "", "index": "1", "name": "at_position", "type": "int"}], "description": "Add a track to the Animation. The track type must be specified as any of the values in the TYPE_* enumeration.", "name": "add_track", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "", "name": "animation_track_get_key_animation", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "track", "type": "int"}, {"description": "", "index": "1", "name": "time", "type": "float"}, {"description": "", "index": "2", "name": "animation", "type": "String"}], "description": "", "name": "animation_track_insert_key", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}, {"description": "", "index": "2", "name": "animation", "type": "String"}], "description": "", "name": "animation_track_set_key_animation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "", "name": "audio_track_get_key_end_offset", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "", "name": "audio_track_get_key_start_offset", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "", "name": "audio_track_get_key_stream", "qualifiers": "const", "return_": {"description": "", "type": "Resource"}}, {"arguments": [{"description": "", "index": "0", "name": "track", "type": "int"}, {"description": "", "index": "1", "name": "time", "type": "float"}, {"description": "", "index": "2", "name": "stream", "type": "Resource"}, {"default": "0", "description": "", "index": "3", "name": "start_offset", "type": "float"}, {"default": "0", "description": "", "index": "4", "name": "end_offset", "type": "float"}], "description": "", "name": "audio_track_insert_key", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}, {"description": "", "index": "2", "name": "offset", "type": "float"}], "description": "", "name": "audio_track_set_key_end_offset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}, {"description": "", "index": "2", "name": "offset", "type": "float"}], "description": "", "name": "audio_track_set_key_start_offset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}, {"description": "", "index": "2", "name": "stream", "type": "Resource"}], "description": "", "name": "audio_track_set_key_stream", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "", "name": "bezier_track_get_key_in_handle", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "", "name": "bezier_track_get_key_out_handle", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "", "name": "bezier_track_get_key_value", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "track", "type": "int"}, {"description": "", "index": "1", "name": "time", "type": "float"}, {"description": "", "index": "2", "name": "value", "type": "float"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "3", "name": "in_handle", "type": "Vector2"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "4", "name": "out_handle", "type": "Vector2"}], "description": "", "name": "bezier_track_insert_key", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "track", "type": "int"}, {"description": "", "index": "1", "name": "time", "type": "float"}], "description": "", "name": "bezier_track_interpolate", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}, {"description": "", "index": "2", "name": "in_handle", "type": "Vector2"}], "description": "", "name": "bezier_track_set_key_in_handle", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}, {"description": "", "index": "2", "name": "out_handle", "type": "Vector2"}], "description": "", "name": "bezier_track_set_key_out_handle", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "", "name": "bezier_track_set_key_value", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clear the animation (clear all tracks and reset all).", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "track", "type": "int"}, {"description": "", "index": "1", "name": "to_animation", "type": "Animation"}], "description": "Adds a new track that is a copy of the given track from [code]to_animation[/code].", "name": "copy_track", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "NodePath"}], "description": "Return the index of the specified track. If the track is not found, return -1.", "name": "find_track", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the amount of tracks in the animation.", "name": "get_track_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "time_sec", "type": "float"}, {"description": "", "index": "2", "name": "delta", "type": "float"}], "description": "Return all the key indices of a method track, given a position and delta time.", "name": "method_track_get_key_indices", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "Return the method name of a method track.", "name": "method_track_get_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "Return the arguments values to be called on a method track for a given key in a given track.", "name": "method_track_get_params", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Remove a track by specifying the track index.", "name": "remove_track", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "time", "type": "float"}, {"default": "false", "description": "", "index": "2", "name": "exact", "type": "bool"}], "description": "Find the key index by time in a given track. Optionally, only find it if the exact time is given.", "name": "track_find_key", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns [code]true[/code] if the track at [code]idx[/code] wraps the interpolation loop. Default value: [code]true[/code].", "name": "track_get_interpolation_loop_wrap", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the interpolation type of a given track, from the INTERPOLATION_* enum.", "name": "track_get_interpolation_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the amount of keys in a given track.", "name": "track_get_key_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "Return the time at which the key is located.", "name": "track_get_key_time", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "Return the transition curve (easing) for a specific key (see built-in math function \"ease\").", "name": "track_get_key_transition", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "Return the value of a given key in a given track.", "name": "track_get_key_value", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Get the path of a track. for more information on the path format, see [method track_set_path]", "name": "track_get_path", "qualifiers": "const", "return_": {"description": "", "type": "NodePath"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Get the type of a track.", "name": "track_get_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "time", "type": "float"}, {"description": "", "index": "2", "name": "key", "type": "Variant"}, {"default": "1", "description": "", "index": "3", "name": "transition", "type": "float"}], "description": "Insert a generic key in a given track.", "name": "track_insert_key", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns [code]true[/code] if the track at index [code]idx[/code] is enabled.", "name": "track_is_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return true if the given track is imported. Else, return false.", "name": "track_is_imported", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Move a track down.", "name": "track_move_down", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Move a track up.", "name": "track_move_up", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}], "description": "Remove a key by index in a given track.", "name": "track_remove_key", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "position", "type": "float"}], "description": "Remove a key by position (seconds) in a given track.", "name": "track_remove_key_at_position", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "Enables/disables the given track. Tracks are enabled by default.", "name": "track_set_enabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "imported", "type": "bool"}], "description": "Set the given track as imported or not.", "name": "track_set_imported", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "interpolation", "type": "bool"}], "description": "If [code]true[/code] the track at [code]idx[/code] wraps the interpolation loop.", "name": "track_set_interpolation_loop_wrap", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "interpolation", "type": "int"}], "description": "Set the interpolation type of a given track, from the INTERPOLATION_* enum.", "name": "track_set_interpolation_type", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key_idx", "type": "int"}, {"description": "", "index": "2", "name": "transition", "type": "float"}], "description": "Set the transition curve (easing) for a specific key (see built-in math function \"ease\").", "name": "track_set_key_transition", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "key", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Set the value of an existing key.", "name": "track_set_key_value", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "path", "type": "NodePath"}], "description": "Set the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by \":\".\n\t\t\t\t[b]Example:[/b] \"character/skeleton:ankle\" or \"character/mesh:transform/local\".", "name": "track_set_path", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "with_idx", "type": "int"}], "description": "", "name": "track_swap", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "time", "type": "float"}, {"description": "", "index": "2", "name": "location", "type": "Vector3"}, {"description": "", "index": "3", "name": "rotation", "type": "Quat"}, {"description": "", "index": "4", "name": "scale", "type": "Vector3"}], "description": "Insert a transform key for a transform track.", "name": "transform_track_insert_key", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "time_sec", "type": "float"}], "description": "Return the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position ([Vector3]), rotation ([Quat]) and scale ([Vector3]).", "name": "transform_track_interpolate", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "time_sec", "type": "float"}, {"description": "", "index": "2", "name": "delta", "type": "float"}], "description": "Return all the key indices of a value track, given a position and delta time.", "name": "value_track_get_key_indices", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the update mode of a value track.", "name": "value_track_get_update_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Set the update mode (UPDATE_*) of a value track.", "name": "value_track_set_update_mode", "return_": {"description": "", "type": "void"}}], "name": "Animation", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/animation/index.html"}]}}, "AnimationNode": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "FilterAction", "name": "FILTER_IGNORE", "value": "0"}, {"description": "", "enum": "FilterAction", "name": "FILTER_PASS", "value": "1"}, {"description": "", "enum": "FilterAction", "name": "FILTER_STOP", "value": "2"}, {"description": "", "enum": "FilterAction", "name": "FILTER_BLEND", "value": "3"}], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [{"description": "", "getter": "is_filter_enabled", "name": "filter_enabled", "setter": "set_filter_enabled", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "add_input", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "animation", "type": "String"}, {"description": "", "index": "1", "name": "time", "type": "float"}, {"description": "", "index": "2", "name": "delta", "type": "float"}, {"description": "", "index": "3", "name": "seeked", "type": "bool"}, {"description": "", "index": "4", "name": "blend", "type": "float"}], "description": "", "name": "blend_animation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "input_index", "type": "int"}, {"description": "", "index": "1", "name": "time", "type": "float"}, {"description": "", "index": "2", "name": "seek", "type": "bool"}, {"description": "", "index": "3", "name": "blend", "type": "float"}, {"default": "0", "description": "", "index": "4", "name": "filter", "type": "int"}, {"default": "true", "description": "", "index": "5", "name": "optimize", "type": "bool"}], "description": "", "name": "blend_input", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "node", "type": "AnimationNode"}, {"description": "", "index": "2", "name": "time", "type": "float"}, {"description": "", "index": "3", "name": "seek", "type": "bool"}, {"description": "", "index": "4", "name": "blend", "type": "float"}, {"default": "0", "description": "", "index": "5", "name": "filter", "type": "int"}, {"default": "true", "description": "", "index": "6", "name": "optimize", "type": "bool"}], "description": "", "name": "blend_node", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "", "name": "get_caption", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "get_input_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "input", "type": "int"}], "description": "", "name": "get_input_name", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "get_parameter", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "", "name": "has_filter", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "NodePath"}], "description": "", "name": "is_path_filtered", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "time", "type": "float"}, {"description": "", "index": "1", "name": "seek", "type": "bool"}], "description": "", "name": "process", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "", "name": "remove_input", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "NodePath"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "set_filter_path", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "", "name": "set_parameter", "return_": {"description": "", "type": "void"}}], "name": "AnimationNode", "signals": [{"arguments": [], "description": "", "name": "removed_from_graph"}, {"arguments": [], "description": "", "name": "tree_changed"}], "tutorials": {"links": []}}, "AnimationNodeAdd2": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationNode", "members": [{"description": "", "getter": "is_using_sync", "name": "sync", "setter": "set_use_sync", "type": "bool"}], "methods": [], "name": "AnimationNodeAdd2", "signals": [], "tutorials": {"links": []}}, "AnimationNodeAdd3": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationNode", "members": [{"description": "", "getter": "is_using_sync", "name": "sync", "setter": "set_use_sync", "type": "bool"}], "methods": [], "name": "AnimationNodeAdd3", "signals": [], "tutorials": {"links": []}}, "AnimationNodeAnimation": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationRootNode", "members": [{"description": "", "getter": "get_animation", "name": "animation", "setter": "set_animation", "type": "String"}], "methods": [{"arguments": [], "description": "", "name": "get_playback_time", "qualifiers": "const", "return_": {"description": "", "type": "float"}}], "name": "AnimationNodeAnimation", "signals": [], "tutorials": {"links": []}}, "AnimationNodeBlend2": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationNode", "members": [{"description": "", "getter": "is_using_sync", "name": "sync", "setter": "set_use_sync", "type": "bool"}], "methods": [], "name": "AnimationNodeBlend2", "signals": [], "tutorials": {"links": []}}, "AnimationNodeBlend3": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationNode", "members": [{"description": "", "getter": "is_using_sync", "name": "sync", "setter": "set_use_sync", "type": "bool"}], "methods": [], "name": "AnimationNodeBlend3", "signals": [], "tutorials": {"links": []}}, "AnimationNodeBlendSpace1D": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationRootNode", "members": [{"description": "", "getter": "get_max_space", "name": "max_space", "setter": "set_max_space", "type": "float"}, {"description": "", "getter": "get_min_space", "name": "min_space", "setter": "set_min_space", "type": "float"}, {"description": "", "getter": "get_snap", "name": "snap", "setter": "set_snap", "type": "float"}, {"description": "", "getter": "get_value_label", "name": "value_label", "setter": "set_value_label", "type": "String"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "node", "type": "AnimationRootNode"}, {"description": "", "index": "1", "name": "pos", "type": "float"}, {"default": "-1", "description": "", "index": "2", "name": "at_index", "type": "int"}], "description": "", "name": "add_blend_point", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_blend_point_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}], "description": "", "name": "get_blend_point_node", "qualifiers": "const", "return_": {"description": "", "type": "AnimationRootNode"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}], "description": "", "name": "get_blend_point_position", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}], "description": "", "name": "remove_blend_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}, {"description": "", "index": "1", "name": "node", "type": "AnimationRootNode"}], "description": "", "name": "set_blend_point_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}, {"description": "", "index": "1", "name": "pos", "type": "float"}], "description": "", "name": "set_blend_point_position", "return_": {"description": "", "type": "void"}}], "name": "AnimationNodeBlendSpace1D", "signals": [], "tutorials": {"links": []}}, "AnimationNodeBlendSpace2D": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationRootNode", "members": [{"description": "", "getter": "get_auto_triangles", "name": "auto_triangles", "setter": "set_auto_triangles", "type": "bool"}, {"description": "", "getter": "get_max_space", "name": "max_space", "setter": "set_max_space", "type": "Vector2"}, {"description": "", "getter": "get_min_space", "name": "min_space", "setter": "set_min_space", "type": "Vector2"}, {"description": "", "getter": "get_snap", "name": "snap", "setter": "set_snap", "type": "Vector2"}, {"description": "", "getter": "get_x_label", "name": "x_label", "setter": "set_x_label", "type": "String"}, {"description": "", "getter": "get_y_label", "name": "y_label", "setter": "set_y_label", "type": "String"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "node", "type": "AnimationRootNode"}, {"description": "", "index": "1", "name": "pos", "type": "Vector2"}, {"default": "-1", "description": "", "index": "2", "name": "at_index", "type": "int"}], "description": "", "name": "add_blend_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "int"}, {"description": "", "index": "1", "name": "y", "type": "int"}, {"description": "", "index": "2", "name": "z", "type": "int"}, {"default": "-1", "description": "", "index": "3", "name": "at_index", "type": "int"}], "description": "", "name": "add_triangle", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_blend_point_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}], "description": "", "name": "get_blend_point_node", "qualifiers": "const", "return_": {"description": "", "type": "AnimationRootNode"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}], "description": "", "name": "get_blend_point_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "", "name": "get_triangle_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "triangle", "type": "int"}, {"description": "", "index": "1", "name": "point", "type": "int"}], "description": "", "name": "get_triangle_point", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}], "description": "", "name": "remove_blend_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "triangle", "type": "int"}], "description": "", "name": "remove_triangle", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}, {"description": "", "index": "1", "name": "node", "type": "AnimationRootNode"}], "description": "", "name": "set_blend_point_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}, {"description": "", "index": "1", "name": "pos", "type": "Vector2"}], "description": "", "name": "set_blend_point_position", "return_": {"description": "", "type": "void"}}], "name": "AnimationNodeBlendSpace2D", "signals": [], "tutorials": {"links": []}}, "AnimationNodeBlendTree": {"brief_description": "", "category": "Core", "constants": [{"description": "", "name": "CONNECTION_OK", "value": "0"}, {"description": "", "name": "CONNECTION_ERROR_NO_INPUT", "value": "1"}, {"description": "", "name": "CONNECTION_ERROR_NO_INPUT_INDEX", "value": "2"}, {"description": "", "name": "CONNECTION_ERROR_NO_OUTPUT", "value": "3"}, {"description": "", "name": "CONNECTION_ERROR_SAME_NODE", "value": "4"}, {"description": "", "name": "CONNECTION_ERROR_CONNECTION_EXISTS", "value": "5"}], "demos": {"links": []}, "description": "", "inherits": "AnimationRootNode", "members": [{"description": "", "getter": "get_graph_offset", "name": "graph_offset", "setter": "set_graph_offset", "type": "Vector2"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "node", "type": "AnimationNode"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "2", "name": "position", "type": "Vector2"}], "description": "", "name": "add_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "input_node", "type": "String"}, {"description": "", "index": "1", "name": "input_index", "type": "int"}, {"description": "", "index": "2", "name": "output_node", "type": "String"}], "description": "", "name": "connect_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "input_node", "type": "String"}, {"description": "", "index": "1", "name": "input_index", "type": "int"}], "description": "", "name": "disconnect_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "get_node", "qualifiers": "const", "return_": {"description": "", "type": "AnimationNode"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "get_node_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_node", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "remove_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "new_name", "type": "String"}], "description": "", "name": "rename_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}], "description": "", "name": "set_node_position", "return_": {"description": "", "type": "void"}}], "name": "AnimationNodeBlendTree", "signals": [], "tutorials": {"links": []}}, "AnimationNodeOneShot": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "MixMode", "name": "MIX_MODE_BLEND", "value": "0"}, {"description": "", "enum": "MixMode", "name": "MIX_MODE_ADD", "value": "1"}], "demos": {"links": []}, "description": "", "inherits": "AnimationNode", "members": [{"description": "", "getter": "has_autorestart", "name": "autorestart", "setter": "set_autorestart", "type": "bool"}, {"description": "", "getter": "get_autorestart_delay", "name": "autorestart_delay", "setter": "set_autorestart_delay", "type": "float"}, {"description": "", "getter": "get_autorestart_random_delay", "name": "autorestart_random_delay", "setter": "set_autorestart_random_delay", "type": "float"}, {"description": "", "getter": "get_fadein_time", "name": "fadein_time", "setter": "set_fadein_time", "type": "float"}, {"description": "", "getter": "get_fadeout_time", "name": "fadeout_time", "setter": "set_fadeout_time", "type": "float"}, {"description": "", "getter": "is_using_sync", "name": "sync", "setter": "set_use_sync", "type": "bool"}], "methods": [{"arguments": [], "description": "", "name": "get_mix_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "mode", "type": "int"}], "description": "", "name": "set_mix_mode", "return_": {"description": "", "type": "void"}}], "name": "AnimationNodeOneShot", "signals": [], "tutorials": {"links": []}}, "AnimationNodeOutput": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationNode", "members": [], "methods": [], "name": "AnimationNodeOutput", "signals": [], "tutorials": {"links": []}}, "AnimationNodeStateMachine": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationRootNode", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "node", "type": "AnimationNode"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "2", "name": "position", "type": "Vector2"}], "description": "", "name": "add_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "to", "type": "String"}, {"description": "", "index": "2", "name": "transition", "type": "AnimationNodeStateMachineTransition"}], "description": "", "name": "add_transition", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_end_node", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "get_graph_offset", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "get_node", "qualifiers": "const", "return_": {"description": "", "type": "AnimationNode"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "AnimationNode"}], "description": "", "name": "get_node_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "get_node_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "", "name": "get_start_node", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_transition", "qualifiers": "const", "return_": {"description": "", "type": "AnimationNodeStateMachineTransition"}}, {"arguments": [], "description": "", "name": "get_transition_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_transition_from", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_transition_to", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_node", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "to", "type": "String"}], "description": "", "name": "has_transition", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "remove_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "to", "type": "String"}], "description": "", "name": "remove_transition", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "remove_transition_by_index", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "new_name", "type": "String"}], "description": "", "name": "rename_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "set_end_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "Vector2"}], "description": "", "name": "set_graph_offset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}], "description": "", "name": "set_node_position", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "set_start_node", "return_": {"description": "", "type": "void"}}], "name": "AnimationNodeStateMachine", "signals": [], "tutorials": {"links": []}}, "AnimationNodeStateMachinePlayback": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [], "methods": [{"arguments": [], "description": "", "name": "get_current_node", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "get_travel_path", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [], "description": "", "name": "is_playing", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "String"}], "description": "", "name": "start", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "stop", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "to_node", "type": "String"}], "description": "", "name": "travel", "return_": {"description": "", "type": "void"}}], "name": "AnimationNodeStateMachinePlayback", "signals": [], "tutorials": {"links": []}}, "AnimationNodeStateMachineTransition": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "SwitchMode", "name": "SWITCH_MODE_IMMEDIATE", "value": "0"}, {"description": "", "enum": "SwitchMode", "name": "SWITCH_MODE_SYNC", "value": "1"}, {"description": "", "enum": "SwitchMode", "name": "SWITCH_MODE_AT_END", "value": "2"}], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [{"description": "", "getter": "get_advance_condition", "name": "advance_condition", "setter": "set_advance_condition", "type": "String"}, {"description": "", "getter": "has_auto_advance", "name": "auto_advance", "setter": "set_auto_advance", "type": "bool"}, {"description": "", "getter": "is_disabled", "name": "disabled", "setter": "set_disabled", "type": "bool"}, {"description": "", "getter": "get_priority", "name": "priority", "setter": "set_priority", "type": "int"}, {"description": "", "getter": "get_switch_mode", "name": "switch_mode", "setter": "set_switch_mode", "type": "int"}, {"description": "", "getter": "get_xfade_time", "name": "xfade_time", "setter": "set_xfade_time", "type": "float"}], "methods": [], "name": "AnimationNodeStateMachineTransition", "signals": [{"arguments": [], "description": "", "name": "advance_condition_changed"}], "tutorials": {"links": []}}, "AnimationNodeTimeScale": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationNode", "members": [], "methods": [], "name": "AnimationNodeTimeScale", "signals": [], "tutorials": {"links": []}}, "AnimationNodeTimeSeek": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationNode", "members": [], "methods": [], "name": "AnimationNodeTimeSeek", "signals": [], "tutorials": {"links": []}}, "AnimationNodeTransition": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationNode", "members": [{"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_0/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_0/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_1/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_1/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_10/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_10/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_11/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_11/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_12/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_12/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_13/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_13/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_14/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_14/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_15/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_15/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_16/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_16/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_17/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_17/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_18/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_18/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_19/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_19/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_2/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_2/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_20/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_20/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_21/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_21/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_22/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_22/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_23/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_23/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_24/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_24/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_25/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_25/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_26/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_26/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_27/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_27/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_28/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_28/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_29/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_29/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_3/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_3/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_30/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_30/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_31/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_31/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_4/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_4/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_5/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_5/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_6/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_6/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_7/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_7/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_8/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_8/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "is_input_set_as_auto_advance", "name": "input_9/auto_advance", "setter": "set_input_as_auto_advance", "type": "bool"}, {"description": "", "getter": "get_input_caption", "name": "input_9/name", "setter": "set_input_caption", "type": "String"}, {"description": "", "getter": "get_enabled_inputs", "name": "input_count", "setter": "set_enabled_inputs", "type": "int"}, {"description": "", "getter": "get_cross_fade_time", "name": "xfade_time", "setter": "set_cross_fade_time", "type": "float"}], "methods": [], "name": "AnimationNodeTransition", "signals": [], "tutorials": {"links": []}}, "AnimationPlayer": {"brief_description": "Container and player of [Animation] resources.", "category": "Core", "constants": [{"description": "Process animation during the physics process. This is especially useful when animating physics bodies.", "enum": "AnimationProcessMode", "name": "ANIMATION_PROCESS_PHYSICS", "value": "0"}, {"description": "Process animation during the idle process.", "enum": "AnimationProcessMode", "name": "ANIMATION_PROCESS_IDLE", "value": "1"}, {"description": "Do not process animation. Use the 'advance' method to process the animation manually.", "enum": "AnimationProcessMode", "name": "ANIMATION_PROCESS_MANUAL", "value": "2"}], "demos": {"links": []}, "description": "An animation player is used for general purpose playback of [Animation] resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in different channels.", "inherits": "Node", "members": [{"description": "If playing, the current animation; otherwise, the animation last played. When set, would change the animation, but would not play it unless currently playing. See also [member current_animation].", "getter": "get_assigned_animation", "name": "assigned_animation", "setter": "set_assigned_animation", "type": "String"}, {"description": "The name of the animation to play when the scene loads. Default value: [code]\"\"[/code].", "getter": "get_autoplay", "name": "autoplay", "setter": "set_autoplay", "type": "String"}, {"description": "The name of the current animation, \"\" if not playing anything. When being set, does not restart the animation. See also [method play]. Default value: [code]\"\"[/code].", "getter": "get_current_animation", "name": "current_animation", "setter": "set_current_animation", "type": "String"}, {"description": "The length (in seconds) of the currently being played animation.", "getter": "get_current_animation_length", "name": "current_animation_length", "setter": "", "type": "float"}, {"description": "The position (in seconds) of the currently playing animation.", "getter": "get_current_animation_position", "name": "current_animation_position", "setter": "", "type": "float"}, {"description": "If [code]true[/code], updates animations in response to process-related notifications. Default value: [code]true[/code].", "getter": "is_active", "name": "playback_active", "setter": "set_active", "type": "bool"}, {"description": "The default time in which to blend animations. Ranges from 0 to 4096 with 0.01 precision. Default value: [code]0[/code].", "getter": "get_default_blend_time", "name": "playback_default_blend_time", "setter": "set_default_blend_time", "type": "float"}, {"description": "The process notification in which to update animations. Default value: [enum ANIMATION_PROCESS_IDLE].", "getter": "get_animation_process_mode", "name": "playback_process_mode", "setter": "set_animation_process_mode", "type": "int"}, {"description": "The speed scaling ratio. For instance, if this value is 1 then the animation plays at normal speed. If it's 0.5 then it plays at half speed. If it's 2 then it plays at double speed. Default value: [code]1[/code].", "getter": "get_speed_scale", "name": "playback_speed", "setter": "set_speed_scale", "type": "float"}, {"description": "The node from which node path references will travel. Default value: [code]\"..\"[/code].", "getter": "get_root", "name": "root_node", "setter": "set_root", "type": "NodePath"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "animation", "type": "Animation"}], "description": "Adds [code]animation[/code] to the player accessible with the key [code]name[/code].", "name": "add_animation", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}], "description": "Shifts position in the animation timeline. Delta is the time in seconds to shift.", "name": "advance", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "anim_from", "type": "String"}], "description": "Returns the name of the next animation in the queue.", "name": "animation_get_next", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "anim_from", "type": "String"}, {"description": "", "index": "1", "name": "anim_to", "type": "String"}], "description": "Triggers the [code]anim_to[/code] animation when the [code]anim_from[/code] animation completes.", "name": "animation_set_next", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "[code]AnimationPlayer[/code] caches animated nodes. It may not notice if a node disappears, so clear_caches forces it to update the cache again.", "name": "clear_caches", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clears all queued, unplayed animations.", "name": "clear_queue", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "animation", "type": "Animation"}], "description": "Returns the name of [code]animation[/code] or empty string if not found.", "name": "find_animation", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Returns the [Animation] with key [code]name[/code] or [code]null[/code] if not found.", "name": "get_animation", "qualifiers": "const", "return_": {"description": "", "type": "Animation"}}, {"arguments": [], "description": "Returns the list of stored animation names.", "name": "get_animation_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "anim_from", "type": "String"}, {"description": "", "index": "1", "name": "anim_to", "type": "String"}], "description": "Get the blend time (in seconds) between two animations, referenced by their names.", "name": "get_blend_time", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Get the actual playing speed of current animation or 0 if not playing. This speed is the [code]playback_speed[/code] property multiplied by [code]custom_speed[/code] argument specified when calling the [code]play[/code] method.", "name": "get_playing_speed", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Returns [code]true[/code] if the [code]AnimationPlayer[/code] stores an [Animation] with key [code]name[/code].", "name": "has_animation", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if playing an animation.", "name": "is_playing", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"default": "\"\"", "description": "", "index": "0", "name": "name", "type": "String"}, {"default": "-1", "description": "", "index": "1", "name": "custom_blend", "type": "float"}, {"default": "1.0", "description": "", "index": "2", "name": "custom_speed", "type": "float"}, {"default": "false", "description": "", "index": "3", "name": "from_end", "type": "bool"}], "description": "Play the animation with key [code]name[/code]. Custom speed and blend times can be set. If custom speed is negative (-1), 'from_end' being true can play the animation backwards.", "name": "play", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "\"\"", "description": "", "index": "0", "name": "name", "type": "String"}, {"default": "-1", "description": "", "index": "1", "name": "custom_blend", "type": "float"}], "description": "Play the animation with key [code]name[/code] in reverse.", "name": "play_backwards", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Queue an animation for playback once the current one is done.", "name": "queue", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Remove the animation with key [code]name[/code].", "name": "remove_animation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "newname", "type": "String"}], "description": "Rename an existing animation with key [code]name[/code] to [code]newname[/code].", "name": "rename_animation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "seconds", "type": "float"}, {"default": "false", "description": "", "index": "1", "name": "update", "type": "bool"}], "description": "Seek the animation to the [code]seconds[/code] point in time (in seconds). If [code]update[/code] is [code]true[/code], the animation updates too, otherwise it updates at process time.", "name": "seek", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "anim_from", "type": "String"}, {"description": "", "index": "1", "name": "anim_to", "type": "String"}, {"description": "", "index": "2", "name": "sec", "type": "float"}], "description": "Specify a blend time (in seconds) between two animations, referenced by their names.", "name": "set_blend_time", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "true", "description": "", "index": "0", "name": "reset", "type": "bool"}], "description": "Stop the currently playing animation. If [code]reset[/code] is [code]true[/code], the anim position is reset to [code]0[/code].", "name": "stop", "return_": {"description": "", "type": "void"}}], "name": "AnimationPlayer", "signals": [{"arguments": [{"description": "", "index": "0", "name": "old_name", "type": "String"}, {"description": "", "index": "1", "name": "new_name", "type": "String"}], "description": "If the currently being played animation changes, this signal will notify of such change.", "name": "animation_changed"}, {"arguments": [{"description": "", "index": "0", "name": "anim_name", "type": "String"}], "description": "Notifies when an animation finished playing.", "name": "animation_finished"}, {"arguments": [{"description": "", "index": "0", "name": "anim_name", "type": "String"}], "description": "Notifies when an animation starts playing.", "name": "animation_started"}, {"arguments": [], "description": "", "name": "caches_cleared"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/getting_started/step_by_step/animations.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/animation/index.html"}]}}, "AnimationRootNode": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AnimationNode", "members": [], "methods": [], "name": "AnimationRootNode", "signals": [], "tutorials": {"links": []}}, "AnimationTrackEditPlugin": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [], "name": "AnimationTrackEditPlugin", "signals": [], "tutorials": {"links": []}}, "AnimationTree": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "AnimationProcessMode", "name": "ANIMATION_PROCESS_PHYSICS", "value": "0"}, {"description": "", "enum": "AnimationProcessMode", "name": "ANIMATION_PROCESS_IDLE", "value": "1"}, {"description": "", "enum": "AnimationProcessMode", "name": "ANIMATION_PROCESS_MANUAL", "value": "2"}], "demos": {"links": []}, "description": "", "inherits": "Node", "members": [{"description": "", "getter": "is_active", "name": "active", "setter": "set_active", "type": "bool"}, {"description": "", "getter": "get_animation_player", "name": "anim_player", "setter": "set_animation_player", "type": "NodePath"}, {"description": "", "getter": "get_process_mode", "name": "process_mode", "setter": "set_process_mode", "type": "int"}, {"description": "", "getter": "get_root_motion_track", "name": "root_motion_track", "setter": "set_root_motion_track", "type": "NodePath"}, {"description": "", "getter": "get_tree_root", "name": "tree_root", "setter": "set_tree_root", "type": "AnimationNode"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}], "description": "", "name": "advance", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_root_motion_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "old_name", "type": "String"}, {"description": "", "index": "1", "name": "new_name", "type": "String"}], "description": "", "name": "rename_parameter", "return_": {"description": "", "type": "void"}}], "name": "AnimationTree", "signals": [], "tutorials": {"links": []}}, "AnimationTreePlayer": {"brief_description": "Animation Player that uses a node graph for blending Animations.", "category": "Core", "constants": [{"description": "Output node.", "enum": "NodeType", "name": "NODE_OUTPUT", "value": "0"}, {"description": "Animation node.", "enum": "NodeType", "name": "NODE_ANIMATION", "value": "1"}, {"description": "OneShot node.", "enum": "NodeType", "name": "NODE_ONESHOT", "value": "2"}, {"description": "Mix node.", "enum": "NodeType", "name": "NODE_MIX", "value": "3"}, {"description": "Blend2 node.", "enum": "NodeType", "name": "NODE_BLEND2", "value": "4"}, {"description": "Blend3 node.", "enum": "NodeType", "name": "NODE_BLEND3", "value": "5"}, {"description": "Blend4 node.", "enum": "NodeType", "name": "NODE_BLEND4", "value": "6"}, {"description": "TimeScale node.", "enum": "NodeType", "name": "NODE_TIMESCALE", "value": "7"}, {"description": "TimeSeek node.", "enum": "NodeType", "name": "NODE_TIMESEEK", "value": "8"}, {"description": "Transition node.", "enum": "NodeType", "name": "NODE_TRANSITION", "value": "9"}, {"description": "Process animation during the physics process. This is especially useful when animating physics bodies.", "enum": "AnimationProcessMode", "name": "ANIMATION_PROCESS_PHYSICS", "value": "0"}, {"description": "Process animation during the idle process.", "enum": "AnimationProcessMode", "name": "ANIMATION_PROCESS_IDLE", "value": "1"}], "demos": {"links": []}, "description": "A node graph tool for blending multiple animations bound to an [AnimationPlayer]. Especially useful for animating characters or other skeleton-based rigs. It can combine several animations to form a desired pose.\n\t\tIt takes [Animation]s from an [AnimationPlayer] node and mixes them depending on the graph.", "inherits": "Node", "members": [{"description": "If [code]true[/code] the [code]AnimationTreePlayer[/code] is able to play animations. Default value: [code]false[/code].", "getter": "is_active", "name": "active", "setter": "set_active", "type": "bool"}, {"description": "The node from which to relatively access other nodes. Default value: [code]\"..\"[/code].\n\t\t\tIt accesses the Bones, so it should point to the same Node the AnimationPlayer would point its Root Node at.", "getter": "get_base_path", "name": "base_path", "setter": "set_base_path", "type": "NodePath"}, {"description": "The path to the [AnimationPlayer] from which this [code]AnimationTreePlayer[/code] binds animations to animation nodes.\n\t\t\tOnce set, Animation nodes can be added to the AnimationTreePlayer.", "getter": "get_master_player", "name": "master_player", "setter": "set_master_player", "type": "NodePath"}, {"description": "The thread in which to update animations. Default value: [enum ANIMATION_PROCESS_IDLE].", "getter": "get_animation_process_mode", "name": "playback_process_mode", "setter": "set_animation_process_mode", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"description": "", "index": "1", "name": "id", "type": "String"}], "description": "Adds a [code]type[/code] node to the graph with name [code]id[/code].", "name": "add_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}], "description": "Shifts position in the animation timeline. Delta is the time in seconds to shift.", "name": "advance", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns the [AnimationPlayer]'s [Animation] bound to the [code]AnimationTreePlayer[/code]'s animation node with name [code]id[/code].", "name": "animation_node_get_animation", "qualifiers": "const", "return_": {"description": "", "type": "Animation"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns the name of the [member master_player]'s [Animation] bound to this animation node.", "name": "animation_node_get_master_animation", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "", "name": "animation_node_get_position", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "animation", "type": "Animation"}], "description": "Binds a new [Animation] from the [member master_player] to the [code]AnimationTreePlayer[/code]'s animation node with name [code]id[/code].", "name": "animation_node_set_animation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "path", "type": "NodePath"}, {"description": "", "index": "2", "name": "enable", "type": "bool"}], "description": "If [code]enable[/code] is [code]true[/code], the animation node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.", "name": "animation_node_set_filter_path", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "source", "type": "String"}], "description": "Binds the [Animation] named [code]source[/code] from [member master_player] to the animation node [code]id[/code]. Recalculates caches.", "name": "animation_node_set_master_animation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "dst_id", "type": "String"}, {"description": "", "index": "2", "name": "dst_input_idx", "type": "int"}], "description": "Returns whether node [code]id[/code] and [code]dst_id[/code] are connected at the specified slot.", "name": "are_nodes_connected", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns the blend amount of a Blend2 node given its name.", "name": "blend2_node_get_amount", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "blend", "type": "float"}], "description": "Sets the blend amount of a Blend2 node given its name and value.\n\t\t\t\tA Blend2 Node blends two animations with the amount between 0 and 1.\n\t\t\t\tAt 0, Output is input a.\n\t\t\t\tTowards 1, the influence of a gets lessened, the influence of b gets raised.\n\t\t\t\tAt 1, Output is input b.", "name": "blend2_node_set_amount", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "path", "type": "NodePath"}, {"description": "", "index": "2", "name": "enable", "type": "bool"}], "description": "If [code]enable[/code] is [code]true[/code], the blend2 node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.", "name": "blend2_node_set_filter_path", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns the blend amount of a Blend3 node given its name.", "name": "blend3_node_get_amount", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "blend", "type": "float"}], "description": "Sets the blend amount of a Blend3 node given its name and value.\n\t\t\t\tA Blend3 Node blends three animations with the amount between -1 and 1.\n\t\t\t\tAt -1, Output is input b-.\n\t\t\t\tFrom -1 to 0, the influence of b- gets lessened, the influence of a gets raised and the influence of b+ is 0.\n\t\t\t\tAt 0, Output is input a.\n\t\t\t\tFrom 0 to 1, the influence of a gets lessened, the influence of b+ gets raised and the influence of b+ is 0.\n\t\t\t\tAt 1, Output is input b+.", "name": "blend3_node_set_amount", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns the blend amount of a Blend4 node given its name.", "name": "blend4_node_get_amount", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "blend", "type": "Vector2"}], "description": "Sets the blend amount of a Blend4 node given its name and value.\n\t\t\t\tA Blend4 Node blends two pairs of animations.\n\t\t\t\tThe two pairs are blended like blend2 and then added together.", "name": "blend4_node_set_amount", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "dst_id", "type": "String"}, {"description": "", "index": "2", "name": "dst_input_idx", "type": "int"}], "description": "Connects node [code]id[/code] to [code]dst_id[/code] at the specified input slot.", "name": "connect_nodes", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "dst_input_idx", "type": "int"}], "description": "Disconnects nodes connected to [code]id[/code] at the specified input slot.", "name": "disconnect_nodes", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns a [PoolStringArray] containing the name of all nodes.", "name": "get_node_list", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns mix amount of a Mix node given its name.", "name": "mix_node_get_amount", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "ratio", "type": "float"}], "description": "Sets mix amount of a Mix node given its name and value.\n\t\t\t\tA Mix node adds input b to input a by a the amount given by ratio.", "name": "mix_node_set_amount", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "String"}], "description": "Check if a node exists (by name).", "name": "node_exists", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Return the input count for a given node. Different types of nodes have different amount of inputs.", "name": "node_get_input_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "idx", "type": "int"}], "description": "Return the input source for a given node input.", "name": "node_get_input_source", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns position of a node in the graph given its name.", "name": "node_get_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Get the node type, will return from NODE_* enum.", "name": "node_get_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "String"}, {"description": "", "index": "1", "name": "new_name", "type": "String"}], "description": "Rename a node in the graph.", "name": "node_rename", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "screen_position", "type": "Vector2"}], "description": "Sets position of a node in the graph given its name and position.", "name": "node_set_position", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns autostart delay of a OneShot node given its name.", "name": "oneshot_node_get_autorestart_delay", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns autostart random delay of a OneShot node given its name.", "name": "oneshot_node_get_autorestart_random_delay", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns fade in time of a OneShot node given its name.", "name": "oneshot_node_get_fadein_time", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns fade out time of a OneShot node given its name.", "name": "oneshot_node_get_fadeout_time", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns whether a OneShot node will auto restart given its name.", "name": "oneshot_node_has_autorestart", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns whether a OneShot node is active given its name.", "name": "oneshot_node_is_active", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "Sets autorestart property of a OneShot node given its name and value.", "name": "oneshot_node_set_autorestart", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "delay_sec", "type": "float"}], "description": "Sets autorestart delay of a OneShot node given its name and value in seconds.", "name": "oneshot_node_set_autorestart_delay", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "rand_sec", "type": "float"}], "description": "Sets autorestart random delay of a OneShot node given its name and value in seconds.", "name": "oneshot_node_set_autorestart_random_delay", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "time_sec", "type": "float"}], "description": "Sets fade in time of a OneShot node given its name and value in seconds.", "name": "oneshot_node_set_fadein_time", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "time_sec", "type": "float"}], "description": "Sets fade out time of a OneShot node given its name and value in seconds.", "name": "oneshot_node_set_fadeout_time", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "path", "type": "NodePath"}, {"description": "", "index": "2", "name": "enable", "type": "bool"}], "description": "If [code]enable[/code] is [code]true[/code], the oneshot node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.", "name": "oneshot_node_set_filter_path", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Starts a OneShot node given its name.", "name": "oneshot_node_start", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Stops the OneShot node with name [code]id[/code].", "name": "oneshot_node_stop", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Manually recalculates the cache of track information generated from animation nodes. Needed when external sources modify the animation nodes' state.", "name": "recompute_caches", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Removes the animation node with name [code]id[/code].", "name": "remove_node", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Resets this [code]AnimationTreePlayer[/code].", "name": "reset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns time scale value of the TimeScale node with name [code]id[/code].", "name": "timescale_node_get_scale", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "scale", "type": "float"}], "description": "Sets the time scale of the TimeScale node with name [code]id[/code] to [code]scale[/code].\n\t\t\t\tThe timescale node is used to speed [Animation]s up if the scale is above 1 or slow them down if it is below 1.\n\t\t\t\tIf applied after a blend or mix, affects all input animations to that blend or mix.", "name": "timescale_node_set_scale", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "seconds", "type": "float"}], "description": "Sets the time seek value of the TimeSeek node with name [code]id[/code] to [code]seconds[/code]\n\t\t\t\tThis functions as a seek in the [Animation] or the blend or mix of [Animation]s input in it.", "name": "timeseek_node_seek", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "input_idx", "type": "int"}], "description": "Deletes the input at [code]input_idx[/code] for the transition node with name [code]id[/code].", "name": "transition_node_delete_input", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns the index of the currently evaluated input for the transition node with name [code]id[/code].", "name": "transition_node_get_current", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns the number of inputs for the transition node with name [code]id[/code]. You can add inputs by rightclicking on the transition node.", "name": "transition_node_get_input_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}], "description": "Returns the cross fade time for the transition node with name [code]id[/code].", "name": "transition_node_get_xfade_time", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "input_idx", "type": "int"}], "description": "Returns [code]true[/code] if the input at [code]input_idx[/code] on transition node with name [code]id[/code] is set to automatically advance to the next input upon completion.", "name": "transition_node_has_input_auto_advance", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "input_idx", "type": "int"}], "description": "The transition node with name [code]id[/code] sets its current input at [code]input_idx[/code].", "name": "transition_node_set_current", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "input_idx", "type": "int"}, {"description": "", "index": "2", "name": "enable", "type": "bool"}], "description": "The transition node with name [code]id[/code] advances to its next input automatically when the input at [code]input_idx[/code] completes.", "name": "transition_node_set_input_auto_advance", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "count", "type": "int"}], "description": "Resizes the number of inputs available for the transition node with name [code]id[/code].", "name": "transition_node_set_input_count", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "String"}, {"description": "", "index": "1", "name": "time_sec", "type": "float"}], "description": "The transition node with name [code]id[/code] sets its cross fade time to [code]time_sec[/code].", "name": "transition_node_set_xfade_time", "return_": {"description": "", "type": "void"}}], "name": "AnimationTreePlayer", "signals": [], "tutorials": {"links": []}}, "Area": {"brief_description": "General purpose area node for detection and 3D physics influence.", "category": "Core", "constants": [{"description": "This area does not affect gravity/damping.", "enum": "SpaceOverride", "name": "SPACE_OVERRIDE_DISABLED", "value": "0"}, {"description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order).", "enum": "SpaceOverride", "name": "SPACE_OVERRIDE_COMBINE", "value": "1"}, {"description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order), ignoring any lower priority areas.", "enum": "SpaceOverride", "name": "SPACE_OVERRIDE_COMBINE_REPLACE", "value": "2"}, {"description": "This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas.", "enum": "SpaceOverride", "name": "SPACE_OVERRIDE_REPLACE", "value": "3"}, {"description": "This area replaces any gravity/damping calculated so far (in [code]priority[/code] order), but keeps calculating the rest of the areas.", "enum": "SpaceOverride", "name": "SPACE_OVERRIDE_REPLACE_COMBINE", "value": "4"}], "demos": {"links": []}, "description": "3D area that detects [CollisionObject] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).", "inherits": "CollisionObject", "members": [{"description": "The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping).", "getter": "get_angular_damp", "name": "angular_damp", "setter": "set_angular_damp", "type": "float"}, {"description": "The name of the area's audio bus.", "getter": "get_audio_bus", "name": "audio_bus_name", "setter": "set_audio_bus", "type": "String"}, {"description": "If [code]true[/code] the area's audio bus overrides the default audio bus. Default value: [code]false[/code].", "getter": "is_overriding_audio_bus", "name": "audio_bus_override", "setter": "set_audio_bus_override", "type": "bool"}, {"description": "The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also [code]collision_mask[/code].", "getter": "get_collision_layer", "name": "collision_layer", "setter": "set_collision_layer", "type": "int"}, {"description": "The physics layers this area scans to determine collision detection.", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}, {"description": "The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.", "getter": "get_gravity", "name": "gravity", "setter": "set_gravity", "type": "float"}, {"description": "The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.", "getter": "get_gravity_distance_scale", "name": "gravity_distance_scale", "setter": "set_gravity_distance_scale", "type": "float"}, {"description": "If [code]true[/code] gravity is calculated from a point (set via [code]gravity_vec[/code]). Also see [code]space_override[/code]. Default value: [code]false[/code].", "getter": "is_gravity_a_point", "name": "gravity_point", "setter": "set_gravity_is_point", "type": "bool"}, {"description": "The area's gravity vector (not normalized). If gravity is a point (see [method is_gravity_a_point]), this will be the point of attraction.", "getter": "get_gravity_vector", "name": "gravity_vec", "setter": "set_gravity_vector", "type": "Vector3"}, {"description": "The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping).", "getter": "get_linear_damp", "name": "linear_damp", "setter": "set_linear_damp", "type": "float"}, {"description": "If [code]true[/code] other monitoring areas can detect this area. Default value: [code]true[/code].", "getter": "is_monitorable", "name": "monitorable", "setter": "set_monitorable", "type": "bool"}, {"description": "If [code]true[/code] the area detects bodies or areas entering and exiting it. Default value: [code]true[/code].", "getter": "is_monitoring", "name": "monitoring", "setter": "set_monitoring", "type": "bool"}, {"description": "The area's priority. Higher priority areas are processed first. Default value: 0.", "getter": "get_priority", "name": "priority", "setter": "set_priority", "type": "float"}, {"description": "The degree to which this area applies reverb to its associated audio. Ranges from [code]0[/code] to [code]1[/code] with [code]0.1[/code] precision.", "getter": "get_reverb_amount", "name": "reverb_bus_amount", "setter": "set_reverb_amount", "type": "float"}, {"description": "If [code]true[/code] the area applies reverb to its associated audio.", "getter": "is_using_reverb_bus", "name": "reverb_bus_enable", "setter": "set_use_reverb_bus", "type": "bool"}, {"description": "The reverb bus name to use for this area's associated audio.", "getter": "get_reverb_bus", "name": "reverb_bus_name", "setter": "set_reverb_bus", "type": "String"}, {"description": "The degree to which this area's reverb is a uniform effect. Ranges from [code]0[/code] to [code]1[/code] with [code]0.1[/code] precision.", "getter": "get_reverb_uniformity", "name": "reverb_bus_uniformity", "setter": "set_reverb_uniformity", "type": "float"}, {"description": "Override mode for gravity and damping calculations within this area. See the SPACE_OVERRIDE_* constants for values.", "getter": "get_space_override_mode", "name": "space_override", "setter": "set_space_override_mode", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "Returns an individual bit on the layer mask.", "name": "get_collision_layer_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "Returns an individual bit on the collision mask.", "name": "get_collision_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns a list of intersecting [code]Area[/code]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.", "name": "get_overlapping_areas", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns a list of intersecting [PhysicsBody]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.", "name": "get_overlapping_bodies", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "Node"}], "description": "If [code]true[/code] the given area overlaps the Area. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.", "name": "overlaps_area", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "If [code]true[/code] the given body overlaps the Area. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.", "name": "overlaps_body", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "Set/clear individual bits on the layer mask. This simplifies editing this [code]Area[code]'s layers.", "name": "set_collision_layer_bit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "Set/clear individual bits on the collision mask. This simplifies editing which [code]Area[/code] layers this [code]Area[/code] scans.", "name": "set_collision_mask_bit", "return_": {"description": "", "type": "void"}}], "name": "Area", "signals": [{"arguments": [{"description": "", "index": "0", "name": "area", "type": "Area"}], "description": "Emitted when another area enters.", "name": "area_entered"}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "Area"}], "description": "Emitted when another area exits.", "name": "area_exited"}, {"arguments": [{"description": "", "index": "0", "name": "area_id", "type": "int"}, {"description": "", "index": "1", "name": "area", "type": "Area"}, {"description": "", "index": "2", "name": "area_shape", "type": "int"}, {"description": "", "index": "3", "name": "self_shape", "type": "int"}], "description": "Emitted when another area enters, reporting which areas overlapped.", "name": "area_shape_entered"}, {"arguments": [{"description": "", "index": "0", "name": "area_id", "type": "int"}, {"description": "", "index": "1", "name": "area", "type": "Area"}, {"description": "", "index": "2", "name": "area_shape", "type": "int"}, {"description": "", "index": "3", "name": "self_shape", "type": "int"}], "description": "Emitted when another area exits, reporting which areas were overlapping.", "name": "area_shape_exited"}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "Emitted when a [PhysicsBody] object enters.", "name": "body_entered"}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "Emitted when a [PhysicsBody] object exits.", "name": "body_exited"}, {"arguments": [{"description": "", "index": "0", "name": "body_id", "type": "int"}, {"description": "", "index": "1", "name": "body", "type": "Node"}, {"description": "", "index": "2", "name": "body_shape", "type": "int"}, {"description": "", "index": "3", "name": "area_shape", "type": "int"}], "description": "Emitted when a [PhysicsBody] object enters, reporting which shapes overlapped.", "name": "body_shape_entered"}, {"arguments": [{"description": "", "index": "0", "name": "body_id", "type": "int"}, {"description": "", "index": "1", "name": "body", "type": "Node"}, {"description": "", "index": "2", "name": "body_shape", "type": "int"}, {"description": "", "index": "3", "name": "area_shape", "type": "int"}], "description": "Emitted when a [PhysicsBody] object exits, reporting which shapes were overlapping.", "name": "body_shape_exited"}], "tutorials": {"links": []}}, "Area2D": {"brief_description": "2D area for detection and 2D physics influence.", "category": "Core", "constants": [{"description": "This area does not affect gravity/damping.", "enum": "SpaceOverride", "name": "SPACE_OVERRIDE_DISABLED", "value": "0"}, {"description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order).", "enum": "SpaceOverride", "name": "SPACE_OVERRIDE_COMBINE", "value": "1"}, {"description": "This area adds its gravity/damping values to whatever has been calculated so far (in [code]priority[/code] order), ignoring any lower priority areas.", "enum": "SpaceOverride", "name": "SPACE_OVERRIDE_COMBINE_REPLACE", "value": "2"}, {"description": "This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas.", "enum": "SpaceOverride", "name": "SPACE_OVERRIDE_REPLACE", "value": "3"}, {"description": "This area replaces any gravity/damping calculated so far (in [code]priority[/code] order), but keeps calculating the rest of the areas.", "enum": "SpaceOverride", "name": "SPACE_OVERRIDE_REPLACE_COMBINE", "value": "4"}], "demos": {"links": []}, "description": "2D area that detects [CollisionObject2D] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).", "inherits": "CollisionObject2D", "members": [{"description": "The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping).", "getter": "get_angular_damp", "name": "angular_damp", "setter": "set_angular_damp", "type": "float"}, {"description": "The name of the area's audio bus.", "getter": "get_audio_bus_name", "name": "audio_bus_name", "setter": "set_audio_bus_name", "type": "String"}, {"description": "If [code]true[/code] the area's audio bus overrides the default audio bus. Default value: [code]false[/code].", "getter": "is_overriding_audio_bus", "name": "audio_bus_override", "setter": "set_audio_bus_override", "type": "bool"}, {"description": "The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also [code]collision_mask[/code].", "getter": "get_collision_layer", "name": "collision_layer", "setter": "set_collision_layer", "type": "int"}, {"description": "The physics layers this area scans to determine collision detection.", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}, {"description": "The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.", "getter": "get_gravity", "name": "gravity", "setter": "set_gravity", "type": "float"}, {"description": "The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.", "getter": "get_gravity_distance_scale", "name": "gravity_distance_scale", "setter": "set_gravity_distance_scale", "type": "float"}, {"description": "If [code]true[/code] gravity is calculated from a point (set via [code]gravity_vec[/code]). Also see [code]space_override[/code]. Default value: [code]false[/code].", "getter": "is_gravity_a_point", "name": "gravity_point", "setter": "set_gravity_is_point", "type": "bool"}, {"description": "The area's gravity vector (not normalized). If gravity is a point (see [method is_gravity_a_point]), this will be the point of attraction.", "getter": "get_gravity_vector", "name": "gravity_vec", "setter": "set_gravity_vector", "type": "Vector2"}, {"description": "The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping).", "getter": "get_linear_damp", "name": "linear_damp", "setter": "set_linear_damp", "type": "float"}, {"description": "If [code]true[/code] other monitoring areas can detect this area. Default value: [code]true[/code].", "getter": "is_monitorable", "name": "monitorable", "setter": "set_monitorable", "type": "bool"}, {"description": "If [code]true[/code] the area detects bodies or areas entering and exiting it. Default value: [code]true[/code].", "getter": "is_monitoring", "name": "monitoring", "setter": "set_monitoring", "type": "bool"}, {"description": "The area's priority. Higher priority areas are processed first. Default value: 0.", "getter": "get_priority", "name": "priority", "setter": "set_priority", "type": "float"}, {"description": "Override mode for gravity and damping calculations within this area. See the SPACE_OVERRIDE_* constants for values.", "getter": "get_space_override_mode", "name": "space_override", "setter": "set_space_override_mode", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "Return an individual bit on the layer mask. Describes whether other areas will collide with this one on the given layer.", "name": "get_collision_layer_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "Return an individual bit on the collision mask. Describes whether this area will collide with others on the given layer.", "name": "get_collision_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns a list of intersecting [code]Area2D[/code]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.", "name": "get_overlapping_areas", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns a list of intersecting [PhysicsBody2D]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.", "name": "get_overlapping_bodies", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "Node"}], "description": "If [code]true[/code] the given area overlaps the Area2D. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.", "name": "overlaps_area", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "If [code]true[/code] the given body overlaps the Area2D. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.", "name": "overlaps_body", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.", "name": "set_collision_layer_bit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.", "name": "set_collision_mask_bit", "return_": {"description": "", "type": "void"}}], "name": "Area2D", "signals": [{"arguments": [{"description": "", "index": "0", "name": "area", "type": "Area2D"}], "description": "Emitted when another area enters.", "name": "area_entered"}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "Area2D"}], "description": "Emitted when another area exits.", "name": "area_exited"}, {"arguments": [{"description": "", "index": "0", "name": "area_id", "type": "int"}, {"description": "", "index": "1", "name": "area", "type": "Area2D"}, {"description": "", "index": "2", "name": "area_shape", "type": "int"}, {"description": "", "index": "3", "name": "self_shape", "type": "int"}], "description": "Emitted when another area enters, reporting which shapes overlapped.", "name": "area_shape_entered"}, {"arguments": [{"description": "", "index": "0", "name": "area_id", "type": "int"}, {"description": "", "index": "1", "name": "area", "type": "Area2D"}, {"description": "", "index": "2", "name": "area_shape", "type": "int"}, {"description": "", "index": "3", "name": "self_shape", "type": "int"}], "description": "Emitted when another area exits, reporting which shapes were overlapping.", "name": "area_shape_exited"}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "PhysicsBody2D"}], "description": "Emitted when a [PhysicsBody2D] object enters.", "name": "body_entered"}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "PhysicsBody2D"}], "description": "Emitted when a [PhysicsBody2D] object exits.", "name": "body_exited"}, {"arguments": [{"description": "", "index": "0", "name": "body_id", "type": "int"}, {"description": "", "index": "1", "name": "body", "type": "PhysicsBody2D"}, {"description": "", "index": "2", "name": "body_shape", "type": "int"}, {"description": "", "index": "3", "name": "area_shape", "type": "int"}], "description": "Emitted when a [PhysicsBody2D] object enters, reporting which shapes overlapped.", "name": "body_shape_entered"}, {"arguments": [{"description": "", "index": "0", "name": "body_id", "type": "int"}, {"description": "", "index": "1", "name": "body", "type": "PhysicsBody2D"}, {"description": "", "index": "2", "name": "body_shape", "type": "int"}, {"description": "", "index": "3", "name": "area_shape", "type": "int"}], "description": "Emitted when a [PhysicsBody2D] object exits, reporting which shapes were overlapping.", "name": "body_shape_exited"}], "tutorials": {"links": []}}, "Array": {"brief_description": "Generic array datatype.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "Generic array, contains several elements of any type, accessible by a numerical index starting at 0. Negative indices can be used to count from the back, like in Python (-1 is the last element, -2 the second to last, etc.). Example:\n\t\t[codeblock]\n\t\tvar array = [\"One\", 2, 3, \"Four\"]\n\t\tprint(array[0])   # One\n\t\tprint(array[2])   # 3\n\t\tprint(array[-1])  # Four\n\t\tarray[2] = \"Three\"\n\t\tprint(array[-2])  # Three\n\t\t[/codeblock]\n\t\tArrays are always passed by reference.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolColorArray"}], "description": "Construct an array from a [PoolColorArray].", "name": "Array", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolVector3Array"}], "description": "Construct an array from a [PoolVector3Array].", "name": "Array", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolVector2Array"}], "description": "Construct an array from a [PoolVector2Array].", "name": "Array", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolStringArray"}], "description": "Construct an array from a [PoolStringArray].", "name": "Array", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolRealArray"}], "description": "Construct an array from a [PoolRealArray].", "name": "Array", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolIntArray"}], "description": "Construct an array from a [PoolIntArray].", "name": "Array", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolByteArray"}], "description": "Construct an array from a [PoolByteArray].", "name": "Array", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}], "description": "Append an element at the end of the array (alias of [method push_back]).", "name": "append", "return_": {}}, {"arguments": [], "description": "Returns the last element of the array if the array is not empty (size>0).", "name": "back", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}, {"default": "True", "description": "", "index": "1", "name": "before", "type": "bool"}], "description": "Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a before specifier can be passed. If false, the returned index comes after all existing entries of the value in the array. Note that calling bsearch on an unsorted array results in unexpected behavior.", "name": "bsearch", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}, {"description": "", "index": "1", "name": "obj", "type": "Object"}, {"description": "", "index": "2", "name": "func", "type": "String"}, {"default": "True", "description": "", "index": "3", "name": "before", "type": "bool"}], "description": "Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search and a custom comparison method. Optionally, a before specifier can be passed. If false, the returned index comes after all existing entries of the value in the array.  The custom method receives two arguments (an element from the array and the value searched for) and must return true if the first argument is less than the second, and return false otherwise. Note that calling bsearch on an unsorted array results in unexpected behavior.", "name": "bsearch_custom", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Clear the array (resize to 0).", "name": "clear", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}], "description": "Return the amount of times an element is in the array.", "name": "count", "return_": {"description": "", "type": "int"}}, {"arguments": [{"default": "False", "description": "", "index": "0", "name": "deep", "type": "bool"}], "description": "Returns a copy of the array.\n\t\t\t\tIf [code]deep[/code] is [code]true[/code], a deep copy is be performed: all nested arrays and dictionaries are duplicated and will not be shared with the original array. If [code]false[/code], a shallow copy is made and references to the original nested arrays and dictionaries are kept, so that modifying a sub-array or dictionary in the copy will also impact those referenced in the source array.", "name": "duplicate", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Return true if the array is empty (size==0).", "name": "empty", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}], "description": "Remove the first occurrence of a value from the array.", "name": "erase", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "Variant"}, {"default": "0", "description": "", "index": "1", "name": "from", "type": "int"}], "description": "Searches the array for a value and returns its index or -1 if not found. Optionally, the initial search index can be passed.", "name": "find", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}], "description": "Searches the array in reverse order for a value and returns its index or -1 if not found.", "name": "find_last", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the first element of the array if the array is not empty (size>0).", "name": "front", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}], "description": "Return true if the array contains given value.\n\t\t\t\t[codeblock]\n\t\t\t\t[ \"inside\", 7 ].has(\"inside\") == true\n\t\t\t\t[ \"inside\", 7 ].has(\"outside\") == false\n\t\t\t\t[ \"inside\", 7 ].has(7) == true\n\t\t\t\t[ \"inside\", 7 ].has(\"7\") == false\n\t\t\t\t[/codeblock]", "name": "has", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Return a hashed integer value representing the array contents.", "name": "hash", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array ([code]pos == size()[/code]).", "name": "insert", "return_": {}}, {"arguments": [], "description": "Reverse the order of the elements in the array (so first element will now be the last) and return reference to the array.", "name": "invert", "return_": {}}, {"arguments": [], "description": "Return maximum value contained in the array if all elements are of comparable types. If the elements can't be compared, [code]null[/code] is returned.", "name": "max", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Return minimum value contained in the array if all elements are of comparable types. If the elements can't be compared, [code]null[/code] is returned.", "name": "min", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Remove the last element of the array.", "name": "pop_back", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Remove the first element of the array.", "name": "pop_front", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}], "description": "Append an element at the end of the array.", "name": "push_back", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}], "description": "Add an element at the beginning of the array.", "name": "push_front", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "int"}], "description": "Remove an element from the array by index.", "name": "remove", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "size", "type": "int"}], "description": "Resize the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are Null.", "name": "resize", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "Variant"}, {"default": "-1", "description": "", "index": "1", "name": "from", "type": "int"}], "description": "Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.", "name": "rfind", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Shuffle the array such that the items will have a random order.", "name": "shuffle", "return_": {}}, {"arguments": [], "description": "Return the amount of elements in the array.", "name": "size", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Sort the array using natural order.", "name": "sort", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "obj", "type": "Object"}, {"description": "", "index": "1", "name": "func", "type": "String"}], "description": "Sort the array using a custom method. The arguments are an object that holds the method and the name of such method. The custom method receives two arguments (a pair of elements from the array) and must return true if the first argument is less than the second, and return false otherwise.\n\t\t\t\t[b]Note:[/b] you cannot randomize the return value as the heapsort algorithm expects a deterministic result. Doing so will result in unexpected behavior.\n\t\t\t\t[codeblock]\n\t\t\t\tclass MyCustomSorter:\n\t\t\t\t    static func sort(a, b):\n\t\t\t\t        if a[0] < b[0]:\n\t\t\t\t            return true\n\t\t\t\t    return false\n\n\t\t\t\tvar my_items = [[5, \"Potato\"], [9, \"Rice\"], [4, \"Tomato\"]]\n\t\t\t\tmy_items.sort_custom(MyCustomSorter, \"sort\")\n\t\t\t\t[/codeblock]", "name": "sort_custom", "return_": {}}], "name": "Array", "signals": [], "tutorials": {"links": []}}, "ArrayMesh": {"brief_description": "", "category": "Core", "constants": [{"description": "Default value used for index_array_len when no indices are present.", "name": "NO_INDEX_ARRAY", "value": "-1"}, {"description": "Amount of weights/bone indices per vertex (always 4).", "name": "ARRAY_WEIGHTS_SIZE", "value": "4"}, {"description": "Vertex array (array of [Vector3] vertices).", "enum": "ArrayType", "name": "ARRAY_VERTEX", "value": "0"}, {"description": "Normal array (array of [Vector3] normals).", "enum": "ArrayType", "name": "ARRAY_NORMAL", "value": "1"}, {"description": "Tangent array, array of groups of 4 floats. first 3 floats determine the tangent, and the last the binormal direction as -1 or 1.", "enum": "ArrayType", "name": "ARRAY_TANGENT", "value": "2"}, {"description": "Vertex array (array of [Color] colors).", "enum": "ArrayType", "name": "ARRAY_COLOR", "value": "3"}, {"description": "UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v)).", "enum": "ArrayType", "name": "ARRAY_TEX_UV", "value": "4"}, {"description": "Second UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v)).", "enum": "ArrayType", "name": "ARRAY_TEX_UV2", "value": "5"}, {"description": "Array of bone indices, as a float array. Each element in groups of 4 floats.", "enum": "ArrayType", "name": "ARRAY_BONES", "value": "6"}, {"description": "Array of bone weights, as a float array. Each element in groups of 4 floats.", "enum": "ArrayType", "name": "ARRAY_WEIGHTS", "value": "7"}, {"description": "[Array] of integers used as indices referencing vertices, colors, normals, tangents, and textures. All of those arrays must have the same number of elements as the vertex array. No index can be beyond the vertex array size. When this index array is present, it puts the function into \"index mode,\" where the index selects the *i*'th vertex, normal, tangent, color, UV, etc. This means if you want to have different normals or colors along an edge, you have to duplicate the vertices.\n\t\t\tFor triangles, the index array is interpreted as triples, referring to the vertices of each triangle. For lines, the index array is in pairs indicating the start and end of each line.", "enum": "ArrayType", "name": "ARRAY_INDEX", "value": "8"}, {"description": "", "enum": "ArrayType", "name": "ARRAY_MAX", "value": "9"}, {"description": "Array format will include vertices (mandatory).", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_VERTEX", "value": "1"}, {"description": "Array format will include normals", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_NORMAL", "value": "2"}, {"description": "Array format will include tangents", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_TANGENT", "value": "4"}, {"description": "Array format will include a color array.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_COLOR", "value": "8"}, {"description": "Array format will include UVs.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_TEX_UV", "value": "16"}, {"description": "Array format will include another set of UVs.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_TEX_UV2", "value": "32"}, {"description": "Array format will include bone indices.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_BONES", "value": "64"}, {"description": "Array format will include bone weights.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_WEIGHTS", "value": "128"}, {"description": "Index array will be used.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_INDEX", "value": "256"}], "demos": {"links": []}, "description": "", "inherits": "Mesh", "members": [{"description": "", "getter": "get_blend_shape_mode", "name": "blend_shape_mode", "setter": "set_blend_shape_mode", "type": "int"}, {"description": "An overriding bounding box for this mesh.", "getter": "get_custom_aabb", "name": "custom_aabb", "setter": "set_custom_aabb", "type": "AABB"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "add_blend_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "primitive", "type": "int"}, {"description": "", "index": "1", "name": "arrays", "type": "Array"}, {"default": "[  ]", "description": "", "index": "2", "name": "blend_shapes", "type": "Array"}, {"default": "97280", "description": "", "index": "3", "name": "compress_flags", "type": "int"}], "description": "Creates a new surface.\n\t\t\t\tSurfaces are created to be rendered using a \"primitive\", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. See [Mesh] for details. (As a note, when using indices, it is recommended to only use points, lines or triangles). [method get_surface_count] will become the surf_idx for this new surface.\n\t\t\t\tThe [code]arrays[/code] argument is an array of arrays. See [enum ArrayType] for the values used in this array. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this function into \"index mode\" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array or be empty, except for [code]ARRAY_INDEX[/code] if it is used.\n\t\t\t\tAdding an index array puts this function into \"index mode\" where the vertex and other arrays become the sources of data, and the index array defines the order of the vertices.\n\t\t\t\tGodot uses clockwise winding order for front faces of triangle primitive modes.", "name": "add_surface_from_arrays", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Centers the geometry.", "name": "center_geometry", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Remove all blend shapes from this [code]ArrayMesh[/code].", "name": "clear_blend_shapes", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the number of blend shapes that the [code]ArrayMesh[/code] holds.", "name": "get_blend_shape_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Returns the name of the blend shape at this index.", "name": "get_blend_shape_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "transform", "type": "Transform"}, {"description": "", "index": "1", "name": "texel_size", "type": "float"}], "description": "Will perform a UV unwrap on the [code]ArrayMesh[/code] to prepare the mesh for lightmapping.", "name": "lightmap_unwrap", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Will regenerate normal maps for the [code]ArrayMesh[/code].", "name": "regen_normalmaps", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Return the index of the first surface with this name held within this [code]ArrayMesh[/code]. If none are found -1 is returned.", "name": "surface_find_by_name", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}], "description": "Return the length in indices of the index array in the requested surface (see [method add_surface_from_arrays]).", "name": "surface_get_array_index_len", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}], "description": "Return the length in vertices of the vertex array in the requested surface (see [method add_surface_from_arrays]).", "name": "surface_get_array_len", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}], "description": "Return the format mask of the requested surface (see [method add_surface_from_arrays]).", "name": "surface_get_format", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}], "description": "Get the name assigned to this surface.", "name": "surface_get_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}], "description": "Return the primitive type of the requested surface (see [method add_surface_from_arrays]).", "name": "surface_get_primitive_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}], "description": "Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.", "name": "surface_remove", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}, {"description": "", "index": "1", "name": "material", "type": "Material"}], "description": "Set a [Material] for a given surface. Surface will be rendered using this material.", "name": "surface_set_material", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}, {"description": "", "index": "1", "name": "name", "type": "String"}], "description": "Set a name for a given surface.", "name": "surface_set_name", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}, {"description": "", "index": "1", "name": "offset", "type": "int"}, {"description": "", "index": "2", "name": "data", "type": "PoolByteArray"}], "description": "", "name": "surface_update_region", "return_": {"description": "", "type": "void"}}], "name": "ArrayMesh", "signals": [], "tutorials": {"links": []}}, "AtlasTexture": {"brief_description": "Packs multiple small textures in a single, bigger one. Helps to optimize video memory costs and render calls.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "[Texture] resource aimed at managing big textures files that pack multiple smaller textures. Consists of a [Texture], a margin that defines the border width,\n\t\tand a region that defines the actual area of the AtlasTexture.", "inherits": "Texture", "members": [{"description": "The texture that contains the atlas. Can be any [Texture] subtype.", "getter": "get_atlas", "name": "atlas", "setter": "set_atlas", "type": "Texture"}, {"description": "If [code]true[/code] clips the area outside of the region to avoid bleeding of the surrounding texture pixels.", "getter": "has_filter_clip", "name": "filter_clip", "setter": "set_filter_clip", "type": "bool"}, {"description": "The margin around the region. The [Rect2]'s 'size' parameter ('w' and 'h' in the editor) resizes the texture so it fits within the margin.", "getter": "get_margin", "name": "margin", "setter": "set_margin", "type": "Rect2"}, {"description": "The AtlasTexture's used region.", "getter": "get_region", "name": "region", "setter": "set_region", "type": "Rect2"}], "methods": [], "name": "AtlasTexture", "signals": [], "tutorials": {"links": []}}, "AudioBusLayout": {"brief_description": "Stores information about the audiobusses.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Stores position, muting, solo, bypass, effects, effect position, volume, and the connections between busses. See [AudioServer] for usage.", "inherits": "Resource", "members": [], "methods": [], "name": "AudioBusLayout", "signals": [], "tutorials": {"links": []}}, "AudioEffect": {"brief_description": "Audio Effect For Audio.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Base resource for audio bus. Applies an audio effect on the bus that the resource is applied on.", "inherits": "Resource", "members": [], "methods": [], "name": "AudioEffect", "signals": [], "tutorials": {"links": []}}, "AudioEffectAmplify": {"brief_description": "Adds a Amplify audio effect to an Audio bus.\n\t\tIncreases or decreases the volume of the selected audio bus.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Increases or decreases the volume being routed through the audio bus.", "inherits": "AudioEffect", "members": [{"description": "Amount of amplification. Positive values make the sound louder, negative values make it quieter. Value can range from -80 to 24. Default value: [code]0[/code].", "getter": "get_volume_db", "name": "volume_db", "setter": "set_volume_db", "type": "float"}], "methods": [], "name": "AudioEffectAmplify", "signals": [], "tutorials": {"links": []}}, "AudioEffectBandLimitFilter": {"brief_description": "Adds a band limit filter to the Audio Bus.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Limits the frequencies in a range around the [member cutoff_hz] and allows frequencies outside of this range to pass.", "inherits": "AudioEffectFilter", "members": [], "methods": [], "name": "AudioEffectBandLimitFilter", "signals": [], "tutorials": {"links": []}}, "AudioEffectBandPassFilter": {"brief_description": "Adds a band pass filter to the Audio Bus.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Attenuates the frequencies inside of a range around the [member cutoff_hz] and cuts frequencies outside of this band.", "inherits": "AudioEffectFilter", "members": [], "methods": [], "name": "AudioEffectBandPassFilter", "signals": [], "tutorials": {"links": []}}, "AudioEffectChorus": {"brief_description": "Adds a chorus audio effect.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter.", "inherits": "AudioEffect", "members": [{"description": "The effect's raw signal.", "getter": "get_dry", "name": "dry", "setter": "set_dry", "type": "float"}, {"description": "The voice's cutoff frequency.", "getter": "get_voice_cutoff_hz", "name": "voice/1/cutoff_hz", "setter": "set_voice_cutoff_hz", "type": "float"}, {"description": "The voice's signal delay.", "getter": "get_voice_delay_ms", "name": "voice/1/delay_ms", "setter": "set_voice_delay_ms", "type": "float"}, {"description": "The voice filter's depth.", "getter": "get_voice_depth_ms", "name": "voice/1/depth_ms", "setter": "set_voice_depth_ms", "type": "float"}, {"description": "The voice's volume.", "getter": "get_voice_level_db", "name": "voice/1/level_db", "setter": "set_voice_level_db", "type": "float"}, {"description": "The voice's pan level.", "getter": "get_voice_pan", "name": "voice/1/pan", "setter": "set_voice_pan", "type": "float"}, {"description": "The voice's filter rate.", "getter": "get_voice_rate_hz", "name": "voice/1/rate_hz", "setter": "set_voice_rate_hz", "type": "float"}, {"description": "The voice's cutoff frequency.", "getter": "get_voice_cutoff_hz", "name": "voice/2/cutoff_hz", "setter": "set_voice_cutoff_hz", "type": "float"}, {"description": "The voice's signal delay.", "getter": "get_voice_delay_ms", "name": "voice/2/delay_ms", "setter": "set_voice_delay_ms", "type": "float"}, {"description": "The voice filter's depth.", "getter": "get_voice_depth_ms", "name": "voice/2/depth_ms", "setter": "set_voice_depth_ms", "type": "float"}, {"description": "The voice's volume.", "getter": "get_voice_level_db", "name": "voice/2/level_db", "setter": "set_voice_level_db", "type": "float"}, {"description": "The voice's pan level.", "getter": "get_voice_pan", "name": "voice/2/pan", "setter": "set_voice_pan", "type": "float"}, {"description": "The voice's filter rate.", "getter": "get_voice_rate_hz", "name": "voice/2/rate_hz", "setter": "set_voice_rate_hz", "type": "float"}, {"description": "The voice's cutoff frequency.", "getter": "get_voice_cutoff_hz", "name": "voice/3/cutoff_hz", "setter": "set_voice_cutoff_hz", "type": "float"}, {"description": "The voice's signal delay.", "getter": "get_voice_delay_ms", "name": "voice/3/delay_ms", "setter": "set_voice_delay_ms", "type": "float"}, {"description": "The voice filter's depth.", "getter": "get_voice_depth_ms", "name": "voice/3/depth_ms", "setter": "set_voice_depth_ms", "type": "float"}, {"description": "The voice's volume.", "getter": "get_voice_level_db", "name": "voice/3/level_db", "setter": "set_voice_level_db", "type": "float"}, {"description": "The voice's pan level.", "getter": "get_voice_pan", "name": "voice/3/pan", "setter": "set_voice_pan", "type": "float"}, {"description": "The voice's filter rate.", "getter": "get_voice_rate_hz", "name": "voice/3/rate_hz", "setter": "set_voice_rate_hz", "type": "float"}, {"description": "The voice's cutoff frequency.", "getter": "get_voice_cutoff_hz", "name": "voice/4/cutoff_hz", "setter": "set_voice_cutoff_hz", "type": "float"}, {"description": "The voice's signal delay.", "getter": "get_voice_delay_ms", "name": "voice/4/delay_ms", "setter": "set_voice_delay_ms", "type": "float"}, {"description": "The voice filter's depth.", "getter": "get_voice_depth_ms", "name": "voice/4/depth_ms", "setter": "set_voice_depth_ms", "type": "float"}, {"description": "The voice's volume.", "getter": "get_voice_level_db", "name": "voice/4/level_db", "setter": "set_voice_level_db", "type": "float"}, {"description": "The voice's pan level.", "getter": "get_voice_pan", "name": "voice/4/pan", "setter": "set_voice_pan", "type": "float"}, {"description": "The voice's filter rate.", "getter": "get_voice_rate_hz", "name": "voice/4/rate_hz", "setter": "set_voice_rate_hz", "type": "float"}, {"description": "The amount of voices in the effect.", "getter": "get_voice_count", "name": "voice_count", "setter": "set_voice_count", "type": "int"}, {"description": "The effect's processed signal.", "getter": "get_wet", "name": "wet", "setter": "set_wet", "type": "float"}], "methods": [], "name": "AudioEffectChorus", "signals": [], "tutorials": {"links": []}}, "AudioEffectCompressor": {"brief_description": "Adds a Compressor audio effect to an Audio bus.\n\t\tReduces sounds that exceed a certain threshold level, smooths out the dynamics and increases the overall volume.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).\n\t\tCompressor has many uses in the mix:\n\t\t- In the Master bus to compress the whole output (Although a [AudioEffectLimiter] is probably better)\n\t\t- In voice channels to ensure they sound as balanced as possible.\n\t\t- Sidechained. Sidechained, which can reduce the sound level sidechained with another audio bus for threshold detection.. This technique is very common in video game mixing to download the level of Music/SFX while voices are being heard.\n\t\t- Accentuates transients by using a wider attack, making effects sound more punchy.", "inherits": "AudioEffect", "members": [{"description": "Compressor's reaction time when the signal exceeds the threshold. Value can range from 20 to 2000. Default value: [code]20ms[/code].", "getter": "get_attack_us", "name": "attack_us", "setter": "set_attack_us", "type": "float"}, {"description": "Gain applied to the output signal.", "getter": "get_gain", "name": "gain", "setter": "set_gain", "type": "float"}, {"description": "Balance between original signal and effect signal. Value can range from 0 (totally dry) to 1 (totally wet). Default value: [code]1[/code].", "getter": "get_mix", "name": "mix", "setter": "set_mix", "type": "float"}, {"description": "Amount of compression applied to the audio once it passes the threshold level. The higher the ratio the more the loud parts of the audio will be compressed. Value can range from 1 to 48. Default value: [code]4[/code].", "getter": "get_ratio", "name": "ratio", "setter": "set_ratio", "type": "float"}, {"description": "Compressor's delay time to stop reducing the signal after the signal level falls below the threshold. Value can range from 20 to 2000. Default value: [code]250ms[/code].", "getter": "get_release_ms", "name": "release_ms", "setter": "set_release_ms", "type": "float"}, {"description": "Reduce the sound level using another audio bus for threshold detection.", "getter": "get_sidechain", "name": "sidechain", "setter": "set_sidechain", "type": "String"}, {"description": "The level above which compression is applied to the audio. Value can range from -60 to 0. Default value: [code]0[/code].", "getter": "get_threshold", "name": "threshold", "setter": "set_threshold", "type": "float"}], "methods": [], "name": "AudioEffectCompressor", "signals": [], "tutorials": {"links": []}}, "AudioEffectDelay": {"brief_description": "Adds a Delay audio effect to an Audio bus. Plays input signal back after a period of time.\n\t\tTwo tap delay and feedback options.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds.", "inherits": "AudioEffect", "members": [{"description": "Output percent of original sound. At 0, only delayed sounds are output. Value can range from 0 to 1. Default value: [code]1[/code].", "getter": "get_dry", "name": "dry", "setter": "set_dry", "type": "float"}, {"description": "If [code]true[/code] feedback is enabled. Default value: [code]false[/code].", "getter": "is_feedback_active", "name": "feedback/active", "setter": "set_feedback_active", "type": "bool"}, {"description": "Feedback delay time in milliseconds. Default value: [code]340[/code].", "getter": "get_feedback_delay_ms", "name": "feedback/delay_ms", "setter": "set_feedback_delay_ms", "type": "float"}, {"description": "Sound level for [code]tap1[/code]. Default value: [code]-6 dB[/code].", "getter": "get_feedback_level_db", "name": "feedback/level_db", "setter": "set_feedback_level_db", "type": "float"}, {"description": "Low-pass filter for feedback. Frequencies below the Low Cut value are filtered out of the source signal. Default value: [code]16000[/code].", "getter": "get_feedback_lowpass", "name": "feedback/lowpass", "setter": "set_feedback_lowpass", "type": "float"}, {"description": "If [code]true[/code], [code]tap1[/code] will be enabled. Default value: [code]true[/code].", "getter": "is_tap1_active", "name": "tap1/active", "setter": "set_tap1_active", "type": "bool"}, {"description": "[b]Tap1[/b] delay time in milliseconds. Default value: [code]250ms[/code].", "getter": "get_tap1_delay_ms", "name": "tap1/delay_ms", "setter": "set_tap1_delay_ms", "type": "float"}, {"description": "Sound level for [code]tap1[/code]. Default value: [code]-6 dB[/code].", "getter": "get_tap1_level_db", "name": "tap1/level_db", "setter": "set_tap1_level_db", "type": "float"}, {"description": "Pan position for [code]tap1[/code]. Value can range from -1 (fully left) to 1 (fully right). Default value: [code]0.2[/code].", "getter": "get_tap1_pan", "name": "tap1/pan", "setter": "set_tap1_pan", "type": "float"}, {"description": "If [code]true[/code], [code]tap2[/code] will be enabled. Default value: [code]true[/code].", "getter": "is_tap2_active", "name": "tap2/active", "setter": "set_tap2_active", "type": "bool"}, {"description": "[b]Tap2[/b] delay time in milliseconds. Default value: [code]500ms[/code].", "getter": "get_tap2_delay_ms", "name": "tap2/delay_ms", "setter": "set_tap2_delay_ms", "type": "float"}, {"description": "Sound level for [code]tap2[/code]. Default value: [code]-12 dB[/code].", "getter": "get_tap2_level_db", "name": "tap2/level_db", "setter": "set_tap2_level_db", "type": "float"}, {"description": "Pan position for [code]tap2[/code]. Value can range from -1 (fully left) to 1 (fully right). Default value: [code]-0.4[/code].", "getter": "get_tap2_pan", "name": "tap2/pan", "setter": "set_tap2_pan", "type": "float"}], "methods": [], "name": "AudioEffectDelay", "signals": [], "tutorials": {"links": []}}, "AudioEffectDistortion": {"brief_description": "Adds a Distortion audio effect to an Audio bus.\n\t\tModify the sound to make it dirty.", "category": "Core", "constants": [{"description": "Digital distortion effect which cuts off peaks at the top and bottom of the waveform.", "enum": "Mode", "name": "MODE_CLIP", "value": "0"}, {"description": "", "enum": "Mode", "name": "MODE_ATAN", "value": "1"}, {"description": "Low-resolution digital distortion effect. You can use it to emulate the sound of early digital audio devices.", "enum": "Mode", "name": "MODE_LOFI", "value": "2"}, {"description": "Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers.", "enum": "Mode", "name": "MODE_OVERDRIVE", "value": "3"}, {"description": "Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound.", "enum": "Mode", "name": "MODE_WAVESHAPE", "value": "4"}], "demos": {"links": []}, "description": "Modify the sound and make it dirty. Different types are available : clip, tan, lofi (bit crushing), overdrive, or waveshape.\n\t\tBy distorting the waveform the frequency content change, which will often make the sound \"crunchy\" or \"abrasive\". For games, it can simulate sound coming from some saturated device or speaker very efficiently.", "inherits": "AudioEffect", "members": [{"description": "Distortion power. Value can range from 0 to 1. Default value: [code]0[/code].", "getter": "get_drive", "name": "drive", "setter": "set_drive", "type": "float"}, {"description": "High-pass filter. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000. Default value: [code]16000[/code].", "getter": "get_keep_hf_hz", "name": "keep_hf_hz", "setter": "set_keep_hf_hz", "type": "float"}, {"description": "Distortion type. Default value: [code]MODE_CLIP[/code].", "getter": "get_mode", "name": "mode", "setter": "set_mode", "type": "int"}, {"description": "Increases or decreases the volume after the effect. Value can range from -80 to 24. Default value: [code]0[/code].", "getter": "get_post_gain", "name": "post_gain", "setter": "set_post_gain", "type": "float"}, {"description": "Increases or decreases the volume before the effect. Value can range from -60 to 60. Default value: [code]0[/code].", "getter": "get_pre_gain", "name": "pre_gain", "setter": "set_pre_gain", "type": "float"}], "methods": [], "name": "AudioEffectDistortion", "signals": [], "tutorials": {"links": []}}, "AudioEffectEQ": {"brief_description": "Base class for audio equalizers. Gives you control over frequencies.\n\t\tUse it to create a custom equalizer if [AudioEffectEQ6], [AudioEffectEQ10] or [AudioEffectEQ21] don't fit your needs.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQ are very useful on the Master Bus to completely master a mix and give it character. They are also very useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged).", "inherits": "AudioEffect", "members": [], "methods": [{"arguments": [], "description": "Returns the number of bands of the equalizer.", "name": "get_band_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "band_idx", "type": "int"}], "description": "Returns the band's gain at the specified index, in dB.", "name": "get_band_gain_db", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "band_idx", "type": "int"}, {"description": "", "index": "1", "name": "volume_db", "type": "float"}], "description": "Sets band's gain at the specified index, in dB.", "name": "set_band_gain_db", "return_": {"description": "", "type": "void"}}], "name": "AudioEffectEQ", "signals": [], "tutorials": {"links": []}}, "AudioEffectEQ10": {"brief_description": "Adds a 10-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 31 Hz to 16000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Frequency bands :\n\t\tBand 1 : 31 Hz\n\t\tBand 2 : 62 Hz\n\t\tBand 3 : 125 Hz\n\t\tBand 4 : 250 Hz\n\t\tBand 5 : 500 Hz\n\t\tBand 6 : 1000 Hz\n\t\tBand 7 : 2000 Hz\n\t\tBand 8 : 4000 Hz\n\t\tBand 9 : 8000 Hz\n\t\tBand 10 : 16000 Hz\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ6], [AudioEffectEQ21].", "inherits": "AudioEffectEQ", "members": [], "methods": [], "name": "AudioEffectEQ10", "signals": [], "tutorials": {"links": []}}, "AudioEffectEQ21": {"brief_description": "Adds a 21-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 22 Hz to 22000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Frequency bands :\n\t\tBand 1 : 22 Hz\n\t\tBand 2 : 32 Hz\n\t\tBand 3 : 44 Hz\n\t\tBand 4 : 63 Hz\n\t\tBand 5 : 90 Hz\n\t\tBand 6 : 125 Hz\n\t\tBand 7 : 175 Hz\n\t\tBand 8 : 250 Hz\n\t\tBand 9 : 350 Hz\n\t\tBand 10 : 500 Hz\n\t\tBand 11 : 700 Hz\n\t\tBand 12 : 1000 Hz\n\t\tBand 13 : 1400 Hz\n\t\tBand 14 : 2000 Hz\n\t\tBand 15 : 2800 Hz\n\t\tBand 16 : 4000 Hz\n\t\tBand 17 : 5600 Hz\n\t\tBand 18 : 8000 Hz\n\t\tBand 19 : 11000 Hz\n\t\tBand 20 : 16000 Hz\n\t\tBand 21 : 22000 Hz\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ6], [AudioEffectEQ10].", "inherits": "AudioEffectEQ", "members": [], "methods": [], "name": "AudioEffectEQ21", "signals": [], "tutorials": {"links": []}}, "AudioEffectEQ6": {"brief_description": "Adds a 6-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 32 Hz to 10000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Frequency bands :\n\t\tBand 1 : 32 Hz\n\t\tBand 2 : 100 Hz\n\t\tBand 3 : 320 Hz\n\t\tBand 4 : 1000 Hz\n\t\tBand 5 : 3200 Hz\n\t\tBand 6 : 10000 Hz\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ10], [AudioEffectEQ21].", "inherits": "AudioEffectEQ", "members": [], "methods": [], "name": "AudioEffectEQ6", "signals": [], "tutorials": {"links": []}}, "AudioEffectFilter": {"brief_description": "Adds a filter to the Audio Bus.", "category": "Core", "constants": [{"description": "", "enum": "FilterDB", "name": "FILTER_6DB", "value": "0"}, {"description": "", "enum": "FilterDB", "name": "FILTER_12DB", "value": "1"}, {"description": "", "enum": "FilterDB", "name": "FILTER_18DB", "value": "2"}, {"description": "", "enum": "FilterDB", "name": "FILTER_24DB", "value": "3"}], "demos": {"links": []}, "description": "Allows frequencies other than the [member cutoff_hz] to pass.", "inherits": "AudioEffect", "members": [{"description": "Threshold frequency for the filter.", "getter": "get_cutoff", "name": "cutoff_hz", "setter": "set_cutoff", "type": "float"}, {"description": "", "getter": "get_db", "name": "db", "setter": "set_db", "type": "int"}, {"description": "Gain amount of the frequencies after the filter.", "getter": "get_gain", "name": "gain", "setter": "set_gain", "type": "float"}, {"description": "Amount of boost in the overtones near the cutoff frequency.", "getter": "get_resonance", "name": "resonance", "setter": "set_resonance", "type": "float"}], "methods": [], "name": "AudioEffectFilter", "signals": [], "tutorials": {"links": []}}, "AudioEffectHighPassFilter": {"brief_description": "Adds a high pass filter to the Audio Bus.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Cuts frequencies lower than the [member cutoff_hz] and allows higher frequencies to pass.", "inherits": "AudioEffectFilter", "members": [], "methods": [], "name": "AudioEffectHighPassFilter", "signals": [], "tutorials": {"links": []}}, "AudioEffectHighShelfFilter": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AudioEffectFilter", "members": [], "methods": [], "name": "AudioEffectHighShelfFilter", "signals": [], "tutorials": {"links": []}}, "AudioEffectLimiter": {"brief_description": "Adds a soft clip Limiter audio effect to an Audio bus.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A limiter is similar to a compressor, but it\u2019s less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master Bus is always recommended to reduce the effects of clipping.\n\t\tSoft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.", "inherits": "AudioEffect", "members": [{"description": "The waveform's maximum allowed value. Value can range from -20 to -0.1. Default value: [code]-0.1dB[/code].", "getter": "get_ceiling_db", "name": "ceiling_db", "setter": "set_ceiling_db", "type": "float"}, {"description": "Applies a gain to the limited waves. Value can range from 0 to 6. Default value: [code]2dB[/code].", "getter": "get_soft_clip_db", "name": "soft_clip_db", "setter": "set_soft_clip_db", "type": "float"}, {"description": "", "getter": "get_soft_clip_ratio", "name": "soft_clip_ratio", "setter": "set_soft_clip_ratio", "type": "float"}, {"description": "Threshold from which the limiter begins to be active. Value can range from -30 to 0. Default value: [code]0dB[/code].", "getter": "get_threshold_db", "name": "threshold_db", "setter": "set_threshold_db", "type": "float"}], "methods": [], "name": "AudioEffectLimiter", "signals": [], "tutorials": {"links": []}}, "AudioEffectLowPassFilter": {"brief_description": "Adds a low pass filter to the Audio Bus.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Cuts frequencies higher than the [member cutoff_hz] and allows lower frequencies to pass.", "inherits": "AudioEffectFilter", "members": [], "methods": [], "name": "AudioEffectLowPassFilter", "signals": [], "tutorials": {"links": []}}, "AudioEffectLowShelfFilter": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AudioEffectFilter", "members": [], "methods": [], "name": "AudioEffectLowShelfFilter", "signals": [], "tutorials": {"links": []}}, "AudioEffectNotchFilter": {"brief_description": "Adds a notch filter to the Audio Bus.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Attenuates frequencies in a narrow band around the [member cutoff_hz] and cuts frequencies outside of this range.", "inherits": "AudioEffectFilter", "members": [], "methods": [], "name": "AudioEffectNotchFilter", "signals": [], "tutorials": {"links": []}}, "AudioEffectPanner": {"brief_description": "Adds a Panner audio effect to an Audio bus. Pans sound left or right.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Determines how much of an audio signal is sent to the left and right buses.", "inherits": "AudioEffect", "members": [{"description": "Pan position. Value can range from -1 (fully left) to 1 (fully right).", "getter": "get_pan", "name": "pan", "setter": "set_pan", "type": "float"}], "methods": [], "name": "AudioEffectPanner", "signals": [], "tutorials": {"links": []}}, "AudioEffectPhaser": {"brief_description": "Adds a Phaser audio effect to an Audio bus.\n\t\tCombines the original signal with a copy that is slightly out of phase with the original.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a Low Frequency Oscillator.", "inherits": "AudioEffect", "members": [{"description": "Governs how high the filter frequencies sweep. Low value will primarily affect bass frequencies. High value can sweep high into the treble. Value can range from 0.1 to 4. Default value: [code]1[/code].", "getter": "get_depth", "name": "depth", "setter": "set_depth", "type": "float"}, {"description": "Output percent of modified sound. Value can range from 0.1 to 0.9. Default value: [code]0.7[/code].", "getter": "get_feedback", "name": "feedback", "setter": "set_feedback", "type": "float"}, {"description": "Determines the maximum frequency affected by the LFO modulations. Value can range from 10 to 10000. Default value: [code]1600hz[/code].", "getter": "get_range_max_hz", "name": "range_max_hz", "setter": "set_range_max_hz", "type": "float"}, {"description": "Determines the minimum frequency affected by the LFO modulations. Value can range from 10 to 10000. Default value: [code]440hz[/code].", "getter": "get_range_min_hz", "name": "range_min_hz", "setter": "set_range_min_hz", "type": "float"}, {"description": "Adjusts the rate at which the effect sweeps up and down across the frequency range.", "getter": "get_rate_hz", "name": "rate_hz", "setter": "set_rate_hz", "type": "float"}], "methods": [], "name": "AudioEffectPhaser", "signals": [], "tutorials": {"links": []}}, "AudioEffectPitchShift": {"brief_description": "Adds a Pitch shift audio effect to an Audio bus.\n\t\tRaises or lowers the pitch of original sound.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients.", "inherits": "AudioEffect", "members": [{"description": "Pitch value. Can range from 0 (-1 octave) to 16 (+16 octaves).", "getter": "get_pitch_scale", "name": "pitch_scale", "setter": "set_pitch_scale", "type": "float"}], "methods": [], "name": "AudioEffectPitchShift", "signals": [], "tutorials": {"links": []}}, "AudioEffectRecord": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AudioEffect", "members": [{"description": "", "getter": "get_format", "name": "format", "setter": "set_format", "type": "int"}], "methods": [{"arguments": [], "description": "", "name": "get_recording", "qualifiers": "const", "return_": {"description": "", "type": "AudioStreamSample"}}, {"arguments": [], "description": "", "name": "is_recording_active", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "record", "type": "bool"}], "description": "", "name": "set_recording_active", "return_": {"description": "", "type": "void"}}], "name": "AudioEffectRecord", "signals": [], "tutorials": {"links": []}}, "AudioEffectReverb": {"brief_description": "Adds a Reverb audio effect to an Audio bus.\n\t\tSimulates the sound of acoustic environments such as rooms, concert halls, caverns, or an open spaces.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Simulates rooms of different sizes. Its parameters can be adjusted to simulate the sound of a specific room.", "inherits": "AudioEffect", "members": [{"description": "Widens or narrows the stereo image of the reverb tail. 1 means fully widens. Value can range from 0 to 1. Default value: [code]1[/code].", "getter": "get_damping", "name": "damping", "setter": "set_damping", "type": "float"}, {"description": "Output percent of original sound. At 0, only modified sound is outputted. Value can range from 0 to 1. Default value: [code]1[/code].", "getter": "get_dry", "name": "dry", "setter": "set_dry", "type": "float"}, {"description": "High-pass filter passes signals with a frequency higher than a certain cutoff frequency and attenuates signals with frequencies lower than the cutoff frequency. Value can range from 0 to 1. Default value: [code]0[/code].", "getter": "get_hpf", "name": "hipass", "setter": "set_hpf", "type": "float"}, {"description": "Output percent of predelay. Value can range from 0 to 1. Default value: [code]1[/code].", "getter": "get_predelay_msec", "name": "predelay_feedback", "setter": "set_predelay_msec", "type": "float"}, {"description": "Time between the original signal and the early reflections of the reverb signal. Default value: [code]150ms[/code].", "getter": "get_predelay_msec", "name": "predelay_msec", "setter": "set_predelay_msec", "type": "float"}, {"description": "Dimensions of simulated room. Bigger means more echoes. Value can range from 0 to 1. Default value: [code]0.8[/code].", "getter": "get_room_size", "name": "room_size", "setter": "set_room_size", "type": "float"}, {"description": "Defines how reflective the imaginary room's walls are. Value can range from 0 to 1. Default value: [code]1[/code].", "getter": "get_spread", "name": "spread", "setter": "set_spread", "type": "float"}, {"description": "Output percent of modified sound. At 0, only original sound is outputted. Value can range from 0 to 1. Default value: [code]0.5[/code].", "getter": "get_wet", "name": "wet", "setter": "set_wet", "type": "float"}], "methods": [], "name": "AudioEffectReverb", "signals": [], "tutorials": {"links": []}}, "AudioEffectStereoEnhance": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AudioEffect", "members": [{"description": "", "getter": "get_pan_pullout", "name": "pan_pullout", "setter": "set_pan_pullout", "type": "float"}, {"description": "", "getter": "get_surround", "name": "surround", "setter": "set_surround", "type": "float"}, {"description": "", "getter": "get_time_pullout", "name": "time_pullout_ms", "setter": "set_time_pullout", "type": "float"}], "methods": [], "name": "AudioEffectStereoEnhance", "signals": [], "tutorials": {"links": []}}, "AudioServer": {"brief_description": "Server interface for low level audio access.", "category": "Core", "constants": [{"description": "Two or fewer speakers are detected.", "enum": "SpeakerMode", "name": "SPEAKER_MODE_STEREO", "value": "0"}, {"description": "A 5.1 channel surround setup detected.", "enum": "SpeakerMode", "name": "SPEAKER_SURROUND_51", "value": "2"}, {"description": "A 7.1 channel surround setup detected.", "enum": "SpeakerMode", "name": "SPEAKER_SURROUND_71", "value": "3"}], "demos": {"links": []}, "description": "AudioServer is a low level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"default": "-1", "description": "", "index": "0", "name": "at_position", "type": "int"}], "description": "Adds a bus at [code]at_position[/code].", "name": "add_bus", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "effect", "type": "AudioEffect"}, {"default": "-1", "description": "", "index": "2", "name": "at_position", "type": "int"}], "description": "Adds an [AudioEffect] effect to the bus [code]bus_idx[/code] at [code]at_position[/code].", "name": "add_bus_effect", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "capture_get_device", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "capture_get_device_list", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "capture_set_device", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Generates an [AudioBusLayout] using the available busses and effects.", "name": "generate_bus_layout", "qualifiers": "const", "return_": {"description": "", "type": "AudioBusLayout"}}, {"arguments": [], "description": "Returns the number of available busses.", "name": "get_bus_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "effect_idx", "type": "int"}], "description": "Returns the [AudioEffect] at position [code]effect_idx[/code] in bus [code]bus_idx[/code].", "name": "get_bus_effect", "return_": {"description": "", "type": "AudioEffect"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}], "description": "Returns the number of effects on the bus at [code]bus_idx[/code].", "name": "get_bus_effect_count", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_name", "type": "String"}], "description": "Returns the index of the bus with the name [code]bus_name[/code].", "name": "get_bus_index", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}], "description": "Returns the name of the bus with the index [code]bus_idx[/code].", "name": "get_bus_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "channel", "type": "int"}], "description": "Returns the peak volume of the left speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code].", "name": "get_bus_peak_volume_left_db", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "channel", "type": "int"}], "description": "Returns the peak volume of the right speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code].", "name": "get_bus_peak_volume_right_db", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}], "description": "Returns the name of the bus that the bus at index [code]bus_idx[/code] sends to.", "name": "get_bus_send", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}], "description": "Returns the volume of the bus at index [code]bus_idx[/code] in dB.", "name": "get_bus_volume_db", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "", "name": "get_device", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "get_device_list", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns the sample rate at the output of the audioserver.", "name": "get_mix_rate", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the speaker configuration.", "name": "get_speaker_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}], "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is bypassing effects.", "name": "is_bus_bypassing_effects", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "effect_idx", "type": "int"}], "description": "If [code]true[/code] the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled.", "name": "is_bus_effect_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}], "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is muted.", "name": "is_bus_mute", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}], "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is in solo mode.", "name": "is_bus_solo", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Locks the audio drivers mainloop. Remember to unlock it afterwards.", "name": "lock", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "to_index", "type": "int"}], "description": "Moves the bus from index [code]index[/code] to index [code]to_index[/code].", "name": "move_bus", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Removes the bus at index [code]index[/code].", "name": "remove_bus", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "effect_idx", "type": "int"}], "description": "Removes the effect at index [code]effect_idx[/code] from the bus at index [code]bus_idx[/code].", "name": "remove_bus_effect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is bypassing effects.", "name": "set_bus_bypass_effects", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "amount", "type": "int"}], "description": "Adds and removes busses to make the number of busses match [code]amount[/code].", "name": "set_bus_count", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "effect_idx", "type": "int"}, {"description": "", "index": "2", "name": "enabled", "type": "bool"}], "description": "If [code]true[/code] the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled.", "name": "set_bus_effect_enabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_layout", "type": "AudioBusLayout"}], "description": "Overwrites the currently used [AudioBusLayout].", "name": "set_bus_layout", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is muted.", "name": "set_bus_mute", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "name", "type": "String"}], "description": "Sets the name of the bus at index [code]bus_idx[/code] to [code]name[/code].", "name": "set_bus_name", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "send", "type": "String"}], "description": "Connects the output of the bus at [code]bus_idx[/code] to the bus named [code]send[/code].", "name": "set_bus_send", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "If [code]true[/code] the bus at index [code]bus_idx[/code] is in solo mode.", "name": "set_bus_solo", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "volume_db", "type": "float"}], "description": "Sets the volume of the bus at index [code]bus_idx[/code] to [code]volume_db[/code].", "name": "set_bus_volume_db", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "String"}], "description": "", "name": "set_device", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bus_idx", "type": "int"}, {"description": "", "index": "1", "name": "effect_idx", "type": "int"}, {"description": "", "index": "2", "name": "by_effect_idx", "type": "int"}], "description": "Swaps the position of two effects in bus [code]bus_idx[/code].", "name": "swap_bus_effects", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Unlocks the audiodriver's main loop. After locking it always unlock it.", "name": "unlock", "return_": {"description": "", "type": "void"}}], "name": "AudioServer", "signals": [{"arguments": [], "description": "Emitted when the [AudioBusLayout] changes.", "name": "bus_layout_changed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/audio/audio_buses.html"}]}}, "AudioStream": {"brief_description": "Base class for audio streams.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Base class for audio streams. Audio streams are used for music playback, or other types of streamed sounds that don't fit or require more flexibility than a [Sample].", "inherits": "Resource", "members": [], "methods": [{"arguments": [], "description": "Returns the length of the audio stream in seconds.", "name": "get_length", "qualifiers": "const", "return_": {"description": "", "type": "float"}}], "name": "AudioStream", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/audio/audio_streams.html"}]}}, "AudioStreamMicrophone": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "AudioStream", "members": [], "methods": [], "name": "AudioStreamMicrophone", "signals": [], "tutorials": {"links": []}}, "AudioStreamPlayback": {"brief_description": "Meta class for playing back audio.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Can play, loop, pause a scroll through Audio. See [AudioStream] and [AudioStreamOGGVorbis] for usage.", "inherits": "Reference", "members": [], "methods": [], "name": "AudioStreamPlayback", "signals": [], "tutorials": {"links": []}}, "AudioStreamPlayer": {"brief_description": "Plays back audio.", "category": "Core", "constants": [{"description": "The audio will be played only on the first channel.", "enum": "MixTarget", "name": "MIX_TARGET_STEREO", "value": "0"}, {"description": "The audio will be played on all surround channels.", "enum": "MixTarget", "name": "MIX_TARGET_SURROUND", "value": "1"}, {"description": "The audio will be played on the second channel, which is usually the center.", "enum": "MixTarget", "name": "MIX_TARGET_CENTER", "value": "2"}], "demos": {"links": []}, "description": "Plays background audio.", "inherits": "Node", "members": [{"description": "If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code].", "getter": "is_autoplay_enabled", "name": "autoplay", "setter": "set_autoplay", "type": "bool"}, {"description": "Bus on which this audio is playing.", "getter": "get_bus", "name": "bus", "setter": "set_bus", "type": "String"}, {"description": "If the audio configuration has more than two speakers, this sets the target channels. See [code]MIX_TARGET_*[/code] constants.", "getter": "get_mix_target", "name": "mix_target", "setter": "set_mix_target", "type": "int"}, {"description": "Changes the pitch and the tempo of the audio.", "getter": "get_pitch_scale", "name": "pitch_scale", "setter": "set_pitch_scale", "type": "float"}, {"description": "If [code]true[/code] audio is playing.", "getter": "is_playing", "name": "playing", "setter": "_set_playing", "type": "bool"}, {"description": "The [AudioStream] object to be played.", "getter": "get_stream", "name": "stream", "setter": "set_stream", "type": "AudioStream"}, {"description": "", "getter": "get_stream_paused", "name": "stream_paused", "setter": "set_stream_paused", "type": "bool"}, {"description": "Volume of sound, in dB.", "getter": "get_volume_db", "name": "volume_db", "setter": "set_volume_db", "type": "float"}], "methods": [{"arguments": [], "description": "Returns the position in the [AudioStream] in seconds.", "name": "get_playback_position", "return_": {"description": "", "type": "float"}}, {"arguments": [{"default": "0.0", "description": "", "index": "0", "name": "from_position", "type": "float"}], "description": "Plays the audio from the given position 'from_position', in seconds.", "name": "play", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "to_position", "type": "float"}], "description": "Sets the position from which audio will be played, in seconds.", "name": "seek", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Stops the audio.", "name": "stop", "return_": {"description": "", "type": "void"}}], "name": "AudioStreamPlayer", "signals": [{"arguments": [], "description": "Emitted when the audio stops playing.", "name": "finished"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/latest/learning/features/audio/index.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/audio/audio_streams.html"}]}}, "AudioStreamPlayer2D": {"brief_description": "Plays audio in 2D.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Plays audio that dampens with distance from screen center.", "inherits": "Node2D", "members": [{"description": "Areas in which this sound plays.", "getter": "get_area_mask", "name": "area_mask", "setter": "set_area_mask", "type": "int"}, {"description": "Dampens audio over distance with this as an exponent.", "getter": "get_attenuation", "name": "attenuation", "setter": "set_attenuation", "type": "float"}, {"description": "If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code].", "getter": "is_autoplay_enabled", "name": "autoplay", "setter": "set_autoplay", "type": "bool"}, {"description": "Bus on which this audio is playing.", "getter": "get_bus", "name": "bus", "setter": "set_bus", "type": "String"}, {"description": "Maximum distance from which audio is still hearable.", "getter": "get_max_distance", "name": "max_distance", "setter": "set_max_distance", "type": "float"}, {"description": "Changes the pitch and the tempo of the audio.", "getter": "get_pitch_scale", "name": "pitch_scale", "setter": "set_pitch_scale", "type": "float"}, {"description": "If [code]true[/code] audio is playing.", "getter": "is_playing", "name": "playing", "setter": "_set_playing", "type": "bool"}, {"description": "The [AudioStream] object to be played.", "getter": "get_stream", "name": "stream", "setter": "set_stream", "type": "AudioStream"}, {"description": "", "getter": "get_stream_paused", "name": "stream_paused", "setter": "set_stream_paused", "type": "bool"}, {"description": "Base volume without dampening.", "getter": "get_volume_db", "name": "volume_db", "setter": "set_volume_db", "type": "float"}], "methods": [{"arguments": [], "description": "Returns the position in the [AudioStream].", "name": "get_playback_position", "return_": {"description": "", "type": "float"}}, {"arguments": [{"default": "0.0", "description": "", "index": "0", "name": "from_position", "type": "float"}], "description": "Plays the audio from the given position 'from_position', in seconds.", "name": "play", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "to_position", "type": "float"}], "description": "Sets the position from which audio will be played, in seconds.", "name": "seek", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Stops the audio.", "name": "stop", "return_": {"description": "", "type": "void"}}], "name": "AudioStreamPlayer2D", "signals": [{"arguments": [], "description": "Emitted when the audio stops playing.", "name": "finished"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/latest/learning/features/audio/index.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/audio/audio_streams.html"}]}}, "AudioStreamPlayer3D": {"brief_description": "Plays 3D sound in 3D space.", "category": "Core", "constants": [{"description": "Linear dampening of loudness according to distance.", "enum": "AttenuationModel", "name": "ATTENUATION_INVERSE_DISTANCE", "value": "0"}, {"description": "Squared dampening of loudness according to distance.", "enum": "AttenuationModel", "name": "ATTENUATION_INVERSE_SQUARE_DISTANCE", "value": "1"}, {"description": "Logarithmic dampening of loudness according to distance.", "enum": "AttenuationModel", "name": "ATTENUATION_LOGARITHMIC", "value": "2"}, {"description": "Mix this audio in, even when it's out of range.", "enum": "OutOfRangeMode", "name": "OUT_OF_RANGE_MIX", "value": "0"}, {"description": "Pause this audio when it gets out of range.", "enum": "OutOfRangeMode", "name": "OUT_OF_RANGE_PAUSE", "value": "1"}, {"description": "Disables doppler tracking.", "enum": "DopplerTracking", "name": "DOPPLER_TRACKING_DISABLED", "value": "0"}, {"description": "Executes doppler tracking in idle step.", "enum": "DopplerTracking", "name": "DOPPLER_TRACKING_IDLE_STEP", "value": "1"}, {"description": "Executes doppler tracking in physics step.", "enum": "DopplerTracking", "name": "DOPPLER_TRACKING_PHYSICS_STEP", "value": "2"}], "demos": {"links": []}, "description": "Plays a sound effect with directed sound effects, dampens with distance if needed, generates effect of hearable position in space.", "inherits": "Spatial", "members": [{"description": "Areas in which this sound plays.", "getter": "get_area_mask", "name": "area_mask", "setter": "set_area_mask", "type": "int"}, {"description": "Dampens audio above this frequency, in Hz.", "getter": "get_attenuation_filter_cutoff_hz", "name": "attenuation_filter_cutoff_hz", "setter": "set_attenuation_filter_cutoff_hz", "type": "float"}, {"description": "Amount how much the filter affects the loudness, in dB.", "getter": "get_attenuation_filter_db", "name": "attenuation_filter_db", "setter": "set_attenuation_filter_db", "type": "float"}, {"description": "Decides if audio should get quieter with distance linearly, quadratically or logarithmically.", "getter": "get_attenuation_model", "name": "attenuation_model", "setter": "set_attenuation_model", "type": "int"}, {"description": "If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code].", "getter": "is_autoplay_enabled", "name": "autoplay", "setter": "set_autoplay", "type": "bool"}, {"description": "Bus on which this audio is playing.", "getter": "get_bus", "name": "bus", "setter": "set_bus", "type": "String"}, {"description": "Decides in which step the Doppler effect should be calculated.", "getter": "get_doppler_tracking", "name": "doppler_tracking", "setter": "set_doppler_tracking", "type": "int"}, {"description": "The angle in which the audio reaches cameras undampened.", "getter": "get_emission_angle", "name": "emission_angle_degrees", "setter": "set_emission_angle", "type": "float"}, {"description": "If [code]true[/code] the audio should be dampened according to the direction of the sound.", "getter": "is_emission_angle_enabled", "name": "emission_angle_enabled", "setter": "set_emission_angle_enabled", "type": "bool"}, {"description": "dampens audio if camera is outside of 'emission_angle_degrees' and 'emission_angle_enabled' is set by this factor, in dB.", "getter": "get_emission_angle_filter_attenuation_db", "name": "emission_angle_filter_attenuation_db", "setter": "set_emission_angle_filter_attenuation_db", "type": "float"}, {"description": "Sets the absolute maximum of the soundlevel, in dB.", "getter": "get_max_db", "name": "max_db", "setter": "set_max_db", "type": "float"}, {"description": "Sets the distance from which the 'out_of_range_mode' takes effect. Has no effect if set to 0.", "getter": "get_max_distance", "name": "max_distance", "setter": "set_max_distance", "type": "float"}, {"description": "Decides if audio should pause when source is outside of 'max_distance' range.", "getter": "get_out_of_range_mode", "name": "out_of_range_mode", "setter": "set_out_of_range_mode", "type": "int"}, {"description": "Changes the pitch and the tempo of the audio.", "getter": "get_pitch_scale", "name": "pitch_scale", "setter": "set_pitch_scale", "type": "float"}, {"description": "If [code]true[/code], audio is playing.", "getter": "is_playing", "name": "playing", "setter": "_set_playing", "type": "bool"}, {"description": "The [AudioStream] object to be played.", "getter": "get_stream", "name": "stream", "setter": "set_stream", "type": "AudioStream"}, {"description": "", "getter": "get_stream_paused", "name": "stream_paused", "setter": "set_stream_paused", "type": "bool"}, {"description": "Base sound level unaffected by dampening, in dB.", "getter": "get_unit_db", "name": "unit_db", "setter": "set_unit_db", "type": "float"}, {"description": "Factor for the attenuation effect.", "getter": "get_unit_size", "name": "unit_size", "setter": "set_unit_size", "type": "float"}], "methods": [{"arguments": [], "description": "Returns the position in the [AudioStream].", "name": "get_playback_position", "return_": {"description": "", "type": "float"}}, {"arguments": [{"default": "0.0", "description": "", "index": "0", "name": "from_position", "type": "float"}], "description": "Plays the audio from the given position 'from_position', in seconds.", "name": "play", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "to_position", "type": "float"}], "description": "Sets the position from which audio will be played, in seconds.", "name": "seek", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Stops the audio.", "name": "stop", "return_": {"description": "", "type": "void"}}], "name": "AudioStreamPlayer3D", "signals": [{"arguments": [], "description": "Fires when the audio stops playing.", "name": "finished"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/latest/learning/features/audio/index.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/audio/audio_streams.html"}]}}, "AudioStreamRandomPitch": {"brief_description": "Plays audio with random pitch tweaking.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Randomly varies pitch on each start.", "inherits": "AudioStream", "members": [{"description": "The current [AudioStream].", "getter": "get_audio_stream", "name": "audio_stream", "setter": "set_audio_stream", "type": "AudioStream"}, {"description": "The intensity of random pitch variation.", "getter": "get_random_pitch", "name": "random_pitch", "setter": "set_random_pitch", "type": "float"}], "methods": [], "name": "AudioStreamRandomPitch", "signals": [], "tutorials": {"links": []}}, "AudioStreamSample": {"brief_description": "Plays audio.", "category": "Core", "constants": [{"description": "Audio codec 8 bit.", "enum": "Format", "name": "FORMAT_8_BITS", "value": "0"}, {"description": "Audio codec 16 bit.", "enum": "Format", "name": "FORMAT_16_BITS", "value": "1"}, {"description": "Audio codec IMA ADPCM.", "enum": "Format", "name": "FORMAT_IMA_ADPCM", "value": "2"}, {"description": "Audio does not loop.", "enum": "LoopMode", "name": "LOOP_DISABLED", "value": "0"}, {"description": "Audio loops the data between loop_begin and loop_end playing forward only.", "enum": "LoopMode", "name": "LOOP_FORWARD", "value": "1"}, {"description": "Audio loops the data between loop_begin and loop_end playing back and forth.", "enum": "LoopMode", "name": "LOOP_PING_PONG", "value": "2"}], "demos": {"links": []}, "description": "Plays audio, can loop.", "inherits": "AudioStream", "members": [{"description": "Contains the audio data in bytes.", "getter": "get_data", "name": "data", "setter": "set_data", "type": "PoolByteArray"}, {"description": "Audio format. See FORMAT_* constants for values.", "getter": "get_format", "name": "format", "setter": "set_format", "type": "int"}, {"description": "Loop start in bytes.", "getter": "get_loop_begin", "name": "loop_begin", "setter": "set_loop_begin", "type": "int"}, {"description": "Loop end in bytes.", "getter": "get_loop_end", "name": "loop_end", "setter": "set_loop_end", "type": "int"}, {"description": "Loop mode. See LOOP_* constants for values.", "getter": "get_loop_mode", "name": "loop_mode", "setter": "set_loop_mode", "type": "int"}, {"description": "The sample rate for mixing this audio.", "getter": "get_mix_rate", "name": "mix_rate", "setter": "set_mix_rate", "type": "int"}, {"description": "If [code]true[/code], audio is stereo. Default value: [code]false[/code].", "getter": "is_stereo", "name": "stereo", "setter": "set_stereo", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "", "name": "save_to_wav", "return_": {"description": "", "type": "void"}}], "name": "AudioStreamSample", "signals": [], "tutorials": {"links": []}}, "BackBufferCopy": {"brief_description": "Copies a region of the screen (or the whole screen) to a buffer so it can be accessed with [code]SCREEN_TEXTURE[/code] in the [code]texture()[/code] function.", "category": "Core", "constants": [{"description": "Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers.", "enum": "CopyMode", "name": "COPY_MODE_DISABLED", "value": "0"}, {"description": "BackBufferCopy buffers a rectangular region.", "enum": "CopyMode", "name": "COPY_MODE_RECT", "value": "1"}, {"description": "BackBufferCopy buffers the entire screen.", "enum": "CopyMode", "name": "COPY_MODE_VIEWPORT", "value": "2"}], "demos": {"links": []}, "description": "Node for back-buffering the currently displayed screen. The region defined in the BackBufferCopy node is bufferized with the content of the screen it covers, or the entire screen according to the copy mode set. Use [code]SCREEN_TEXTURE[/code] in the [code]texture()[/code] function to access the buffer.", "inherits": "Node2D", "members": [{"description": "Buffer mode. See [code]COPY_MODE_*[/code] constants.", "getter": "get_copy_mode", "name": "copy_mode", "setter": "set_copy_mode", "type": "int"}, {"description": "The area covered by the BackBufferCopy. Only used if [code]copy_mode[/code] is [code]COPY_MODE_RECT[/code].", "getter": "get_rect", "name": "rect", "setter": "set_rect", "type": "Rect2"}], "methods": [], "name": "BackBufferCopy", "signals": [], "tutorials": {"links": []}}, "BakedLightmap": {"brief_description": "Prerendered indirect light map for a scene.", "category": "Core", "constants": [{"description": "Lowest bake quality mode. Fastest to calculate.", "enum": "BakeQuality", "name": "BAKE_QUALITY_LOW", "value": "0"}, {"description": "Default bake quality mode.", "enum": "BakeQuality", "name": "BAKE_QUALITY_MEDIUM", "value": "1"}, {"description": "Highest bake quality mode. Takes longer to calculate.", "enum": "BakeQuality", "name": "BAKE_QUALITY_HIGH", "value": "2"}, {"description": "Less precise but faster bake mode.", "enum": "BakeMode", "name": "BAKE_MODE_CONE_TRACE", "value": "0"}, {"description": "More precise bake mode but can take considerably longer to bake.", "enum": "BakeMode", "name": "BAKE_MODE_RAY_TRACE", "value": "1"}, {"description": "", "enum": "BakeError", "name": "BAKE_ERROR_OK", "value": "0"}, {"description": "", "enum": "BakeError", "name": "BAKE_ERROR_NO_SAVE_PATH", "value": "1"}, {"description": "", "enum": "BakeError", "name": "BAKE_ERROR_NO_MESHES", "value": "2"}, {"description": "", "enum": "BakeError", "name": "BAKE_ERROR_CANT_CREATE_IMAGE", "value": "3"}, {"description": "", "enum": "BakeError", "name": "BAKE_ERROR_USER_ABORTED", "value": "4"}], "demos": {"links": []}, "description": "Baked lightmaps are an alternative workflow for adding indirect (or baked) lighting to a scene. Unlike the [GIProbe] approach, baked lightmaps work fine on low-end PCs and mobile devices as they consume almost no resources in run-time.", "inherits": "VisualInstance", "members": [{"description": "Grid subdivision size for lightmapper calculation. Default value of [code]0.25[/code] will work for most cases. Increase for better lighting on small details or if your scene is very large.", "getter": "get_bake_cell_size", "name": "bake_cell_size", "setter": "set_bake_cell_size", "type": "float"}, {"description": "", "getter": "get_energy", "name": "bake_energy", "setter": "set_energy", "type": "float"}, {"description": "Size of affected area.", "getter": "get_extents", "name": "bake_extents", "setter": "set_extents", "type": "Vector3"}, {"description": "If [code]true[/code] lightmap can capture light values greater than [code]1.0[/code]. Turning this off will result in a smaller lightmap. Default value:[code]false[/code].", "getter": "is_hdr", "name": "bake_hdr", "setter": "set_hdr", "type": "bool"}, {"description": "Lightmapping mode. See [enum BakeMode].", "getter": "get_bake_mode", "name": "bake_mode", "setter": "set_bake_mode", "type": "int"}, {"description": "", "getter": "get_propagation", "name": "bake_propagation", "setter": "set_propagation", "type": "float"}, {"description": "Three quality modes are available. Higher quality requires more rendering time. See [enum BakeQuality].", "getter": "get_bake_quality", "name": "bake_quality", "setter": "set_bake_quality", "type": "int"}, {"description": "Grid size used for real-time capture information on dynamic objects. Cannot be larger than [member bake_cell_size].", "getter": "get_capture_cell_size", "name": "capture_cell_size", "setter": "set_capture_cell_size", "type": "float"}, {"description": "Location where lightmaps will be saved.", "getter": "get_image_path", "name": "image_path", "setter": "set_image_path", "type": "String"}, {"description": "The calculated light data.", "getter": "get_light_data", "name": "light_data", "setter": "set_light_data", "type": "BakedLightmapData"}], "methods": [{"arguments": [{"default": "null", "description": "", "index": "0", "name": "from_node", "type": "Node"}, {"default": "false", "description": "", "index": "1", "name": "create_visual_debug", "type": "bool"}], "description": "", "name": "bake", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "debug_bake", "return_": {"description": "", "type": "void"}}], "name": "BakedLightmap", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/baked_lightmaps.html"}]}}, "BakedLightmapData": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [{"description": "", "getter": "get_bounds", "name": "bounds", "setter": "set_bounds", "type": "AABB"}, {"description": "", "getter": "get_cell_space_transform", "name": "cell_space_transform", "setter": "set_cell_space_transform", "type": "Transform"}, {"description": "", "getter": "get_cell_subdiv", "name": "cell_subdiv", "setter": "set_cell_subdiv", "type": "int"}, {"description": "", "getter": "get_energy", "name": "energy", "setter": "set_energy", "type": "float"}, {"description": "", "getter": "get_octree", "name": "octree", "setter": "set_octree", "type": "PoolByteArray"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "path", "type": "NodePath"}, {"description": "", "index": "1", "name": "lightmap", "type": "Texture"}, {"description": "", "index": "2", "name": "instance", "type": "int"}], "description": "", "name": "add_user", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "clear_users", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_user_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "user_idx", "type": "int"}], "description": "", "name": "get_user_lightmap", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "user_idx", "type": "int"}], "description": "", "name": "get_user_path", "qualifiers": "const", "return_": {"description": "", "type": "NodePath"}}], "name": "BakedLightmapData", "signals": [], "tutorials": {"links": []}}, "BaseButton": {"brief_description": "Base class for different kinds of buttons.", "category": "Core", "constants": [{"description": "The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons.", "enum": "DrawMode", "name": "DRAW_NORMAL", "value": "0"}, {"description": "The state of buttons are pressed.", "enum": "DrawMode", "name": "DRAW_PRESSED", "value": "1"}, {"description": "The state of buttons are hovered.", "enum": "DrawMode", "name": "DRAW_HOVER", "value": "2"}, {"description": "The state of buttons are disabled.", "enum": "DrawMode", "name": "DRAW_DISABLED", "value": "3"}, {"description": "Require just a press to consider the button clicked.", "enum": "ActionMode", "name": "ACTION_MODE_BUTTON_PRESS", "value": "0"}, {"description": "Require a press and a subsequent release before considering the button clicked.", "enum": "ActionMode", "name": "ACTION_MODE_BUTTON_RELEASE", "value": "1"}], "demos": {"links": []}, "description": "BaseButton is the abstract base class for buttons, so it shouldn't be used directly (it doesn't display anything). Other types of buttons inherit from it.", "inherits": "Control", "members": [{"description": "Determines when the button is considered clicked, one of the ACTION_MODE_* constants.", "getter": "get_action_mode", "name": "action_mode", "setter": "set_action_mode", "type": "int"}, {"description": "Binary mask to choose which mouse buttons this button will respond to.\n\t\t\tTo allow both left-click and right-click, set this to 3, because it's BUTTON_MASK_LEFT | BUTTON_MASK_RIGHT.", "getter": "get_button_mask", "name": "button_mask", "setter": "set_button_mask", "type": "int"}, {"description": "If [code]true[/code] the button is in disabled state and can't be clicked or toggled.", "getter": "is_disabled", "name": "disabled", "setter": "set_disabled", "type": "bool"}, {"description": "Focus access mode to use when switching between enabled/disabled (see [method Control.set_focus_mode] and [member disabled]).", "getter": "get_enabled_focus_mode", "name": "enabled_focus_mode", "setter": "set_enabled_focus_mode", "type": "int"}, {"description": "[ButtonGroup] associated to the button.", "getter": "get_button_group", "name": "group", "setter": "set_button_group", "type": "ButtonGroup"}, {"description": "If [code]true[/code] the button's state is pressed. Means the button is pressed down or toggled (if toggle_mode is active).", "getter": "is_pressed", "name": "pressed", "setter": "set_pressed", "type": "bool"}, {"description": "[Shortcut] associated to the button.", "getter": "get_shortcut", "name": "shortcut", "setter": "set_shortcut", "type": "ShortCut"}, {"description": "If [code]true[/code] the button is in toggle mode. Makes the button flip state between pressed and unpressed each time its area is clicked.", "getter": "is_toggle_mode", "name": "toggle_mode", "setter": "set_toggle_mode", "type": "bool"}], "methods": [{"arguments": [], "description": "Called when the button is pressed.", "name": "_pressed", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "button_pressed", "type": "bool"}], "description": "Called when the button is toggled (only if toggle_mode is active).", "name": "_toggled", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to \"draw\" signal. The visual state of the button is defined by the DRAW_* enum.", "name": "get_draw_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return true if the mouse has entered the button and has not left it yet.", "name": "is_hovered", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "BaseButton", "signals": [{"arguments": [], "description": "Emitted when the button starts being held down.", "name": "button_down"}, {"arguments": [], "description": "Emitted when the button stops being held down.", "name": "button_up"}, {"arguments": [], "description": "This signal is emitted every time the button is toggled or pressed (i.e. activated, so on [code]button_down[/code] if \"Click on press\" is active and on [code]button_up[/code] otherwise).", "name": "pressed"}, {"arguments": [{"description": "", "index": "0", "name": "button_pressed", "type": "bool"}], "description": "This signal is emitted when the button was just toggled between pressed and normal states (only if toggle_mode is active). The new state is contained in the [i]pressed[/i] argument.", "name": "toggled"}], "tutorials": {"links": []}}, "Basis": {"brief_description": "3x3 matrix datatype.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "3x3 matrix used for 3D rotation and scale. Contains 3 vector fields x,y and z as its columns, which can be interpreted as the local basis vectors of a transformation. Can also be accessed as array of 3D vectors. These vectors are orthogonal to each other, but are not necessarily normalized (due to scaling). Almost always used as orthogonal basis for a [Transform].\n\t\tFor such use, it is composed of a scaling and a rotation matrix, in that order (M = R.S).", "members": [{"description": "The basis matrix's x vector.", "getter": "", "name": "x", "setter": "", "type": "Vector3"}, {"description": "The basis matrix's y vector.", "getter": "", "name": "y", "setter": "", "type": "Vector3"}, {"description": "The basis matrix's z vector.", "getter": "", "name": "z", "setter": "", "type": "Vector3"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Quat"}], "description": "Create a rotation matrix from the given quaternion.", "name": "Basis", "return_": {"description": "", "type": "Basis"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}], "description": "Create a rotation matrix (in the YXZ convention: first Z, then X, and Y last) from the specified Euler angles, given in the vector format as (X-angle, Y-angle, Z-angle).", "name": "Basis", "return_": {"description": "", "type": "Basis"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "phi", "type": "float"}], "description": "Create a rotation matrix which rotates around the given axis by the specified angle, in radians. The axis must be a normalized vector.", "name": "Basis", "return_": {"description": "", "type": "Basis"}}, {"arguments": [{"description": "", "index": "0", "name": "x_axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "y_axis", "type": "Vector3"}, {"description": "", "index": "2", "name": "z_axis", "type": "Vector3"}], "description": "Create a matrix from 3 axis vectors.", "name": "Basis", "return_": {"description": "", "type": "Basis"}}, {"arguments": [], "description": "Return the determinant of the matrix.", "name": "determinant", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Assuming that the matrix is a proper rotation matrix (orthonormal matrix with determinant +1), return Euler angles (in the YXZ convention: first Z, then X, and Y last). Returned vector contains the rotation angles in the format (X-angle, Y-angle, Z-angle).", "name": "get_euler", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "This function considers a discretization of rotations into 24 points on unit sphere, lying along the vectors (x,y,z) with each component being either -1,0 or 1, and returns the index of the point best representing the orientation of the object. It is mainly used by the grid map editor. For further details, refer to Godot source code.", "name": "get_orthogonal_index", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Assuming that the matrix is the combination of a rotation and scaling, return the absolute value of scaling factors along each axis.", "name": "get_scale", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Return the inverse of the matrix.", "name": "inverse", "return_": {"description": "", "type": "Basis"}}, {"arguments": [], "description": "Return the orthonormalized version of the matrix (useful to call from time to time to avoid rounding error for orthogonal matrices). This performs a Gram-Schmidt orthonormalization on the basis of the matrix.", "name": "orthonormalized", "return_": {"description": "", "type": "Basis"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "phi", "type": "float"}], "description": "Introduce an additional rotation around the given axis by phi (radians). The axis must be a normalized vector.", "name": "rotated", "return_": {"description": "", "type": "Basis"}}, {"arguments": [{"description": "", "index": "0", "name": "scale", "type": "Vector3"}], "description": "Introduce an additional scaling specified by the given 3D scaling factor.", "name": "scaled", "return_": {"description": "", "type": "Basis"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Basis"}, {"description": "", "index": "1", "name": "t", "type": "float"}], "description": "Assuming that the matrix is a proper rotation matrix, slerp performs a spherical-linear interpolation with another rotation matrix.", "name": "slerp", "return_": {"description": "", "type": "Basis"}}, {"arguments": [{"description": "", "index": "0", "name": "with", "type": "Vector3"}], "description": "Transposed dot product with the x axis of the matrix.", "name": "tdotx", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "with", "type": "Vector3"}], "description": "Transposed dot product with the y axis of the matrix.", "name": "tdoty", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "with", "type": "Vector3"}], "description": "Transposed dot product with the z axis of the matrix.", "name": "tdotz", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Return the transposed version of the matrix.", "name": "transposed", "return_": {"description": "", "type": "Basis"}}, {"arguments": [{"description": "", "index": "0", "name": "v", "type": "Vector3"}], "description": "Return a vector transformed (multiplied) by the matrix.", "name": "xform", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "v", "type": "Vector3"}], "description": "Return a vector transformed (multiplied) by the transposed matrix. Note that this results in a multiplication by the inverse of the matrix only if it represents a rotation-reflection.", "name": "xform_inv", "return_": {"description": "", "type": "Vector3"}}], "name": "Basis", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/latest/tutorials/3d/using_transforms.html"}, {"description": "http://docs.godotengine.org/en/latest/tutorials/math/rotations.html"}]}}, "BitMap": {"brief_description": "Boolean matrix.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates.", "inherits": "Resource", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "size", "type": "Vector2"}], "description": "Creates a bitmap with the specified size, filled with false.", "name": "create", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "image", "type": "Image"}, {"default": "0.1", "description": "", "index": "1", "name": "threshold", "type": "float"}], "description": "Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to false if the alpha value of the image at that position is equal to [code]threshold[/code] or less, and true in other case.", "name": "create_from_image_alpha", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Returns bitmap's value at the specified position.", "name": "get_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns bitmap's dimensions.", "name": "get_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the amount of bitmap elements that are set to true.", "name": "get_true_bit_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "pixels", "type": "int"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}], "description": "", "name": "grow_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rect", "type": "Rect2"}, {"default": "2.0", "description": "", "index": "1", "name": "epsilon", "type": "float"}], "description": "", "name": "opaque_to_polygons", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}, {"description": "", "index": "1", "name": "bit", "type": "bool"}], "description": "Sets the bitmap's element at the specified position, to the specified value.", "name": "set_bit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "p_rect", "type": "Rect2"}, {"description": "", "index": "1", "name": "bit", "type": "bool"}], "description": "Sets a rectangular portion of the bitmap to the specified value.", "name": "set_bit_rect", "return_": {"description": "", "type": "void"}}], "name": "BitMap", "signals": [], "tutorials": {"links": []}}, "BitmapFont": {"brief_description": "Renders text using [code]*.fnt[/code] fonts.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Renders text using [code]*.fnt[/code] fonts containing texture atlases. Supports distance fields. For using vector font files like TTF directly, see [DynamicFont].", "inherits": "Font", "members": [{"description": "Ascent (number of pixels above the baseline).", "getter": "get_ascent", "name": "ascent", "setter": "set_ascent", "type": "float"}, {"description": "If [code]true[/code] distance field hint is enabled.", "getter": "is_distance_field_hint", "name": "distance_field", "setter": "set_distance_field_hint", "type": "bool"}, {"description": "The fallback font.", "getter": "get_fallback", "name": "fallback", "setter": "set_fallback", "type": "BitmapFont"}, {"description": "Total font height (ascent plus descent) in pixels.", "getter": "get_height", "name": "height", "setter": "set_height", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "character", "type": "int"}, {"description": "", "index": "1", "name": "texture", "type": "int"}, {"description": "", "index": "2", "name": "rect", "type": "Rect2"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "3", "name": "align", "type": "Vector2"}, {"default": "-1", "description": "", "index": "4", "name": "advance", "type": "float"}], "description": "Adds a character to the font, where [code]character[/code] is the unicode value, [code]texture[/code] is the texture index, [code]rect[/code] is the region in the texture (in pixels!), [code]align[/code] is the (optional) alignment for the character and [code]advance[/code] is the (optional) advance.", "name": "add_char", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "char_a", "type": "int"}, {"description": "", "index": "1", "name": "char_b", "type": "int"}, {"description": "", "index": "2", "name": "kerning", "type": "int"}], "description": "Adds a kerning pair to the [code]BitmapFont[/code] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.", "name": "add_kerning_pair", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "Texture"}], "description": "Adds a texture to the [code]BitmapFont[/code].", "name": "add_texture", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clears all the font data and settings.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Creates a BitmapFont from the [code]*.fnt[/code] file at [code]path[/code].", "name": "create_from_fnt", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "char", "type": "int"}, {"default": "0", "description": "", "index": "1", "name": "next", "type": "int"}], "description": "Returns the size of a character, optionally taking kerning into account if the next character is provided.", "name": "get_char_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "char_a", "type": "int"}, {"description": "", "index": "1", "name": "char_b", "type": "int"}], "description": "Returns a kerning pair as a difference.", "name": "get_kerning_pair", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the font atlas texture at index [code]idx[/code].", "name": "get_texture", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [], "description": "Returns the number of textures in the BitmapFont atlas.", "name": "get_texture_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}], "name": "BitmapFont", "signals": [], "tutorials": {"links": []}}, "Bone2D": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Node2D", "members": [{"description": "", "getter": "get_default_length", "name": "default_length", "setter": "set_default_length", "type": "float"}, {"description": "", "getter": "get_rest", "name": "rest", "setter": "set_rest", "type": "Transform2D"}], "methods": [{"arguments": [], "description": "", "name": "apply_rest", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_index_in_skeleton", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_skeleton_rest", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}], "name": "Bone2D", "signals": [], "tutorials": {"links": []}}, "BoneAttachment": {"brief_description": "A node that will attach to a bone.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This node must be the child of a [Skeleton] node. You can then select a bone for this node to attach to. The BoneAttachment node will copy the transform of the selected bone.", "inherits": "Spatial", "members": [{"description": "The name of the attached bone.", "getter": "get_bone_name", "name": "bone_name", "setter": "set_bone_name", "type": "String"}], "methods": [], "name": "BoneAttachment", "signals": [], "tutorials": {"links": []}}, "BoxContainer": {"brief_description": "Base class for box containers.", "category": "Core", "constants": [{"description": "Aligns children with the beginning of the container.", "enum": "AlignMode", "name": "ALIGN_BEGIN", "value": "0"}, {"description": "Aligns children with the center of the container.", "enum": "AlignMode", "name": "ALIGN_CENTER", "value": "1"}, {"description": "Aligns children with the end of the container.", "enum": "AlignMode", "name": "ALIGN_END", "value": "2"}], "demos": {"links": []}, "description": "Arranges child controls vertically or horizontally, and rearranges the controls automatically when their minimum size changes.", "inherits": "Container", "members": [{"description": "The alignment of the container's children (must be one of ALIGN_BEGIN, ALIGN_CENTER, or ALIGN_END).", "getter": "get_alignment", "name": "alignment", "setter": "set_alignment", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "begin", "type": "bool"}], "description": "Adds a control to the box as a spacer. If [code]true[/code], [i]begin[/i] will insert the spacer control in front of other children.", "name": "add_spacer", "return_": {"description": "", "type": "void"}}], "name": "BoxContainer", "signals": [], "tutorials": {"links": []}}, "BoxShape": {"brief_description": "Box shape resource.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "3D box shape that can be a child of a [PhysicsBody] or [Area].", "inherits": "Shape", "members": [{"description": "The shape's half extents.", "getter": "get_extents", "name": "extents", "setter": "set_extents", "type": "Vector3"}], "methods": [], "name": "BoxShape", "signals": [], "tutorials": {"links": []}}, "Button": {"brief_description": "Standard themed Button.", "category": "Core", "constants": [{"description": "Align the text to the left.", "enum": "TextAlign", "name": "ALIGN_LEFT", "value": "0"}, {"description": "Align the text to the center.", "enum": "TextAlign", "name": "ALIGN_CENTER", "value": "1"}, {"description": "Align the text to the right.", "enum": "TextAlign", "name": "ALIGN_RIGHT", "value": "2"}], "demos": {"links": []}, "description": "Button is the standard themed button. It can contain text and an icon, and will display them according to the current [Theme].", "inherits": "BaseButton", "members": [{"description": "Text alignment policy for the button's text, use one of the ALIGN_* constants.", "getter": "get_text_align", "name": "align", "setter": "set_text_align", "type": "int"}, {"description": "When this property is enabled, text that is too large to fit the button is clipped, when disabled the Button will always be wide enough to hold the text. This property is disabled by default.", "getter": "get_clip_text", "name": "clip_text", "setter": "set_clip_text", "type": "bool"}, {"description": "Flat buttons don't display decoration.", "getter": "is_flat", "name": "flat", "setter": "set_flat", "type": "bool"}, {"description": "Button's icon, if text is present the icon will be placed before the text.", "getter": "get_button_icon", "name": "icon", "setter": "set_button_icon", "type": "Texture"}, {"description": "The button's text that will be displayed inside the button's area.", "getter": "get_text", "name": "text", "setter": "set_text", "type": "String"}], "methods": [], "name": "Button", "signals": [], "tutorials": {"links": []}}, "ButtonGroup": {"brief_description": "Group of Buttons.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Group of [Button]. All direct and indirect children buttons become radios. Only one allows being pressed.\n\t\t[member BaseButton.toggle_mode] should be [code]true[/code].", "inherits": "Resource", "members": [], "methods": [{"arguments": [], "description": "Return the pressed button.", "name": "get_pressed_button", "return_": {"description": "", "type": "BaseButton"}}], "name": "ButtonGroup", "signals": [], "tutorials": {"links": []}}, "CPUParticles": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "DrawOrder", "name": "DRAW_ORDER_INDEX", "value": "0"}, {"description": "", "enum": "DrawOrder", "name": "DRAW_ORDER_LIFETIME", "value": "1"}, {"description": "", "enum": "DrawOrder", "name": "DRAW_ORDER_VIEW_DEPTH", "value": "2"}, {"description": "", "enum": "Parameter", "name": "PARAM_INITIAL_LINEAR_VELOCITY", "value": "0"}, {"description": "", "enum": "Parameter", "name": "PARAM_ANGULAR_VELOCITY", "value": "1"}, {"description": "", "enum": "Parameter", "name": "PARAM_LINEAR_ACCEL", "value": "2"}, {"description": "", "enum": "Parameter", "name": "PARAM_RADIAL_ACCEL", "value": "3"}, {"description": "", "enum": "Parameter", "name": "PARAM_TANGENTIAL_ACCEL", "value": "4"}, {"description": "", "enum": "Parameter", "name": "PARAM_DAMPING", "value": "5"}, {"description": "", "enum": "Parameter", "name": "PARAM_ANGLE", "value": "6"}, {"description": "", "enum": "Parameter", "name": "PARAM_SCALE", "value": "7"}, {"description": "", "enum": "Parameter", "name": "PARAM_HUE_VARIATION", "value": "8"}, {"description": "", "enum": "Parameter", "name": "PARAM_ANIM_SPEED", "value": "9"}, {"description": "", "enum": "Parameter", "name": "PARAM_ANIM_OFFSET", "value": "10"}, {"description": "", "enum": "Parameter", "name": "PARAM_MAX", "value": "11"}, {"description": "", "enum": "Flags", "name": "FLAG_ALIGN_Y_TO_VELOCITY", "value": "0"}, {"description": "", "enum": "Flags", "name": "FLAG_ROTATE_Y", "value": "1"}, {"description": "", "enum": "Flags", "name": "FLAG_MAX", "value": "4"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_POINT", "value": "0"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_SPHERE", "value": "1"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_BOX", "value": "2"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_POINTS", "value": "3"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_DIRECTED_POINTS", "value": "4"}], "demos": {"links": []}, "description": "", "inherits": "GeometryInstance", "members": [{"description": "", "getter": "get_amount", "name": "amount", "setter": "set_amount", "type": "int"}, {"description": "", "getter": "get_param", "name": "angle", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "angle_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "angle_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_param", "name": "angular_velocity", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "angular_velocity_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "angular_velocity_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_particle_flag", "name": "anim_loop", "setter": "set_particle_flag", "type": "bool"}, {"description": "", "getter": "get_param", "name": "anim_offset", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "anim_offset_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "anim_offset_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_param", "name": "anim_speed", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "anim_speed_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "anim_speed_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_color", "name": "color", "setter": "set_color", "type": "Color"}, {"description": "", "getter": "get_color_ramp", "name": "color_ramp", "setter": "set_color_ramp", "type": "Gradient"}, {"description": "", "getter": "get_param", "name": "damping", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "damping_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "damping_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_draw_order", "name": "draw_order", "setter": "set_draw_order", "type": "int"}, {"description": "", "getter": "get_emission_box_extents", "name": "emission_box_extents", "setter": "set_emission_box_extents", "type": "Vector3"}, {"description": "", "getter": "get_emission_colors", "name": "emission_colors", "setter": "set_emission_colors", "type": "PoolColorArray"}, {"description": "", "getter": "get_emission_normals", "name": "emission_normals", "setter": "set_emission_normals", "type": "PoolVector3Array"}, {"description": "", "getter": "get_emission_points", "name": "emission_points", "setter": "set_emission_points", "type": "PoolVector3Array"}, {"description": "", "getter": "get_emission_shape", "name": "emission_shape", "setter": "set_emission_shape", "type": "int"}, {"description": "", "getter": "get_emission_sphere_radius", "name": "emission_sphere_radius", "setter": "set_emission_sphere_radius", "type": "float"}, {"description": "", "getter": "is_emitting", "name": "emitting", "setter": "set_emitting", "type": "bool"}, {"description": "", "getter": "get_explosiveness_ratio", "name": "explosiveness", "setter": "set_explosiveness_ratio", "type": "float"}, {"description": "", "getter": "get_fixed_fps", "name": "fixed_fps", "setter": "set_fixed_fps", "type": "int"}, {"description": "", "getter": "get_particle_flag", "name": "flag_align_y", "setter": "set_particle_flag", "type": "bool"}, {"description": "", "getter": "get_particle_flag", "name": "flag_disable_z", "setter": "set_particle_flag", "type": "bool"}, {"description": "", "getter": "get_particle_flag", "name": "flag_rotate_y", "setter": "set_particle_flag", "type": "bool"}, {"description": "", "getter": "get_flatness", "name": "flatness", "setter": "set_flatness", "type": "float"}, {"description": "", "getter": "get_fractional_delta", "name": "fract_delta", "setter": "set_fractional_delta", "type": "bool"}, {"description": "", "getter": "get_gravity", "name": "gravity", "setter": "set_gravity", "type": "Vector3"}, {"description": "", "getter": "get_param", "name": "hue_variation", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "hue_variation_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "hue_variation_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_param", "name": "initial_velocity", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_randomness", "name": "initial_velocity_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_lifetime", "name": "lifetime", "setter": "set_lifetime", "type": "float"}, {"description": "", "getter": "get_param", "name": "linear_accel", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "linear_accel_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "linear_accel_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_use_local_coordinates", "name": "local_coords", "setter": "set_use_local_coordinates", "type": "bool"}, {"description": "", "getter": "get_mesh", "name": "mesh", "setter": "set_mesh", "type": "Mesh"}, {"description": "", "getter": "get_one_shot", "name": "one_shot", "setter": "set_one_shot", "type": "bool"}, {"description": "", "getter": "get_pre_process_time", "name": "preprocess", "setter": "set_pre_process_time", "type": "float"}, {"description": "", "getter": "get_param", "name": "radial_accel", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "radial_accel_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "radial_accel_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_randomness_ratio", "name": "randomness", "setter": "set_randomness_ratio", "type": "float"}, {"description": "", "getter": "get_param", "name": "scale", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "scale_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "scale_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_speed_scale", "name": "speed_scale", "setter": "set_speed_scale", "type": "float"}, {"description": "", "getter": "get_spread", "name": "spread", "setter": "set_spread", "type": "float"}, {"description": "", "getter": "get_param", "name": "tangential_accel", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "tangential_accel_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "tangential_accel_random", "setter": "set_param_randomness", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "particles", "type": "Node"}], "description": "", "name": "convert_from_particles", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "restart", "return_": {"description": "", "type": "void"}}], "name": "CPUParticles", "signals": [], "tutorials": {"links": []}}, "CPUParticles2D": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "DrawOrder", "name": "DRAW_ORDER_INDEX", "value": "0"}, {"description": "", "enum": "DrawOrder", "name": "DRAW_ORDER_LIFETIME", "value": "1"}, {"description": "", "enum": "Parameter", "name": "PARAM_INITIAL_LINEAR_VELOCITY", "value": "0"}, {"description": "", "enum": "Parameter", "name": "PARAM_ANGULAR_VELOCITY", "value": "1"}, {"description": "", "enum": "Parameter", "name": "PARAM_ORBIT_VELOCITY", "value": "2"}, {"description": "", "enum": "Parameter", "name": "PARAM_LINEAR_ACCEL", "value": "3"}, {"description": "", "enum": "Parameter", "name": "PARAM_RADIAL_ACCEL", "value": "4"}, {"description": "", "enum": "Parameter", "name": "PARAM_TANGENTIAL_ACCEL", "value": "5"}, {"description": "", "enum": "Parameter", "name": "PARAM_DAMPING", "value": "6"}, {"description": "", "enum": "Parameter", "name": "PARAM_ANGLE", "value": "7"}, {"description": "", "enum": "Parameter", "name": "PARAM_SCALE", "value": "8"}, {"description": "", "enum": "Parameter", "name": "PARAM_HUE_VARIATION", "value": "9"}, {"description": "", "enum": "Parameter", "name": "PARAM_ANIM_SPEED", "value": "10"}, {"description": "", "enum": "Parameter", "name": "PARAM_ANIM_OFFSET", "value": "11"}, {"description": "", "enum": "Parameter", "name": "PARAM_MAX", "value": "12"}, {"description": "", "enum": "Flags", "name": "FLAG_ALIGN_Y_TO_VELOCITY", "value": "0"}, {"description": "", "enum": "Flags", "name": "FLAG_MAX", "value": "2"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_POINT", "value": "0"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_CIRCLE", "value": "1"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_RECTANGLE", "value": "2"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_POINTS", "value": "3"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_DIRECTED_POINTS", "value": "4"}], "demos": {"links": []}, "description": "", "inherits": "Node2D", "members": [{"description": "", "getter": "get_amount", "name": "amount", "setter": "set_amount", "type": "int"}, {"description": "", "getter": "get_param", "name": "angle", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "angle_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "angle_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_param", "name": "angular_velocity", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "angular_velocity_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "angular_velocity_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_particle_flag", "name": "anim_loop", "setter": "set_particle_flag", "type": "bool"}, {"description": "", "getter": "get_param", "name": "anim_offset", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "anim_offset_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "anim_offset_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_param", "name": "anim_speed", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "anim_speed_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "anim_speed_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_color", "name": "color", "setter": "set_color", "type": "Color"}, {"description": "", "getter": "get_color_ramp", "name": "color_ramp", "setter": "set_color_ramp", "type": "Gradient"}, {"description": "", "getter": "get_param", "name": "damping", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "damping_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "damping_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_draw_order", "name": "draw_order", "setter": "set_draw_order", "type": "int"}, {"description": "", "getter": "get_emission_colors", "name": "emission_colors", "setter": "set_emission_colors", "type": "PoolColorArray"}, {"description": "", "getter": "get_emission_normals", "name": "emission_normals", "setter": "set_emission_normals", "type": "PoolVector2Array"}, {"description": "", "getter": "get_emission_points", "name": "emission_points", "setter": "set_emission_points", "type": "PoolVector2Array"}, {"description": "", "getter": "get_emission_rect_extents", "name": "emission_rect_extents", "setter": "set_emission_rect_extents", "type": "Vector2"}, {"description": "", "getter": "get_emission_shape", "name": "emission_shape", "setter": "set_emission_shape", "type": "int"}, {"description": "", "getter": "get_emission_sphere_radius", "name": "emission_sphere_radius", "setter": "set_emission_sphere_radius", "type": "float"}, {"description": "", "getter": "is_emitting", "name": "emitting", "setter": "set_emitting", "type": "bool"}, {"description": "", "getter": "get_explosiveness_ratio", "name": "explosiveness", "setter": "set_explosiveness_ratio", "type": "float"}, {"description": "", "getter": "get_fixed_fps", "name": "fixed_fps", "setter": "set_fixed_fps", "type": "int"}, {"description": "", "getter": "get_particle_flag", "name": "flag_align_y", "setter": "set_particle_flag", "type": "bool"}, {"description": "", "getter": "get_flatness", "name": "flatness", "setter": "set_flatness", "type": "float"}, {"description": "", "getter": "get_fractional_delta", "name": "fract_delta", "setter": "set_fractional_delta", "type": "bool"}, {"description": "", "getter": "get_gravity", "name": "gravity", "setter": "set_gravity", "type": "Vector2"}, {"description": "", "getter": "get_param", "name": "hue_variation", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "hue_variation_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "hue_variation_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_param", "name": "initial_velocity", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_randomness", "name": "initial_velocity_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_lifetime", "name": "lifetime", "setter": "set_lifetime", "type": "float"}, {"description": "", "getter": "get_param", "name": "linear_accel", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "linear_accel_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "linear_accel_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_use_local_coordinates", "name": "local_coords", "setter": "set_use_local_coordinates", "type": "bool"}, {"description": "", "getter": "get_normalmap", "name": "normalmap", "setter": "set_normalmap", "type": "Texture"}, {"description": "", "getter": "get_one_shot", "name": "one_shot", "setter": "set_one_shot", "type": "bool"}, {"description": "", "getter": "get_pre_process_time", "name": "preprocess", "setter": "set_pre_process_time", "type": "float"}, {"description": "", "getter": "get_param", "name": "radial_accel", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "radial_accel_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "radial_accel_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_randomness_ratio", "name": "randomness", "setter": "set_randomness_ratio", "type": "float"}, {"description": "", "getter": "get_param", "name": "scale", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "scale_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "scale_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_speed_scale", "name": "speed_scale", "setter": "set_speed_scale", "type": "float"}, {"description": "", "getter": "get_spread", "name": "spread", "setter": "set_spread", "type": "float"}, {"description": "", "getter": "get_param", "name": "tangential_accel", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param_curve", "name": "tangential_accel_curve", "setter": "set_param_curve", "type": "Curve"}, {"description": "", "getter": "get_param_randomness", "name": "tangential_accel_random", "setter": "set_param_randomness", "type": "float"}, {"description": "", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "particles", "type": "Node"}], "description": "", "name": "convert_from_particles", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "restart", "return_": {"description": "", "type": "void"}}], "name": "CPUParticles2D", "signals": [], "tutorials": {"links": []}}, "Camera": {"brief_description": "Camera node, displays from a point of view.", "category": "Core", "constants": [{"description": "Perspective Projection (object's size on the screen becomes smaller when far away).", "enum": "Projection", "name": "PROJECTION_PERSPECTIVE", "value": "0"}, {"description": "Orthogonal Projection (objects remain the same size on the screen no matter how far away they are).", "enum": "Projection", "name": "PROJECTION_ORTHOGONAL", "value": "1"}, {"description": "Preserves the horizontal aspect ratio.", "enum": "KeepAspect", "name": "KEEP_WIDTH", "value": "0"}, {"description": "Preserves the vertical aspect ratio.", "enum": "KeepAspect", "name": "KEEP_HEIGHT", "value": "1"}, {"description": "Disable Doppler effect simulation (default).", "enum": "DopplerTracking", "name": "DOPPLER_TRACKING_DISABLED", "value": "0"}, {"description": "Simulate Doppler effect by tracking positions of objects that are changed in [code]_process[/code]. Changes in the relative velocity of this Camera compared to those objects affect how Audio is perceived (changing the Audio's [code]pitch shift[/code]).", "enum": "DopplerTracking", "name": "DOPPLER_TRACKING_IDLE_STEP", "value": "1"}, {"description": "Simulate Doppler effect by tracking positions of objects that are changed in [code]_physics_process[/code]. Changes in the relative velocity of this Camera compared to those objects affect how Audio is perceived (changing the Audio's [code]pitch shift[/code]).", "enum": "DopplerTracking", "name": "DOPPLER_TRACKING_PHYSICS_STEP", "value": "2"}], "demos": {"links": []}, "description": "Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest [Viewport] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the Camera will register in the global viewport. In other words, a Camera just provides [i]3D[/i] display capabilities to a [Viewport], and, without one, a scene registered in that [Viewport] (or higher viewports) can't be displayed.", "inherits": "Spatial", "members": [{"description": "The culling mask that describes which 3D render layers are rendered by this camera.", "getter": "get_cull_mask", "name": "cull_mask", "setter": "set_cull_mask", "type": "int"}, {"description": "If [code]true[/code] the ancestor [Viewport] is currently using this Camera. Default value: [code]false[/code].", "getter": "is_current", "name": "current", "setter": "set_current", "type": "bool"}, {"description": "If not [code]DOPPLER_TRACKING_DISABLED[/code] this Camera will simulate the Doppler effect for objects changed in particular [code]_process[/code] methods. Default value: [code]DOPPLER_TRACKING_DISABLED[/code].", "getter": "get_doppler_tracking", "name": "doppler_tracking", "setter": "set_doppler_tracking", "type": "int"}, {"description": "The [Environment] to use for this Camera.", "getter": "get_environment", "name": "environment", "setter": "set_environment", "type": "Environment"}, {"description": "The distance to the far culling boundary for this Camera relative to its local z-axis.", "getter": "get_zfar", "name": "far", "setter": "set_zfar", "type": "float"}, {"description": "The camera's field of view angle (in degrees). Only applicable in perspective mode. Since [member keep_aspect] locks one axis, [code]fov[/code] sets the other axis' field of view angle.", "getter": "get_fov", "name": "fov", "setter": "set_fov", "type": "float"}, {"description": "The horizontal (X) offset of the Camera viewport.", "getter": "get_h_offset", "name": "h_offset", "setter": "set_h_offset", "type": "float"}, {"description": "The axis to lock during [member fov]/[member size] adjustments. Can be either [code]KEEP_WIDTH[/code] or [code]KEEP_HEIGHT[/code].", "getter": "get_keep_aspect_mode", "name": "keep_aspect", "setter": "set_keep_aspect_mode", "type": "int"}, {"description": "The distance to the near culling boundary for this Camera relative to its local z-axis.", "getter": "get_znear", "name": "near", "setter": "set_znear", "type": "float"}, {"description": "The camera's projection mode. In [code]PROJECTION_PERSPECTIVE[/code] mode, objects' z-distance from the camera's local space scales their perceived size.", "getter": "get_projection", "name": "projection", "setter": "set_projection", "type": "int"}, {"description": "The camera's size measured as 1/2 the width or height. Only applicable in orthogonal mode. Since [member keep_aspect] locks on axis, [code]size[/code] sets the other axis' size length.", "getter": "get_size", "name": "size", "setter": "set_size", "type": "float"}, {"description": "The vertical (Y) offset of the Camera viewport.", "getter": "get_v_offset", "name": "v_offset", "setter": "set_v_offset", "type": "float"}], "methods": [{"arguments": [{"default": "true", "description": "", "index": "0", "name": "enable_next", "type": "bool"}], "description": "If this is the current Camera, remove it from being current. If [code]enable_next[/code] is true, request to make the next Camera current, if any.", "name": "clear_current", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Gets the camera transform. Subclassed cameras (such as CharacterCamera) may provide different transforms than the [Node] transform.", "name": "get_camera_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "layer", "type": "int"}], "description": "", "name": "get_cull_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "world_point", "type": "Vector3"}], "description": "Returns [code]true[/code] if the given position is behind the Camera. Note that a position which returns [code]false[/code] may still be outside the Camera's field of view.", "name": "is_position_behind", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Makes this camera the current Camera for the [Viewport] (see class description). If the Camera Node is outside the scene tree, it will attempt to become current once it's added.", "name": "make_current", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "screen_point", "type": "Vector2"}], "description": "Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc.", "name": "project_local_ray_normal", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "screen_point", "type": "Vector2"}], "description": "Returns the 3D point in worldspace that maps to the given 2D coordinate in the [Viewport] rectangle.", "name": "project_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "screen_point", "type": "Vector2"}], "description": "Returns a normal vector in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.", "name": "project_ray_normal", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "screen_point", "type": "Vector2"}], "description": "Returns a 3D position in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.", "name": "project_ray_origin", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "layer", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "set_cull_mask_bit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "size", "type": "float"}, {"description": "", "index": "1", "name": "z_near", "type": "float"}, {"description": "", "index": "2", "name": "z_far", "type": "float"}], "description": "Sets the camera projection to orthogonal mode, by specifying a width and the [i]near[/i] and [i]far[/i] clip planes in worldspace units. (As a hint, 2D games often use this projection, with values specified in pixels)", "name": "set_orthogonal", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "fov", "type": "float"}, {"description": "", "index": "1", "name": "z_near", "type": "float"}, {"description": "", "index": "2", "name": "z_far", "type": "float"}], "description": "Sets the camera projection to perspective mode, by specifying a [i]FOV[/i] Y angle in degrees (FOV means Field of View), and the [i]near[/i] and [i]far[/i] clip planes in worldspace units.", "name": "set_perspective", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "world_point", "type": "Vector3"}], "description": "Returns the 2D coordinate in the [Viewport] rectangle that maps to the given 3D point in worldspace.", "name": "unproject_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}], "name": "Camera", "signals": [], "tutorials": {"links": []}}, "Camera2D": {"brief_description": "Camera node for 2D scenes.", "category": "Core", "constants": [{"description": "The camera's position is fixed so that the top-left corner is always at the origin.", "enum": "AnchorMode", "name": "ANCHOR_MODE_FIXED_TOP_LEFT", "value": "0"}, {"description": "The camera's position takes into account vertical/horizontal offsets and the screen size.", "enum": "AnchorMode", "name": "ANCHOR_MODE_DRAG_CENTER", "value": "1"}], "demos": {"links": []}, "description": "Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem] based nodes.\n\t\tThis node is intended to be a simple helper to get things going quickly and it may happen often that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from [Node2D] and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in [Viewport].", "inherits": "Node2D", "members": [{"description": "The Camera2D's anchor point. See [code]ANCHOR_MODE_*[/code] constants.", "getter": "get_anchor_mode", "name": "anchor_mode", "setter": "set_anchor_mode", "type": "int"}, {"description": "If [code]true[/code] the camera is the active camera for the current scene. Only one camera can be current, so setting a different camera [code]current[/code] will disable this one.", "getter": "is_current", "name": "current", "setter": "_set_current", "type": "bool"}, {"description": "The custom [Viewport] node attached to the [code]Camera2D[/code]. If null or not a [Viewport], uses the default viewport instead.", "getter": "get_custom_viewport", "name": "custom_viewport", "setter": "set_custom_viewport", "type": "Node"}, {"description": "Bottom margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.", "getter": "get_drag_margin", "name": "drag_margin_bottom", "setter": "set_drag_margin", "type": "float"}, {"description": "If [code]true[/code] the camera only moves when reaching the horizontal drag margins. If [code]false[/code] the camera moves horizontally regardless of margins. Default value: [code]true[/code].", "getter": "is_h_drag_enabled", "name": "drag_margin_h_enabled", "setter": "set_h_drag_enabled", "type": "bool"}, {"description": "Left margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.", "getter": "get_drag_margin", "name": "drag_margin_left", "setter": "set_drag_margin", "type": "float"}, {"description": "Right margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.", "getter": "get_drag_margin", "name": "drag_margin_right", "setter": "set_drag_margin", "type": "float"}, {"description": "Top margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.", "getter": "get_drag_margin", "name": "drag_margin_top", "setter": "set_drag_margin", "type": "float"}, {"description": "If [code]true[/code] the camera only moves when reaching the vertical drag margins. If [code]false[/code] the camera moves vertically regardless of margins. Default value: [code]true[/code].", "getter": "is_v_drag_enabled", "name": "drag_margin_v_enabled", "setter": "set_v_drag_enabled", "type": "bool"}, {"description": "If [code]true[/code] draws the camera's drag margin rectangle in the editor. Default value: [code]false[/code]", "getter": "is_margin_drawing_enabled", "name": "editor_draw_drag_margin", "setter": "set_margin_drawing_enabled", "type": "bool"}, {"description": "If [code]true[/code] draws the camera's limits rectangle in the editor. Default value: [code]true[/code]", "getter": "is_limit_drawing_enabled", "name": "editor_draw_limits", "setter": "set_limit_drawing_enabled", "type": "bool"}, {"description": "If [code]true[/code] draws the camera's screen rectangle in the editor. Default value: [code]false[/code]", "getter": "is_screen_drawing_enabled", "name": "editor_draw_screen", "setter": "set_screen_drawing_enabled", "type": "bool"}, {"description": "Bottom scroll limit in pixels. The camera stops moving when reaching this value.", "getter": "get_limit", "name": "limit_bottom", "setter": "set_limit", "type": "int"}, {"description": "Left scroll limit in pixels. The camera stops moving when reaching this value.", "getter": "get_limit", "name": "limit_left", "setter": "set_limit", "type": "int"}, {"description": "Right scroll limit in pixels. The camera stops moving when reaching this value.", "getter": "get_limit", "name": "limit_right", "setter": "set_limit", "type": "int"}, {"description": "If [code]true[/code] the camera smoothly stops when reaches its limits. Default value: [code]false[/code]", "getter": "is_limit_smoothing_enabled", "name": "limit_smoothed", "setter": "set_limit_smoothing_enabled", "type": "bool"}, {"description": "Top scroll limit in pixels. The camera stops moving when reaching this value.", "getter": "get_limit", "name": "limit_top", "setter": "set_limit", "type": "int"}, {"description": "The camera's offset, useful for looking around or camera shake animations.", "getter": "get_offset", "name": "offset", "setter": "set_offset", "type": "Vector2"}, {"description": "The horizontal offset of the camera, relative to the drag margins. Default value: [code]0[/code]", "getter": "get_h_offset", "name": "offset_h", "setter": "set_h_offset", "type": "float"}, {"description": "The vertical offset of the camera, relative to the drag margins. Default value: [code]0[/code]", "getter": "get_v_offset", "name": "offset_v", "setter": "set_v_offset", "type": "float"}, {"description": "If [code]true[/code] the camera rotates with the target. Default value: [code]false[/code]", "getter": "is_rotating", "name": "rotating", "setter": "set_rotating", "type": "bool"}, {"description": "If [code]true[/code] the camera smoothly moves towards the target at [member smoothing_speed]. Default value: [code]false[/code]", "getter": "is_follow_smoothing_enabled", "name": "smoothing_enabled", "setter": "set_enable_follow_smoothing", "type": "bool"}, {"description": "Speed in pixels per second of the camera's smoothing effect when [member smoothing_enabled] is [code]true[/code]", "getter": "get_follow_smoothing", "name": "smoothing_speed", "setter": "set_follow_smoothing", "type": "float"}, {"description": "The camera's zoom relative to the viewport. Values larger than [code]Vector2(1, 1)[/code] zoom out and smaller values zoom in. For an example, use [code]Vector2(0.5, 0.5)[/code] for a 2x zoom in, and [code]Vector2(4, 4)[/code] for a 4x zoom out.", "getter": "get_zoom", "name": "zoom", "setter": "set_zoom", "type": "Vector2"}], "methods": [{"arguments": [], "description": "Align the camera to the tracked node", "name": "align", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes any [code]Camera2D[/code] from the ancestor [Viewport]'s internal currently-assigned camera.", "name": "clear_current", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Force the camera to update scroll immediately.", "name": "force_update_scroll", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the camera position.", "name": "get_camera_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the location of the [code]Camera2D[/code]'s screen-center, relative to the origin.", "name": "get_camera_screen_center", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene.", "name": "make_current", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Set the camera's position immediately to its current smoothing destination.\n\t\t\t\tThis has no effect if smoothing is disabled.", "name": "reset_smoothing", "return_": {"description": "", "type": "void"}}], "name": "Camera2D", "signals": [], "tutorials": {"links": []}}, "CanvasItem": {"brief_description": "Base class of anything 2D.", "category": "Core", "constants": [{"description": "Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value.", "enum": "BlendMode", "name": "BLEND_MODE_MIX", "value": "0"}, {"description": "Additive blending mode.", "enum": "BlendMode", "name": "BLEND_MODE_ADD", "value": "1"}, {"description": "Subtractive blending mode.", "enum": "BlendMode", "name": "BLEND_MODE_SUB", "value": "2"}, {"description": "Multiplicative blending mode.", "enum": "BlendMode", "name": "BLEND_MODE_MUL", "value": "3"}, {"description": "Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value.", "enum": "BlendMode", "name": "BLEND_MODE_PREMULT_ALPHA", "value": "4"}, {"description": "Disable blending mode. Colors including alpha are written as is. Only applicable for render targets with a transparent background. No lighting will be applied.", "enum": "BlendMode", "name": "BLEND_MODE_DISABLED", "value": "5"}, {"description": "Canvas item transform has changed. Only received if requested.", "name": "NOTIFICATION_TRANSFORM_CHANGED", "value": "29"}, {"description": "CanvasItem is requested to draw.", "name": "NOTIFICATION_DRAW", "value": "30"}, {"description": "Canvas item visibility has changed.", "name": "NOTIFICATION_VISIBILITY_CHANGED", "value": "31"}, {"description": "Canvas item has entered the canvas.", "name": "NOTIFICATION_ENTER_CANVAS", "value": "32"}, {"description": "Canvas item has exited the canvas.", "name": "NOTIFICATION_EXIT_CANVAS", "value": "33"}], "demos": {"links": []}, "description": "Base class of anything 2D. Canvas items are laid out in a tree and children inherit and extend the transform of their parent. CanvasItem is extended by [Control], for anything GUI related, and by [Node2D] for anything 2D engine related.\n\t\tAny CanvasItem can draw. For this, the \"update\" function must be called, then NOTIFICATION_DRAW will be received on idle time to request redraw. Because of this, canvas items don't need to be redraw on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). They can only be used inside the notification, signal or _draw() overrides function, though.\n\t\tCanvas items are draw in tree order. By default, children are on top of their parents so a root CanvasItem will be drawn behind everything (this can be changed per item though).\n\t\tCanvas items can also be hidden (hiding also their subtree). They provide many means for changing standard parameters such as opacity (for it and the subtree) and self opacity, blend mode.\n\t\tUltimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.", "inherits": "Node", "members": [{"description": "The rendering layers in which this [code]CanvasItem[/code] responds to [Light2D] nodes. Default value: [code]1[/code].", "getter": "get_light_mask", "name": "light_mask", "setter": "set_light_mask", "type": "int"}, {"description": "The material applied to textures on this [code]CanvasItem[/code]. Default value: [code]null[/code].", "getter": "get_material", "name": "material", "setter": "set_material", "type": "Material"}, {"description": "The color applied to textures on this [code]CanvasItem[/code]. Default value: [code]Color(1, 1, 1, 1)[/code] (opaque \"white\").", "getter": "get_modulate", "name": "modulate", "setter": "set_modulate", "type": "Color"}, {"description": "The color applied to textures on this [code]CanvasItem[/code]. This is not inherited by children [code]CanvasItem[/code]s. Default value: [code]Color(1, 1, 1, 1)[/code] (opaque \"white\")..", "getter": "get_self_modulate", "name": "self_modulate", "setter": "set_self_modulate", "type": "Color"}, {"description": "If [code]true[/code] the object draws behind its parent. Default value: [code]false[/code].", "getter": "is_draw_behind_parent_enabled", "name": "show_behind_parent", "setter": "set_draw_behind_parent", "type": "bool"}, {"description": "If [code]true[/code] the object draws on top of its parent. Default value: [code]true[/code].", "getter": "_is_on_top", "name": "show_on_top", "setter": "_set_on_top", "type": "bool"}, {"description": "If [code]true[/code] the parent [code]CanvasItem[/code]'s [member material] property is used as this one's material. Default value: [code]false[/code].", "getter": "get_use_parent_material", "name": "use_parent_material", "setter": "set_use_parent_material", "type": "bool"}, {"description": "If [code]true[/code] this [code]CanvasItem[/code] is drawn. Default value: [code]true[/code].", "getter": "is_visible", "name": "visible", "setter": "set_visible", "type": "bool"}], "methods": [{"arguments": [], "description": "Called (if exists) to draw the canvas item.", "name": "_draw", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "font", "type": "Font"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}, {"description": "", "index": "2", "name": "char", "type": "String"}, {"description": "", "index": "3", "name": "next", "type": "String"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "4", "name": "modulate", "type": "Color"}], "description": "Draws a string character using a custom font. Returns the advance, depending on the char width and kerning with an optional next char.", "name": "draw_char", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}, {"description": "", "index": "1", "name": "radius", "type": "float"}, {"description": "", "index": "2", "name": "color", "type": "Color"}], "description": "Draws a colored circle.", "name": "draw_circle", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "1", "name": "color", "type": "Color"}, {"default": "PoolVector2Array(  )", "description": "", "index": "2", "name": "uvs", "type": "PoolVector2Array"}, {"default": "null", "description": "", "index": "3", "name": "texture", "type": "Texture"}, {"default": "null", "description": "", "index": "4", "name": "normal_map", "type": "Texture"}, {"default": "false", "description": "", "index": "5", "name": "antialiased", "type": "bool"}], "description": "Draws a colored polygon of any amount of points, convex or concave.", "name": "draw_colored_polygon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector2"}, {"description": "", "index": "1", "name": "to", "type": "Vector2"}, {"description": "", "index": "2", "name": "color", "type": "Color"}, {"default": "1.0", "description": "", "index": "3", "name": "width", "type": "float"}, {"default": "false", "description": "", "index": "4", "name": "antialiased", "type": "bool"}], "description": "Draws a line from a 2D point to another, with a given color and width. It can be optionally antialiased.", "name": "draw_line", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "Mesh"}, {"description": "", "index": "1", "name": "texture", "type": "Texture"}, {"default": "null", "description": "", "index": "2", "name": "normal_map", "type": "Texture"}], "description": "", "name": "draw_mesh", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "1", "name": "color", "type": "Color"}, {"default": "1.0", "description": "", "index": "2", "name": "width", "type": "float"}, {"default": "false", "description": "", "index": "3", "name": "antialiased", "type": "bool"}], "description": "Draws multiple, parallel lines with a uniform [code]color[/code] and [code]width[/code] and optional antialiasing.", "name": "draw_multiline", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "1", "name": "colors", "type": "PoolColorArray"}, {"default": "1.0", "description": "", "index": "2", "name": "width", "type": "float"}, {"default": "false", "description": "", "index": "3", "name": "antialiased", "type": "bool"}], "description": "Draws multiple, parallel lines with a uniform [code]width[/code], segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code].", "name": "draw_multiline_colors", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "Mesh"}, {"description": "", "index": "1", "name": "texture", "type": "Texture"}, {"default": "null", "description": "", "index": "2", "name": "normal_map", "type": "Texture"}], "description": "", "name": "draw_multimesh", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "1", "name": "colors", "type": "PoolColorArray"}, {"default": "PoolVector2Array(  )", "description": "", "index": "2", "name": "uvs", "type": "PoolVector2Array"}, {"default": "null", "description": "", "index": "3", "name": "texture", "type": "Texture"}, {"default": "null", "description": "", "index": "4", "name": "normal_map", "type": "Texture"}, {"default": "false", "description": "", "index": "5", "name": "antialiased", "type": "bool"}], "description": "Draws a polygon of any amount of points, convex or concave.", "name": "draw_polygon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "1", "name": "color", "type": "Color"}, {"default": "1.0", "description": "", "index": "2", "name": "width", "type": "float"}, {"default": "false", "description": "", "index": "3", "name": "antialiased", "type": "bool"}], "description": "Draws interconnected line segments with a uniform [code]color[/code] and [code]width[/code] and optional antialiasing.", "name": "draw_polyline", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "1", "name": "colors", "type": "PoolColorArray"}, {"default": "1.0", "description": "", "index": "2", "name": "width", "type": "float"}, {"default": "false", "description": "", "index": "3", "name": "antialiased", "type": "bool"}], "description": "Draws interconnected line segments with a uniform [code]width[/code], segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code].", "name": "draw_polyline_colors", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "1", "name": "colors", "type": "PoolColorArray"}, {"description": "", "index": "2", "name": "uvs", "type": "PoolVector2Array"}, {"default": "null", "description": "", "index": "3", "name": "texture", "type": "Texture"}, {"default": "1.0", "description": "", "index": "4", "name": "width", "type": "float"}, {"default": "null", "description": "", "index": "5", "name": "normal_map", "type": "Texture"}], "description": "Draws a custom primitive, 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad.", "name": "draw_primitive", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rect", "type": "Rect2"}, {"description": "", "index": "1", "name": "color", "type": "Color"}, {"default": "true", "description": "", "index": "2", "name": "filled", "type": "bool"}], "description": "Draws a colored rectangle.", "name": "draw_rect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}, {"description": "", "index": "1", "name": "rotation", "type": "float"}, {"description": "", "index": "2", "name": "scale", "type": "Vector2"}], "description": "Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this.", "name": "draw_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "xform", "type": "Transform2D"}], "description": "Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this.", "name": "draw_set_transform_matrix", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "font", "type": "Font"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}, {"description": "", "index": "2", "name": "text", "type": "String"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "3", "name": "modulate", "type": "Color"}, {"default": "-1", "description": "", "index": "4", "name": "clip_w", "type": "int"}], "description": "Draws a string using a custom font.", "name": "draw_string", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "style_box", "type": "StyleBox"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}], "description": "Draws a styled rectangle.", "name": "draw_style_box", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "Texture"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "2", "name": "modulate", "type": "Color"}, {"default": "null", "description": "", "index": "3", "name": "normal_map", "type": "Texture"}], "description": "Draws a texture at a given position.", "name": "draw_texture", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "Texture"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}, {"description": "", "index": "2", "name": "tile", "type": "bool"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "3", "name": "modulate", "type": "Color"}, {"default": "false", "description": "", "index": "4", "name": "transpose", "type": "bool"}, {"default": "null", "description": "", "index": "5", "name": "normal_map", "type": "Texture"}], "description": "Draws a textured rectangle at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.", "name": "draw_texture_rect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "Texture"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}, {"description": "", "index": "2", "name": "src_rect", "type": "Rect2"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "3", "name": "modulate", "type": "Color"}, {"default": "false", "description": "", "index": "4", "name": "transpose", "type": "bool"}, {"default": "null", "description": "", "index": "5", "name": "normal_map", "type": "Texture"}, {"default": "true", "description": "", "index": "6", "name": "clip_uv", "type": "bool"}], "description": "Draws a textured rectangle region at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.", "name": "draw_texture_rect_region", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the [RID] of the [World2D] canvas where this item is in.", "name": "get_canvas", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "Return the canvas item RID used by [VisualServer] for this item.", "name": "get_canvas_item", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "Get the transform matrix of this item's canvas.", "name": "get_canvas_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [], "description": "Get the global position of the mouse.", "name": "get_global_mouse_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Get the global transform matrix of this item.", "name": "get_global_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [], "description": "Get the global transform matrix of this item in relation to the canvas.", "name": "get_global_transform_with_canvas", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [], "description": "Get the mouse position relative to this item's position.", "name": "get_local_mouse_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Get the transform matrix of this item.", "name": "get_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [], "description": "Get the viewport's boundaries as a [Rect2].", "name": "get_viewport_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [], "description": "Get this item's transform in relation to the viewport.", "name": "get_viewport_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [], "description": "Get the [World2D] where this item is in.", "name": "get_world_2d", "qualifiers": "const", "return_": {"description": "", "type": "World2D"}}, {"arguments": [], "description": "Hide the CanvasItem currently visible.", "name": "hide", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns [code]true[/code] if local transform notifications are communicated to children.", "name": "is_local_transform_notification_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Return if set as toplevel. See [method set_as_toplevel].", "name": "is_set_as_toplevel", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if global transform notifications are communicated to children.", "name": "is_transform_notification_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the node is present in the [SceneTree], its [member visible] property is [code]true[/code] and its inherited visibility is also [code]true[/code].", "name": "is_visible_in_tree", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "screen_point", "type": "Vector2"}], "description": "Assigns [code]screen_point[/code] as this node's new local transform.", "name": "make_canvas_position_local", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "event", "type": "InputEvent"}], "description": "Transformations issued by [code]event[/code]'s inputs are applied in local space instead of global space.", "name": "make_input_local", "qualifiers": "const", "return_": {"description": "", "type": "InputEvent"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Sets as top level. This means that it will not inherit transform from parent canvas items.", "name": "set_as_toplevel", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "If [code]enable[/code] is [code]true[/code], children will be updated with local transform data.", "name": "set_notify_local_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "If [code]enable[/code] is [code]true[/code], children will be updated with global transform data.", "name": "set_notify_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Show the CanvasItem currently hidden.", "name": "show", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Queue the CanvasItem for update. [code]NOTIFICATION_DRAW[/code] will be called on idle time to request redraw.", "name": "update", "return_": {"description": "", "type": "void"}}], "name": "CanvasItem", "signals": [{"arguments": [], "description": "Emitted when the CanvasItem must redraw. This can only be connected realtime, as deferred will not allow drawing.", "name": "draw"}, {"arguments": [], "description": "Emitted when becoming hidden.", "name": "hide"}, {"arguments": [], "description": "Emitted when the item rect has changed.", "name": "item_rect_changed"}, {"arguments": [], "description": "Emitted when the visibility (hidden/visible) changes.", "name": "visibility_changed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/2d/2d_transforms.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/2d/custom_drawing_in_2d.html"}]}}, "CanvasItemMaterial": {"brief_description": "A material for [CanvasItem]s.", "category": "Core", "constants": [{"description": "Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value.", "enum": "BlendMode", "name": "BLEND_MODE_MIX", "value": "0"}, {"description": "Additive blending mode.", "enum": "BlendMode", "name": "BLEND_MODE_ADD", "value": "1"}, {"description": "Subtractive blending mode.", "enum": "BlendMode", "name": "BLEND_MODE_SUB", "value": "2"}, {"description": "Multiplicative blending mode.", "enum": "BlendMode", "name": "BLEND_MODE_MUL", "value": "3"}, {"description": "Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value.", "enum": "BlendMode", "name": "BLEND_MODE_PREMULT_ALPHA", "value": "4"}, {"description": "Render the material using both light and non-light sensitive material properties.", "enum": "LightMode", "name": "LIGHT_MODE_NORMAL", "value": "0"}, {"description": "Render the material as if there were no light.", "enum": "LightMode", "name": "LIGHT_MODE_UNSHADED", "value": "1"}, {"description": "Render the material as if there were only light.", "enum": "LightMode", "name": "LIGHT_MODE_LIGHT_ONLY", "value": "2"}], "demos": {"links": []}, "description": "[code]CanvasItemMaterial[/code]s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a [ShaderMaterial] to more fully customize a material's interactions with a [CanvasItem].", "inherits": "Material", "members": [{"description": "The manner in which a material's rendering is applied to underlying textures.", "getter": "get_blend_mode", "name": "blend_mode", "setter": "set_blend_mode", "type": "int"}, {"description": "The manner in which material reacts to lighting.", "getter": "get_light_mode", "name": "light_mode", "setter": "set_light_mode", "type": "int"}], "methods": [], "name": "CanvasItemMaterial", "signals": [], "tutorials": {"links": []}}, "CanvasLayer": {"brief_description": "Canvas drawing layer.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Canvas drawing layer. [CanvasItem] nodes that are direct or indirect children of a [code]CanvasLayer[/code] will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a [code]CanvasLayer[/code] with index -1 will be drawn below, and one with index 1 will be drawn above. This is very useful for HUDs (in layer 1+ or above), or backgrounds (in layer -1 or below).", "inherits": "Node", "members": [{"description": "The custom [Viewport] node assigned to the [code]CanvasLayer[/code]. If null, uses the default viewport instead.", "getter": "get_custom_viewport", "name": "custom_viewport", "setter": "set_custom_viewport", "type": "Node"}, {"description": "Layer index for draw order. Lower values are drawn first. Default value: [code]1[/code].", "getter": "get_layer", "name": "layer", "setter": "set_layer", "type": "int"}, {"description": "The layer's base offset.", "getter": "get_offset", "name": "offset", "setter": "set_offset", "type": "Vector2"}, {"description": "The layer's rotation in radians.", "getter": "get_rotation", "name": "rotation", "setter": "set_rotation", "type": "float"}, {"description": "The layer's rotation in degrees.", "getter": "get_rotation_degrees", "name": "rotation_degrees", "setter": "set_rotation_degrees", "type": "float"}, {"description": "The layer's scale.", "getter": "get_scale", "name": "scale", "setter": "set_scale", "type": "Vector2"}, {"description": "The layer's transform.", "getter": "get_transform", "name": "transform", "setter": "set_transform", "type": "Transform2D"}], "methods": [{"arguments": [], "description": "Returns the RID of the canvas used by this layer.", "name": "get_canvas", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}], "name": "CanvasLayer", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/2d/2d_transforms.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/2d/canvas_layers.html"}]}}, "CanvasModulate": {"brief_description": "Tint the entire canvas.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "[code]CanvasModulate[/code] tints the canvas elements using its assigned [code]color[/code].", "inherits": "Node2D", "members": [{"description": "The tint color to apply.", "getter": "get_color", "name": "color", "setter": "set_color", "type": "Color"}], "methods": [], "name": "CanvasModulate", "signals": [], "tutorials": {"links": []}}, "CapsuleMesh": {"brief_description": "Class representing a capsule-shaped [PrimitiveMesh].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Class representing a capsule-shaped [PrimitiveMesh].", "inherits": "PrimitiveMesh", "members": [{"description": "Height of the capsule mesh from the center point. Defaults to 1.0.", "getter": "get_mid_height", "name": "mid_height", "setter": "set_mid_height", "type": "float"}, {"description": "Number of radial segments on the capsule mesh. Defaults to 64.", "getter": "get_radial_segments", "name": "radial_segments", "setter": "set_radial_segments", "type": "int"}, {"description": "Radius of the capsule mesh. Defaults to 1.0.", "getter": "get_radius", "name": "radius", "setter": "set_radius", "type": "float"}, {"description": "Number of rings along the height of the capsule. Defaults to 8.", "getter": "get_rings", "name": "rings", "setter": "set_rings", "type": "int"}], "methods": [], "name": "CapsuleMesh", "signals": [], "tutorials": {"links": []}}, "CapsuleShape": {"brief_description": "Capsule shape for collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Capsule shape for collisions.", "inherits": "Shape", "members": [{"description": "The capsule's height.", "getter": "get_height", "name": "height", "setter": "set_height", "type": "float"}, {"description": "The capsule's radius.", "getter": "get_radius", "name": "radius", "setter": "set_radius", "type": "float"}], "methods": [], "name": "CapsuleShape", "signals": [], "tutorials": {"links": []}}, "CapsuleShape2D": {"brief_description": "Capsule shape for 2D collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Capsule shape for 2D collisions.", "inherits": "Shape2D", "members": [{"description": "The capsule's height.", "getter": "get_height", "name": "height", "setter": "set_height", "type": "float"}, {"description": "The capsule's radius.", "getter": "get_radius", "name": "radius", "setter": "set_radius", "type": "float"}], "methods": [], "name": "CapsuleShape2D", "signals": [], "tutorials": {"links": []}}, "CenterContainer": {"brief_description": "Keeps children controls centered.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "CenterContainer Keeps children controls centered. This container keeps all children to their minimum size, in the center.", "inherits": "Container", "members": [{"description": "If [code]true[/code] centers children relative to the [code]CenterContainer[/code]'s top left corner. Default value: [code]false[/code].", "getter": "is_using_top_left", "name": "use_top_left", "setter": "set_use_top_left", "type": "bool"}], "methods": [], "name": "CenterContainer", "signals": [], "tutorials": {"links": []}}, "CheckBox": {"brief_description": "Binary choice user interface widget.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A checkbox allows the user to make a binary choice (choosing only one of two possible options), for example Answer 'yes' or 'no'.", "inherits": "Button", "members": [], "methods": [], "name": "CheckBox", "signals": [], "tutorials": {"links": []}}, "CheckButton": {"brief_description": "Checkable button.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "CheckButton is a toggle button displayed as a check field.", "inherits": "Button", "members": [], "methods": [], "name": "CheckButton", "signals": [], "tutorials": {"links": []}}, "CircleShape2D": {"brief_description": "Circular shape for 2D collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Circular shape for 2D collisions. This shape is useful for modeling balls or small characters and its collision detection with everything else is very fast.", "inherits": "Shape2D", "members": [{"description": "The circle's radius.", "getter": "get_radius", "name": "radius", "setter": "set_radius", "type": "float"}], "methods": [], "name": "CircleShape2D", "signals": [], "tutorials": {"links": []}}, "ClassDB": {"brief_description": "Class information repository.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Provides access to metadata stored for every available class.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}], "description": "Returns true if you can instance objects from the specified 'class', false in other case.", "name": "can_instance", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}], "description": "Returns whether the specified 'class' is available or not.", "name": "class_exists", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}], "description": "Returns a category associated with the class for use in documentation and the Asset Library. Debug mode required.", "name": "class_get_category", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}, {"description": "", "index": "1", "name": "name", "type": "String"}], "description": "Returns the value of the integer constant 'name' of 'class' or its ancestry. Always returns 0 when the constant could not be found.", "name": "class_get_integer_constant", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}, {"default": "false", "description": "", "index": "1", "name": "no_inheritance", "type": "bool"}], "description": "Returns an array with the names all the integer constants of 'class' or its ancestry.", "name": "class_get_integer_constant_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}, {"default": "false", "description": "", "index": "1", "name": "no_inheritance", "type": "bool"}], "description": "Returns an array with all the methods of 'class' or its ancestry if 'no_inheritance' is false. Every element of the array is a [Dictionary] with the following keys: args, default_args, flags, id, name, return: (class_name, hint, hint_string, name, type, usage).", "name": "class_get_method_list", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "property", "type": "String"}], "description": "Returns the value of 'property' of 'class' or its ancestry.", "name": "class_get_property", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}, {"default": "false", "description": "", "index": "1", "name": "no_inheritance", "type": "bool"}], "description": "Returns an array with all the properties of 'class' or its ancestry if 'no_inheritance' is false.", "name": "class_get_property_list", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}, {"description": "", "index": "1", "name": "signal", "type": "String"}], "description": "Returns the 'signal' data of 'class' or its ancestry. The returned value is a [Dictionary] with the following keys: args, default_args, flags, id, name, return: (class_name, hint, hint_string, name, type, usage).", "name": "class_get_signal", "qualifiers": "const", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}, {"default": "false", "description": "", "index": "1", "name": "no_inheritance", "type": "bool"}], "description": "Returns an array with all the signals of 'class' or its ancestry if 'no_inheritance' is false. Every element of the array is a [Dictionary] as described in [method class_get_signal].", "name": "class_get_signal_list", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}, {"description": "", "index": "1", "name": "name", "type": "String"}], "description": "Return whether 'class' or its ancestry has an integer constant called 'name' or not.", "name": "class_has_integer_constant", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}, {"description": "", "index": "1", "name": "method", "type": "String"}, {"default": "false", "description": "", "index": "2", "name": "no_inheritance", "type": "bool"}], "description": "Return whether 'class' (or its ancestry if 'no_inheritance' is false) has a method called 'method' or not.", "name": "class_has_method", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}, {"description": "", "index": "1", "name": "signal", "type": "String"}], "description": "Return whether 'class' or its ancestry has a signal called 'signal' or not.", "name": "class_has_signal", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "property", "type": "String"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Sets 'property' value of 'class' to 'value'.", "name": "class_set_property", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the names of all the classes available.", "name": "get_class_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}], "description": "Returns the names of all the classes that directly or indirectly inherit from 'class'.", "name": "get_inheriters_from_class", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}], "description": "Returns the parent class of 'class'.", "name": "get_parent_class", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}], "description": "Creates an instance of 'class'.", "name": "instance", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}], "description": "Returns whether this class is enabled or not.", "name": "is_class_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "class", "type": "String"}, {"description": "", "index": "1", "name": "inherits", "type": "String"}], "description": "Returns whether 'inherits' is an ancestor of 'class' or not.", "name": "is_parent_class", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "ClassDB", "signals": [], "tutorials": {"links": []}}, "ClippedCamera": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "ProcessMode", "name": "CLIP_PROCESS_PHYSICS", "value": "0"}, {"description": "", "enum": "ProcessMode", "name": "CLIP_PROCESS_IDLE", "value": "1"}], "demos": {"links": []}, "description": "", "inherits": "Camera", "members": [{"description": "", "getter": "is_clip_to_areas_enabled", "name": "clip_to_areas", "setter": "set_clip_to_areas", "type": "bool"}, {"description": "", "getter": "is_clip_to_bodies_enabled", "name": "clip_to_bodies", "setter": "set_clip_to_bodies", "type": "bool"}, {"description": "", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}, {"description": "", "getter": "get_margin", "name": "margin", "setter": "set_margin", "type": "float"}, {"description": "", "getter": "get_process_mode", "name": "process_mode", "setter": "set_process_mode", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "node", "type": "Object"}], "description": "", "name": "add_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rid", "type": "RID"}], "description": "", "name": "add_exception_rid", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "clear_exceptions", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "", "name": "get_collision_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Object"}], "description": "", "name": "remove_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rid", "type": "RID"}], "description": "", "name": "remove_exception_rid", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "", "name": "set_collision_mask_bit", "return_": {"description": "", "type": "void"}}], "name": "ClippedCamera", "signals": [], "tutorials": {"links": []}}, "CollisionObject": {"brief_description": "Base node for collision objects.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "CollisionObject is the base class for physics objects. It can hold any number of collision [Shape]s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.", "inherits": "Spatial", "members": [{"description": "If [code]true[/code] the [code]CollisionObject[/code] will continue to receive input events as the mouse is dragged across its shapes. Default value: [code]false[/code].", "getter": "get_capture_input_on_drag", "name": "input_capture_on_drag", "setter": "set_capture_input_on_drag", "type": "bool"}, {"description": "If [code]true[/code] the [CollisionObject]'s shapes will respond to [RayCast]s. Default value: [code]true[/code].", "getter": "is_ray_pickable", "name": "input_ray_pickable", "setter": "set_ray_pickable", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "camera", "type": "Object"}, {"description": "", "index": "1", "name": "event", "type": "InputEvent"}, {"description": "", "index": "2", "name": "click_position", "type": "Vector3"}, {"description": "", "index": "3", "name": "click_normal", "type": "Vector3"}, {"description": "", "index": "4", "name": "shape_idx", "type": "int"}], "description": "Accepts unhandled [InputEvent]s. [code]click_position[/code] is the clicked location in world space and [code]click_normal[/code] is the normal vector extending from the clicked surface of the [Shape] at [code]shape_idx[/code]. Connect to the [code]input_event[/code] signal to easily pick up these events.", "name": "_input_event", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner", "type": "Object"}], "description": "Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.", "name": "create_shape_owner", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the object's [RID].", "name": "get_rid", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.", "name": "get_shape_owners", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "If [code]true[/code] the shape owner and its shapes are disabled.", "name": "is_shape_owner_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Removes the given shape owner.", "name": "remove_shape_owner", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "shape_index", "type": "int"}], "description": "Returns the [code]owner_id[/code] of the given shape.", "name": "shape_find_owner", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "shape", "type": "Shape"}], "description": "Adds a [Shape] to the shape owner.", "name": "shape_owner_add_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Removes all shapes from the shape owner.", "name": "shape_owner_clear_shapes", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Returns the parent object of the given shape owner.", "name": "shape_owner_get_owner", "qualifiers": "const", "return_": {"description": "", "type": "Object"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}], "description": "Returns the [Shape] with the given id from the given shape owner.", "name": "shape_owner_get_shape", "qualifiers": "const", "return_": {"description": "", "type": "Shape"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Returns the number of shapes the given shape owner contains.", "name": "shape_owner_get_shape_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}], "description": "Returns the child index of the [Shape] with the given id from the given shape owner.", "name": "shape_owner_get_shape_index", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Returns the shape owner's [Transform].", "name": "shape_owner_get_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}], "description": "Removes a shape from the given shape owner.", "name": "shape_owner_remove_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "disabled", "type": "bool"}], "description": "If [code]true[/code] disables the given shape owner.", "name": "shape_owner_set_disabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "transform", "type": "Transform"}], "description": "Sets the [Transform] of the given shape owner.", "name": "shape_owner_set_transform", "return_": {"description": "", "type": "void"}}], "name": "CollisionObject", "signals": [{"arguments": [{"description": "", "index": "0", "name": "camera", "type": "Node"}, {"description": "", "index": "1", "name": "event", "type": "InputEvent"}, {"description": "", "index": "2", "name": "click_position", "type": "Vector3"}, {"description": "", "index": "3", "name": "click_normal", "type": "Vector3"}, {"description": "", "index": "4", "name": "shape_idx", "type": "int"}], "description": "Emitted when [method _input_event] receives an event. See its description for details.", "name": "input_event"}, {"arguments": [], "description": "Emitted when the mouse pointer enters any of this object's shapes.", "name": "mouse_entered"}, {"arguments": [], "description": "Emitted when the mouse pointer exits all this object's shapes.", "name": "mouse_exited"}], "tutorials": {"links": []}}, "CollisionObject2D": {"brief_description": "Base node for 2D collision objects.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "CollisionObject2D is the base class for 2D physics objects. It can hold any number of 2D collision [Shape2D]s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject2D can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.", "inherits": "Node2D", "members": [{"description": "If [code]true[/code] this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events.", "getter": "is_pickable", "name": "input_pickable", "setter": "set_pickable", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "Object"}, {"description": "", "index": "1", "name": "event", "type": "InputEvent"}, {"description": "", "index": "2", "name": "shape_idx", "type": "int"}], "description": "Accepts unhandled [InputEvent]s. [code]shape_idx[/code] is the child index of the clicked [Shape2D]. Connect to the [code]input_event[/code] signal to easily pick up these events.", "name": "_input_event", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner", "type": "Object"}], "description": "Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.", "name": "create_shape_owner", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the object's [RID].", "name": "get_rid", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.", "name": "get_shape_owners", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "If [code]true[/code] the shape owner and its shapes are disabled.", "name": "is_shape_owner_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Returns [code]true[/code] if collisions for the shape owner originating from this [code]CollisionObject2D[/code] will not be reported to collided with [code]CollisionObject2D[/code]s.", "name": "is_shape_owner_one_way_collision_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Removes the given shape owner.", "name": "remove_shape_owner", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "shape_index", "type": "int"}], "description": "Returns the [code]owner_id[/code] of the given shape.", "name": "shape_find_owner", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "shape", "type": "Shape2D"}], "description": "Adds a [Shape2D] to the shape owner.", "name": "shape_owner_add_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Removes all shapes from the shape owner.", "name": "shape_owner_clear_shapes", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Returns the parent object of the given shape owner.", "name": "shape_owner_get_owner", "qualifiers": "const", "return_": {"description": "", "type": "Object"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}], "description": "Returns the [Shape2D] with the given id from the given shape owner.", "name": "shape_owner_get_shape", "qualifiers": "const", "return_": {"description": "", "type": "Shape2D"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Returns the number of shapes the given shape owner contains.", "name": "shape_owner_get_shape_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}], "description": "Returns the child index of the [Shape2D] with the given id from the given shape owner.", "name": "shape_owner_get_shape_index", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}], "description": "Returns the shape owner's [Transform2D].", "name": "shape_owner_get_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}], "description": "Removes a shape from the given shape owner.", "name": "shape_owner_remove_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "disabled", "type": "bool"}], "description": "If [code]true[/code] disables the given shape owner.", "name": "shape_owner_set_disabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "If [code]enable[/code] is [code]true[/code], collisions for the shape owner originating from this [code]CollisionObject2D[/code] will not be reported to collided with [code]CollisionObject2D[/code]s.", "name": "shape_owner_set_one_way_collision", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "owner_id", "type": "int"}, {"description": "", "index": "1", "name": "transform", "type": "Transform2D"}], "description": "Sets the [Transform2D] of the given shape owner.", "name": "shape_owner_set_transform", "return_": {"description": "", "type": "void"}}], "name": "CollisionObject2D", "signals": [{"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "Node"}, {"description": "", "index": "1", "name": "event", "type": "InputEvent"}, {"description": "", "index": "2", "name": "shape_idx", "type": "int"}], "description": "Emitted when an input event occurs and [code]input_pickable[/code] is [code]true[/code]. See [method _input_event] for details.", "name": "input_event"}, {"arguments": [], "description": "Emitted when the mouse pointer enters any of this object's shapes.", "name": "mouse_entered"}, {"arguments": [], "description": "Emitted when the mouse pointer exits all this object's shapes.", "name": "mouse_exited"}], "tutorials": {"links": []}}, "CollisionPolygon": {"brief_description": "Editor-only class for defining a collision polygon in 3D space.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Allows editing a collision polygon's vertices on a selected plane. Can also set a depth perpendicular to that plane. This class is only available in the editor. It will not appear in the scene tree at runtime. Creates a [Shape] for gameplay. Properties modified during gameplay will have no effect.", "inherits": "Spatial", "members": [{"description": "Length that the resulting collision extends in either direction perpendicular to its polygon.", "getter": "get_depth", "name": "depth", "setter": "set_depth", "type": "float"}, {"description": "If true, no collision will be produced.", "getter": "is_disabled", "name": "disabled", "setter": "set_disabled", "type": "bool"}, {"description": "Array of vertices which define the polygon.", "getter": "get_polygon", "name": "polygon", "setter": "set_polygon", "type": "PoolVector2Array"}], "methods": [], "name": "CollisionPolygon", "signals": [], "tutorials": {"links": []}}, "CollisionPolygon2D": {"brief_description": "Defines a 2D collision polygon.", "category": "Core", "constants": [{"description": "Collisions will include the polygon and its contained area.", "enum": "BuildMode", "name": "BUILD_SOLIDS", "value": "0"}, {"description": "Collisions will only include the polygon edges.", "enum": "BuildMode", "name": "BUILD_SEGMENTS", "value": "1"}], "demos": {"links": []}, "description": "Provides a 2D collision polygon to a [CollisionObject2D] parent. Polygon can be drawn in the editor or specified by a list of vertices.", "inherits": "Node2D", "members": [{"description": "Collision build mode. Use one of the [code]BUILD_*[/code] constants. Default value: [code]BUILD_SOLIDS[/code].", "getter": "get_build_mode", "name": "build_mode", "setter": "set_build_mode", "type": "int"}, {"description": "If [code]true[/code] no collisions will be detected.", "getter": "is_disabled", "name": "disabled", "setter": "set_disabled", "type": "bool"}, {"description": "If [code]true[/code] only edges that face up, relative to CollisionPolygon2D's rotation, will collide with other objects.", "getter": "is_one_way_collision_enabled", "name": "one_way_collision", "setter": "set_one_way_collision", "type": "bool"}, {"description": "The polygon's list of vertices. The final point will be connected to the first.", "getter": "get_polygon", "name": "polygon", "setter": "set_polygon", "type": "PoolVector2Array"}], "methods": [], "name": "CollisionPolygon2D", "signals": [], "tutorials": {"links": []}}, "CollisionShape": {"brief_description": "Node that represents collision shape data in 3D space.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Editor facility for creating and editing collision shapes in 3D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area] to give it a detection shape, or add it to a [PhysicsBody] to create a solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method get_shape] to get the actual shape.", "inherits": "Spatial", "members": [{"description": "A disabled collision shape has no effect in the world.", "getter": "is_disabled", "name": "disabled", "setter": "set_disabled", "type": "bool"}, {"description": "The actual shape owned by this collision shape.", "getter": "get_shape", "name": "shape", "setter": "set_shape", "type": "Shape"}], "methods": [{"arguments": [], "description": "Sets the collision shape's shape to the addition of all its convexed [MeshInstance] siblings geometry.", "name": "make_convex_from_brothers", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "resource", "type": "Resource"}], "description": "If this method exists within a script it will be called whenever the shape resource has been modified.", "name": "resource_changed", "return_": {"description": "", "type": "void"}}], "name": "CollisionShape", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/physics_introduction.html"}]}}, "CollisionShape2D": {"brief_description": "Node that represents collision shape data in 2D space.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Editor facility for creating and editing collision shapes in 2D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area2D] to give it a detection shape, or add it to a [PhysicsBody2D] to create a solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method get_shape] to get the actual shape.", "inherits": "Node2D", "members": [{"description": "A disabled collision shape has no effect in the world.", "getter": "is_disabled", "name": "disabled", "setter": "set_disabled", "type": "bool"}, {"description": "Sets whether this collision shape should only detect collision on one side (top or bottom).", "getter": "is_one_way_collision_enabled", "name": "one_way_collision", "setter": "set_one_way_collision", "type": "bool"}, {"description": "The actual shape owned by this collision shape.", "getter": "get_shape", "name": "shape", "setter": "set_shape", "type": "Shape2D"}], "methods": [], "name": "CollisionShape2D", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/physics_introduction.html"}]}}, "Color": {"brief_description": "Color in RGBA format with some support for ARGB format.", "category": "Built-In Types", "constants": [{"description": "", "name": "gray", "value": "Color( 0.75, 0.75, 0.75, 1 )"}, {"description": "", "name": "aliceblue", "value": "Color( 0.94, 0.97, 1, 1 )"}, {"description": "", "name": "antiquewhite", "value": "Color( 0.98, 0.92, 0.84, 1 )"}, {"description": "", "name": "aqua", "value": "Color( 0, 1, 1, 1 )"}, {"description": "", "name": "aquamarine", "value": "Color( 0.5, 1, 0.83, 1 )"}, {"description": "", "name": "azure", "value": "Color( 0.94, 1, 1, 1 )"}, {"description": "", "name": "beige", "value": "Color( 0.96, 0.96, 0.86, 1 )"}, {"description": "", "name": "bisque", "value": "Color( 1, 0.89, 0.77, 1 )"}, {"description": "", "name": "black", "value": "Color( 0, 0, 0, 1 )"}, {"description": "", "name": "blanchedalmond", "value": "Color( 1, 0.92, 0.8, 1 )"}, {"description": "", "name": "blue", "value": "Color( 0, 0, 1, 1 )"}, {"description": "", "name": "blueviolet", "value": "Color( 0.54, 0.17, 0.89, 1 )"}, {"description": "", "name": "brown", "value": "Color( 0.65, 0.16, 0.16, 1 )"}, {"description": "", "name": "burlywood", "value": "Color( 0.87, 0.72, 0.53, 1 )"}, {"description": "", "name": "cadetblue", "value": "Color( 0.37, 0.62, 0.63, 1 )"}, {"description": "", "name": "chartreuse", "value": "Color( 0.5, 1, 0, 1 )"}, {"description": "", "name": "chocolate", "value": "Color( 0.82, 0.41, 0.12, 1 )"}, {"description": "", "name": "coral", "value": "Color( 1, 0.5, 0.31, 1 )"}, {"description": "", "name": "cornflower", "value": "Color( 0.39, 0.58, 0.93, 1 )"}, {"description": "", "name": "cornsilk", "value": "Color( 1, 0.97, 0.86, 1 )"}, {"description": "", "name": "crimson", "value": "Color( 0.86, 0.08, 0.24, 1 )"}, {"description": "", "name": "cyan", "value": "Color( 0, 1, 1, 1 )"}, {"description": "", "name": "darkblue", "value": "Color( 0, 0, 0.55, 1 )"}, {"description": "", "name": "darkcyan", "value": "Color( 0, 0.55, 0.55, 1 )"}, {"description": "", "name": "darkgoldenrod", "value": "Color( 0.72, 0.53, 0.04, 1 )"}, {"description": "", "name": "darkgray", "value": "Color( 0.66, 0.66, 0.66, 1 )"}, {"description": "", "name": "darkgreen", "value": "Color( 0, 0.39, 0, 1 )"}, {"description": "", "name": "darkkhaki", "value": "Color( 0.74, 0.72, 0.42, 1 )"}, {"description": "", "name": "darkmagenta", "value": "Color( 0.55, 0, 0.55, 1 )"}, {"description": "", "name": "darkolivegreen", "value": "Color( 0.33, 0.42, 0.18, 1 )"}, {"description": "", "name": "darkorange", "value": "Color( 1, 0.55, 0, 1 )"}, {"description": "", "name": "darkorchid", "value": "Color( 0.6, 0.2, 0.8, 1 )"}, {"description": "", "name": "darkred", "value": "Color( 0.55, 0, 0, 1 )"}, {"description": "", "name": "darksalmon", "value": "Color( 0.91, 0.59, 0.48, 1 )"}, {"description": "", "name": "darkseagreen", "value": "Color( 0.56, 0.74, 0.56, 1 )"}, {"description": "", "name": "darkslateblue", "value": "Color( 0.28, 0.24, 0.55, 1 )"}, {"description": "", "name": "darkslategray", "value": "Color( 0.18, 0.31, 0.31, 1 )"}, {"description": "", "name": "darkturquoise", "value": "Color( 0, 0.81, 0.82, 1 )"}, {"description": "", "name": "darkviolet", "value": "Color( 0.58, 0, 0.83, 1 )"}, {"description": "", "name": "deeppink", "value": "Color( 1, 0.08, 0.58, 1 )"}, {"description": "", "name": "deepskyblue", "value": "Color( 0, 0.75, 1, 1 )"}, {"description": "", "name": "dimgray", "value": "Color( 0.41, 0.41, 0.41, 1 )"}, {"description": "", "name": "dodgerblue", "value": "Color( 0.12, 0.56, 1, 1 )"}, {"description": "", "name": "firebrick", "value": "Color( 0.7, 0.13, 0.13, 1 )"}, {"description": "", "name": "floralwhite", "value": "Color( 1, 0.98, 0.94, 1 )"}, {"description": "", "name": "forestgreen", "value": "Color( 0.13, 0.55, 0.13, 1 )"}, {"description": "", "name": "fuchsia", "value": "Color( 1, 0, 1, 1 )"}, {"description": "", "name": "gainsboro", "value": "Color( 0.86, 0.86, 0.86, 1 )"}, {"description": "", "name": "ghostwhite", "value": "Color( 0.97, 0.97, 1, 1 )"}, {"description": "", "name": "gold", "value": "Color( 1, 0.84, 0, 1 )"}, {"description": "", "name": "goldenrod", "value": "Color( 0.85, 0.65, 0.13, 1 )"}, {"description": "", "name": "green", "value": "Color( 0, 1, 0, 1 )"}, {"description": "", "name": "greenyellow", "value": "Color( 0.68, 1, 0.18, 1 )"}, {"description": "", "name": "honeydew", "value": "Color( 0.94, 1, 0.94, 1 )"}, {"description": "", "name": "hotpink", "value": "Color( 1, 0.41, 0.71, 1 )"}, {"description": "", "name": "indianred", "value": "Color( 0.8, 0.36, 0.36, 1 )"}, {"description": "", "name": "indigo", "value": "Color( 0.29, 0, 0.51, 1 )"}, {"description": "", "name": "ivory", "value": "Color( 1, 1, 0.94, 1 )"}, {"description": "", "name": "khaki", "value": "Color( 0.94, 0.9, 0.55, 1 )"}, {"description": "", "name": "lavender", "value": "Color( 0.9, 0.9, 0.98, 1 )"}, {"description": "", "name": "lavenderblush", "value": "Color( 1, 0.94, 0.96, 1 )"}, {"description": "", "name": "lawngreen", "value": "Color( 0.49, 0.99, 0, 1 )"}, {"description": "", "name": "lemonchiffon", "value": "Color( 1, 0.98, 0.8, 1 )"}, {"description": "", "name": "lightblue", "value": "Color( 0.68, 0.85, 0.9, 1 )"}, {"description": "", "name": "lightcoral", "value": "Color( 0.94, 0.5, 0.5, 1 )"}, {"description": "", "name": "lightcyan", "value": "Color( 0.88, 1, 1, 1 )"}, {"description": "", "name": "lightgoldenrod", "value": "Color( 0.98, 0.98, 0.82, 1 )"}, {"description": "", "name": "lightgray", "value": "Color( 0.83, 0.83, 0.83, 1 )"}, {"description": "", "name": "lightgreen", "value": "Color( 0.56, 0.93, 0.56, 1 )"}, {"description": "", "name": "lightpink", "value": "Color( 1, 0.71, 0.76, 1 )"}, {"description": "", "name": "lightsalmon", "value": "Color( 1, 0.63, 0.48, 1 )"}, {"description": "", "name": "lightseagreen", "value": "Color( 0.13, 0.7, 0.67, 1 )"}, {"description": "", "name": "lightskyblue", "value": "Color( 0.53, 0.81, 0.98, 1 )"}, {"description": "", "name": "lightslategray", "value": "Color( 0.47, 0.53, 0.6, 1 )"}, {"description": "", "name": "lightsteelblue", "value": "Color( 0.69, 0.77, 0.87, 1 )"}, {"description": "", "name": "lightyellow", "value": "Color( 1, 1, 0.88, 1 )"}, {"description": "", "name": "lime", "value": "Color( 0, 1, 0, 1 )"}, {"description": "", "name": "limegreen", "value": "Color( 0.2, 0.8, 0.2, 1 )"}, {"description": "", "name": "linen", "value": "Color( 0.98, 0.94, 0.9, 1 )"}, {"description": "", "name": "magenta", "value": "Color( 1, 0, 1, 1 )"}, {"description": "", "name": "maroon", "value": "Color( 0.69, 0.19, 0.38, 1 )"}, {"description": "", "name": "mediumaquamarine", "value": "Color( 0.4, 0.8, 0.67, 1 )"}, {"description": "", "name": "mediumblue", "value": "Color( 0, 0, 0.8, 1 )"}, {"description": "", "name": "mediumorchid", "value": "Color( 0.73, 0.33, 0.83, 1 )"}, {"description": "", "name": "mediumpurple", "value": "Color( 0.58, 0.44, 0.86, 1 )"}, {"description": "", "name": "mediumseagreen", "value": "Color( 0.24, 0.7, 0.44, 1 )"}, {"description": "", "name": "mediumslateblue", "value": "Color( 0.48, 0.41, 0.93, 1 )"}, {"description": "", "name": "mediumspringgreen", "value": "Color( 0, 0.98, 0.6, 1 )"}, {"description": "", "name": "mediumturquoise", "value": "Color( 0.28, 0.82, 0.8, 1 )"}, {"description": "", "name": "mediumvioletred", "value": "Color( 0.78, 0.08, 0.52, 1 )"}, {"description": "", "name": "midnightblue", "value": "Color( 0.1, 0.1, 0.44, 1 )"}, {"description": "", "name": "mintcream", "value": "Color( 0.96, 1, 0.98, 1 )"}, {"description": "", "name": "mistyrose", "value": "Color( 1, 0.89, 0.88, 1 )"}, {"description": "", "name": "moccasin", "value": "Color( 1, 0.89, 0.71, 1 )"}, {"description": "", "name": "navajowhite", "value": "Color( 1, 0.87, 0.68, 1 )"}, {"description": "", "name": "navyblue", "value": "Color( 0, 0, 0.5, 1 )"}, {"description": "", "name": "oldlace", "value": "Color( 0.99, 0.96, 0.9, 1 )"}, {"description": "", "name": "olive", "value": "Color( 0.5, 0.5, 0, 1 )"}, {"description": "", "name": "olivedrab", "value": "Color( 0.42, 0.56, 0.14, 1 )"}, {"description": "", "name": "orange", "value": "Color( 1, 0.65, 0, 1 )"}, {"description": "", "name": "orangered", "value": "Color( 1, 0.27, 0, 1 )"}, {"description": "", "name": "orchid", "value": "Color( 0.85, 0.44, 0.84, 1 )"}, {"description": "", "name": "palegoldenrod", "value": "Color( 0.93, 0.91, 0.67, 1 )"}, {"description": "", "name": "palegreen", "value": "Color( 0.6, 0.98, 0.6, 1 )"}, {"description": "", "name": "paleturquoise", "value": "Color( 0.69, 0.93, 0.93, 1 )"}, {"description": "", "name": "palevioletred", "value": "Color( 0.86, 0.44, 0.58, 1 )"}, {"description": "", "name": "papayawhip", "value": "Color( 1, 0.94, 0.84, 1 )"}, {"description": "", "name": "peachpuff", "value": "Color( 1, 0.85, 0.73, 1 )"}, {"description": "", "name": "peru", "value": "Color( 0.8, 0.52, 0.25, 1 )"}, {"description": "", "name": "pink", "value": "Color( 1, 0.75, 0.8, 1 )"}, {"description": "", "name": "plum", "value": "Color( 0.87, 0.63, 0.87, 1 )"}, {"description": "", "name": "powderblue", "value": "Color( 0.69, 0.88, 0.9, 1 )"}, {"description": "", "name": "purple", "value": "Color( 0.63, 0.13, 0.94, 1 )"}, {"description": "", "name": "rebeccapurple", "value": "Color( 0.4, 0.2, 0.6, 1 )"}, {"description": "", "name": "red", "value": "Color( 1, 0, 0, 1 )"}, {"description": "", "name": "rosybrown", "value": "Color( 0.74, 0.56, 0.56, 1 )"}, {"description": "", "name": "royalblue", "value": "Color( 0.25, 0.41, 0.88, 1 )"}, {"description": "", "name": "saddlebrown", "value": "Color( 0.55, 0.27, 0.07, 1 )"}, {"description": "", "name": "salmon", "value": "Color( 0.98, 0.5, 0.45, 1 )"}, {"description": "", "name": "sandybrown", "value": "Color( 0.96, 0.64, 0.38, 1 )"}, {"description": "", "name": "seagreen", "value": "Color( 0.18, 0.55, 0.34, 1 )"}, {"description": "", "name": "seashell", "value": "Color( 1, 0.96, 0.93, 1 )"}, {"description": "", "name": "sienna", "value": "Color( 0.63, 0.32, 0.18, 1 )"}, {"description": "", "name": "silver", "value": "Color( 0.75, 0.75, 0.75, 1 )"}, {"description": "", "name": "skyblue", "value": "Color( 0.53, 0.81, 0.92, 1 )"}, {"description": "", "name": "slateblue", "value": "Color( 0.42, 0.35, 0.8, 1 )"}, {"description": "", "name": "slategray", "value": "Color( 0.44, 0.5, 0.56, 1 )"}, {"description": "", "name": "snow", "value": "Color( 1, 0.98, 0.98, 1 )"}, {"description": "", "name": "springgreen", "value": "Color( 0, 1, 0.5, 1 )"}, {"description": "", "name": "steelblue", "value": "Color( 0.27, 0.51, 0.71, 1 )"}, {"description": "", "name": "tan", "value": "Color( 0.82, 0.71, 0.55, 1 )"}, {"description": "", "name": "teal", "value": "Color( 0, 0.5, 0.5, 1 )"}, {"description": "", "name": "thistle", "value": "Color( 0.85, 0.75, 0.85, 1 )"}, {"description": "", "name": "tomato", "value": "Color( 1, 0.39, 0.28, 1 )"}, {"description": "", "name": "turquoise", "value": "Color( 0.25, 0.88, 0.82, 1 )"}, {"description": "", "name": "violet", "value": "Color( 0.93, 0.51, 0.93, 1 )"}, {"description": "", "name": "webgray", "value": "Color( 0.5, 0.5, 0.5, 1 )"}, {"description": "", "name": "webgreen", "value": "Color( 0, 0.5, 0, 1 )"}, {"description": "", "name": "webmaroon", "value": "Color( 0.5, 0, 0, 1 )"}, {"description": "", "name": "webpurple", "value": "Color( 0.5, 0, 0.5, 1 )"}, {"description": "", "name": "wheat", "value": "Color( 0.96, 0.87, 0.7, 1 )"}, {"description": "", "name": "white", "value": "Color( 1, 1, 1, 1 )"}, {"description": "", "name": "whitesmoke", "value": "Color( 0.96, 0.96, 0.96, 1 )"}, {"description": "", "name": "yellow", "value": "Color( 1, 1, 0, 1 )"}, {"description": "", "name": "yellowgreen", "value": "Color( 0.6, 0.8, 0.2, 1 )"}], "demos": {"links": []}, "description": "A color is represented as red, green and blue (r,g,b) components. Additionally, \"a\" represents the alpha component, often used for transparency. Values are in floating point and usually range from 0 to 1.  Some methods (such as set_modulate(color)) may accept values > 1.\n\t\tYou can also create a color from standardised color names with Color.ColorN (e.g. Color.green) or [method @GDScript.ColorN].", "members": [{"description": "Alpha (0 to 1)", "getter": "", "name": "a", "setter": "", "type": "float"}, {"description": "Alpha (0 to 255)", "getter": "", "name": "a8", "setter": "", "type": "int"}, {"description": "Blue (0 to 1)", "getter": "", "name": "b", "setter": "", "type": "float"}, {"description": "Blue (0 to 255)", "getter": "", "name": "b8", "setter": "", "type": "int"}, {"description": "Green (0 to 1)", "getter": "", "name": "g", "setter": "", "type": "float"}, {"description": "Green (0 to 255)", "getter": "", "name": "g8", "setter": "", "type": "int"}, {"description": "Hue (0 to 1)", "getter": "", "name": "h", "setter": "", "type": "float"}, {"description": "Red (0 to 1)", "getter": "", "name": "r", "setter": "", "type": "float"}, {"description": "Red (0 to 255)", "getter": "", "name": "r8", "setter": "", "type": "int"}, {"description": "Saturation (0 to 1)", "getter": "", "name": "s", "setter": "", "type": "float"}, {"description": "Value (0 to 1)", "getter": "", "name": "v", "setter": "", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}], "description": "Constructs a color from an HTML hexadecimal color string in ARGB or RGB format. See also [method @GDScript.ColorN].\n\t\t\t\tThe following string formats are supported:\n\t\t\t\t\t[code]\"#ff00ff00\"[/code] - ARGB format with '#'\n\t\t\t\t\t[code]\"ff00ff00\"[/code] - ARGB format\n\t\t\t\t\t[code]\"#ff00ff\"[/code] - RGB format with '#'\n\t\t\t\t\t[code]\"ff00ff\"[/code] - RGB format\n\t\t\t\t[codeblock]\n\t\t\t\t# The following code creates the same color of an RGBA(178, 217, 10, 255)\n\t\t\t\tvar c1 = Color(\"#ffb2d90a\") # ARGB format with '#'\n\t\t\t\tvar c2 = Color(\"ffb2d90a\")  # ARGB format\n\t\t\t\tvar c3 = Color(\"#b2d90a\")   # RGB format with '#'\n\t\t\t\tvar c4 = Color(\"b2d90a\")    # RGB format\n\t\t\t\t[/codeblock]", "name": "Color", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "int"}], "description": "Constructs a color from a 32-bit integer (each byte represents a component of the RGBA profile).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(274) # a color of an RGBA(0, 0, 1, 18)\n\t\t\t\t[/codeblock]", "name": "Color", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "r", "type": "float"}, {"description": "", "index": "1", "name": "g", "type": "float"}, {"description": "", "index": "2", "name": "b", "type": "float"}], "description": "Constructs a color from an RGB profile using values between 0 and 1 (float). Alpha will always be 1.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.2, 1.0, .7) # a color of an RGBA(51, 255, 178, 255)\n\t\t\t\t[/codeblock]", "name": "Color", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "r", "type": "float"}, {"description": "", "index": "1", "name": "g", "type": "float"}, {"description": "", "index": "2", "name": "b", "type": "float"}, {"description": "", "index": "3", "name": "a", "type": "float"}], "description": "Constructs a color from an RGBA profile using values between 0 and 1 (float).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.2, 1.0, .7, .8) # a color of an RGBA(51, 255, 178, 204)\n\t\t\t\t[/codeblock]", "name": "Color", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "over", "type": "Color"}], "description": "Returns a new color resulting from blending this color over another color. If the color is opaque, the result would also be opaque. The other color could then take a range of values with different alpha values.\n\t\t\t\t[codeblock]\n\t\t\t\tvar bg = Color(0.0, 1.0, 0.0, 0.5) # Green with alpha of 50%\n\t\t\t\tvar fg = Color(1.0, 0.0, 0.0, .5) # Red with alpha of 50%\n\t\t\t\tvar blendedColor = bg.blend(fg) # Brown with alpha of 75%\n\t\t\t\t[/codeblock]", "name": "blend", "return_": {"description": "", "type": "Color"}}, {"arguments": [], "description": "Returns the most contrasting color.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(.3, .4, .9)\n\t\t\t\tvar contrastedColor = c.contrasted() # a color of an RGBA(204, 229, 102, 255)\n\t\t\t\t[/codeblock]", "name": "contrasted", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "amount", "type": "float"}], "description": "Returns a new color resulting from making this color darker by the specified percentage (0-1).\n\t\t\t\t[codeblock]\n\t\t\t\tvar green = Color(0.0, 1.0, 0.0)\n\t\t\t\tvar darkgreen = green.darkened(0.2) # 20% darker than regular green\n\t\t\t\t[/codeblock]", "name": "darkened", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "h", "type": "float"}, {"description": "", "index": "1", "name": "s", "type": "float"}, {"description": "", "index": "2", "name": "v", "type": "float"}, {"default": "1", "description": "", "index": "3", "name": "a", "type": "float"}], "description": "Constructs a color from an HSV profile. [code]h[/code], [code]s[/code], and [code]v[/code] are values between 0 and 1.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color.from_hsv(0.58, 0.5, 0.79, 0.8) # equivalent to HSV(210, 50, 79, 0.8) or Color8(100, 151, 201, 0.8)\n\t\t\t\t[/codeblock]", "name": "from_hsv", "return_": {"description": "", "type": "Color"}}, {"arguments": [], "description": "Returns the color's grayscale.\n\t\t\t\tThe gray is calculated by (r + g + b) / 3.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.2, 0.45, 0.82)\n\t\t\t\tvar gray = c.gray() # a value of 0.466667\n\t\t\t\t[/codeblock]", "name": "gray", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the inverted color (1-r, 1-g, 1-b, 1-a).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(.3, .4, .9)\n\t\t\t\tvar invertedColor = c.inverted() # a color of an RGBA(178, 153, 26, 255)\n\t\t\t\t[/codeblock]", "name": "inverted", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "amount", "type": "float"}], "description": "Returns a new color resulting from making this color lighter by the specified percentage (0-1).\n\t\t\t\t[codeblock]\n\t\t\t\tvar green = Color(0.0, 1.0, 0.0)\n\t\t\t\tvar lightgreen = green.lightened(0.2) # 20% lighter than regular green\n\t\t\t\t[/codeblock]", "name": "lightened", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Color"}, {"description": "", "index": "1", "name": "t", "type": "float"}], "description": "Returns the color of the linear interpolation with another color. The value t is between 0 and 1 (float).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c1 = Color(1.0, 0.0, 0.0)\n\t\t\t\tvar c2 = Color(0.0, 1.0, 0.0)\n\t\t\t\tvar li_c = c1.linear_interpolate(c2, 0.5) # a color of an RGBA(128, 128, 0, 255)\n\t\t\t\t[/codeblock]", "name": "linear_interpolate", "return_": {"description": "", "type": "Color"}}, {"arguments": [], "description": "Returns the color's 32-bit integer in ABGR format (each byte represents a component of the ABGR profile). ABGR is the reversed version of the default format.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, .5, .2)\n\t\t\t\tprint(c.to_abgr32()) # Prints 4281565439\n\t\t\t\t[/codeblock]", "name": "to_abgr32", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the color's 64-bit integer in ABGR format (each word represents a component of the ABGR profile). ABGR is the reversed version of the default format.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, .5, .2)\n\t\t\t\tprint(c.to_abgr64()) # Prints -225178692812801\n\t\t\t\t[/codeblock]", "name": "to_abgr64", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the color's 32-bit integer in ARGB format (each byte represents a component of the ARGB profile). ARGB is more compatible with DirectX.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, .5, .2)\n\t\t\t\tprint(c.to_argb32()) # Prints 4294934323\n\t\t\t\t[/codeblock]", "name": "to_argb32", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the color's 64-bit integer in ARGB format (each word represents a component of the ARGB profile). ARGB is more compatible with DirectX.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, .5, .2)\n\t\t\t\tprint(c.to_argb64()) # Prints -2147470541\n\t\t\t\t[/codeblock]", "name": "to_argb64", "return_": {"description": "", "type": "int"}}, {"arguments": [{"default": "True", "description": "", "index": "0", "name": "with_alpha", "type": "bool"}], "description": "Returns the color's HTML hexadecimal color string in ARGB format (ex: [code]ff34f822[/code]).\n\t\t\t\tOptionally flag 'false' to not include alpha in hexadecimal string.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, 1, 1, .5)\n\t\t\t\tvar s1 = c.to_html() # Results \"7fffffff\"\n\t\t\t\tvar s2 = c.to_html(false) # Results 'ffffff'\n\t\t\t\t[/codeblock]", "name": "to_html", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the color's 32-bit integer in RGBA format (each byte represents a component of the RGBA profile). RGBA is the format that Godot uses by default.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, .5, .2)\n\t\t\t\tprint(c.to_rgba32()) # Prints 4286526463\n\t\t\t\t[/codeblock]", "name": "to_rgba32", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the color's 64-bit integer in RGBA format (each word represents a component of the RGBA profile). RGBA is the format that Godot uses by default.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, .5, .2)\n\t\t\t\tprint(c.to_rgba64()) # Prints -140736629309441\n\t\t\t\t[/codeblock]", "name": "to_rgba64", "return_": {"description": "", "type": "int"}}], "name": "Color", "signals": [], "tutorials": {"links": []}}, "ColorPicker": {"brief_description": "Color picker control.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "[Control] node displaying a color picker widget. It's useful for selecting a color from an RGB/RGBA colorspace.", "inherits": "BoxContainer", "members": [{"description": "The currently selected color.", "getter": "get_pick_color", "name": "color", "setter": "set_pick_color", "type": "Color"}, {"description": "If [code]true[/code] the color will apply only after the user releases the mouse button, otherwise it will apply immediatly even in mouse motion event (which can cause performance issues).", "getter": "is_deferred_mode", "name": "deferred_mode", "setter": "set_deferred_mode", "type": "bool"}, {"description": "If [code]true[/code] shows an alpha channel slider (transparency).", "getter": "is_editing_alpha", "name": "edit_alpha", "setter": "set_edit_alpha", "type": "bool"}, {"description": "If [code]true[/code] allows the color R, G, B component values to go beyond 1.0, which can be used for certain special operations that require it (like tinting without darkening or rendering sprites in HDR).", "getter": "is_raw_mode", "name": "raw_mode", "setter": "set_raw_mode", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "color", "type": "Color"}], "description": "Adds the given color to a list of color presets. The presets are displayed in the color picker and the user will be able to select them. Note: the presets list is only for [i]this[/i] color picker.", "name": "add_preset", "return_": {"description": "", "type": "void"}}], "name": "ColorPicker", "signals": [{"arguments": [{"description": "", "index": "0", "name": "color", "type": "Color"}], "description": "Emitted when the color is changed.", "name": "color_changed"}], "tutorials": {"links": []}}, "ColorPickerButton": {"brief_description": "Button that pops out a [ColorPicker].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Encapsulates a [ColorPicker] making it accesible by pressing a button. Pressing the button will toggle the [ColorPicker] visibility.", "inherits": "Button", "members": [{"description": "The currently selected color.", "getter": "get_pick_color", "name": "color", "setter": "set_pick_color", "type": "Color"}, {"description": "If [code]true[/code] the alpha channel in the displayed [ColorPicker] will be visible. Default value: [code]true[/code].", "getter": "is_editing_alpha", "name": "edit_alpha", "setter": "set_edit_alpha", "type": "bool"}], "methods": [{"arguments": [], "description": "Returns the [ColorPicker] that this node toggles.", "name": "get_picker", "return_": {"description": "", "type": "ColorPicker"}}, {"arguments": [], "description": "Returns the control's [PopupPanel] which allows you to connect to popup signals. This allows you to handle events when the ColorPicker is shown or hidden.", "name": "get_popup", "return_": {"description": "", "type": "PopupPanel"}}], "name": "ColorPickerButton", "signals": [{"arguments": [{"description": "", "index": "0", "name": "color", "type": "Color"}], "description": "Emitted when the color changes.", "name": "color_changed"}, {"arguments": [], "description": "", "name": "popup_closed"}], "tutorials": {"links": []}}, "ColorRect": {"brief_description": "Colored rectangle.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Displays a colored rectangle.", "inherits": "Control", "members": [{"description": "The fill color.\n\t\t\t[codeblock]\n\t\t\t$ColorRect.color = Color(1, 0, 0, 1) # Set ColorRect's color to red.\n\t\t\t[/codeblock]", "getter": "get_frame_color", "name": "color", "setter": "set_frame_color", "type": "Color"}], "methods": [], "name": "ColorRect", "signals": [], "tutorials": {"links": []}}, "ConcavePolygonShape": {"brief_description": "Concave polygon shape.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Concave polygon shape resource, which can be set into a [PhysicsBody] or area. This shape is created by feeding a list of triangles.", "inherits": "Shape", "members": [], "methods": [{"arguments": [], "description": "Return the faces (an array of triangles).", "name": "get_faces", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "faces", "type": "PoolVector3Array"}], "description": "Set the faces (an array of triangles).", "name": "set_faces", "return_": {"description": "", "type": "void"}}], "name": "ConcavePolygonShape", "signals": [], "tutorials": {"links": []}}, "ConcavePolygonShape2D": {"brief_description": "Concave polygon 2D shape resource for physics.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Concave polygon 2D shape resource for physics. It is made out of segments and is very optimal for complex polygonal concave collisions. It is really not advised to use for [RigidBody2D] nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions.\n\t\tThe main difference between a [ConvexPolygonShape2D] and a [code]ConcavePolygonShape2D[/code] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.", "inherits": "Shape2D", "members": [{"description": "The array of points that make up the [code]ConcavePolygonShape2D[/code]'s line segments.", "getter": "get_segments", "name": "segments", "setter": "set_segments", "type": "PoolVector2Array"}], "methods": [], "name": "ConcavePolygonShape2D", "signals": [], "tutorials": {"links": []}}, "ConeTwistJoint": {"brief_description": "A twist joint between two 3D bodies.", "category": "Core", "constants": [{"description": "Swing is rotation from side to side, around the axis perpendicular to the twist axis.\n\t\t\tThe swing span defines, how much rotation will not get corrected allong the swing axis.\n\t\t\tCould be defined as looseness in the [code]ConeTwistJoint[/code].\n\t\t\tIf below 0.05, this behaviour is locked. Default value: [code]PI/4[/code].", "enum": "Param", "name": "PARAM_SWING_SPAN", "value": "0"}, {"description": "Twist is the rotation around the twist axis, this value defined how far the joint can twist.\n\t\t\tTwist is locked if below 0.05.", "enum": "Param", "name": "PARAM_TWIST_SPAN", "value": "1"}, {"description": "The speed with which the swing or twist will take place.\n\t\t\tThe higher, the faster.", "enum": "Param", "name": "PARAM_BIAS", "value": "2"}, {"description": "The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint.", "enum": "Param", "name": "PARAM_SOFTNESS", "value": "3"}, {"description": "Defines, how fast the swing- and twist-speed-difference on both sides gets synced.", "enum": "Param", "name": "PARAM_RELAXATION", "value": "4"}, {"description": "End flag of PARAM_* constants, used internally.", "enum": "Param", "name": "PARAM_MAX", "value": "5"}], "demos": {"links": []}, "description": "The joint can rotate the bodies across an axis defined by the local x-axes of the [Joint].\n\t\tThe twist axis is initiated as the x-axis of the [Joint].\n\t\tOnce the Bodies swing, the twist axis is calculated as the middle of the x-axes of the Joint in the local space of the two Bodies.", "inherits": "Joint", "members": [{"description": "The speed with which the swing or twist will take place.\n\t\t\tThe higher, the faster.", "getter": "get_param", "name": "bias", "setter": "set_param", "type": "float"}, {"description": "Defines, how fast the swing- and twist-speed-difference on both sides gets synced.", "getter": "get_param", "name": "relaxation", "setter": "set_param", "type": "float"}, {"description": "The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint.", "getter": "get_param", "name": "softness", "setter": "set_param", "type": "float"}, {"description": "Swing is rotation from side to side, around the axis perpendicular to the twist axis.\n\t\t\tThe swing span defines, how much rotation will not get corrected allong the swing axis.\n\t\t\tCould be defined as looseness in the [code]ConeTwistJoint[/code].\n\t\t\tIf below 0.05, this behaviour is locked. Default value: [code]PI/4[/code].", "getter": "_get_swing_span", "name": "swing_span", "setter": "_set_swing_span", "type": "float"}, {"description": "Twist is the rotation around the twist axis, this value defined how far the joint can twist.\n\t\t\tTwist is locked if below 0.05.", "getter": "_get_twist_span", "name": "twist_span", "setter": "_set_twist_span", "type": "float"}], "methods": [], "name": "ConeTwistJoint", "signals": [], "tutorials": {"links": []}}, "ConfigFile": {"brief_description": "Helper class to handle INI-style files.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This helper class can be used to store [Variant] values on the filesystem using INI-style formatting. The stored values are identified by a section and a key:\n\t\t[codeblock]\n\t\t[section]\n\t\tsome_key=42\n\t\tstring_example=\"Hello World!\"\n\t\ta_vector=Vector3( 1, 0, 2 )\n\t\t[/codeblock]\n\t\tThe stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.\n\t\tThe following example shows how to parse an INI-style file from the system, read its contents and store new values in it:\n\t\t[codeblock]\n\t\tvar config = ConfigFile.new()\n\t\tvar err = config.load(\"user://settings.cfg\")\n\t\tif err == OK: # if not, something went wrong with the file loading\n\t\t    # Look for the display/width pair, and default to 1024 if missing\n\t\t    var screen_width = get_value(\"display\", \"width\", 1024)\n\t\t    # Store a variable if and only if it hasn't been defined yet\n\t\t    if not config.has_section_key(\"audio\", \"mute\"):\n\t\t        config.set_value(\"audio\", \"mute\", false)\n\t\t    # Save the changes by overwriting the previous file\n\t\t    config.save(\"user://settings.cfg\")\n\t\t[/codeblock]", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "section", "type": "String"}], "description": "Deletes the specified section along with all the key-value pairs inside.", "name": "erase_section", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "section", "type": "String"}], "description": "Returns an array of all defined key identifiers in the specified section.", "name": "get_section_keys", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [], "description": "Returns an array of all defined section identifiers.", "name": "get_sections", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "section", "type": "String"}, {"description": "", "index": "1", "name": "key", "type": "String"}, {"default": "null", "description": "", "index": "2", "name": "default", "type": "Variant"}], "description": "Returns the current value for the specified section and key. If the section and/or the key do not exist, the method returns the value of the optional [code]default[/code] argument, or [code]null[/code] if it is omitted.", "name": "get_value", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "section", "type": "String"}], "description": "Returns [code]true[/code] if the specified section exists.", "name": "has_section", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "section", "type": "String"}, {"description": "", "index": "1", "name": "key", "type": "String"}], "description": "Returns [code]true[/code] if the specified section-key pair exists.", "name": "has_section_key", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Loads the config file specified as a parameter. The file's contents are parsed and loaded in the ConfigFile object which the method was called on. Returns one of the [code]OK[/code], [code]FAILED[/code] or [code]ERR_*[/code] constants listed in [@GlobalScope]. If the load was successful, the return value is [code]OK[/code].", "name": "load", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Saves the contents of the ConfigFile object to the file specified as a parameter. The output file uses an INI-style structure. Returns one of the [code]OK[/code], [code]FAILED[/code] or [code]ERR_*[/code] constants listed in [@GlobalScope]. If the load was successful, the return value is [code]OK[/code].", "name": "save", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "section", "type": "String"}, {"description": "", "index": "1", "name": "key", "type": "String"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Assigns a value to the specified key of the specified section. If the section and/or the key do not exist, they are created. Passing a [code]null[/code] value deletes the specified key if it exists, and deletes the section if it ends up empty once the key has been removed.", "name": "set_value", "return_": {"description": "", "type": "void"}}], "name": "ConfigFile", "signals": [], "tutorials": {"links": []}}, "ConfirmationDialog": {"brief_description": "Dialog for confirmation of actions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Dialog for confirmation of actions. This dialog inherits from [AcceptDialog], but has by default an OK and Cancel button (in host OS order).", "inherits": "AcceptDialog", "members": [], "methods": [{"arguments": [], "description": "Return the cancel button.", "name": "get_cancel", "return_": {"description": "", "type": "Button"}}], "name": "ConfirmationDialog", "signals": [], "tutorials": {"links": []}}, "Container": {"brief_description": "Base node for containers.", "category": "Core", "constants": [{"description": "Notification for when sorting the children, it must be obeyed immediately.", "name": "NOTIFICATION_SORT_CHILDREN", "value": "50"}], "demos": {"links": []}, "description": "Base node for containers. A [code]Container[/code] contains other controls and automatically arranges them in a certain way.\n\t\tA Control can inherit this to create custom container classes.", "inherits": "Control", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "child", "type": "Control"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}], "description": "Fit a child control in a given rect. This is mainly a helper for creating custom container classes.", "name": "fit_child_in_rect", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Queue resort of the contained children. This is called automatically anyway, but can be called upon request.", "name": "queue_sort", "return_": {"description": "", "type": "void"}}], "name": "Container", "signals": [{"arguments": [], "description": "Emitted when sorting the children is needed.", "name": "sort_children"}], "tutorials": {"links": []}}, "Control": {"brief_description": "All User Interface nodes inherit from Control. A control's anchors and margins adapt its position and size relative to its parent.", "category": "Core", "constants": [{"description": "The node cannot grab focus. Use with [member focus_mode].", "enum": "FocusMode", "name": "FOCUS_NONE", "value": "0"}, {"description": "The node can only grab focus on mouse clicks. Use with [member focus_mode].", "enum": "FocusMode", "name": "FOCUS_CLICK", "value": "1"}, {"description": "The node can grab focus on mouse click or using the arrows and the Tab keys on the keyboard. Use with [member focus_mode].", "enum": "FocusMode", "name": "FOCUS_ALL", "value": "2"}, {"description": "Sent when the node changes size. Use [member rect_size] to get the new size.", "name": "NOTIFICATION_RESIZED", "value": "40"}, {"description": "Sent when the mouse pointer enters the node.", "name": "NOTIFICATION_MOUSE_ENTER", "value": "41"}, {"description": "Sent when the mouse pointer exits the node.", "name": "NOTIFICATION_MOUSE_EXIT", "value": "42"}, {"description": "Sent when the node grabs focus.", "name": "NOTIFICATION_FOCUS_ENTER", "value": "43"}, {"description": "Sent when the node loses focus.", "name": "NOTIFICATION_FOCUS_EXIT", "value": "44"}, {"description": "Sent when the node's [member theme] changes, right before Godot redraws the control. Happens when you call one of the [code]add_*_override[/code]", "name": "NOTIFICATION_THEME_CHANGED", "value": "45"}, {"description": "Sent when an open modal dialog closes. See [member show_modal].", "name": "NOTIFICATION_MODAL_CLOSE", "value": "46"}, {"description": "", "name": "NOTIFICATION_SCROLL_BEGIN", "value": "47"}, {"description": "", "name": "NOTIFICATION_SCROLL_END", "value": "48"}, {"description": "Show the system's arrow mouse cursor when the user hovers the node. Use with [method set_default_cursor_shape].", "enum": "CursorShape", "name": "CURSOR_ARROW", "value": "0"}, {"description": "Show the system's I-beam mouse cursor when the user hovers the node. The I-beam pointer has a shape similar to \"I\". It tells the user they can highlight or insert text.", "enum": "CursorShape", "name": "CURSOR_IBEAM", "value": "1"}, {"description": "Show the system's pointing hand mouse cursor when the user hovers the node.", "enum": "CursorShape", "name": "CURSOR_POINTING_HAND", "value": "2"}, {"description": "Show the system's cross mouse cursor when the user hovers the node.", "enum": "CursorShape", "name": "CURSOR_CROSS", "value": "3"}, {"description": "Show the system's wait mouse cursor, often an hourglass, when the user hovers the node.", "enum": "CursorShape", "name": "CURSOR_WAIT", "value": "4"}, {"description": "Show the system's busy mouse cursor when the user hovers the node. Often an hourglass.", "enum": "CursorShape", "name": "CURSOR_BUSY", "value": "5"}, {"description": "Show the system's drag mouse cursor, often a closed fist or a cross symbol, when the user hovers the node. It tells the user they're currently dragging an item, like a node in the Scene dock.", "enum": "CursorShape", "name": "CURSOR_DRAG", "value": "6"}, {"description": "Show the system's drop mouse cursor when the user hovers the node. It can be an open hand. It tells the user they can drop an item they're currently grabbing, like a node in the Scene dock.", "enum": "CursorShape", "name": "CURSOR_CAN_DROP", "value": "7"}, {"description": "Show the system's forbidden mouse cursor when the user hovers the node. Often a crossed circle.", "enum": "CursorShape", "name": "CURSOR_FORBIDDEN", "value": "8"}, {"description": "Show the system's vertical resize mouse cursor when the user hovers the node. A double headed vertical arrow. It tells the user they can resize the window or the panel vertically.", "enum": "CursorShape", "name": "CURSOR_VSIZE", "value": "9"}, {"description": "Show the system's horizontal resize mouse cursor when the user hovers the node. A double headed horizontal arrow. It tells the user they can resize the window or the panel horizontally.", "enum": "CursorShape", "name": "CURSOR_HSIZE", "value": "10"}, {"description": "Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically.", "enum": "CursorShape", "name": "CURSOR_BDIAGSIZE", "value": "11"}, {"description": "Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double headed arrow that goes from the top left to the bottom right, the opposite of [code]CURSOR_BDIAGSIZE[/code]. It tells the user they can resize the window or the panel both horizontally and vertically.", "enum": "CursorShape", "name": "CURSOR_FDIAGSIZE", "value": "12"}, {"description": "Show the system's move mouse cursor when the user hovers the node. It shows 2 double-headed arrows at a 90 degree angle. It tells the user they can move a UI element freely.", "enum": "CursorShape", "name": "CURSOR_MOVE", "value": "13"}, {"description": "Show the system's vertical split mouse cursor when the user hovers the node. On Windows, it's the same as [code]CURSOR_VSIZE[/code].", "enum": "CursorShape", "name": "CURSOR_VSPLIT", "value": "14"}, {"description": "Show the system's horizontal split mouse cursor when the user hovers the node. On Windows, it's the same as [code]CURSOR_HSIZE[/code].", "enum": "CursorShape", "name": "CURSOR_HSPLIT", "value": "15"}, {"description": "Show the system's help mouse cursor when the user hovers the node, a question mark.", "enum": "CursorShape", "name": "CURSOR_HELP", "value": "16"}, {"description": "Snap all 4 anchors to the top-left of the parent container's bounds. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_TOP_LEFT", "value": "0"}, {"description": "Snap all 4 anchors to the top-right of the parent container's bounds. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_TOP_RIGHT", "value": "1"}, {"description": "Snap all 4 anchors to the bottom-left of the parent container's bounds. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_BOTTOM_LEFT", "value": "2"}, {"description": "Snap all 4 anchors to the bottom-right of the parent container's bounds. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_BOTTOM_RIGHT", "value": "3"}, {"description": "Snap all 4 anchors to the center of the left edge of the parent container's bounds. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_CENTER_LEFT", "value": "4"}, {"description": "Snap all 4 anchors to the center of the top edge of the parent container's bounds. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_CENTER_TOP", "value": "5"}, {"description": "Snap all 4 anchors to the center of the right edge of the parent container's bounds. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_CENTER_RIGHT", "value": "6"}, {"description": "Snap all 4 anchors to the center of the bottom edge of the parent container's bounds. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_CENTER_BOTTOM", "value": "7"}, {"description": "Snap all 4 anchors to the center of the parent container's bounds. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_CENTER", "value": "8"}, {"description": "Snap all 4 anchors to the left edge of the parent container. The left margin becomes relative to the left edge and the top margin relative to the top left corner of the node's parent. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_LEFT_WIDE", "value": "9"}, {"description": "Snap all 4 anchors to the top edge of the parent container. The left margin becomes relative to the top left corner, the top margin relative to the top edge, and the right margin relative to the top right corner of the node's parent. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_TOP_WIDE", "value": "10"}, {"description": "Snap all 4 anchors to the right edge of the parent container. The right margin becomes relative to the right edge and the top margin relative to the top right corner of the node's parent. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_RIGHT_WIDE", "value": "11"}, {"description": "Snap all 4 anchors to the bottom edge of the parent container. The left margin becomes relative to the bottom left corner, the bottom margin relative to the bottom edge, and the right margin relative to the bottom right corner of the node's parent. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_BOTTOM_WIDE", "value": "12"}, {"description": "Snap all 4 anchors to a vertical line that cuts the parent container in half. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_VCENTER_WIDE", "value": "13"}, {"description": "Snap all 4 anchors to a horizontal line that cuts the parent container in half. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_HCENTER_WIDE", "value": "14"}, {"description": "Snap all 4 anchors to the respective corners of the parent container. Set all 4 margins to 0 after you applied this preset and the [code]Control[/code] will fit its parent container. Use with [method set_anchors_preset].", "enum": "LayoutPreset", "name": "PRESET_WIDE", "value": "15"}, {"description": "", "enum": "LayoutPresetMode", "name": "PRESET_MODE_MINSIZE", "value": "0"}, {"description": "", "enum": "LayoutPresetMode", "name": "PRESET_MODE_KEEP_WIDTH", "value": "1"}, {"description": "", "enum": "LayoutPresetMode", "name": "PRESET_MODE_KEEP_HEIGHT", "value": "2"}, {"description": "", "enum": "LayoutPresetMode", "name": "PRESET_MODE_KEEP_SIZE", "value": "3"}, {"description": "Tells the parent [Container] to expand the bounds of this node to fill all the available space without pushing any other node. Use with [member size_flags_horizontal] and [member size_flags_vertical].", "enum": "SizeFlags", "name": "SIZE_FILL", "value": "1"}, {"description": "Tells the parent [Container] to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they'll share the space based on their stretch ratio. See [member size_flags_stretch_ratio]. Use with [member size_flags_horizontal] and [member size_flags_vertical].", "enum": "SizeFlags", "name": "SIZE_EXPAND", "value": "2"}, {"description": "Sets the node's size flags to both fill and expand. See the 2 constants above for more information.", "enum": "SizeFlags", "name": "SIZE_EXPAND_FILL", "value": "3"}, {"description": "Tells the parent [Container] to center the node in itself. It centers the control based on its bounding box, so it doesn't work with the fill or expand size flags. Use with [member size_flags_horizontal] and [member size_flags_vertical].", "enum": "SizeFlags", "name": "SIZE_SHRINK_CENTER", "value": "4"}, {"description": "Tells the parent [Container] to align the node with its end, either the bottom or the right edge. It doesn't work with the fill or expand size flags. Use with [member size_flags_horizontal] and [member size_flags_vertical].", "enum": "SizeFlags", "name": "SIZE_SHRINK_END", "value": "8"}, {"description": "The control will receive mouse button input events through [method _gui_input] if clicked on. These events are automatically marked as handled and they will not propagate further to other controls.", "enum": "MouseFilter", "name": "MOUSE_FILTER_STOP", "value": "0"}, {"description": "The control will receive mouse button input events through [method _gui_input] if clicked on. If this control does not handle the event, the parent control (if any) will be considered for a mouse click, and so on until there is no more parent control to potentially handle it. Even if no control handled it at all, the event will still be handled automatically.", "enum": "MouseFilter", "name": "MOUSE_FILTER_PASS", "value": "1"}, {"description": "The control will not receive mouse button input events through [method _gui_input] and will not block other controls from receiving these events. These events will also not be handled automatically.", "enum": "MouseFilter", "name": "MOUSE_FILTER_IGNORE", "value": "2"}, {"description": "", "enum": "GrowDirection", "name": "GROW_DIRECTION_BEGIN", "value": "0"}, {"description": "", "enum": "GrowDirection", "name": "GROW_DIRECTION_END", "value": "1"}, {"description": "", "enum": "GrowDirection", "name": "GROW_DIRECTION_BOTH", "value": "2"}, {"description": "Snaps one of the 4 anchor's sides to the origin of the node's [code]Rect[/code], in the top left. Use it with one of the [code]anchor_*[/code] member variables, like [member anchor_left]. To change all 4 anchors at once, use [method set_anchors_preset].", "enum": "Anchor", "name": "ANCHOR_BEGIN", "value": "0"}, {"description": "Snaps one of the 4 anchor's sides to the end of the node's [code]Rect[/code], in the bottom right. Use it with one of the [code]anchor_*[/code] member variables, like [member anchor_left]. To change all 4 anchors at once, use [method set_anchors_preset].", "enum": "Anchor", "name": "ANCHOR_END", "value": "1"}], "demos": {"links": []}, "description": "Base class for all User Interface or [i]UI[/i] related nodes. [code]Control[/code] features a bounding rectangle that defines its extents, an anchor position relative to its parent and margins that represent an offset to the anchor. The margins update automatically when the node, any of its parents, or the screen size change.\n\t\tFor more information on Godot's UI system, anchors, margins, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from [code]Control[/code] and [Container] nodes.\n\t\t[b]User Interface nodes and input[/b]\n\t\tGodot sends input events to the scene's root node first, by calling [method Node._input]. [method Node._input] forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls [method MainLoop._input_event]. Call [method accept_event] so no other node receives the event. Once you accepted an input, it becomes handled so [method Node._unhandled_input] will not process it.\n\t\tOnly one [code]Control[/code] node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the focus, call [method grab_focus]. [code]Control[/code] nodes lose focus when another node grabs it, or if you hide the node in focus.\n\t\tSet [member mouse_filter] to MOUSE_FILTER_IGNORE to tell a [code]Control[/code] node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.\n\t\t[Theme] resources change the Control's appearance. If you change the [Theme] on a [code]Control[/code] node, it affects all of its children. To override some of the theme's parameters, call one of the [code]add_*_override[/code] methods, like [method add_font_override]. You can override the theme with the inspector.", "inherits": "CanvasItem", "members": [{"description": "Anchors the bottom edge of the node to the origin, the center, or the end of its parent container. It changes how the bottom margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code].", "getter": "get_anchor", "name": "anchor_bottom", "setter": "_set_anchor", "type": "float"}, {"description": "Anchors the left edge of the node to the origin, the center or the end of its parent container. It changes how the left margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code].", "getter": "get_anchor", "name": "anchor_left", "setter": "_set_anchor", "type": "float"}, {"description": "Anchors the right edge of the node to the origin, the center or the end of its parent container. It changes how the right margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code].", "getter": "get_anchor", "name": "anchor_right", "setter": "_set_anchor", "type": "float"}, {"description": "Anchors the top edge of the node to the origin, the center or the end of its parent container. It changes how the top margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code].", "getter": "get_anchor", "name": "anchor_top", "setter": "_set_anchor", "type": "float"}, {"description": "The focus access mode for the control (None, Click or All). Only one Control can be focused at the same time, and it will receive keyboard signals.", "getter": "get_focus_mode", "name": "focus_mode", "setter": "set_focus_mode", "type": "int"}, {"description": "Tells Godot which node it should give keyboard focus to if the user presses Tab, the down arrow on the keyboard, or down on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one.\n\t\t\tIf the user presses Tab, Godot will give focus to the closest node to the right first, then to the bottom. If the user presses Shift+Tab, Godot will look to the left of the node, then above it.", "getter": "get_focus_neighbour", "name": "focus_neighbour_bottom", "setter": "set_focus_neighbour", "type": "NodePath"}, {"description": "Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab, the left arrow on the keyboard or left on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the left of this one.", "getter": "get_focus_neighbour", "name": "focus_neighbour_left", "setter": "set_focus_neighbour", "type": "NodePath"}, {"description": "Tells Godot which node it should give keyboard focus to if the user presses Tab, the right arrow on the keyboard or right on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one.", "getter": "get_focus_neighbour", "name": "focus_neighbour_right", "setter": "set_focus_neighbour", "type": "NodePath"}, {"description": "Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab, the top arrow on the keyboard or top on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one.", "getter": "get_focus_neighbour", "name": "focus_neighbour_top", "setter": "set_focus_neighbour", "type": "NodePath"}, {"description": "", "getter": "get_focus_next", "name": "focus_next", "setter": "set_focus_next", "type": "NodePath"}, {"description": "", "getter": "get_focus_previous", "name": "focus_previous", "setter": "set_focus_previous", "type": "NodePath"}, {"description": "", "getter": "get_h_grow_direction", "name": "grow_horizontal", "setter": "set_h_grow_direction", "type": "int"}, {"description": "", "getter": "get_v_grow_direction", "name": "grow_vertical", "setter": "set_v_grow_direction", "type": "int"}, {"description": "Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments.", "getter": "_get_tooltip", "name": "hint_tooltip", "setter": "set_tooltip", "type": "String"}, {"description": "Distance between the node's bottom edge and its parent container, based on [member anchor_bottom].\n\t\t\tMargins are often controlled by one or multiple parent [Container] nodes. Margins update automatically when you move or resize the node.", "getter": "get_margin", "name": "margin_bottom", "setter": "set_margin", "type": "float"}, {"description": "Distance between the node's left edge and its parent container, based on [member anchor_left].", "getter": "get_margin", "name": "margin_left", "setter": "set_margin", "type": "float"}, {"description": "Distance between the node's right edge and its parent container, based on [member anchor_right].", "getter": "get_margin", "name": "margin_right", "setter": "set_margin", "type": "float"}, {"description": "Distance between the node's top edge and its parent container, based on [member anchor_top].", "getter": "get_margin", "name": "margin_top", "setter": "set_margin", "type": "float"}, {"description": "The default cursor shape for this control. Useful for Godot plugins and applications or games that use the system's mouse cursors.\n\t\t\t[b]Note:[/b] On Linux, shapes may vary depending on the cursor theme of the system.", "getter": "get_default_cursor_shape", "name": "mouse_default_cursor_shape", "setter": "set_default_cursor_shape", "type": "int"}, {"description": "Controls whether the control will be able to receive mouse button input events through [method _gui_input] and how these events should be handled. Use one of the [code]MOUSE_FILTER_*[/code] constants. See the constants to learn what each does.", "getter": "get_mouse_filter", "name": "mouse_filter", "setter": "set_mouse_filter", "type": "int"}, {"description": "", "getter": "is_clipping_contents", "name": "rect_clip_content", "setter": "set_clip_contents", "type": "bool"}, {"description": "The node's global position, relative to the world (usually to the top-left corner of the window).", "getter": "get_global_position", "name": "rect_global_position", "setter": "set_global_position", "type": "Vector2"}, {"description": "The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes.", "getter": "get_custom_minimum_size", "name": "rect_min_size", "setter": "set_custom_minimum_size", "type": "Vector2"}, {"description": "By default, the node's pivot is its top-left corner. When you change its [member rect_scale], it will scale around this pivot. Set this property to [member rect_size] / 2 to center the pivot in the node's rectangle.", "getter": "get_pivot_offset", "name": "rect_pivot_offset", "setter": "set_pivot_offset", "type": "Vector2"}, {"description": "The node's position, relative to its parent. It corresponds to the rectangle's top-left corner. The property is not affected by [member rect_pivot_offset].", "getter": "get_position", "name": "rect_position", "setter": "set_position", "type": "Vector2"}, {"description": "The node's rotation around its pivot, in degrees. See [member rect_pivot_offset] to change the pivot's position.", "getter": "get_rotation_degrees", "name": "rect_rotation", "setter": "set_rotation_degrees", "type": "float"}, {"description": "The node's scale, relative to its [member rect_size]. Change this property to scale the node around its [member rect_pivot_offset].", "getter": "get_scale", "name": "rect_scale", "setter": "set_scale", "type": "Vector2"}, {"description": "The size of the node's bounding rectangle, in pixels. [Container] nodes update this property automatically.", "getter": "get_size", "name": "rect_size", "setter": "set_size", "type": "Vector2"}, {"description": "Tells the parent [Container] nodes how they should resize and place the node on the X axis. Use one of the [code]SIZE_*[/code] constants to change the flags. See the constants to learn what each does.", "getter": "get_h_size_flags", "name": "size_flags_horizontal", "setter": "set_h_size_flags", "type": "int"}, {"description": "If the node and at least one of its neighbours uses the [code]SIZE_EXPAND[/code] size flag, the parent [Container] will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbour a ratio of 1, this node will take two thirds of the available space.", "getter": "get_stretch_ratio", "name": "size_flags_stretch_ratio", "setter": "set_stretch_ratio", "type": "float"}, {"description": "Tells the parent [Container] nodes how they should resize and place the node on the Y axis. Use one of the [code]SIZE_*[/code] constants to change the flags. See the constants to learn what each does.", "getter": "get_v_size_flags", "name": "size_flags_vertical", "setter": "set_v_size_flags", "type": "int"}, {"description": "Changing this property replaces the current [Theme] resource this node and all its [code]Control[/code] children use.", "getter": "get_theme", "name": "theme", "setter": "set_theme", "type": "Theme"}], "methods": [{"arguments": [], "description": "", "name": "_clips_input", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the minimum size for this control. See [member rect_min_size].", "name": "_get_minimum_size", "qualifiers": "virtual", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "event", "type": "InputEvent"}], "description": "Use this method to process and accept inputs on UI elements. See [method accept_event].\n\t\t\t\tReplaces Godot 2's [code]_input_event[/code].", "name": "_gui_input", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "for_text", "type": "String"}], "description": "", "name": "_make_custom_tooltip", "qualifiers": "virtual", "return_": {"description": "", "type": "Object"}}, {"arguments": [], "description": "Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to [method Node._unhandled_input] or [method Node._unhandled_key_input].", "name": "accept_event", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Overrides the color in the [member theme] resource the node uses.", "name": "add_color_override", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "constant", "type": "int"}], "description": "Overrides an integer constant in the [member theme] resource the node uses. If the [code]constant[/code] is invalid, Godot clears the override. See [member Theme.INVALID_CONSTANT] for more information.", "name": "add_constant_override", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "font", "type": "Font"}], "description": "Overrides the [code]name[/code] font in the [member theme] resource the node uses. If [code]font[/code] is empty, Godot clears the override.", "name": "add_font_override", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "texture", "type": "Texture"}], "description": "Overrides the [code]name[/code] icon in the [member theme] resource the node uses. If [code]icon[/code] is empty, Godot clears the override.", "name": "add_icon_override", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "shader", "type": "Shader"}], "description": "Overrides the [code]name[/code] shader in the [member theme] resource the node uses. If [code]shader[/code] is empty, Godot clears the override.", "name": "add_shader_override", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "stylebox", "type": "StyleBox"}], "description": "Overrides the [code]name[/code] [Stylebox] in the [member theme] resource the node uses. If [code]stylebox[/code] is empty, Godot clears the override.", "name": "add_stylebox_override", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}, {"description": "", "index": "1", "name": "data", "type": "Variant"}], "description": "Godot calls this method to test if [code]data[/code] from a control's [method get_drag_data] can be dropped at [code]position[/code]. [code]position[/code] is local to this control.\n\t\t\t\tThis method should only be used to test the data. Process the data in [method drop_data].\n\t\t\t\t[codeblock]\n\t\t\t\textends Control\n\n\t\t\t\tfunc can_drop_data(position, data):\n\t\t\t\t    # check position if it is relevant to you\n\t\t\t\t    # otherwise just check data\n\t\t\t\t    return typeof(data) == TYPE_DICTIONARY and data.has('expected')\n\t\t\t\t[/codeblock]", "name": "can_drop_data", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}, {"description": "", "index": "1", "name": "data", "type": "Variant"}], "description": "Godot calls this method to pass you the [code]data[/code] from a control's [method get_drag_data] result. Godot first calls [method can_drop_data] to test if [code]data[/code] is allowed to drop at [code]position[/code] where [code]position[/code] is local to this control.\n\t\t\t\t[codeblock]\n\t\t\t\textends ColorRect\n\n\t\t\t\tfunc can_drop_data(position, data):\n\t\t\t\t    return typeof(data) == TYPE_DICTIONARY and data.has('color')\n\n\t\t\t\tfunc drop_data(position, data):\n\t\t\t\t    color = data['color']\n\t\t\t\t[/codeblock]", "name": "drop_data", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "data", "type": "Variant"}, {"description": "", "index": "1", "name": "preview", "type": "Control"}], "description": "Forces drag and bypasses [method get_drag_data] and [method set_drag_preview] by passing [code]data[/code] and [code]preview[/code]. Drag will start even if the mouse is neither over nor pressed on this control.\n\t\t\t\tThe methods [method can_drop_data] and [method drop_data] must be implemented on controls that want to receive drop data.", "name": "force_drag", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns [member margin_left] and [member margin_top]. See also [member rect_position].", "name": "get_begin", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type", "type": "String"}], "description": "", "name": "get_color", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [], "description": "", "name": "get_combined_minimum_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type", "type": "String"}], "description": "", "name": "get_constant", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"default": "Vector2( 0, 0 )", "description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Returns the mouse cursor shape the control displays on mouse hover. See [enum CursorShape].", "name": "get_cursor_shape", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Godot calls this method to get data that can be dragged and dropped onto controls that expect drop data. Return null if there is no data to drag. Controls that want to receive drop data should implement [method can_drop_data] and [method drop_data]. [code]position[/code] is local to this control. Drag may be forced with [method force_drag].\n\t\t\t\tA preview that will follow the mouse that should represent the data can be set with [method set_drag_preview]. A good time to set the preview is in this method.\n\t\t\t\t[codeblock]\n\t\t\t\textends Control\n\n\t\t\t\tfunc get_drag_data(position):\n\t\t\t\t\tvar mydata = make_data()\n\t\t\t\t\tset_drag_preview(make_preview(mydata))\n\t\t\t\t\treturn mydata\n\t\t\t\t[/codeblock]", "name": "get_drag_data", "qualifiers": "virtual", "return_": {"description": "", "type": "Object"}}, {"arguments": [], "description": "Returns [member margin_right] and [member margin_bottom].", "name": "get_end", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the control that has the keyboard focus or [code]null[/code] if none.", "name": "get_focus_owner", "qualifiers": "const", "return_": {"description": "", "type": "Control"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type", "type": "String"}], "description": "", "name": "get_font", "qualifiers": "const", "return_": {"description": "", "type": "Font"}}, {"arguments": [], "description": "Returns the position and size of the control relative to the top-left corner of the screen. See [member rect_position] and [member rect_size].", "name": "get_global_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type", "type": "String"}], "description": "", "name": "get_icon", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [], "description": "Returns the minimum size for this control. See [member rect_min_size].", "name": "get_minimum_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the width/height occupied in the parent control.", "name": "get_parent_area_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the parent control node.", "name": "get_parent_control", "qualifiers": "const", "return_": {"description": "", "type": "Control"}}, {"arguments": [], "description": "Returns the position and size of the control relative to the top-left corner of the parent Control. See [member rect_position] and [member rect_size].", "name": "get_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [], "description": "Returns the rotation (in radians).", "name": "get_rotation", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type", "type": "String"}], "description": "", "name": "get_stylebox", "qualifiers": "const", "return_": {"description": "", "type": "StyleBox"}}, {"arguments": [{"default": "Vector2( 0, 0 )", "description": "", "index": "0", "name": "at_position", "type": "Vector2"}], "description": "Returns the tooltip, which will appear when the cursor is resting over this control.", "name": "get_tooltip", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "grab_click_focus", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Steal the focus from another control and become the focused control (see [method set_focus_mode]).", "name": "grab_focus", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type", "type": "String"}], "description": "", "name": "has_color", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_color_override", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type", "type": "String"}], "description": "", "name": "has_constant", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_constant_override", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this is the current focused control. See [member focus_mode].", "name": "has_focus", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type", "type": "String"}], "description": "", "name": "has_font", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_font_override", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type", "type": "String"}], "description": "", "name": "has_icon", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_icon_override", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}], "description": "", "name": "has_point", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_shader_override", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type", "type": "String"}], "description": "", "name": "has_stylebox", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_stylebox_override", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "minimum_size_changed", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Give up the focus. No other control will be able to receive keyboard input.", "name": "release_focus", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "margin", "type": "int"}, {"description": "", "index": "1", "name": "anchor", "type": "float"}, {"default": "false", "description": "", "index": "2", "name": "keep_margin", "type": "bool"}, {"default": "true", "description": "", "index": "3", "name": "push_opposite_anchor", "type": "bool"}], "description": "", "name": "set_anchor", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "margin", "type": "int"}, {"description": "", "index": "1", "name": "anchor", "type": "float"}, {"description": "", "index": "2", "name": "offset", "type": "float"}, {"default": "false", "description": "", "index": "3", "name": "push_opposite_anchor", "type": "bool"}], "description": "", "name": "set_anchor_and_margin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "preset", "type": "int"}, {"default": "0", "description": "", "index": "1", "name": "resize_mode", "type": "int"}, {"default": "0", "description": "", "index": "2", "name": "margin", "type": "int"}], "description": "", "name": "set_anchors_and_margins_preset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "preset", "type": "int"}, {"default": "false", "description": "", "index": "1", "name": "keep_margin", "type": "bool"}], "description": "", "name": "set_anchors_preset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Sets [member margin_left] and [member margin_top] at the same time.", "name": "set_begin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "target", "type": "Control"}], "description": "Forwards the handling of this control's drag and drop to [code]target[/code] control.\n\t\t\t\tForwarding can be implemented in the target control similar to the methods [method get_drag_data], [method can_drop_data], and [method drop_data] but with two differences:\n\t\t\t\t1. The function name must be suffixed with [b]_fw[/b]\n\t\t\t\t2. The function must take an extra argument that is the control doing the forwarding\n\t\t\t\t[codeblock]\n\t\t\t\t# ThisControl.gd\n\t\t\t\textends Control\n\t\t\t\tfunc _ready():\n\t\t\t\t    set_drag_forwarding(target_control)\n\n\t\t\t\t# TargetControl.gd\n\t\t\t\textends Control\n\t\t\t\tfunc can_drop_data_fw(position, data, from_control):\n\t\t\t\t    return true\n\n\t\t\t\tfunc drop_data_fw(position, data, from_control):\n\t\t\t\t    my_handle_data(data)\n\n\t\t\t\tfunc get_drag_data_fw(position, from_control):\n\t\t\t\t    set_drag_preview(my_preview)\n\t\t\t\t    return my_data()\n\t\t\t\t[/codeblock]", "name": "set_drag_forwarding", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "control", "type": "Control"}], "description": "Shows the given control at the mouse pointer. A good time to call this method is in [method get_drag_data].", "name": "set_drag_preview", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Sets [member margin_right] and [member margin_bottom] at the same time.", "name": "set_end", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "preset", "type": "int"}, {"default": "0", "description": "", "index": "1", "name": "resize_mode", "type": "int"}, {"default": "0", "description": "", "index": "2", "name": "margin", "type": "int"}], "description": "", "name": "set_margins_preset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "radians", "type": "float"}], "description": "Sets the rotation (in radians).", "name": "set_rotation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "exclusive", "type": "bool"}], "description": "Displays a control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.", "name": "show_modal", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "to_position", "type": "Vector2"}], "description": "", "name": "warp_mouse", "return_": {"description": "", "type": "void"}}], "name": "Control", "signals": [{"arguments": [], "description": "Emitted when the node gains keyboard focus.", "name": "focus_entered"}, {"arguments": [], "description": "Emitted when the node loses keyboard focus.", "name": "focus_exited"}, {"arguments": [{"description": "", "index": "0", "name": "ev", "type": "InputEvent"}], "description": "Emitted when the node receives an [InputEvent].", "name": "gui_input"}, {"arguments": [], "description": "Emitted when the node's minimum size changes.", "name": "minimum_size_changed"}, {"arguments": [], "description": "Emitted when a modal [code]Control[/code] is closed. See [method show_modal].", "name": "modal_closed"}, {"arguments": [], "description": "Emitted when the mouse enters the control's [code]Rect[/code] area, provided its [member mouse_filter] lets the event reach it.", "name": "mouse_entered"}, {"arguments": [], "description": "Emitted when the mouse leaves the control's [code]Rect[/code] area, provided its [member mouse_filter] lets the event reach it.", "name": "mouse_exited"}, {"arguments": [], "description": "Emitted when the control changes size.", "name": "resized"}, {"arguments": [], "description": "Emitted when one of the size flags changes. See [member size_flags_horizontal] and [member size_flags_vertical].", "name": "size_flags_changed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/gui/index.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/2d/custom_drawing_in_2d.html"}]}}, "ConvexPolygonShape": {"brief_description": "Convex polygon shape for 3D physics.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Convex polygon shape resource, which can be added to a [PhysicsBody] or area.", "inherits": "Shape", "members": [{"description": "The list of 3D points forming the convex polygon shape.", "getter": "get_points", "name": "points", "setter": "set_points", "type": "PoolVector3Array"}], "methods": [], "name": "ConvexPolygonShape", "signals": [], "tutorials": {"links": []}}, "ConvexPolygonShape2D": {"brief_description": "Convex Polygon Shape for 2D physics.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Convex Polygon Shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check).\n\t\tThe main difference between a [code]ConvexPolygonShape2D[/code] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.", "inherits": "Shape2D", "members": [{"description": "The polygon's list of vertices. Can be in either clockwise or counterclockwise order.", "getter": "get_points", "name": "points", "setter": "set_points", "type": "PoolVector2Array"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "point_cloud", "type": "PoolVector2Array"}], "description": "Currently, this method does nothing.", "name": "set_point_cloud", "return_": {"description": "", "type": "void"}}], "name": "ConvexPolygonShape2D", "signals": [], "tutorials": {"links": []}}, "CubeMap": {"brief_description": "A CubeMap is a 6 sided 3D texture.", "category": "Core", "constants": [{"description": "Store the [code]CubeMap[/code] without any compression.", "enum": "Storage", "name": "STORAGE_RAW", "value": "0"}, {"description": "Store the [code]CubeMap[/code] with strong compression that reduces image quality.", "enum": "Storage", "name": "STORAGE_COMPRESS_LOSSY", "value": "1"}, {"description": "Store the [code]CubeMap[/code] with moderate compression that doesn't reduce image quality.", "enum": "Storage", "name": "STORAGE_COMPRESS_LOSSLESS", "value": "2"}, {"description": "Identifier for the left face of the [code]CubeMap[/code].", "enum": "Side", "name": "SIDE_LEFT", "value": "0"}, {"description": "Identifier for the right face of the [code]CubeMap[/code].", "enum": "Side", "name": "SIDE_RIGHT", "value": "1"}, {"description": "Identifier for the bottom face of the [code]CubeMap[/code].", "enum": "Side", "name": "SIDE_BOTTOM", "value": "2"}, {"description": "Identifier for the top face of the [code]CubeMap[/code].", "enum": "Side", "name": "SIDE_TOP", "value": "3"}, {"description": "Identifier for the front face of the [code]CubeMap[/code].", "enum": "Side", "name": "SIDE_FRONT", "value": "4"}, {"description": "Identifier for the back face of the [code]CubeMap[/code].", "enum": "Side", "name": "SIDE_BACK", "value": "5"}, {"description": "Generate mipmaps, to enable smooth zooming out of the texture.", "enum": "Flags", "name": "FLAG_MIPMAPS", "value": "1"}, {"description": "Repeat (instead of clamp to edge).", "enum": "Flags", "name": "FLAG_REPEAT", "value": "2"}, {"description": "Turn on magnifying filter, to enable smooth zooming in of the texture.", "enum": "Flags", "name": "FLAG_FILTER", "value": "4"}, {"description": "Default flags. Generate mipmaps, repeat, and filter are enabled.", "enum": "Flags", "name": "FLAGS_DEFAULT", "value": "7"}], "demos": {"links": []}, "description": "A 6-sided 3D texture typically used for faking reflections. It can be used to make an object look as if it's reflecting its surroundings. This usually delivers much better performance than other reflection methods.", "inherits": "Resource", "members": [{"description": "The render flags for the [code]CubeMap[/code]. See the [code]FLAG_*[/code] constants for details.", "getter": "get_flags", "name": "flags", "setter": "set_flags", "type": "int"}, {"description": "The lossy storage quality of the [code]CubeMap[/code] if the storage mode is set to STORAGE_COMPRESS_LOSSY.", "getter": "get_lossy_storage_quality", "name": "lossy_storage_quality", "setter": "set_lossy_storage_quality", "type": "float"}, {"description": "The [code]CubeMap[/code]'s storage mode. See [code]STORAGE_*[/code] constants.", "getter": "get_storage", "name": "storage_mode", "setter": "set_storage", "type": "int"}], "methods": [{"arguments": [], "description": "Returns the [code]CubeMap[/code]'s height.", "name": "get_height", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "side", "type": "int"}], "description": "Returns an [Image] for a side of the [code]CubeMap[/code] using one of the [code]SIDE_*[/code] constants or an integer 0-5.", "name": "get_side", "qualifiers": "const", "return_": {"description": "", "type": "Image"}}, {"arguments": [], "description": "Returns the [code]CubeMap[/code]'s width.", "name": "get_width", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "side", "type": "int"}, {"description": "", "index": "1", "name": "image", "type": "Image"}], "description": "Sets an [Image] for a side of the [code]CubeMap[/code] using one of the [code]SIDE_*[/code] constants or an integer 0-5.", "name": "set_side", "return_": {"description": "", "type": "void"}}], "name": "CubeMap", "signals": [], "tutorials": {"links": []}}, "CubeMesh": {"brief_description": "Generate an axis-aligned cuboid [PrimitiveMesh].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Generate an axis-aligned cuboid [PrimitiveMesh].", "inherits": "PrimitiveMesh", "members": [{"description": "Size of the cuboid mesh. Defaults to (2, 2, 2).", "getter": "get_size", "name": "size", "setter": "set_size", "type": "Vector3"}, {"description": "Number of extra edge loops inserted along the z-axis. Defaults to 0.", "getter": "get_subdivide_depth", "name": "subdivide_depth", "setter": "set_subdivide_depth", "type": "int"}, {"description": "Number of extra edge loops inserted along the y-axis. Defaults to 0.", "getter": "get_subdivide_height", "name": "subdivide_height", "setter": "set_subdivide_height", "type": "int"}, {"description": "Number of extra edge loops inserted along the x-axis. Defaults to 0.", "getter": "get_subdivide_width", "name": "subdivide_width", "setter": "set_subdivide_width", "type": "int"}], "methods": [], "name": "CubeMesh", "signals": [], "tutorials": {"links": []}}, "Curve": {"brief_description": "A mathematic curve.", "category": "Core", "constants": [{"description": "The tangent on this side of the point is user-defined.", "enum": "TangentMode", "name": "TANGENT_FREE", "value": "0"}, {"description": "The curve calculates the tangent on this side of the point as the slope halfway towards the adjacent point.", "enum": "TangentMode", "name": "TANGENT_LINEAR", "value": "1"}, {"description": "The total number of available tangent modes.", "enum": "TangentMode", "name": "TANGENT_MODE_COUNT", "value": "2"}], "demos": {"links": []}, "description": "A curve that can be saved and re-used for other objects. By default it ranges between [code]0[/code] and [code]1[/code] on the y-axis and positions points relative to the [code]0.5[/code] y-position.", "inherits": "Resource", "members": [{"description": "The number of points to include in the baked (i.e. cached) curve data.", "getter": "get_bake_resolution", "name": "bake_resolution", "setter": "set_bake_resolution", "type": "int"}, {"description": "The maximum value the curve can reach. Default value: [code]1[/code].", "getter": "get_max_value", "name": "max_value", "setter": "set_max_value", "type": "float"}, {"description": "The minimum value the curve can reach. Default value: [code]0[/code].", "getter": "get_min_value", "name": "min_value", "setter": "set_min_value", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}, {"default": "0", "description": "", "index": "1", "name": "left_tangent", "type": "float"}, {"default": "0", "description": "", "index": "2", "name": "right_tangent", "type": "float"}, {"default": "0", "description": "", "index": "3", "name": "left_mode", "type": "int"}, {"default": "0", "description": "", "index": "4", "name": "right_mode", "type": "int"}], "description": "Adds a point to the curve. For each side, if the [code]*_mode[/code] is [code]TANGENT_LINEAR[/code], the [code]*_tangent[/code] angle (in degrees) uses the slope of the curve halfway to the adjacent point. Allows custom assignments to the [code]*_tangent[/code] angle if [code]*_mode[/code] is set to [code]TANGENT_FREE[/code].", "name": "add_point", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Recomputes the baked cache of points for the curve.", "name": "bake", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes points that are closer than [code]CMP_EPSILON[/code] (0.00001) units to their neighbor on the curve.", "name": "clean_dupes", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes all points from the curve.", "name": "clear_points", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Returns the left [code]TangentMode[/code] for the point at [code]index[/code].", "name": "get_point_left_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Returns the left tangent angle (in degrees) for the point at [code]index[/code].", "name": "get_point_left_tangent", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Returns the curve coordinates for the point at [code]index[/code].", "name": "get_point_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Returns the right [code]TangentMode[/code] for the point at [code]index[/code].", "name": "get_point_right_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Returns the right tangent angle (in degrees) for the point at [code]index[/code].", "name": "get_point_right_tangent", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "float"}], "description": "Returns the y value for the point that would exist at x-position [code]offset[/code] along the curve.", "name": "interpolate", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "float"}], "description": "Returns the y value for the point that would exist at x-position [code]offset[/code] along the curve using the baked cache. Bakes the curve's points if not already baked.", "name": "interpolate_baked", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Removes the point at [code]index[/code] from the curve.", "name": "remove_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Sets the left [code]TangentMode[/code] for the point at [code]index[/code] to [code]mode[/code].", "name": "set_point_left_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "tangent", "type": "float"}], "description": "Sets the left tangent angle for the point at [code]index[/code] to [code]tangent[/code].", "name": "set_point_left_tangent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "offset", "type": "float"}], "description": "Sets the offset from [code]0.5[/code]", "name": "set_point_offset", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Sets the right [code]TangentMode[/code] for the point at [code]index[/code] to [code]mode[/code].", "name": "set_point_right_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "tangent", "type": "float"}], "description": "Sets the right tangent angle for the point at [code]index[/code] to [code]tangent[/code].", "name": "set_point_right_tangent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "y", "type": "float"}], "description": "Assigns the vertical position [code]y[/code] to the point at [code]index[/code].", "name": "set_point_value", "return_": {"description": "", "type": "void"}}], "name": "Curve", "signals": [{"arguments": [], "description": "Emitted when [member max_value] or [member min_value] is changed.", "name": "range_changed"}], "tutorials": {"links": []}}, "Curve2D": {"brief_description": "Describes a Bezier curve in 2D space.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This class describes a Bezier curve in 2D space. It is mainly used to give a shape to a [Path2D], but can be manually sampled for other purposes.\n\t\tIt keeps a cache of precalculated points along the curve, to speed further calculations up.", "inherits": "Resource", "members": [{"description": "The distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time the [method get_baked_points] or [method get_baked_length] function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.", "getter": "get_bake_interval", "name": "bake_interval", "setter": "set_bake_interval", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "1", "name": "in", "type": "Vector2"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "2", "name": "out", "type": "Vector2"}, {"default": "-1", "description": "", "index": "3", "name": "at_position", "type": "int"}], "description": "Adds a point to a curve, at \"position\", with control points \"in\" and \"out\".\n\t\t\t\tIf \"at_position\" is given, the point is inserted before the point number \"at_position\", moving that point (and every point after) after the inserted point. If \"at_position\" is not given, or is an illegal value (at_position <0 or at_position >= [method get_point_count]), the point will be appended at the end of the point list.", "name": "add_point", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes all points from the curve.", "name": "clear_points", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.", "name": "get_baked_length", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the cache of points as a [PoolVector2Array].", "name": "get_baked_points", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector2Array"}}, {"arguments": [{"description": "", "index": "0", "name": "to_point", "type": "Vector2"}], "description": "Returns the closest offset to [code]to_point[/code]. This offset is meant to be used in [method interpolate_baked].\n\t\t\t\t[code]to_point[/code] must be in this curve's local space.", "name": "get_closest_offset", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "to_point", "type": "Vector2"}], "description": "Returns the closest point (in curve's local space) to [code]to_point[/code].\n\t\t\t\t[code]to_point[/code] must be in this curve's local space.", "name": "get_closest_point", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the number of points describing the curve.", "name": "get_point_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).", "name": "get_point_in", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).", "name": "get_point_out", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the position of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).", "name": "get_point_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "t", "type": "float"}], "description": "Returns the position between the vertex \"idx\" and the vertex \"idx\"+1, where \"t\" controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of \"t\" outside the range (0.0 >= t  <=1) give strange, but predictable results.\n\t\t\t\tIf \"idx\" is out of bounds it is truncated to the first or last vertex, and \"t\" is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0).", "name": "interpolate", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "float"}, {"default": "false", "description": "", "index": "1", "name": "cubic", "type": "bool"}], "description": "Returns a point within the curve at position \"offset\", where \"offset\" is measured as a pixel distance along the curve.\n\t\t\t\tTo do that, it finds the two cached points where the \"offset\" lies between, then interpolates the values. This interpolation is cubic if \"cubic\" is set to true, or linear if set to false.\n\t\t\t\tCubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).", "name": "interpolate_baked", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "fofs", "type": "float"}], "description": "Returns the position at the vertex \"fofs\". It calls [method interpolate] using the integer part of fofs as \"idx\", and its fractional part as \"t\".", "name": "interpolatef", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Deletes the point \"idx\" from the curve. Sends an error to the console if \"idx\" is out of bounds.", "name": "remove_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}], "description": "Sets the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.", "name": "set_point_in", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}], "description": "Sets the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.", "name": "set_point_out", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}], "description": "Sets the position for the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.", "name": "set_point_position", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "5", "description": "", "index": "0", "name": "max_stages", "type": "int"}, {"default": "4", "description": "", "index": "1", "name": "tolerance_degrees", "type": "float"}], "description": "Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.\n\t\t\t\tThis approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.\n\t\t\t\t\"max_stages\" controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!\n\t\t\t\t\"tolerance_degrees\" controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.", "name": "tessellate", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector2Array"}}], "name": "Curve2D", "signals": [], "tutorials": {"links": []}}, "Curve3D": {"brief_description": "Describes a Bezier curve in 3D space.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This class describes a Bezier curve in 3D space. It is mainly used to give a shape to a [Path], but can be manually sampled for other purposes.\n\t\tIt keeps a cache of precalculated points along the curve, to speed further calculations up.", "inherits": "Resource", "members": [{"description": "The distance in meters between two adjacent cached points. Changing it forces the cache to be recomputed the next time the [method get_baked_points] or [method get_baked_length] function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.", "getter": "get_bake_interval", "name": "bake_interval", "setter": "set_bake_interval", "type": "float"}, {"description": "If [code]true[/code], the curve will bake up vectors used for orientation. See [OrientedPathFollow]. Changing it forces the cache to be recomputed.", "getter": "is_up_vector_enabled", "name": "up_vector_enabled", "setter": "set_up_vector_enabled", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector3"}, {"default": "Vector3( 0, 0, 0 )", "description": "", "index": "1", "name": "in", "type": "Vector3"}, {"default": "Vector3( 0, 0, 0 )", "description": "", "index": "2", "name": "out", "type": "Vector3"}, {"default": "-1", "description": "", "index": "3", "name": "at_position", "type": "int"}], "description": "Adds a point to a curve, at \"position\", with control points \"in\" and \"out\".\n\t\t\t\tIf \"at_position\" is given, the point is inserted before the point number \"at_position\", moving that point (and every point after) after the inserted point. If \"at_position\" is not given, or is an illegal value (at_position <0 or at_position >= [method get_point_count]), the point will be appended at the end of the point list.", "name": "add_point", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes all points from the curve.", "name": "clear_points", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.", "name": "get_baked_length", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the cache of points as a [PoolVector3Array].", "name": "get_baked_points", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [], "description": "Returns the cache of tilts as a [RealArray].", "name": "get_baked_tilts", "qualifiers": "const", "return_": {"description": "", "type": "PoolRealArray"}}, {"arguments": [], "description": "Returns the cache of up vectors as a [PoolVector3Array].\n\t\t\t\tIf [member up_vector_enabled] is [code]false[/code], the cache will be empty.", "name": "get_baked_up_vectors", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "to_point", "type": "Vector3"}], "description": "Returns the closest offset to [code]to_point[/code]. This offset is meant to be used in one of the interpolate_baked* methods.\n\t\t\t\t[code]to_point[/code] must be in this curve's local space.", "name": "get_closest_offset", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "to_point", "type": "Vector3"}], "description": "Returns the closest point (in curve's local space) to [code]to_point[/code].\n\t\t\t\t[code]to_point[/code] must be in this curve's local space.", "name": "get_closest_point", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns the number of points describing the curve.", "name": "get_point_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).", "name": "get_point_in", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).", "name": "get_point_out", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the position of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).", "name": "get_point_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the tilt angle in radians for the point \"idx\". If the index is out of bounds, the function sends an error to the console, and returns 0.", "name": "get_point_tilt", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "t", "type": "float"}], "description": "Returns the position between the vertex \"idx\" and the vertex \"idx\"+1, where \"t\" controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of \"t\" outside the range (0.0 >= t  <=1) give strange, but predictable results.\n\t\t\t\tIf \"idx\" is out of bounds it is truncated to the first or last vertex, and \"t\" is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0, 0).", "name": "interpolate", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "float"}, {"default": "false", "description": "", "index": "1", "name": "cubic", "type": "bool"}], "description": "Returns a point within the curve at position \"offset\", where \"offset\" is measured as a distance in 3D units along the curve.\n\t\t\t\tTo do that, it finds the two cached points where the \"offset\" lies between, then interpolates the values. This interpolation is cubic if \"cubic\" is set to true, or linear if set to false.\n\t\t\t\tCubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).", "name": "interpolate_baked", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "float"}, {"default": "false", "description": "", "index": "1", "name": "apply_tilt", "type": "bool"}], "description": "Returns an up vector within the curve at position [code]offset[/code], where [code]offset[/code] is measured as a distance in 3D units along the curve.\n\t\t\t\tTo do that, it finds the two cached up vectors where the [code]offset[/code] lies between, then interpolates the values. If [code]apply_tilt[/code] is [code]true[/code], an interpolated tilt is applied to the interpolated up vector.\n\t\t\t\tIf the curve has no up vectors, the function sends an error to the console, and returns (0, 1, 0).", "name": "interpolate_baked_up_vector", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "fofs", "type": "float"}], "description": "Returns the position at the vertex \"fofs\". It calls [method interpolate] using the integer part of fofs as \"idx\", and its fractional part as \"t\".", "name": "interpolatef", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Deletes the point \"idx\" from the curve. Sends an error to the console if \"idx\" is out of bounds.", "name": "remove_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "position", "type": "Vector3"}], "description": "Sets the position of the control point leading to the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.", "name": "set_point_in", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "position", "type": "Vector3"}], "description": "Sets the position of the control point leading out of the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.", "name": "set_point_out", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "position", "type": "Vector3"}], "description": "Sets the position for the vertex \"idx\". If the index is out of bounds, the function sends an error to the console.", "name": "set_point_position", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "tilt", "type": "float"}], "description": "Sets the tilt angle in radians for the point \"idx\". If the index is out of bounds, the function sends an error to the console.\n\t\t\t\tThe tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a [PathFollow] or [OrientedPathFollow], this tilt is an offset over the natural tilt the [PathFollow] or [OrientedPathFollow] calculates.", "name": "set_point_tilt", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "5", "description": "", "index": "0", "name": "max_stages", "type": "int"}, {"default": "4", "description": "", "index": "1", "name": "tolerance_degrees", "type": "float"}], "description": "Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.\n\t\t\t\tThis approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.\n\t\t\t\t\"max_stages\" controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!\n\t\t\t\t\"tolerance_degrees\" controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.", "name": "tessellate", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector3Array"}}], "name": "Curve3D", "signals": [], "tutorials": {"links": []}}, "CurveTexture": {"brief_description": "A texture that shows a curve.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Renders a given [Curve] provided to it. Simplifies the task of drawing curves and/or saving them as image files.", "inherits": "Texture", "members": [{"description": "The [code]curve[/code] rendered onto the texture.", "getter": "get_curve", "name": "curve", "setter": "set_curve", "type": "Curve"}, {"description": "The width of the texture.", "getter": "get_width", "name": "width", "setter": "set_width", "type": "int"}], "methods": [], "name": "CurveTexture", "signals": [], "tutorials": {"links": []}}, "CylinderMesh": {"brief_description": "Class representing a cylindrical [PrimitiveMesh].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Class representing a cylindrical [PrimitiveMesh].", "inherits": "PrimitiveMesh", "members": [{"description": "Bottom radius of the cylinder. Defaults to 1.0.", "getter": "get_bottom_radius", "name": "bottom_radius", "setter": "set_bottom_radius", "type": "float"}, {"description": "Full height of the cylinder. Defaults to 2.0.", "getter": "get_height", "name": "height", "setter": "set_height", "type": "float"}, {"description": "Number of radial segments on the cylinder. Defaults to 64.", "getter": "get_radial_segments", "name": "radial_segments", "setter": "set_radial_segments", "type": "int"}, {"description": "Number of edge rings along the height of the cylinder. Defaults to 4.", "getter": "get_rings", "name": "rings", "setter": "set_rings", "type": "int"}, {"description": "Top radius of the cylinder. Defaults to 1.0.", "getter": "get_top_radius", "name": "top_radius", "setter": "set_top_radius", "type": "float"}], "methods": [], "name": "CylinderMesh", "signals": [], "tutorials": {"links": []}}, "CylinderShape": {"brief_description": "Cylinder shape for collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Cylinder shape for collisions.", "inherits": "Shape", "members": [{"description": "The cylinder's height.", "getter": "get_height", "name": "height", "setter": "set_height", "type": "float"}, {"description": "The cylinder's radius.", "getter": "get_radius", "name": "radius", "setter": "set_radius", "type": "float"}], "methods": [], "name": "CylinderShape", "signals": [], "tutorials": {"links": []}}, "DampedSpringJoint2D": {"brief_description": "Damped spring constraint for 2D physics.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length.", "inherits": "Joint2D", "members": [{"description": "The spring joint's damping ratio. A value between [code]0[/code] and [code]1[/code]. When the two bodies move into different directions the system tries to align them to the spring axis again. A high [code]damping[/code] value forces the attached bodies to align faster. Default value: [code]1[/code]", "getter": "get_damping", "name": "damping", "setter": "set_damping", "type": "float"}, {"description": "The spring joint's maximum length. The two attached bodies cannot stretch it past this value. Default value: [code]50[/code]", "getter": "get_length", "name": "length", "setter": "set_length", "type": "float"}, {"description": "When the bodies attached to the spring joint move they stretch or squash it. The joint always tries to resize towards this length. Default value: [code]0[/code]", "getter": "get_rest_length", "name": "rest_length", "setter": "set_rest_length", "type": "float"}, {"description": "The higher the value, the less the bodies attached to the joint will deform it. The joint applies an opposing force to the bodies, the product of the stiffness multiplied by the size difference from its resting length. Default value: [code]20[/code]", "getter": "get_stiffness", "name": "stiffness", "setter": "set_stiffness", "type": "float"}], "methods": [], "name": "DampedSpringJoint2D", "signals": [], "tutorials": {"links": []}}, "Dictionary": {"brief_description": "Dictionary type.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "Dictionary type. Associative container which contains values referenced by unique keys. Dictionaries are always passed by reference.", "members": [], "methods": [{"arguments": [], "description": "Clear the dictionary, removing all key/value pairs.", "name": "clear", "return_": {}}, {"arguments": [{"default": "False", "description": "", "index": "0", "name": "deep", "type": "bool"}], "description": "Creates a copy of the dictionary, and returns it.", "name": "duplicate", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [], "description": "Return true if the dictionary is empty.", "name": "empty", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "key", "type": "Variant"}], "description": "Erase a dictionary key/value pair by key.", "name": "erase", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "key", "type": "Variant"}], "description": "Return true if the dictionary has a given key.", "name": "has", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "keys", "type": "Array"}], "description": "Return true if the dictionary has all of the keys in the given array.", "name": "has_all", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Return a hashed integer value representing the dictionary contents.", "name": "hash", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the list of keys in the [code]Dictionary[/code].", "name": "keys", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Return the size of the dictionary (in pairs).", "name": "size", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the list of values in the [code]Dictionary[/code].", "name": "values", "return_": {"description": "", "type": "Array"}}], "name": "Dictionary", "signals": [], "tutorials": {"links": []}}, "DirectionalLight": {"brief_description": "Directional light from a distance, as from the Sun.", "category": "Core", "constants": [{"description": "Renders the entire scene's shadow map from an orthogonal point of view. May result in blockier shadows on close objects.", "enum": "ShadowMode", "name": "SHADOW_ORTHOGONAL", "value": "0"}, {"description": "Splits the view frustum in 2 areas, each with its own shadow map.", "enum": "ShadowMode", "name": "SHADOW_PARALLEL_2_SPLITS", "value": "1"}, {"description": "Splits the view frustum in 4 areas, each with its own shadow map.", "enum": "ShadowMode", "name": "SHADOW_PARALLEL_4_SPLITS", "value": "2"}, {"description": "Keeps the shadow stable when the camera moves, at the cost of lower effective shadow resolution. Default value.", "enum": "ShadowDepthRange", "name": "SHADOW_DEPTH_RANGE_STABLE", "value": "0"}, {"description": "Tries to achieve maximum shadow resolution. May result in saw effect on shadow edges.", "enum": "ShadowDepthRange", "name": "SHADOW_DEPTH_RANGE_OPTIMIZED", "value": "1"}], "demos": {"links": []}, "description": "A directional light is a type of [Light] node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight transform (origin) is ignored. Only the basis is used do determine light direction.", "inherits": "Light", "members": [{"description": "Amount of extra bias for shadow splits that are far away. If self shadowing occurs only on the splits far away, this value can fix them.", "getter": "get_param", "name": "directional_shadow_bias_split_scale", "setter": "set_param", "type": "float"}, {"description": "If [code]true[/code] shadow detail is sacrificed in exchange for smoother transitions between splits. Default value:[code]false[/code].", "getter": "is_blend_splits_enabled", "name": "directional_shadow_blend_splits", "setter": "set_blend_splits", "type": "bool"}, {"description": "Optimizes shadow rendering for detail versus movement. See [enum ShadowDepthRange].", "getter": "get_shadow_depth_range", "name": "directional_shadow_depth_range", "setter": "set_shadow_depth_range", "type": "int"}, {"description": "The maximum distance for shadow splits.", "getter": "get_param", "name": "directional_shadow_max_distance", "setter": "set_param", "type": "float"}, {"description": "The light's shadow rendering algorithm. See [enum ShadowMode].", "getter": "get_shadow_mode", "name": "directional_shadow_mode", "setter": "set_shadow_mode", "type": "int"}, {"description": "Can be used to fix special cases of self shadowing when objects are perpendicular to the light.", "getter": "get_param", "name": "directional_shadow_normal_bias", "setter": "set_param", "type": "float"}, {"description": "The distance from camera to shadow split 1. Relative to [member directional_shadow_max_distance]. Only used in [enum directional_shadow_mode] SHADOW_PARALLEL_*_SPLITS.", "getter": "get_param", "name": "directional_shadow_split_1", "setter": "set_param", "type": "float"}, {"description": "The distance from shadow split 1 to split 2. Relative to [member directional_shadow_max_distance]. Only used in [enum directional_shadow_mode] SHADOW_PARALLEL_*_SPLITS.", "getter": "get_param", "name": "directional_shadow_split_2", "setter": "set_param", "type": "float"}, {"description": "The distance from shadow split 2 to split 3. Relative to [member directional_shadow_max_distance]. Only used in [enum directional_shadow_mode] SHADOW_PARALLEL_4_SPLITS.", "getter": "get_param", "name": "directional_shadow_split_3", "setter": "set_param", "type": "float"}], "methods": [], "name": "DirectionalLight", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/lights_and_shadows.html"}]}}, "Directory": {"brief_description": "Type used to handle the filesystem.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Directory type. It is used to manage directories and their content (not restricted to the project folder).\n\t\tHere is an example on how to iterate through the files of a directory:\n\t\t[codeblock]\n\t\tfunc dir_contents(path):\n\t\t    var dir = Directory.new()\n\t\t    if dir.open(path) == OK:\n\t\t        dir.list_dir_begin()\n\t\t        var file_name = dir.get_next()\n\t\t        while (file_name != \"\"):\n\t\t            if dir.current_is_dir():\n\t\t                print(\"Found directory: \" + file_name)\n\t\t            else:\n\t\t                print(\"Found file: \" + file_name)\n\t\t            file_name = dir.get_next()\n\t\t    else:\n\t\t        print(\"An error occurred when trying to access the path.\")\n\t\t[/codeblock]", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "todir", "type": "String"}], "description": "Change the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. [code]newdir[/code] or [code]../newdir[/code]), or an absolute path (e.g. [code]/tmp/newdir[/code] or [code]res://somedir/newdir[/code]).\n\t\t\t\tThe method returns one of the error code constants defined in [@GlobalScope] (OK or ERR_*).", "name": "change_dir", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "to", "type": "String"}], "description": "Copy the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.\n\t\t\t\tReturns one of the error code constants defined in [@GlobalScope] (OK, FAILED or ERR_*).", "name": "copy", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return whether the current item processed with the last [method get_next] call is a directory ([code].[/code] and [code]..[/code] are considered directories).", "name": "current_is_dir", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Return whether the target directory exists. The argument can be relative to the current directory, or an absolute path.", "name": "dir_exists", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Return whether the target file exists. The argument can be relative to the current directory, or an absolute path.", "name": "file_exists", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Return the absolute path to the currently opened directory (e.g. [code]res://folder[/code] or [code]C:\\tmp\\folder[/code]).", "name": "get_current_dir", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the currently opened directory's drive index. See [method get_drive] to convert returned index to the name of the drive.", "name": "get_current_drive", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "On Windows, return the name of the drive (partition) passed as an argument (e.g. [code]C:[/code]). On other platforms, or if the requested drive does not existed, the method returns an empty String.", "name": "get_drive", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "On Windows, return the number of drives (partitions) mounted on the current filesystem. On other platforms, the method returns 0.", "name": "get_drive_count", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the next element (file or directory) in the current directory (including [code].[/code] and [code]..[/code], unless [code]skip_navigational[/code] was given to [method list_dir_begin]).\n\t\t\t\tThe name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty String and closes the stream automatically (i.e. [method list_dir_end] would not be mandatory in such a case).", "name": "get_next", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "On Unix desktop systems, return the available space on the current directory's disk. On other platforms, this information is not available and the method returns 0 or -1.", "name": "get_space_left", "return_": {"description": "", "type": "int"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "skip_navigational", "type": "bool"}, {"default": "false", "description": "", "index": "1", "name": "skip_hidden", "type": "bool"}], "description": "Initialise the stream used to list all files and directories using the [method get_next] function, closing the current opened stream if needed. Once the stream has been processed, it should typically be closed with [method list_dir_end].\n\t\t\t\tIf you pass [code]skip_navigational[/code], then [code].[/code] and [code]..[/code] would be filtered out.\n\t\t\t\tIf you pass [code]skip_hidden[/code], then hidden files would be filtered out.", "name": "list_dir_begin", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Close the current stream opened with [method list_dir_begin] (whether it has been fully processed with [method get_next] or not does not matter).", "name": "list_dir_end", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Create a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see [method make_dir_recursive]).\n\t\t\t\tThe method returns one of the error code constants defined in [@GlobalScope] (OK, FAILED or ERR_*).", "name": "make_dir", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Create a target directory and all necessary intermediate directories in its path, by calling [method make_dir] recursively. The argument can be relative to the current directory, or an absolute path.\n\t\t\t\tReturn one of the error code constants defined in [@GlobalScope] (OK, FAILED or ERR_*).", "name": "make_dir_recursive", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Open an existing directory of the filesystem. The [i]path[/i] argument can be within the project tree ([code]res://folder[/code]), the user directory ([code]user://folder[/code]) or an absolute path of the user filesystem (e.g. [code]/tmp/folder[/code] or [code]C:\\tmp\\folder[/code]).\n\t\t\t\tThe method returns one of the error code constants defined in [@GlobalScope] (OK or ERR_*).", "name": "open", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Delete the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.\n\t\t\t\tReturn one of the error code constants defined in [@GlobalScope] (OK or FAILED).", "name": "remove", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "to", "type": "String"}], "description": "Rename (move) the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.\n\t\t\t\tReturn one of the error code constants defined in [@GlobalScope] (OK or FAILED).", "name": "rename", "return_": {"description": "", "type": "int"}}], "name": "Directory", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/getting_started/step_by_step/filesystem.html"}]}}, "DynamicFont": {"brief_description": "DynamicFont renders vector font files at runtime.", "category": "Core", "constants": [{"description": "Spacing at the top.", "enum": "SpacingType", "name": "SPACING_TOP", "value": "0"}, {"description": "Spacing at the bottom.", "enum": "SpacingType", "name": "SPACING_BOTTOM", "value": "1"}, {"description": "Character spacing.", "enum": "SpacingType", "name": "SPACING_CHAR", "value": "2"}, {"description": "Space spacing.", "enum": "SpacingType", "name": "SPACING_SPACE", "value": "3"}], "demos": {"links": []}, "description": "DynamicFont renders vector font files (such as TTF or OTF) dynamically at runtime instead of using a prerendered texture atlas like [BitmapFont]. This trades the faster loading time of [BitmapFont]s for the ability to change font parameters like size and spacing during runtime. [DynamicFontData] is used for referencing the font file paths.", "inherits": "Font", "members": [{"description": "Extra spacing at the bottom in pixels.", "getter": "get_spacing", "name": "extra_spacing_bottom", "setter": "set_spacing", "type": "int"}, {"description": "Extra character spacing in pixels.", "getter": "get_spacing", "name": "extra_spacing_char", "setter": "set_spacing", "type": "int"}, {"description": "Extra space spacing in pixels.", "getter": "get_spacing", "name": "extra_spacing_space", "setter": "set_spacing", "type": "int"}, {"description": "Extra spacing at the top in pixels.", "getter": "get_spacing", "name": "extra_spacing_top", "setter": "set_spacing", "type": "int"}, {"description": "The font data.", "getter": "get_font_data", "name": "font_data", "setter": "set_font_data", "type": "DynamicFontData"}, {"description": "", "getter": "get_outline_color", "name": "outline_color", "setter": "set_outline_color", "type": "Color"}, {"description": "", "getter": "get_outline_size", "name": "outline_size", "setter": "set_outline_size", "type": "int"}, {"description": "The font size.", "getter": "get_size", "name": "size", "setter": "set_size", "type": "int"}, {"description": "If [code]true[/code] filtering is used.", "getter": "get_use_filter", "name": "use_filter", "setter": "set_use_filter", "type": "bool"}, {"description": "If [code]true[/code] mipmapping is used.", "getter": "get_use_mipmaps", "name": "use_mipmaps", "setter": "set_use_mipmaps", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "data", "type": "DynamicFontData"}], "description": "Adds a fallback font.", "name": "add_fallback", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the fallback font at index [code]idx[/code].", "name": "get_fallback", "qualifiers": "const", "return_": {"description": "", "type": "DynamicFontData"}}, {"arguments": [], "description": "Returns the number of fallback fonts.", "name": "get_fallback_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Removes the fallback font at index [code]idx[/code].", "name": "remove_fallback", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "data", "type": "DynamicFontData"}], "description": "Sets the fallback font at index [code]idx[/code].", "name": "set_fallback", "return_": {"description": "", "type": "void"}}], "name": "DynamicFont", "signals": [], "tutorials": {"links": []}}, "DynamicFontData": {"brief_description": "Used with [DynamicFont] to describe the location of a font file.", "category": "Core", "constants": [{"description": "Disable font hinting (smoother but less crisp).", "enum": "Hinting", "name": "HINTING_NONE", "value": "0"}, {"description": "Use the light font hinting mode.", "enum": "Hinting", "name": "HINTING_LIGHT", "value": "1"}, {"description": "Use the default font hinting mode (crisper but less smooth).", "enum": "Hinting", "name": "HINTING_NORMAL", "value": "2"}], "demos": {"links": []}, "description": "Used with [DynamicFont] to describe the location of a vector font file for dynamic rendering at runtime.", "inherits": "Resource", "members": [{"description": "The path to the vector font file.", "getter": "get_font_path", "name": "font_path", "setter": "set_font_path", "type": "String"}, {"description": "The font hinting mode used by FreeType.", "getter": "get_hinting", "name": "hinting", "setter": "set_hinting", "type": "int"}], "methods": [], "name": "DynamicFontData", "signals": [], "tutorials": {"links": []}}, "EditorExportPlugin": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "features", "type": "PoolStringArray"}, {"description": "", "index": "1", "name": "is_debug", "type": "bool"}, {"description": "", "index": "2", "name": "path", "type": "String"}, {"description": "", "index": "3", "name": "flags", "type": "int"}], "description": "", "name": "_export_begin", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}, {"description": "", "index": "2", "name": "features", "type": "PoolStringArray"}], "description": "", "name": "_export_file", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "file", "type": "PoolByteArray"}, {"description": "", "index": "2", "name": "remap", "type": "bool"}], "description": "", "name": "add_file", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "", "name": "add_ios_bundle_file", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "code", "type": "String"}], "description": "", "name": "add_ios_cpp_code", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "", "name": "add_ios_framework", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "flags", "type": "String"}], "description": "", "name": "add_ios_linker_flags", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "plist_content", "type": "String"}], "description": "", "name": "add_ios_plist_content", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "tags", "type": "PoolStringArray"}], "description": "", "name": "add_shared_object", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "skip", "return_": {"description": "", "type": "void"}}], "name": "EditorExportPlugin", "signals": [], "tutorials": {"links": []}}, "EditorFileDialog": {"brief_description": "", "category": "Core", "constants": [{"description": "The [code]EditorFileDialog[/code] can select only one file. Accepting the window will open the file.", "enum": "Mode", "name": "MODE_OPEN_FILE", "value": "0"}, {"description": "The [code]EditorFileDialog[/code] can select multiple files. Accepting the window will open all files.", "enum": "Mode", "name": "MODE_OPEN_FILES", "value": "1"}, {"description": "The [code]EditorFileDialog[/code] can select only one directory. Accepting the window will open the directory.", "enum": "Mode", "name": "MODE_OPEN_DIR", "value": "2"}, {"description": "The [code]EditorFileDialog[/code] can select a file or directory. Accepting the window will open it.", "enum": "Mode", "name": "MODE_OPEN_ANY", "value": "3"}, {"description": "The [code]EditorFileDialog[/code] can select only one file. Accepting the window will save the file.", "enum": "Mode", "name": "MODE_SAVE_FILE", "value": "4"}, {"description": "The [code]EditorFileDialog[/code] can only view [code]res://[/code] directory contents.", "enum": "Access", "name": "ACCESS_RESOURCES", "value": "0"}, {"description": "The [code]EditorFileDialog[/code] can only view [code]user://[/code] directory contents.", "enum": "Access", "name": "ACCESS_USERDATA", "value": "1"}, {"description": "The [code]EditorFileDialog[/code] can view the entire local file system.", "enum": "Access", "name": "ACCESS_FILESYSTEM", "value": "2"}, {"description": "The [code]EditorFileDialog[/code] displays resources as thumbnails.", "enum": "DisplayMode", "name": "DISPLAY_THUMBNAILS", "value": "0"}, {"description": "The [code]EditorFileDialog[/code] displays resources as a list of filenames.", "enum": "DisplayMode", "name": "DISPLAY_LIST", "value": "1"}], "demos": {"links": []}, "description": "", "inherits": "ConfirmationDialog", "members": [{"description": "The location from which the user may select a file, including [code]res://[/code], [code]user://[/code], and the local file system.", "getter": "get_access", "name": "access", "setter": "set_access", "type": "int"}, {"description": "The currently occupied directory.", "getter": "get_current_dir", "name": "current_dir", "setter": "set_current_dir", "type": "String"}, {"description": "The currently selected file.", "getter": "get_current_file", "name": "current_file", "setter": "set_current_file", "type": "String"}, {"description": "The file system path in the address bar.", "getter": "get_current_path", "name": "current_path", "setter": "set_current_path", "type": "String"}, {"description": "If [code]true[/code] the [code]EditorFileDialog[/code] will not warn the user before overwriting files.", "getter": "is_overwrite_warning_disabled", "name": "disable_overwrite_warning", "setter": "set_disable_overwrite_warning", "type": "bool"}, {"description": "The view format in which the [code]EditorFileDialog[/code] displays resources to the user.", "getter": "get_display_mode", "name": "display_mode", "setter": "set_display_mode", "type": "int"}, {"description": "The purpose of the [code]EditorFileDialog[/code]. Changes allowed behaviors.", "getter": "get_mode", "name": "mode", "setter": "set_mode", "type": "int"}, {"description": "If [code]true[/code] hidden files and directories will be visible in the [code]EditorFileDialog[/code].", "getter": "is_showing_hidden_files", "name": "show_hidden_files", "setter": "set_show_hidden_files", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "filter", "type": "String"}], "description": "Adds a comma-delimited file extension filter option to the [code]EditorFileDialog[/code] with an optional semi-colon-delimited label.\n\t\t\t\tExample: \"*.tscn, *.scn; Scenes\", results in filter text \"Scenes (*.tscn, *.scn)\".", "name": "add_filter", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes all filters except for \"All Files (*)\".", "name": "clear_filters", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the [code]VBoxContainer[/code] used to display the file system.", "name": "get_vbox", "return_": {"description": "", "type": "VBoxContainer"}}, {"arguments": [], "description": "Notify the [code]EditorFileDialog[/code] that its view of the data is no longer accurate. Updates the view contents on next view update.", "name": "invalidate", "return_": {"description": "", "type": "void"}}], "name": "EditorFileDialog", "signals": [{"arguments": [{"description": "", "index": "0", "name": "dir", "type": "String"}], "description": "Emitted when a directory is selected.", "name": "dir_selected"}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Emitted when a file is selected.", "name": "file_selected"}, {"arguments": [{"description": "", "index": "0", "name": "paths", "type": "PoolStringArray"}], "description": "Emitted when multiple files are selected.", "name": "files_selected"}], "tutorials": {"links": []}}, "EditorFileSystem": {"brief_description": "Resource filesystem, as the editor sees it.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This object holds information of all resources in the filesystem, their types, etc.", "inherits": "Node", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Get the type of the file, given the full path.", "name": "get_file_type", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the root directory object.", "name": "get_filesystem", "return_": {"description": "", "type": "EditorFileSystemDirectory"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Returns a view into the filesystem at [code]path[/code].", "name": "get_filesystem_path", "return_": {"description": "", "type": "EditorFileSystemDirectory"}}, {"arguments": [], "description": "Return the scan progress for 0 to 1 if the FS is being scanned.", "name": "get_scanning_progress", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Return true of the filesystem is being scanned.", "name": "is_scanning", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Scan the filesystem for changes.", "name": "scan", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Check if the source of any imported resource changed.", "name": "scan_sources", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Update a file information. Call this if an external program (not Godot) modified the file.", "name": "update_file", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "update_script_classes", "return_": {"description": "", "type": "void"}}], "name": "EditorFileSystem", "signals": [{"arguments": [], "description": "Emitted if the filesystem changed.", "name": "filesystem_changed"}, {"arguments": [{"description": "", "index": "0", "name": "resources", "type": "PoolStringArray"}], "description": "Remitted if a resource is reimported.", "name": "resources_reimported"}, {"arguments": [], "description": "", "name": "script_classes_updated"}, {"arguments": [{"description": "", "index": "0", "name": "exist", "type": "bool"}], "description": "Emitted if the source of any imported file changed.", "name": "sources_changed"}], "tutorials": {"links": []}}, "EditorFileSystemDirectory": {"brief_description": "A diretory for the resource filesystem.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A more generalized, low-level variation of the directory concept.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Returns the index of the directory with name [code]name[/code] or [code]-1[/code] if not found.", "name": "find_dir_index", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Returns the index of the file with name [code]name[/code] or [code]-1[/code] if not found.", "name": "find_file_index", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the name of the file at index [code]idx[/code].", "name": "get_file", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the number of files in this directory.", "name": "get_file_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns [code]true[/code] if the file at index [code]idx[/code] imported properly.", "name": "get_file_import_is_valid", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the path to the file at index [code]idx[/code].", "name": "get_file_path", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_file_script_class_extends", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_file_script_class_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the file extension of the file at index [code]idx[/code].", "name": "get_file_type", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the name of this directory.", "name": "get_name", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the parent directory for this directory or null if called on a directory at [code]res://[/code] or [code]user://[/code].", "name": "get_parent", "return_": {"description": "", "type": "EditorFileSystemDirectory"}}, {"arguments": [], "description": "Returns the path to this directory.", "name": "get_path", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the subdirectory at index [code]idx[/code].", "name": "get_subdir", "return_": {"description": "", "type": "EditorFileSystemDirectory"}}, {"arguments": [], "description": "Returns the number of subdirectories in this directory.", "name": "get_subdir_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}], "name": "EditorFileSystemDirectory", "signals": [], "tutorials": {"links": []}}, "EditorImportPlugin": {"brief_description": "Registers a custom resource importer in the editor. Use the class to parse any file and import it as a new resource type.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your [EditorPlugin] with [method EditorPlugin.add_import_plugin].\n\t\tEditorImportPlugins work by associating with specific file extensions and a resource type. See [method get_recognized_extension] and [method get_resource_type]). They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the [code].import[/code] directory.\n\t\tBelow is an example EditorImportPlugin that imports a [Mesh] from a file with the extension \".special\" or \".spec\":\n\t\t[codeblock]\n\t\ttool\n\t\textends EditorImportPlugin\n\n\t\tfunc get_importer_name():\n\t\t    return \"my.special.plugin\"\n\n\t\tfunc get_visible_name():\n\t\t    return \"Special Mesh Importer\"\n\n\t\tfunc get_recognized_extensions():\n\t\t    return [\"special\", \"spec\"]\n\n\t\tfunc get_save_extension():\n\t\t    return \"mesh\"\n\n\t\tfunc get_resource_type():\n\t\t    return \"Mesh\"\n\n\t\tfunc get_preset_count():\n\t\t    return 1\n\n\t\tfunc get_preset_name(i):\n\t\t    return \"Default\"\n\n\t\tfunc get_import_options(i):\n\t\t    return [{\"name\": \"my_option\", \"default_value\": false}]\n\n\t\tfunc import(source_file, save_path, options, r_platform_variants, r_gen_files):\n\t\t    var file = File.new()\n\t\t    if file.open(source_file, File.READ) != OK:\n\t\t        return FAILED\n\n\t\t    var mesh = Mesh.new()\n\n\t\t    var filename = save_path + \".\" + get_save_extension()\n\t\t    ResourceSaver.save(filename, mesh)\n\t\t    return OK\n\t\t[/codeblock]", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "preset", "type": "int"}], "description": "Get the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: \"name\", \"default_value\", \"property_hint\" (optional), \"hint_string\" (optional), \"usage\" (optional).", "name": "get_import_options", "qualifiers": "virtual", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Get the order of this importer to be run when importing resources. Higher values will be called later. Use this to ensure the importer runs after the dependencies are already imported.", "name": "get_import_order", "qualifiers": "virtual", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Get the unique name of the importer.", "name": "get_importer_name", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "option", "type": "String"}, {"description": "", "index": "1", "name": "options", "type": "Dictionary"}], "description": "", "name": "get_option_visibility", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Get the number of initial presets defined by the plugin. Use [method get_import_options] to get the default options for the preset and [method get_preset_name] to get the name of the preset.", "name": "get_preset_count", "qualifiers": "virtual", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "preset", "type": "int"}], "description": "Get the name of the options preset at this index.", "name": "get_preset_name", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the priority of this plugin for the recognized extension. Higher priority plugins will be preferred. Default value is 1.0.", "name": "get_priority", "qualifiers": "virtual", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Get the list of file extensions to associate with this loader (case insensitive). e.g. [\"obj\"].", "name": "get_recognized_extensions", "qualifiers": "virtual", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Get the Godot resource type associated with this loader. e.g. \"Mesh\" or \"Animation\".", "name": "get_resource_type", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the extension used to save this resource in the [code].import[/code] directory.", "name": "get_save_extension", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the name to display in the import window.", "name": "get_visible_name", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "source_file", "type": "String"}, {"description": "", "index": "1", "name": "save_path", "type": "String"}, {"description": "", "index": "2", "name": "options", "type": "Dictionary"}, {"description": "", "index": "3", "name": "r_platform_variants", "type": "Array"}, {"description": "", "index": "4", "name": "r_gen_files", "type": "Array"}], "description": "", "name": "import", "qualifiers": "virtual", "return_": {"description": "", "type": "int"}}], "name": "EditorImportPlugin", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/plugins/editor/import_plugins.html"}]}}, "EditorInspector": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "ScrollContainer", "members": [], "methods": [{"arguments": [], "description": "", "name": "refresh", "return_": {"description": "", "type": "void"}}], "name": "EditorInspector", "signals": [{"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "object_id_selected"}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}], "description": "", "name": "property_edited"}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}], "description": "", "name": "property_keyed"}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}], "description": "", "name": "property_selected"}, {"arguments": [{"description": "", "index": "0", "name": "res", "type": "Object"}, {"description": "", "index": "1", "name": "prop", "type": "String"}], "description": "", "name": "resource_selected"}, {"arguments": [], "description": "", "name": "restart_requested"}], "tutorials": {"links": []}}, "EditorInspectorPlugin": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "control", "type": "Control"}], "description": "", "name": "add_custom_control", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}, {"description": "", "index": "1", "name": "editor", "type": "Control"}], "description": "", "name": "add_property_editor", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "label", "type": "String"}, {"description": "", "index": "1", "name": "properties", "type": "PoolStringArray"}, {"description": "", "index": "2", "name": "editor", "type": "Control"}], "description": "", "name": "add_property_editor_for_multiple_properties", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}], "description": "", "name": "can_handle", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}], "description": "", "name": "parse_begin", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "category", "type": "String"}], "description": "", "name": "parse_category", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "parse_end", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "type", "type": "int"}, {"description": "", "index": "2", "name": "path", "type": "String"}, {"description": "", "index": "3", "name": "hint", "type": "int"}, {"description": "", "index": "4", "name": "hint_text", "type": "String"}, {"description": "", "index": "5", "name": "usage", "type": "int"}], "description": "", "name": "parse_property", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}], "name": "EditorInspectorPlugin", "signals": [], "tutorials": {"links": []}}, "EditorInterface": {"brief_description": "Editor interface and main components.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Editor interface. Allows saving and (re-)loading scenes, rendering mesh previews, inspecting and editing resources and objects and provides access to [EditorSettings], [EditorFileSystem], [EditorResourcePreview], [ScriptEditor], the editor viewport, as well as information about scenes. Also see [EditorPlugin] and [EditorScript].", "inherits": "Node", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "resource", "type": "Resource"}], "description": "Edits the given [Resource].", "name": "edit_resource", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the base [Control].", "name": "get_base_control", "return_": {"description": "", "type": "Control"}}, {"arguments": [], "description": "Returns the edited scene's root [Node].", "name": "get_edited_scene_root", "return_": {"description": "", "type": "Node"}}, {"arguments": [], "description": "Returns the [EditorSettings].", "name": "get_editor_settings", "return_": {"description": "", "type": "EditorSettings"}}, {"arguments": [], "description": "Returns the editor [Viewport].", "name": "get_editor_viewport", "return_": {"description": "", "type": "Control"}}, {"arguments": [], "description": "Returns an [Array] of the currently opened scenes.", "name": "get_open_scenes", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns the [EditorFileSystem].", "name": "get_resource_filesystem", "return_": {"description": "", "type": "EditorFileSystem"}}, {"arguments": [], "description": "Returns the [EditorResourcePreview]\\ er.", "name": "get_resource_previewer", "return_": {"description": "", "type": "EditorResourcePreview"}}, {"arguments": [], "description": "Returns the [ScriptEditor].", "name": "get_script_editor", "return_": {"description": "", "type": "ScriptEditor"}}, {"arguments": [], "description": "", "name": "get_selected_path", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the [EditorSelection].", "name": "get_selection", "return_": {"description": "", "type": "EditorSelection"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"default": "\"\"", "description": "", "index": "1", "name": "for_property", "type": "String"}], "description": "Shows the given property on the given [code]object[/code] in the Editor's Inspector dock.", "name": "inspect_object", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "plugin", "type": "String"}], "description": "Returns the enabled status of a plugin. The plugin name is the same as its directory name.", "name": "is_plugin_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "meshes", "type": "Array"}, {"description": "", "index": "1", "name": "preview_size", "type": "int"}], "description": "Returns mesh previews rendered at the given size as an [Array] of [Texture]s.", "name": "make_mesh_previews", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "scene_filepath", "type": "String"}], "description": "Opens the scene at the given path.", "name": "open_scene_from_path", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "scene_filepath", "type": "String"}], "description": "Reloads the scene at the given path.", "name": "reload_scene_from_path", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Saves the scene. Returns either OK or ERR_CANT_CREATE. See [@GlobalScope] constants.", "name": "save_scene", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"default": "true", "description": "", "index": "1", "name": "with_preview", "type": "bool"}], "description": "Saves the scene as a file at [code]path[/code].", "name": "save_scene_as", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "p_file", "type": "String"}], "description": "", "name": "select_file", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "plugin", "type": "String"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "Sets the enabled status of a plugin. The plugin name is the same as its directory name.", "name": "set_plugin_enabled", "return_": {"description": "", "type": "void"}}], "name": "EditorInterface", "signals": [], "tutorials": {"links": []}}, "EditorPlugin": {"brief_description": "Used by the editor to extend its functionality.", "category": "Core", "constants": [{"description": "", "enum": "CustomControlContainer", "name": "CONTAINER_TOOLBAR", "value": "0"}, {"description": "", "enum": "CustomControlContainer", "name": "CONTAINER_SPATIAL_EDITOR_MENU", "value": "1"}, {"description": "", "enum": "CustomControlContainer", "name": "CONTAINER_SPATIAL_EDITOR_SIDE_LEFT", "value": "2"}, {"description": "", "enum": "CustomControlContainer", "name": "CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT", "value": "3"}, {"description": "", "enum": "CustomControlContainer", "name": "CONTAINER_SPATIAL_EDITOR_BOTTOM", "value": "4"}, {"description": "", "enum": "CustomControlContainer", "name": "CONTAINER_CANVAS_EDITOR_MENU", "value": "5"}, {"description": "", "enum": "CustomControlContainer", "name": "CONTAINER_CANVAS_EDITOR_SIDE_LEFT", "value": "6"}, {"description": "", "enum": "CustomControlContainer", "name": "CONTAINER_CANVAS_EDITOR_SIDE_RIGHT", "value": "7"}, {"description": "", "enum": "CustomControlContainer", "name": "CONTAINER_CANVAS_EDITOR_BOTTOM", "value": "8"}, {"description": "", "enum": "CustomControlContainer", "name": "CONTAINER_PROPERTY_EDITOR_BOTTOM", "value": "9"}, {"description": "", "enum": "DockSlot", "name": "DOCK_SLOT_LEFT_UL", "value": "0"}, {"description": "", "enum": "DockSlot", "name": "DOCK_SLOT_LEFT_BL", "value": "1"}, {"description": "", "enum": "DockSlot", "name": "DOCK_SLOT_LEFT_UR", "value": "2"}, {"description": "", "enum": "DockSlot", "name": "DOCK_SLOT_LEFT_BR", "value": "3"}, {"description": "", "enum": "DockSlot", "name": "DOCK_SLOT_RIGHT_UL", "value": "4"}, {"description": "", "enum": "DockSlot", "name": "DOCK_SLOT_RIGHT_BL", "value": "5"}, {"description": "", "enum": "DockSlot", "name": "DOCK_SLOT_RIGHT_UR", "value": "6"}, {"description": "", "enum": "DockSlot", "name": "DOCK_SLOT_RIGHT_BR", "value": "7"}, {"description": "", "enum": "DockSlot", "name": "DOCK_SLOT_MAX", "value": "8"}], "demos": {"links": []}, "description": "Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins.", "inherits": "Node", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "path", "type": "String"}], "description": "Add a script at [code]path[/code] to the Autoload list as [code]name[/code].", "name": "add_autoload_singleton", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "control", "type": "Control"}, {"description": "", "index": "1", "name": "title", "type": "String"}], "description": "Add a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. If your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_bottom_panel].", "name": "add_control_to_bottom_panel", "return_": {"description": "", "type": "ToolButton"}}, {"arguments": [{"description": "", "index": "0", "name": "container", "type": "int"}, {"description": "", "index": "1", "name": "control", "type": "Control"}], "description": "Add a custom control to a container (see CONTAINER_* enum). There are many locations where custom controls can be added in the editor UI.\n\t\t\t\tPlease remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).\n\t\t\t\tIf your plugin is being removed, also make sure to remove your custom controls too.", "name": "add_control_to_container", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "slot", "type": "int"}, {"description": "", "index": "1", "name": "control", "type": "Control"}], "description": "Add the control to a specific dock slot (see DOCK_* enum for options).\n\t\t\t\tIf the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.\n\t\t\t\tIf your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_docks].", "name": "add_control_to_dock", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}, {"description": "", "index": "1", "name": "base", "type": "String"}, {"description": "", "index": "2", "name": "script", "type": "Script"}, {"description": "", "index": "3", "name": "icon", "type": "Texture"}], "description": "Add a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.\n\t\t\t\tWhen given node or resource is selected, the base type will be instanced (ie, \"Spatial\", \"Control\", \"Resource\"), then the script will be loaded and set to this object.\n\t\t\t\tYou can use the [method EditorPlugin.handles] to check if your custom object is being edited by checking the script or using 'is' keyword.\n\t\t\t\tDuring run-time, this will be a simple object with a script so this function does not need to be called then.", "name": "add_custom_type", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "plugin", "type": "EditorExportPlugin"}], "description": "", "name": "add_export_plugin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "importer", "type": "EditorImportPlugin"}], "description": "", "name": "add_import_plugin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "plugin", "type": "EditorInspectorPlugin"}], "description": "", "name": "add_inspector_plugin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "scene_importer", "type": "EditorSceneImporter"}], "description": "", "name": "add_scene_import_plugin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "handler", "type": "Object"}, {"description": "", "index": "2", "name": "callback", "type": "String"}, {"default": "null", "description": "", "index": "3", "name": "ud", "type": "Variant"}], "description": "Adds a custom menu to 'Project > Tools' as [code]name[/code] that calls [code]callback[/code] on an instance of [code]handler[/code] with a parameter [code]ud[/code] when user activates it.", "name": "add_tool_menu_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "submenu", "type": "Object"}], "description": "", "name": "add_tool_submenu_item", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.\n\t\t\t\tThis is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.", "name": "apply_changes", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "build", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.", "name": "clear", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}], "description": "This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.", "name": "edit", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "event", "type": "InputEvent"}], "description": "", "name": "forward_canvas_gui_input", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "overlay", "type": "Control"}], "description": "", "name": "forward_draw_over_viewport", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "overlay", "type": "Control"}], "description": "", "name": "forward_force_draw_over_viewport", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "camera", "type": "Camera"}, {"description": "", "index": "1", "name": "event", "type": "InputEvent"}], "description": "Implement this function if you are interested in 3D view screen input events. It will be called only if currently selected node is handled by your plugin.\n\t\t\t\tIf you would like to always gets those input events then additionally use [method set_input_forwarding_always_enabled].", "name": "forward_spatial_gui_input", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "This is for editors that edit script based objects. You can return a list of breakpoints in the format (script:line), for example: res://path_to_script.gd:25", "name": "get_breakpoints", "qualifiers": "virtual", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [], "description": "", "name": "get_editor_interface", "return_": {"description": "", "type": "EditorInterface"}}, {"arguments": [], "description": "", "name": "get_plugin_icon", "qualifiers": "virtual", "return_": {"description": "", "type": "Object"}}, {"arguments": [], "description": "", "name": "get_plugin_name", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Gets the Editor's dialogue used for making scripts. Note that users can configure it before use.", "name": "get_script_create_dialog", "return_": {"description": "", "type": "ScriptCreateDialog"}}, {"arguments": [], "description": "Get the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns).", "name": "get_state", "qualifiers": "virtual", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [], "description": "Get the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.", "name": "get_undo_redo", "return_": {"description": "", "type": "UndoRedo"}}, {"arguments": [{"description": "", "index": "0", "name": "layout", "type": "ConfigFile"}], "description": "Get the GUI layout of the plugin. This is used to save the project's editor layout when the [method EditorPlugin.queue_save_layout] is called or the editor layout was changed(For example changing the position of a dock).", "name": "get_window_layout", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}], "description": "Implement this function if your plugin edits a specific type of object (Resource or Node). If you return true, then you will get the functions [method EditorPlugin.edit] and [method EditorPlugin.make_visible] called when the editor requests them.", "name": "handles", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Return true if this is a main screen editor plugin (it goes in the main screen selector together with 2D, 3D, Script).", "name": "has_main_screen", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "hide_bottom_panel", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "Control"}], "description": "", "name": "make_bottom_panel_item_visible", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "visible", "type": "bool"}], "description": "This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.\n\t\t\t\tRemember that you have to manage the visibility of all your editor controls manually.", "name": "make_visible", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Queue save the project's editor layout.", "name": "queue_save_layout", "qualifiers": "const", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Remove an Autoload [code]name[/code] from the list.", "name": "remove_autoload_singleton", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "control", "type": "Control"}], "description": "Remove the control from the bottom panel. Don't forget to call this if you added one, so the editor can remove it cleanly.", "name": "remove_control_from_bottom_panel", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "container", "type": "int"}, {"description": "", "index": "1", "name": "control", "type": "Control"}], "description": "Remove the control from the specified container. Use it when cleaning up after adding a control with [method add_control_to_container]. Note that you can simply free the control if you won't use it anymore.", "name": "remove_control_from_container", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "control", "type": "Control"}], "description": "Remove the control from the dock. Don't forget to call this if you added one, so the editor can save the layout and remove it cleanly.", "name": "remove_control_from_docks", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Remove a custom type added by [method EditorPlugin.add_custom_type]", "name": "remove_custom_type", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "plugin", "type": "EditorExportPlugin"}], "description": "", "name": "remove_export_plugin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "importer", "type": "EditorImportPlugin"}], "description": "", "name": "remove_import_plugin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "plugin", "type": "EditorInspectorPlugin"}], "description": "", "name": "remove_inspector_plugin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "scene_importer", "type": "EditorSceneImporter"}], "description": "", "name": "remove_scene_import_plugin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Removes a menu [code]name[/code] from 'Project > Tools'.", "name": "remove_tool_menu_item", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.", "name": "save_external_data", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "set_force_draw_over_forwarding_enabled", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Use this method if you always want to receive inputs from 3D view screen inside [method forward_spatial_gui_input]. It might be especially usable if your plugin will want to use raycast in the scene.", "name": "set_input_event_forwarding_always_enabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "state", "type": "Dictionary"}], "description": "Restore the state saved by [method EditorPlugin.get_state].", "name": "set_state", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "layout", "type": "ConfigFile"}], "description": "Restore the plugin GUI layout saved by [method EditorPlugin.get_window_layout].", "name": "set_window_layout", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "update_overlays", "qualifiers": "const", "return_": {"description": "", "type": "int"}}], "name": "EditorPlugin", "signals": [{"arguments": [{"description": "", "index": "0", "name": "screen_name", "type": "String"}], "description": "Emitted when user change main screen view (2D, 3D, Script, AssetLib). Works also with screens which are defined by plugins.", "name": "main_screen_changed"}, {"arguments": [{"description": "", "index": "0", "name": "resource", "type": "Resource"}], "description": "", "name": "resource_saved"}, {"arguments": [{"description": "", "index": "0", "name": "scene_root", "type": "Node"}], "description": "Emitted when user change scene. The argument is a root node of freshly opened scene.", "name": "scene_changed"}, {"arguments": [{"description": "", "index": "0", "name": "filepath", "type": "String"}], "description": "Emitted when user close scene. The argument is file path to a closed scene.", "name": "scene_closed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/development/plugins/index.html"}]}}, "EditorProperty": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Container", "members": [{"description": "", "getter": "is_checkable", "name": "checkable", "setter": "set_checkable", "type": "bool"}, {"description": "", "getter": "is_checked", "name": "checked", "setter": "set_checked", "type": "bool"}, {"description": "", "getter": "is_draw_red", "name": "draw_red", "setter": "set_draw_red", "type": "bool"}, {"description": "", "getter": "is_keying", "name": "keying", "setter": "set_keying", "type": "bool"}, {"description": "", "getter": "get_label", "name": "label", "setter": "set_label", "type": "String"}, {"description": "", "getter": "is_read_only", "name": "read_only", "setter": "set_read_only", "type": "bool"}], "methods": [{"arguments": [], "description": "", "name": "get_edited_object", "return_": {"description": "", "type": "Object"}}, {"arguments": [], "description": "", "name": "get_edited_property", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "get_tooltip_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "update_property", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}], "name": "EditorProperty", "signals": [{"arguments": [{"description": "", "index": "0", "name": "properties", "type": "PoolStringArray"}, {"description": "", "index": "1", "name": "value", "type": "Array"}], "description": "", "name": "multiple_properties_changed"}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "", "name": "object_id_selected"}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Nil"}], "description": "", "name": "property_changed"}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}, {"description": "", "index": "1", "name": "bool", "type": "String"}], "description": "", "name": "property_checked"}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}], "description": "", "name": "property_keyed"}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Nil"}], "description": "", "name": "property_keyed_with_value"}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "resource", "type": "Resource"}], "description": "", "name": "resource_selected"}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "focusable_idx", "type": "int"}], "description": "", "name": "selected"}], "tutorials": {"links": []}}, "EditorResourceConversionPlugin": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "resource", "type": "Resource"}], "description": "", "name": "_convert", "qualifiers": "virtual", "return_": {"description": "", "type": "Resource"}}, {"arguments": [], "description": "", "name": "_converts_to", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}], "name": "EditorResourceConversionPlugin", "signals": [], "tutorials": {"links": []}}, "EditorResourcePreview": {"brief_description": "Helper to generate previews of resources or files.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This object is used to generate previews for resources of files.", "inherits": "Node", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "generator", "type": "EditorResourcePreviewGenerator"}], "description": "Create an own, custom preview generator.", "name": "add_preview_generator", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Check if the resource changed, if so it will be invalidated and the corresponding signal emitted.", "name": "check_for_invalidation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "resource", "type": "Resource"}, {"description": "", "index": "1", "name": "receiver", "type": "Object"}, {"description": "", "index": "2", "name": "receiver_func", "type": "String"}, {"description": "", "index": "3", "name": "userdata", "type": "Variant"}], "description": "Queue a resource being edited for preview (using an instance). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything.", "name": "queue_edited_resource_preview", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "receiver", "type": "Object"}, {"description": "", "index": "2", "name": "receiver_func", "type": "String"}, {"description": "", "index": "3", "name": "userdata", "type": "Variant"}], "description": "Queue a resource file for preview (using a path). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything.", "name": "queue_resource_preview", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "generator", "type": "EditorResourcePreviewGenerator"}], "description": "Remove a custom preview generator.", "name": "remove_preview_generator", "return_": {"description": "", "type": "void"}}], "name": "EditorResourcePreview", "signals": [{"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "If a preview was invalidated (changed) this signal will emit (using the path of the preview)", "name": "preview_invalidated"}], "tutorials": {"links": []}}, "EditorResourcePreviewGenerator": {"brief_description": "Custom generator of previews.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Custom code to generate previews. Please check \"file_dialog/thumbnail_size\" in EditorSettings to find out the right size to do previews at.", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Resource"}], "description": "Generate a preview from a given resource. This must be always implemented.\n\t\t\tReturning an empty texture is an OK way to fail and let another generator take care.\n\t\t\tCare must be taken because this function is always called from a thread (not the main thread).", "name": "generate", "qualifiers": "virtual", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Generate a preview directly from a path, implementing this is optional, as default code will load and call generate()\n\t\t\tReturning an empty texture is an OK way to fail and let another generator take care.\n\t\t\tCare must be taken because this function is always called from a thread (not the main thread).", "name": "generate_from_path", "qualifiers": "virtual", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Return if your generator supports this resource type.", "name": "handles", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}], "name": "EditorResourcePreviewGenerator", "signals": [], "tutorials": {"links": []}}, "EditorSceneImporter": {"brief_description": "", "category": "Core", "constants": [{"description": "", "name": "IMPORT_SCENE", "value": "1"}, {"description": "", "name": "IMPORT_ANIMATION", "value": "2"}, {"description": "", "name": "IMPORT_ANIMATION_DETECT_LOOP", "value": "4"}, {"description": "", "name": "IMPORT_ANIMATION_OPTIMIZE", "value": "8"}, {"description": "", "name": "IMPORT_ANIMATION_FORCE_ALL_TRACKS_IN_ALL_CLIPS", "value": "16"}, {"description": "", "name": "IMPORT_ANIMATION_KEEP_VALUE_TRACKS", "value": "32"}, {"description": "", "name": "IMPORT_GENERATE_TANGENT_ARRAYS", "value": "256"}, {"description": "", "name": "IMPORT_FAIL_ON_MISSING_DEPENDENCIES", "value": "512"}, {"description": "", "name": "IMPORT_MATERIALS_IN_INSTANCES", "value": "1024"}, {"description": "", "name": "IMPORT_USE_COMPRESSION", "value": "2048"}], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "", "name": "_get_extensions", "qualifiers": "virtual", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "", "name": "_get_import_flags", "qualifiers": "virtual", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "flags", "type": "int"}, {"description": "", "index": "2", "name": "bake_fps", "type": "int"}], "description": "", "name": "_import_animation", "qualifiers": "virtual", "return_": {"description": "", "type": "Animation"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "flags", "type": "int"}, {"description": "", "index": "2", "name": "bake_fps", "type": "int"}], "description": "", "name": "_import_scene", "qualifiers": "virtual", "return_": {"description": "", "type": "Node"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "flags", "type": "int"}, {"description": "", "index": "2", "name": "bake_fps", "type": "int"}], "description": "", "name": "import_animation_from_other_importer", "return_": {"description": "", "type": "Animation"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "flags", "type": "int"}, {"description": "", "index": "2", "name": "bake_fps", "type": "int"}], "description": "", "name": "import_scene_from_other_importer", "return_": {"description": "", "type": "Node"}}], "name": "EditorSceneImporter", "signals": [], "tutorials": {"links": []}}, "EditorScenePostImport": {"brief_description": "Post process scenes after import", "category": "Core", "constants": [], "demos": {"links": []}, "description": "The imported scene can be automatically modified right after import by specifying a 'custom script' that inherits from this class. The [method post_import]-method receives the imported scene's root-node and returns the modified version of the scene", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "Returns the source-file-path which got imported (e.g. [code]res://scene.dae[/code] )", "name": "get_source_file", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the resource-folder the imported scene-file is located in", "name": "get_source_folder", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "scene", "type": "Object"}], "description": "Gets called after the scene got imported and has to return the modified version of the scene", "name": "post_import", "qualifiers": "virtual", "return_": {"description": "", "type": "Object"}}], "name": "EditorScenePostImport", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/latest/learning/workflow/assets/importing_scenes.html?highlight=post%20import"}]}}, "EditorScript": {"brief_description": "Base script that can be used to add extension functions to the editor.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Scripts extending this class and implementing its [code]_run()[/code] method can be executed from the Script Editor's [code]File -> Run[/code] menu option (or by pressing [code]CTRL+Shift+X[/code]) while the editor is running. This is useful for adding custom in-editor functionality to Godot. For more complex additions, consider using [EditorPlugin]s instead. Note that extending scripts need to have [code]tool mode[/code] enabled.\n\t\tExample script:\n\t\t[codeblock]\n\t\ttool\n\t\textends EditorScript\n\n\t\tfunc _run():\n\t\t    print(\"Hello from the Godot Editor!\")\n\t\t[/codeblock]\n\t\tNote that the script is run in the Editor context, which means the output is visible in the console window started with the Editor (STDOUT) instead of the usual Godot [i]Output[/i] dock.", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "This method is executed by the Editor when [code]File -> Run[/code] is used.", "name": "_run", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Adds [code]node[/code] as a child of the root node in the editor context.\n\t\t\t\tWARNING: The implementation of this method is currently disabled.", "name": "add_root_node", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the [EditorInterface] singleton instance.", "name": "get_editor_interface", "return_": {"description": "", "type": "EditorInterface"}}, {"arguments": [], "description": "Returns the Editor's currently active scene.", "name": "get_scene", "return_": {"description": "", "type": "Node"}}], "name": "EditorScript", "signals": [], "tutorials": {"links": []}}, "EditorSelection": {"brief_description": "Manages the SceneTree selection in the editor.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This object manages the SceneTree selection in the editor.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Add a node to the selection.", "name": "add_node", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clear the selection.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Get the list of selected nodes.", "name": "get_selected_nodes", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Get the list of selected nodes, optimized for transform operations (ie, moving them, rotating, etc). This list avoids situations where a node is selected and also chid/grandchild.", "name": "get_transformable_selected_nodes", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Remove a node from the selection.", "name": "remove_node", "return_": {"description": "", "type": "void"}}], "name": "EditorSelection", "signals": [{"arguments": [], "description": "Emitted when the selection changes.", "name": "selection_changed"}], "tutorials": {"links": []}}, "EditorSettings": {"brief_description": "Object that holds the project-independent editor settings.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Object that holds the project-independent editor settings. These settings are generally visible in the Editor Settings menu.\n\t\tAccessing the settings is done by using the regular [Object] API, such as:\n\t\t[codeblock]\n\t\tsettings.set(prop,value)\n\t\tsettings.get(prop)\n\t\tlist_of_settings = settings.get_property_list()\n\t\t[/codeblock]", "inherits": "Resource", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "info", "type": "Dictionary"}], "description": "Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@GlobalScope]), and optionally hint:[int](see PROPERTY_HINT_* in [@GlobalScope]), hint_string:[String].\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\teditor_settings.set(\"category/property_name\", 0)\n\n\t\t\t\tvar property_info = {\n\t\t\t\t    \"name\": \"category/property_name\",\n\t\t\t\t    \"type\": TYPE_INT,\n\t\t\t\t    \"hint\": PROPERTY_HINT_ENUM,\n\t\t\t\t    \"hint_string\": \"one,two,three\"\n\t\t\t\t}\n\n\t\t\t\teditor_settings.add_property_info(property_info)\n\t\t\t\t[/codeblock]", "name": "add_property_info", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}], "description": "Erase a given setting (pass full property path).", "name": "erase", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Get the list of favorite directories for this project.", "name": "get_favorite_dirs", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "section", "type": "String"}, {"description": "", "index": "1", "name": "key", "type": "String"}, {"default": "null", "description": "", "index": "2", "name": "default", "type": "Variant"}], "description": "", "name": "get_project_metadata", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Get the specific project settings path. Projects all have a unique sub-directory inside the settings path where project specific settings are saved.", "name": "get_project_settings_dir", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the list of recently visited folders in the file dialog for this project.", "name": "get_recent_dirs", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "get_setting", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Get the global settings path for the engine. Inside this path you can find some standard paths such as:\n\t\t\t\tsettings/tmp - used for temporary storage of files\n\t\t\t\tsettings/templates - where export templates are located", "name": "get_settings_dir", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_setting", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "property_can_revert", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "property_get_revert", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "dirs", "type": "PoolStringArray"}], "description": "Set the list of favorite directories for this project.", "name": "set_favorite_dirs", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}, {"description": "", "index": "2", "name": "update_current", "type": "bool"}], "description": "", "name": "set_initial_value", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "section", "type": "String"}, {"description": "", "index": "1", "name": "key", "type": "String"}, {"description": "", "index": "2", "name": "data", "type": "Variant"}], "description": "", "name": "set_project_metadata", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "dirs", "type": "PoolStringArray"}], "description": "Set the list of recently visited folders in the file dialog for this project.", "name": "set_recent_dirs", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "", "name": "set_setting", "return_": {"description": "", "type": "void"}}], "name": "EditorSettings", "signals": [{"arguments": [], "description": "", "name": "settings_changed"}], "tutorials": {"links": []}}, "EditorSpatialGizmo": {"brief_description": "Custom gizmo for editing Spatial objects.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Custom gizmo that is used for providing custom visualization and editing (handles) for 3D Spatial objects. These are created by [method EditorPlugin.create_spatial_gizmo].", "inherits": "SpatialGizmo", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "segments", "type": "PoolVector3Array"}], "description": "", "name": "add_collision_segments", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "triangles", "type": "TriangleMesh"}], "description": "Add collision triangles to the gizmo for picking. A [TriangleMesh] can be generated from a regular [Mesh] too. Call this function during [method redraw].", "name": "add_collision_triangles", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "handles", "type": "PoolVector3Array"}, {"description": "", "index": "1", "name": "material", "type": "Material"}, {"default": "false", "description": "", "index": "2", "name": "billboard", "type": "bool"}, {"default": "false", "description": "", "index": "3", "name": "secondary", "type": "bool"}], "description": "Add a list of handles (points) which can be used to deform the object being edited.\n\t\t\t\tThere are virtual functions which will be called upon editing of these handles. Call this function during [method redraw].", "name": "add_handles", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "lines", "type": "PoolVector3Array"}, {"description": "", "index": "1", "name": "material", "type": "Material"}, {"default": "false", "description": "", "index": "2", "name": "billboard", "type": "bool"}], "description": "Add lines to the gizmo (as sets of 2 points), with a given material. The lines are used for visualizing the gizmo. Call this function during [method redraw].", "name": "add_lines", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "ArrayMesh"}, {"default": "false", "description": "", "index": "1", "name": "billboard", "type": "bool"}, {"description": "", "index": "2", "name": "skeleton", "type": "RID"}], "description": "", "name": "add_mesh", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "material", "type": "Material"}, {"default": "1", "description": "", "index": "1", "name": "default_scale", "type": "float"}], "description": "Add an unscaled billboard for visualization. Call this function during [method redraw].", "name": "add_unscaled_billboard", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "restore", "type": "Variant"}, {"default": "false", "description": "", "index": "2", "name": "cancel", "type": "bool"}], "description": "Commit a handle being edited (handles must have been previously added by [method add_handles]).\n\t\t\t\tIf the cancel parameter is true, an option to restore the edited value to the original is provided.", "name": "commit_handle", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Get the name of an edited handle (handles must have been previously added by [method add_handles]).\n\t\t\t\tHandles can be named for reference to the user when editing.", "name": "get_handle_name", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Get actual value of a handle. This value can be anything and used for eventually undoing the motion when calling [method commit_handle]", "name": "get_handle_value", "qualifiers": "virtual", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "This function is called when the Spatial this gizmo refers to changes (the [method Spatial.update_gizmo] is called).", "name": "redraw", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "camera", "type": "Camera"}, {"description": "", "index": "2", "name": "point", "type": "Vector2"}], "description": "This function is used when the user drags a gizmo handle (previously added with [method add_handles]) in screen coordinates.\n\t\t\t\tThe [Camera] is also provided so screen coordinates can be converted to raycasts.", "name": "set_handle", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "hidden", "type": "bool"}], "description": "", "name": "set_hidden", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "", "name": "set_spatial_node", "return_": {"description": "", "type": "void"}}], "name": "EditorSpatialGizmo", "signals": [], "tutorials": {"links": []}}, "EncodedObjectAsID": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "", "name": "get_object_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "set_object_id", "return_": {"description": "", "type": "void"}}], "name": "EncodedObjectAsID", "signals": [], "tutorials": {"links": []}}, "Engine": {"brief_description": "Access to basic engine properties.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "The [code]Engine[/code] class allows you to query and modify the game's run-time parameters, such as frames per second, time scale, and others.", "inherits": "Object", "members": [{"description": "If [code]true[/code], it is running inside the editor. Useful for tool scripts.", "getter": "is_editor_hint", "name": "editor_hint", "setter": "set_editor_hint", "type": "bool"}, {"description": "The number of fixed iterations per second (for fixed process and physics).", "getter": "get_iterations_per_second", "name": "iterations_per_second", "setter": "set_iterations_per_second", "type": "int"}, {"description": "", "getter": "get_physics_jitter_fix", "name": "physics_jitter_fix", "setter": "set_physics_jitter_fix", "type": "float"}, {"description": "The desired frames per second. If the hardware cannot keep up, this setting may not be respected. Defaults to 0, which indicates no limit.", "getter": "get_target_fps", "name": "target_fps", "setter": "set_target_fps", "type": "int"}, {"description": "Controls how fast or slow the in-game clock ticks versus the real life one. It defaults to 1.0. A value of 2.0 means the game moves twice as fast as real life, whilst a value of 0.5 means the game moves at half the regular speed.", "getter": "get_time_scale", "name": "time_scale", "setter": "set_time_scale", "type": "float"}], "methods": [{"arguments": [], "description": "Returns engine author information in a Dictionary.\n\t\t\t\t\"lead_developers\" - Array of Strings, lead developer names\n\t\t\t\t\"founders\" - Array of Strings, founder names\n\t\t\t\t\"project_managers\" - Array of Strings, project manager names\n\t\t\t\t\"developers\" - Array of Strings, developer names", "name": "get_author_info", "qualifiers": "const", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [], "description": "Returns an Array of copyright information Dictionaries.\n\t\t\t\t\"name\" - String, component name\n\t\t\t\t\"parts\" - Array of Dictionaries {\"files\", \"copyright\", \"license\"} describing subsections of the component", "name": "get_copyright_info", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns a Dictionary of Arrays of donor names.\n\t\t\t\t{\"platinum_sponsors\", \"gold_sponsors\", \"mini_sponsors\", \"gold_donors\", \"silver_donors\", \"bronze_donors\"}", "name": "get_donor_info", "qualifiers": "const", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [], "description": "Returns the total number of frames drawn.", "name": "get_frames_drawn", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the frames per second of the running game.", "name": "get_frames_per_second", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns Dictionary of licenses used by Godot and included third party components.", "name": "get_license_info", "qualifiers": "const", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [], "description": "Returns Godot license text.", "name": "get_license_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the main loop object (see [MainLoop] and [SceneTree]).", "name": "get_main_loop", "qualifiers": "const", "return_": {"description": "", "type": "MainLoop"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "get_singleton", "qualifiers": "const", "return_": {"description": "", "type": "Object"}}, {"arguments": [], "description": "Returns the current engine version information in a Dictionary.\n\t\t\t\t\"major\"    - Holds the major version number as an int\n\t\t\t\t\"minor\"    - Holds the minor version number as an int\n\t\t\t\t\"patch\"    - Holds the patch version number as an int\n\t\t\t\t\"status\"   - Holds the status (e.g. \"beta\", \"rc1\", \"rc2\", ... \"stable\") as a String\n\t\t\t\t\"build\"    - Holds the build name (e.g. \"custom-build\") as a String\n\t\t\t\t\"string\"   - major + minor + patch + status + build in a single String", "name": "get_version_info", "qualifiers": "const", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_singleton", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the game is inside the fixed process and physics phase of the game loop.", "name": "is_in_physics_frame", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "Engine", "signals": [], "tutorials": {"links": []}}, "Environment": {"brief_description": "Resource for environment nodes (like [WorldEnvironment]) that define multiple rendering options.", "category": "Core", "constants": [{"description": "Keep on screen every pixel drawn in the background.", "enum": "BGMode", "name": "BG_KEEP", "value": "5"}, {"description": "Clear the background using the project's clear color.", "enum": "BGMode", "name": "BG_CLEAR_COLOR", "value": "0"}, {"description": "Clear the background using a custom clear color.", "enum": "BGMode", "name": "BG_COLOR", "value": "1"}, {"description": "Display a user-defined sky in the background.", "enum": "BGMode", "name": "BG_SKY", "value": "2"}, {"description": "Clear the background using a custom clear color and allows defining a sky for shading and reflection.", "enum": "BGMode", "name": "BG_COLOR_SKY", "value": "3"}, {"description": "Display a [CanvasLayer] in the background.", "enum": "BGMode", "name": "BG_CANVAS", "value": "4"}, {"description": "Helper constant keeping track of the enum's size, has no direct usage in API calls.", "enum": "BGMode", "name": "BG_MAX", "value": "6"}, {"description": "Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources.", "enum": "GlowBlendMode", "name": "GLOW_BLEND_MODE_ADDITIVE", "value": "0"}, {"description": "Screen glow blending mode. Increases brightness, used frequently with bloom.", "enum": "GlowBlendMode", "name": "GLOW_BLEND_MODE_SCREEN", "value": "1"}, {"description": "Softlight glow blending mode. Modifies contrast, exposes shadows and highlights, vivid bloom.", "enum": "GlowBlendMode", "name": "GLOW_BLEND_MODE_SOFTLIGHT", "value": "2"}, {"description": "Replace glow blending mode. Replaces all pixels' color by the glow value.", "enum": "GlowBlendMode", "name": "GLOW_BLEND_MODE_REPLACE", "value": "3"}, {"description": "Linear tonemapper operator. Reads the linear data and performs an exposure adjustment.", "enum": "ToneMapper", "name": "TONE_MAPPER_LINEAR", "value": "0"}, {"description": "Reinhardt tonemapper operator. Performs a variation on rendered pixels' colors by this formula: color = color / (1 + color).", "enum": "ToneMapper", "name": "TONE_MAPPER_REINHARDT", "value": "1"}, {"description": "Filmic tonemapper operator.", "enum": "ToneMapper", "name": "TONE_MAPPER_FILMIC", "value": "2"}, {"description": "Academy Color Encoding System tonemapper operator.", "enum": "ToneMapper", "name": "TONE_MAPPER_ACES", "value": "3"}, {"description": "Low depth-of-field blur quality.", "enum": "DOFBlurQuality", "name": "DOF_BLUR_QUALITY_LOW", "value": "0"}, {"description": "Medium depth-of-field blur quality.", "enum": "DOFBlurQuality", "name": "DOF_BLUR_QUALITY_MEDIUM", "value": "1"}, {"description": "High depth-of-field blur quality.", "enum": "DOFBlurQuality", "name": "DOF_BLUR_QUALITY_HIGH", "value": "2"}, {"description": "", "enum": "SSAOBlur", "name": "SSAO_BLUR_DISABLED", "value": "0"}, {"description": "", "enum": "SSAOBlur", "name": "SSAO_BLUR_1x1", "value": "1"}, {"description": "", "enum": "SSAOBlur", "name": "SSAO_BLUR_2x2", "value": "2"}, {"description": "", "enum": "SSAOBlur", "name": "SSAO_BLUR_3x3", "value": "3"}, {"description": "", "enum": "SSAOQuality", "name": "SSAO_QUALITY_LOW", "value": "0"}, {"description": "", "enum": "SSAOQuality", "name": "SSAO_QUALITY_MEDIUM", "value": "1"}, {"description": "", "enum": "SSAOQuality", "name": "SSAO_QUALITY_HIGH", "value": "2"}], "demos": {"links": []}, "description": "Resource for environment nodes (like [WorldEnvironment]) that define multiple environment operations (such as background [Sky] or [Color], ambient light, fog, depth-of-field...). These parameters affect the final render of the scene. The order of these operations is:\n \t\t\n\t\t- DOF Blur\n\t\t- Motion Blur\n\t\t- Bloom\n\t\t- Tonemap (auto exposure)\n\t\t- Adjustments", "inherits": "Resource", "members": [{"description": "Global brightness value of the rendered scene (default value is 1).", "getter": "get_adjustment_brightness", "name": "adjustment_brightness", "setter": "set_adjustment_brightness", "type": "float"}, {"description": "Applies the provided [Texture] resource to affect the global color aspect of the rendered scene.", "getter": "get_adjustment_color_correction", "name": "adjustment_color_correction", "setter": "set_adjustment_color_correction", "type": "Texture"}, {"description": "Global contrast value of the rendered scene (default value is 1).", "getter": "get_adjustment_contrast", "name": "adjustment_contrast", "setter": "set_adjustment_contrast", "type": "float"}, {"description": "Enables the adjustment_* options provided by this resource. If false, adjustments modifications will have no effect on the rendered scene.", "getter": "is_adjustment_enabled", "name": "adjustment_enabled", "setter": "set_adjustment_enable", "type": "bool"}, {"description": "Global color saturation value of the rendered scene (default value is 1).", "getter": "get_adjustment_saturation", "name": "adjustment_saturation", "setter": "set_adjustment_saturation", "type": "float"}, {"description": "[Color] of the ambient light.", "getter": "get_ambient_light_color", "name": "ambient_light_color", "setter": "set_ambient_light_color", "type": "Color"}, {"description": "Energy of the ambient light. The higher the value, the stronger the light.", "getter": "get_ambient_light_energy", "name": "ambient_light_energy", "setter": "set_ambient_light_energy", "type": "float"}, {"description": "Defines the amount of light that the sky brings on the scene. A value of 0 means that the sky's light emission has no effect on the scene illumination, thus all ambient illumination is provided by the ambient light. On the contrary, a value of 1 means that all the light that affects the scene is provided by the sky, thus the ambient light parameter has no effect on the scene.", "getter": "get_ambient_light_sky_contribution", "name": "ambient_light_sky_contribution", "setter": "set_ambient_light_sky_contribution", "type": "float"}, {"description": "Enables the tonemapping auto exposure mode of the scene renderer. If activated, the renderer will automatically determine the exposure setting to adapt to the illumination of the scene and the observed light.", "getter": "get_tonemap_auto_exposure", "name": "auto_exposure_enabled", "setter": "set_tonemap_auto_exposure", "type": "bool"}, {"description": "Maximum luminance value for the auto exposure.", "getter": "get_tonemap_auto_exposure_max", "name": "auto_exposure_max_luma", "setter": "set_tonemap_auto_exposure_max", "type": "float"}, {"description": "Minimum luminance value for the auto exposure.", "getter": "get_tonemap_auto_exposure_min", "name": "auto_exposure_min_luma", "setter": "set_tonemap_auto_exposure_min", "type": "float"}, {"description": "Scale of the auto exposure effect. Affects the intensity of auto exposure.", "getter": "get_tonemap_auto_exposure_grey", "name": "auto_exposure_scale", "setter": "set_tonemap_auto_exposure_grey", "type": "float"}, {"description": "Speed of the auto exposure effect. Affects the time needed for the camera to perform auto exposure.", "getter": "get_tonemap_auto_exposure_speed", "name": "auto_exposure_speed", "setter": "set_tonemap_auto_exposure_speed", "type": "float"}, {"description": "Maximum layer id (if using Layer background mode).", "getter": "get_canvas_max_layer", "name": "background_canvas_max_layer", "setter": "set_canvas_max_layer", "type": "int"}, {"description": "Color displayed for clear areas of the scene (if using Custom color or Color+Sky background modes).", "getter": "get_bg_color", "name": "background_color", "setter": "set_bg_color", "type": "Color"}, {"description": "Power of light emitted by the background.", "getter": "get_bg_energy", "name": "background_energy", "setter": "set_bg_energy", "type": "float"}, {"description": "Defines the mode of background.", "getter": "get_background", "name": "background_mode", "setter": "set_background", "type": "int"}, {"description": "[Sky] resource defined as background.", "getter": "get_sky", "name": "background_sky", "setter": "set_sky", "type": "Sky"}, {"description": "[Sky] resource's custom field of view.", "getter": "get_sky_custom_fov", "name": "background_sky_custom_fov", "setter": "set_sky_custom_fov", "type": "float"}, {"description": "Amount of far blur.", "getter": "get_dof_blur_far_amount", "name": "dof_blur_far_amount", "setter": "set_dof_blur_far_amount", "type": "float"}, {"description": "Distance from the camera where the far blur effect affects the rendering.", "getter": "get_dof_blur_far_distance", "name": "dof_blur_far_distance", "setter": "set_dof_blur_far_distance", "type": "float"}, {"description": "Enables the far blur effect.", "getter": "is_dof_blur_far_enabled", "name": "dof_blur_far_enabled", "setter": "set_dof_blur_far_enabled", "type": "bool"}, {"description": "Quality of the far blur quality.", "getter": "get_dof_blur_far_quality", "name": "dof_blur_far_quality", "setter": "set_dof_blur_far_quality", "type": "int"}, {"description": "Transition between no-blur area and far blur.", "getter": "get_dof_blur_far_transition", "name": "dof_blur_far_transition", "setter": "set_dof_blur_far_transition", "type": "float"}, {"description": "Amount of near blur.", "getter": "get_dof_blur_near_amount", "name": "dof_blur_near_amount", "setter": "set_dof_blur_near_amount", "type": "float"}, {"description": "Distance from the camera where the near blur effect affects the rendering.", "getter": "get_dof_blur_near_distance", "name": "dof_blur_near_distance", "setter": "set_dof_blur_near_distance", "type": "float"}, {"description": "Enables the near blur effect.", "getter": "is_dof_blur_near_enabled", "name": "dof_blur_near_enabled", "setter": "set_dof_blur_near_enabled", "type": "bool"}, {"description": "Quality of the near blur quality.", "getter": "get_dof_blur_near_quality", "name": "dof_blur_near_quality", "setter": "set_dof_blur_near_quality", "type": "int"}, {"description": "Transition between near blur and no-blur area.", "getter": "get_dof_blur_near_transition", "name": "dof_blur_near_transition", "setter": "set_dof_blur_near_transition", "type": "float"}, {"description": "Fog's [Color].", "getter": "get_fog_color", "name": "fog_color", "setter": "set_fog_color", "type": "Color"}, {"description": "Fog's depth starting distance from the camera.", "getter": "get_fog_depth_begin", "name": "fog_depth_begin", "setter": "set_fog_depth_begin", "type": "float"}, {"description": "Value defining the fog depth intensity.", "getter": "get_fog_depth_curve", "name": "fog_depth_curve", "setter": "set_fog_depth_curve", "type": "float"}, {"description": "Enables the fog depth.", "getter": "is_fog_depth_enabled", "name": "fog_depth_enabled", "setter": "set_fog_depth_enabled", "type": "bool"}, {"description": "Enables the fog. Needs fog_height_enabled and/or for_depth_enabled to actually display fog.", "getter": "is_fog_enabled", "name": "fog_enabled", "setter": "set_fog_enabled", "type": "bool"}, {"description": "Value defining the fog height intensity.", "getter": "get_fog_height_curve", "name": "fog_height_curve", "setter": "set_fog_height_curve", "type": "float"}, {"description": "Enables the fog height.", "getter": "is_fog_height_enabled", "name": "fog_height_enabled", "setter": "set_fog_height_enabled", "type": "bool"}, {"description": "Maximum height of fog.", "getter": "get_fog_height_max", "name": "fog_height_max", "setter": "set_fog_height_max", "type": "float"}, {"description": "Minimum height of fog.", "getter": "get_fog_height_min", "name": "fog_height_min", "setter": "set_fog_height_min", "type": "float"}, {"description": "Amount of sun that affects the fog rendering.", "getter": "get_fog_sun_amount", "name": "fog_sun_amount", "setter": "set_fog_sun_amount", "type": "float"}, {"description": "Sun [Color].", "getter": "get_fog_sun_color", "name": "fog_sun_color", "setter": "set_fog_sun_color", "type": "Color"}, {"description": "Amount of light that the fog transmits.", "getter": "get_fog_transmit_curve", "name": "fog_transmit_curve", "setter": "set_fog_transmit_curve", "type": "float"}, {"description": "Enables fog's light transmission. If enabled, lets reflections light to be transmitted by the fog.", "getter": "is_fog_transmit_enabled", "name": "fog_transmit_enabled", "setter": "set_fog_transmit_enabled", "type": "bool"}, {"description": "", "getter": "is_glow_bicubic_upscale_enabled", "name": "glow_bicubic_upscale", "setter": "set_glow_bicubic_upscale", "type": "bool"}, {"description": "Glow blending mode.", "getter": "get_glow_blend_mode", "name": "glow_blend_mode", "setter": "set_glow_blend_mode", "type": "int"}, {"description": "Bloom value (global glow).", "getter": "get_glow_bloom", "name": "glow_bloom", "setter": "set_glow_bloom", "type": "float"}, {"description": "Enables glow rendering.", "getter": "is_glow_enabled", "name": "glow_enabled", "setter": "set_glow_enabled", "type": "bool"}, {"description": "Bleed scale of the HDR glow.", "getter": "get_glow_hdr_bleed_scale", "name": "glow_hdr_scale", "setter": "set_glow_hdr_bleed_scale", "type": "float"}, {"description": "Bleed threshold of the HDR glow.", "getter": "get_glow_hdr_bleed_threshold", "name": "glow_hdr_threshold", "setter": "set_glow_hdr_bleed_threshold", "type": "float"}, {"description": "Glow intensity.", "getter": "get_glow_intensity", "name": "glow_intensity", "setter": "set_glow_intensity", "type": "float"}, {"description": "First level of glow (most local).", "getter": "is_glow_level_enabled", "name": "glow_levels/1", "setter": "set_glow_level", "type": "bool"}, {"description": "Second level of glow.", "getter": "is_glow_level_enabled", "name": "glow_levels/2", "setter": "set_glow_level", "type": "bool"}, {"description": "Third level of glow.", "getter": "is_glow_level_enabled", "name": "glow_levels/3", "setter": "set_glow_level", "type": "bool"}, {"description": "Fourth level of glow.", "getter": "is_glow_level_enabled", "name": "glow_levels/4", "setter": "set_glow_level", "type": "bool"}, {"description": "Fifth level of glow.", "getter": "is_glow_level_enabled", "name": "glow_levels/5", "setter": "set_glow_level", "type": "bool"}, {"description": "Sixth level of glow.", "getter": "is_glow_level_enabled", "name": "glow_levels/6", "setter": "set_glow_level", "type": "bool"}, {"description": "Seventh level of glow (most global).", "getter": "is_glow_level_enabled", "name": "glow_levels/7", "setter": "set_glow_level", "type": "bool"}, {"description": "Glow strength.", "getter": "get_glow_strength", "name": "glow_strength", "setter": "set_glow_strength", "type": "float"}, {"description": "", "getter": "get_ssr_depth_tolerance", "name": "ss_reflections_depth_tolerance", "setter": "set_ssr_depth_tolerance", "type": "float"}, {"description": "", "getter": "is_ssr_enabled", "name": "ss_reflections_enabled", "setter": "set_ssr_enabled", "type": "bool"}, {"description": "", "getter": "get_ssr_fade_in", "name": "ss_reflections_fade_in", "setter": "set_ssr_fade_in", "type": "float"}, {"description": "", "getter": "get_ssr_fade_out", "name": "ss_reflections_fade_out", "setter": "set_ssr_fade_out", "type": "float"}, {"description": "", "getter": "get_ssr_max_steps", "name": "ss_reflections_max_steps", "setter": "set_ssr_max_steps", "type": "int"}, {"description": "", "getter": "is_ssr_rough", "name": "ss_reflections_roughness", "setter": "set_ssr_rough", "type": "bool"}, {"description": "", "getter": "get_ssao_ao_channel_affect", "name": "ssao_ao_channel_affect", "setter": "set_ssao_ao_channel_affect", "type": "float"}, {"description": "", "getter": "get_ssao_bias", "name": "ssao_bias", "setter": "set_ssao_bias", "type": "float"}, {"description": "", "getter": "is_ssao_blur_enabled", "name": "ssao_blur", "setter": "set_ssao_blur", "type": "int"}, {"description": "", "getter": "get_ssao_color", "name": "ssao_color", "setter": "set_ssao_color", "type": "Color"}, {"description": "", "getter": "get_ssao_edge_sharpness", "name": "ssao_edge_sharpness", "setter": "set_ssao_edge_sharpness", "type": "float"}, {"description": "", "getter": "is_ssao_enabled", "name": "ssao_enabled", "setter": "set_ssao_enabled", "type": "bool"}, {"description": "", "getter": "get_ssao_intensity", "name": "ssao_intensity", "setter": "set_ssao_intensity", "type": "float"}, {"description": "", "getter": "get_ssao_intensity2", "name": "ssao_intensity2", "setter": "set_ssao_intensity2", "type": "float"}, {"description": "", "getter": "get_ssao_direct_light_affect", "name": "ssao_light_affect", "setter": "set_ssao_direct_light_affect", "type": "float"}, {"description": "", "getter": "get_ssao_quality", "name": "ssao_quality", "setter": "set_ssao_quality", "type": "int"}, {"description": "", "getter": "get_ssao_radius", "name": "ssao_radius", "setter": "set_ssao_radius", "type": "float"}, {"description": "", "getter": "get_ssao_radius2", "name": "ssao_radius2", "setter": "set_ssao_radius2", "type": "float"}, {"description": "Default exposure for tonemap.", "getter": "get_tonemap_exposure", "name": "tonemap_exposure", "setter": "set_tonemap_exposure", "type": "float"}, {"description": "Tonemapping mode.", "getter": "get_tonemapper", "name": "tonemap_mode", "setter": "set_tonemapper", "type": "int"}, {"description": "White reference value for tonemap.", "getter": "get_tonemap_white", "name": "tonemap_white", "setter": "set_tonemap_white", "type": "float"}], "methods": [], "name": "Environment", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/environment_and_post_processing.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/high_dynamic_range.html"}]}}, "Expression": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"default": "[  ]", "description": "", "index": "0", "name": "inputs", "type": "Array"}, {"default": "null", "description": "", "index": "1", "name": "base_instance", "type": "Object"}, {"default": "true", "description": "", "index": "2", "name": "show_error", "type": "bool"}], "description": "", "name": "execute", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "", "name": "get_error_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "has_execute_failed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "expression", "type": "String"}, {"default": "PoolStringArray(  )", "description": "", "index": "1", "name": "input_names", "type": "PoolStringArray"}], "description": "", "name": "parse", "return_": {"description": "", "type": "int"}}], "name": "Expression", "signals": [], "tutorials": {"links": []}}, "File": {"brief_description": "Type to handle file reading and writing operations.", "category": "Core", "constants": [{"description": "Opens the file for read operations.", "enum": "ModeFlags", "name": "READ", "value": "1"}, {"description": "Opens the file for write operations. Create it if the file does not exist and truncate if it exists.", "enum": "ModeFlags", "name": "WRITE", "value": "2"}, {"description": "Opens the file for read and write operations. Does not truncate the file.", "enum": "ModeFlags", "name": "READ_WRITE", "value": "3"}, {"description": "Opens the file for read and write operations. Create it if the file does not exist and truncate if it exists.", "enum": "ModeFlags", "name": "WRITE_READ", "value": "7"}, {"description": "Uses the FastLZ compression method.", "enum": "CompressionMode", "name": "COMPRESSION_FASTLZ", "value": "0"}, {"description": "Uses the Deflate compression method.", "enum": "CompressionMode", "name": "COMPRESSION_DEFLATE", "value": "1"}, {"description": "Uses the Zstd compression method.", "enum": "CompressionMode", "name": "COMPRESSION_ZSTD", "value": "2"}, {"description": "Uses the gzip compression method.", "enum": "CompressionMode", "name": "COMPRESSION_GZIP", "value": "3"}], "demos": {"links": []}, "description": "File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.\n\t\tHere's a sample on how to write and read from a file:\n\t\t[codeblock]\n\t\tfunc save(content):\n\t\t    var file = File.new()\n\t\t    file.open(\"user://save_game.dat\", File.WRITE)\n\t\t    file.store_string(content)\n\t\t    file.close()\n\n\t\tfunc load():\n\t\t    var file = File.new()\n\t\t    file.open(\"user://save_game.dat\", File.READ)\n\t\t    var content = file.get_as_text()\n\t\t    file.close()\n\t\t    return content\n\t\t[/codeblock]", "inherits": "Reference", "members": [{"description": "If [code]true[/code] the file's endianness is swapped. Use this if you're dealing with files written in big endian machines.\n\t\t\tNote that this is about the file format, not CPU type. This is always reset to [code]false[/code] whenever you open the file.", "getter": "get_endian_swap", "name": "endian_swap", "setter": "set_endian_swap", "type": "bool"}], "methods": [{"arguments": [], "description": "Closes the currently opened file.", "name": "close", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns [code]true[/code] if the file cursor has reached the end of the file.", "name": "eof_reached", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Returns [code]true[/code] if the file exists in the given path.", "name": "file_exists", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the next 16 bits from the file as an integer.", "name": "get_16", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the next 32 bits from the file as an integer.", "name": "get_32", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the next 64 bits from the file as an integer.", "name": "get_64", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the next 8 bits from the file as an integer.", "name": "get_8", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the whole file as a [String].", "name": "get_as_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "len", "type": "int"}], "description": "Returns next [code]len[/code] bytes of the file as a [PoolByteArray].", "name": "get_buffer", "qualifiers": "const", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [{"default": "\",\"", "description": "", "index": "0", "name": "delim", "type": "String"}], "description": "Returns the next value of the file in CSV (Comma Separated Values) format. You can pass a different delimiter to use other than the default \",\" (comma).", "name": "get_csv_line", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [], "description": "Returns the next 64 bits from the file as a floating point number.", "name": "get_double", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the last error that happened when trying to perform operations. Compare with the [code]ERR_FILE_*[/code] constants from [@GlobalScope].", "name": "get_error", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the next 32 bits from the file as a floating point number.", "name": "get_float", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the size of the file in bytes.", "name": "get_len", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the next line of the file as a [String].", "name": "get_line", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Returns an MD5 String representing the file at the given path or an empty [String] on failure.", "name": "get_md5", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "file", "type": "String"}], "description": "Returns the last time the [code]file[/code] was modified in unix timestamp format or returns a [String] \"ERROR IN [code]file[/code]\". This unix timestamp can be converted to datetime by using [method OS.get_datetime_from_unix_time].", "name": "get_modified_time", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns a [String] saved in Pascal format from the file.", "name": "get_pascal_string", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the path as a [String] for the current open file.", "name": "get_path", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the absolute path as a [String] for the current open file.", "name": "get_path_absolute", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the file cursor's position.", "name": "get_position", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the next bits from the file as a floating point number.", "name": "get_real", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Returns a SHA-256 [String] representing the file at the given path or an empty [String] on failure.", "name": "get_sha256", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the next [Variant] value from the file.", "name": "get_var", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Returns [code]true[/code] if the file is currently opened.", "name": "is_open", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "flags", "type": "int"}], "description": "Opens the file for writing or reading, depending on the flags.", "name": "open", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "mode_flags", "type": "int"}, {"default": "0", "description": "", "index": "2", "name": "compression_mode", "type": "int"}], "description": "Opens a compressed file for reading or writing. Use COMPRESSION_* constants to set [code]compression_mode[/code].", "name": "open_compressed", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "mode_flags", "type": "int"}, {"description": "", "index": "2", "name": "key", "type": "PoolByteArray"}], "description": "Opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.", "name": "open_encrypted", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "mode_flags", "type": "int"}, {"description": "", "index": "2", "name": "pass", "type": "String"}], "description": "Opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.", "name": "open_encrypted_with_pass", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "int"}], "description": "Change the file reading/writing cursor to the specified position (in bytes from the beginning of the file).", "name": "seek", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "0", "description": "", "index": "0", "name": "position", "type": "int"}], "description": "Changes the file reading/writing cursor to the specified position (in bytes from the end of the file). Note that this is an offset, so you should use negative numbers or the cursor will be at the end of the file.", "name": "seek_end", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Stores an integer as 16 bits in the file.", "name": "store_16", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Stores an integer as 32 bits in the file.", "name": "store_32", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Stores an integer as 64 bits in the file.", "name": "store_64", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Stores an integer as 8 bits in the file.", "name": "store_8", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "buffer", "type": "PoolByteArray"}], "description": "Stores the given array of bytes in the file.", "name": "store_buffer", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}], "description": "Stores a floating point number as 64 bits in the file.", "name": "store_double", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}], "description": "Stores a floating point number as 32 bits in the file.", "name": "store_float", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "String"}], "description": "Stores the given [String] as a line in the file.", "name": "store_line", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "string", "type": "String"}], "description": "Stores the given [String] as a line in the file in Pascal format (i.e. also store the length of the string).", "name": "store_pascal_string", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}], "description": "Stores a floating point number in the file.", "name": "store_real", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "string", "type": "String"}], "description": "Stores the given [String] in the file.", "name": "store_string", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}], "description": "Stores any Variant value in the file.", "name": "store_var", "return_": {"description": "", "type": "void"}}], "name": "File", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/getting_started/step_by_step/filesystem.html"}]}}, "FileDialog": {"brief_description": "Dialog for selecting files or directories in the filesystem.", "category": "Core", "constants": [{"description": "The dialog allows the selection of one, and only one file.", "enum": "Mode", "name": "MODE_OPEN_FILE", "value": "0"}, {"description": "The dialog allows the selection of multiple files.", "enum": "Mode", "name": "MODE_OPEN_FILES", "value": "1"}, {"description": "The dialog functions as a folder selector, disallowing the selection of any file.", "enum": "Mode", "name": "MODE_OPEN_DIR", "value": "2"}, {"description": "The dialog allows the selection of a file or a directory.", "enum": "Mode", "name": "MODE_OPEN_ANY", "value": "3"}, {"description": "The dialog will warn when a file exists.", "enum": "Mode", "name": "MODE_SAVE_FILE", "value": "4"}, {"description": "The dialog allows the selection of file and directory.", "enum": "Access", "name": "ACCESS_RESOURCES", "value": "0"}, {"description": "The dialog allows access files under [Resource] path(res://) .", "enum": "Access", "name": "ACCESS_USERDATA", "value": "1"}, {"description": "The dialog allows access files in whole file system.", "enum": "Access", "name": "ACCESS_FILESYSTEM", "value": "2"}], "demos": {"links": []}, "description": "FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks.", "inherits": "ConfirmationDialog", "members": [{"description": "", "getter": "get_access", "name": "access", "setter": "set_access", "type": "int"}, {"description": "The current working directory of the file dialog.", "getter": "get_current_dir", "name": "current_dir", "setter": "set_current_dir", "type": "String"}, {"description": "The currently selected file of the file dialog.", "getter": "get_current_file", "name": "current_file", "setter": "set_current_file", "type": "String"}, {"description": "The currently selected file path of the file dialog.", "getter": "get_current_path", "name": "current_path", "setter": "set_current_path", "type": "String"}, {"description": "", "getter": "get_filters", "name": "filters", "setter": "set_filters", "type": "PoolStringArray"}, {"description": "", "getter": "get_mode", "name": "mode", "setter": "set_mode", "type": "int"}, {"description": "If [code]true[/code], changing the [code]mode[/code] property will set the window title accordingly (e. g. setting mode to [code]MODE_OPEN_FILE[/code] will change the window title to \"Open a File\").", "getter": "is_mode_overriding_title", "name": "mode_overrides_title", "setter": "set_mode_overrides_title", "type": "bool"}, {"description": "", "getter": "is_showing_hidden_files", "name": "show_hidden_files", "setter": "set_show_hidden_files", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "filter", "type": "String"}], "description": "Add a custom filter. Filter format is: \"mask ; description\", example (C++): dialog->add_filter(\"*.png ; PNG Images\");", "name": "add_filter", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clear all the added filters in the dialog.", "name": "clear_filters", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "deselect_items", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_line_edit", "return_": {"description": "", "type": "LineEdit"}}, {"arguments": [], "description": "Return the vertical box container of the dialog, custom controls can be added to it.", "name": "get_vbox", "return_": {"description": "", "type": "VBoxContainer"}}, {"arguments": [], "description": "Invalidate and update the current dialog content list.", "name": "invalidate", "return_": {"description": "", "type": "void"}}], "name": "FileDialog", "signals": [{"arguments": [{"description": "", "index": "0", "name": "dir", "type": "String"}], "description": "Event emitted when the user selects a directory.", "name": "dir_selected"}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Event emitted when the user selects a file (double clicks it or presses the OK button).", "name": "file_selected"}, {"arguments": [{"description": "", "index": "0", "name": "paths", "type": "PoolStringArray"}], "description": "Event emitted when the user selects multiple files.", "name": "files_selected"}], "tutorials": {"links": []}}, "Font": {"brief_description": "Internationalized font and text drawing support.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Font contains a unicode compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts. TODO check wikipedia for graph of ascent/baseline/descent/height/etc.", "inherits": "Resource", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "canvas_item", "type": "RID"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}, {"description": "", "index": "2", "name": "string", "type": "String"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "3", "name": "modulate", "type": "Color"}, {"default": "-1", "description": "", "index": "4", "name": "clip_w", "type": "int"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "5", "name": "outline_modulate", "type": "Color"}], "description": "Draw \"string\" into a canvas item using the font at a given position, with \"modulate\" color, and optionally clipping the width. \"position\" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis.", "name": "draw", "qualifiers": "const", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "canvas_item", "type": "RID"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}, {"description": "", "index": "2", "name": "char", "type": "int"}, {"default": "-1", "description": "", "index": "3", "name": "next", "type": "int"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "4", "name": "modulate", "type": "Color"}, {"default": "false", "description": "", "index": "5", "name": "outline", "type": "bool"}], "description": "Draw character \"char\" into a canvas item using the font at a given position, with \"modulate\" color, and optionally kerning if \"next\" is passed. clipping the width. \"position\" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.", "name": "draw_char", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Return the font ascent (number of pixels above the baseline).", "name": "get_ascent", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Return the font descent (number of pixels below the baseline).", "name": "get_descent", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Return the total font height (ascent plus descent) in pixels.", "name": "get_height", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "string", "type": "String"}], "description": "Return the size of a string, taking kerning and advance into account.", "name": "get_string_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "", "name": "has_outline", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "is_distance_field_hint", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it.", "name": "update_changes", "return_": {"description": "", "type": "void"}}], "name": "Font", "signals": [], "tutorials": {"links": []}}, "FuncRef": {"brief_description": "Reference to a function in an object.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "In GDScript, functions are not [i]first-class objects[/i]. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments.\n\t\tHowever, by creating a [code]FuncRef[/code] using the [method @GDScript.funcref] function, a reference to a function in a given object can be created, passed around and called.", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "Calls the referenced function previously set by [method set_function] or [method @GDScript.funcref].", "name": "call_func", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "The name of the referenced function to call on the object, without parentheses or any parameters.", "name": "set_function", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "Object"}], "description": "The object containing the referenced function. This object must be of a type actually inheriting from [Object], not a built-in type such as [int], [Vector2] or [Dictionary].", "name": "set_instance", "return_": {"description": "", "type": "void"}}], "name": "FuncRef", "signals": [], "tutorials": {"links": []}}, "GIProbe": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Subdiv", "name": "SUBDIV_64", "value": "0"}, {"description": "", "enum": "Subdiv", "name": "SUBDIV_128", "value": "1"}, {"description": "", "enum": "Subdiv", "name": "SUBDIV_256", "value": "2"}, {"description": "", "enum": "Subdiv", "name": "SUBDIV_512", "value": "3"}, {"description": "", "enum": "Subdiv", "name": "SUBDIV_MAX", "value": "4"}], "demos": {"links": []}, "description": "", "inherits": "VisualInstance", "members": [{"description": "", "getter": "get_bias", "name": "bias", "setter": "set_bias", "type": "float"}, {"description": "", "getter": "is_compressed", "name": "compress", "setter": "set_compress", "type": "bool"}, {"description": "", "getter": "get_probe_data", "name": "data", "setter": "set_probe_data", "type": "GIProbeData"}, {"description": "", "getter": "get_dynamic_range", "name": "dynamic_range", "setter": "set_dynamic_range", "type": "int"}, {"description": "", "getter": "get_energy", "name": "energy", "setter": "set_energy", "type": "float"}, {"description": "", "getter": "get_extents", "name": "extents", "setter": "set_extents", "type": "Vector3"}, {"description": "", "getter": "is_interior", "name": "interior", "setter": "set_interior", "type": "bool"}, {"description": "", "getter": "get_normal_bias", "name": "normal_bias", "setter": "set_normal_bias", "type": "float"}, {"description": "", "getter": "get_propagation", "name": "propagation", "setter": "set_propagation", "type": "float"}, {"description": "", "getter": "get_subdiv", "name": "subdiv", "setter": "set_subdiv", "type": "int"}], "methods": [{"arguments": [{"default": "null", "description": "", "index": "0", "name": "from_node", "type": "Node"}, {"default": "false", "description": "", "index": "1", "name": "create_visual_debug", "type": "bool"}], "description": "", "name": "bake", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "debug_bake", "return_": {"description": "", "type": "void"}}], "name": "GIProbe", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/gi_probes.html"}]}}, "GIProbeData": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [{"description": "", "getter": "get_bias", "name": "bias", "setter": "set_bias", "type": "float"}, {"description": "", "getter": "get_bounds", "name": "bounds", "setter": "set_bounds", "type": "AABB"}, {"description": "", "getter": "get_cell_size", "name": "cell_size", "setter": "set_cell_size", "type": "float"}, {"description": "", "getter": "is_compressed", "name": "compress", "setter": "set_compress", "type": "bool"}, {"description": "", "getter": "get_dynamic_data", "name": "dynamic_data", "setter": "set_dynamic_data", "type": "PoolIntArray"}, {"description": "", "getter": "get_dynamic_range", "name": "dynamic_range", "setter": "set_dynamic_range", "type": "int"}, {"description": "", "getter": "get_energy", "name": "energy", "setter": "set_energy", "type": "float"}, {"description": "", "getter": "is_interior", "name": "interior", "setter": "set_interior", "type": "bool"}, {"description": "", "getter": "get_normal_bias", "name": "normal_bias", "setter": "set_normal_bias", "type": "float"}, {"description": "", "getter": "get_propagation", "name": "propagation", "setter": "set_propagation", "type": "float"}, {"description": "", "getter": "get_to_cell_xform", "name": "to_cell_xform", "setter": "set_to_cell_xform", "type": "Transform"}], "methods": [], "name": "GIProbeData", "signals": [], "tutorials": {"links": []}}, "Generic6DOFJoint": {"brief_description": "The generic 6 degrees of freedom joint can implement a variety of joint-types by locking certain axes' rotation or translation.", "category": "Core", "constants": [{"description": "The minimum difference between the pivot points' axes.", "enum": "Param", "name": "PARAM_LINEAR_LOWER_LIMIT", "value": "0"}, {"description": "The maximum difference between the pivot points' axes.", "enum": "Param", "name": "PARAM_LINEAR_UPPER_LIMIT", "value": "1"}, {"description": "A factor applied to the movement across the axes The lower, the slower the movement.", "enum": "Param", "name": "PARAM_LINEAR_LIMIT_SOFTNESS", "value": "2"}, {"description": "The amount of restitution on the axes movement The lower, the more momentum gets lost.", "enum": "Param", "name": "PARAM_LINEAR_RESTITUTION", "value": "3"}, {"description": "The amount of damping that happens at the linear motion across the axes.", "enum": "Param", "name": "PARAM_LINEAR_DAMPING", "value": "4"}, {"description": "The velocity the linear motor will try to reach.", "enum": "Param", "name": "PARAM_LINEAR_MOTOR_TARGET_VELOCITY", "value": "5"}, {"description": "The maximum force the linear motor will apply while trying to reach the velocity target.", "enum": "Param", "name": "PARAM_LINEAR_MOTOR_FORCE_LIMIT", "value": "6"}, {"description": "The minimum rotation in negative direction to break loose and rotate around the axes.", "enum": "Param", "name": "PARAM_ANGULAR_LOWER_LIMIT", "value": "7"}, {"description": "The minimum rotation in positive direction to break loose and rotate around the axes.", "enum": "Param", "name": "PARAM_ANGULAR_UPPER_LIMIT", "value": "8"}, {"description": "The speed of all rotations across the axes.", "enum": "Param", "name": "PARAM_ANGULAR_LIMIT_SOFTNESS", "value": "9"}, {"description": "The amount of rotational damping across the axes. The lower, the more dampening occurs.", "enum": "Param", "name": "PARAM_ANGULAR_DAMPING", "value": "10"}, {"description": "The amount of rotational restitution across the axes. The lower, the more restitution occurs.", "enum": "Param", "name": "PARAM_ANGULAR_RESTITUTION", "value": "11"}, {"description": "The maximum amount of force that can occur, when rotating around the axes.", "enum": "Param", "name": "PARAM_ANGULAR_FORCE_LIMIT", "value": "12"}, {"description": "When rotating across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.", "enum": "Param", "name": "PARAM_ANGULAR_ERP", "value": "13"}, {"description": "Target speed for the motor at the axes.", "enum": "Param", "name": "PARAM_ANGULAR_MOTOR_TARGET_VELOCITY", "value": "14"}, {"description": "Maximum acceleration for the motor at the axes.", "enum": "Param", "name": "PARAM_ANGULAR_MOTOR_FORCE_LIMIT", "value": "15"}, {"description": "End flag of PARAM_* constants, used internally.", "enum": "Param", "name": "PARAM_MAX", "value": "16"}, {"description": "If [code]set[/code] there is linear motion possible within the given limits.", "enum": "Flag", "name": "FLAG_ENABLE_LINEAR_LIMIT", "value": "0"}, {"description": "If [code]set[/code] there is rotational motion possible.", "enum": "Flag", "name": "FLAG_ENABLE_ANGULAR_LIMIT", "value": "1"}, {"description": "If [code]set[/code] there is a rotational motor across these axes.", "enum": "Flag", "name": "FLAG_ENABLE_MOTOR", "value": "2"}, {"description": "", "enum": "Flag", "name": "FLAG_ENABLE_LINEAR_MOTOR", "value": "3"}, {"description": "End flag of FLAG_* constants, used internally.", "enum": "Flag", "name": "FLAG_MAX", "value": "4"}], "demos": {"links": []}, "description": "The first 3 DOF axes are linear axes, which represent translation of Bodies, and the latter 3 DOF axes represent the angular motion. Each axis can be either locked, or limited.", "inherits": "Joint", "members": [{"description": "The amount of rotational damping across the x-axis.\n\t\t\tThe lower, the longer an impulse from one side takes to travel to the other side.", "getter": "get_param_x", "name": "angular_limit_x/damping", "setter": "set_param_x", "type": "float"}, {"description": "If [code]true[/code] rotation across the x-axis is limited.", "getter": "get_flag_x", "name": "angular_limit_x/enabled", "setter": "set_flag_x", "type": "bool"}, {"description": "When rotating across x-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.", "getter": "get_param_x", "name": "angular_limit_x/erp", "setter": "set_param_x", "type": "float"}, {"description": "The maximum amount of force that can occur, when rotating around x-axis.", "getter": "get_param_x", "name": "angular_limit_x/force_limit", "setter": "set_param_x", "type": "float"}, {"description": "The minimum rotation in negative direction to break loose and rotate around the x-axis.", "getter": "_get_angular_lo_limit_x", "name": "angular_limit_x/lower_angle", "setter": "_set_angular_lo_limit_x", "type": "float"}, {"description": "The amount of rotational restitution across the x-axis. The lower, the more restitution occurs.", "getter": "get_param_x", "name": "angular_limit_x/restitution", "setter": "set_param_x", "type": "float"}, {"description": "The speed of all rotations across the x-axis.", "getter": "get_param_x", "name": "angular_limit_x/softness", "setter": "set_param_x", "type": "float"}, {"description": "The minimum rotation in positive direction to break loose and rotate around the x-axis.", "getter": "_get_angular_hi_limit_x", "name": "angular_limit_x/upper_angle", "setter": "_set_angular_hi_limit_x", "type": "float"}, {"description": "The amount of rotational damping across the y-axis. The lower, the more dampening occurs.", "getter": "get_param_y", "name": "angular_limit_y/damping", "setter": "set_param_y", "type": "float"}, {"description": "If [code]true[/code] rotation across the y-axis is limited.", "getter": "get_flag_y", "name": "angular_limit_y/enabled", "setter": "set_flag_y", "type": "bool"}, {"description": "When rotating across y-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.", "getter": "get_param_y", "name": "angular_limit_y/erp", "setter": "set_param_y", "type": "float"}, {"description": "The maximum amount of force that can occur, when rotating around y-axis.", "getter": "get_param_y", "name": "angular_limit_y/force_limit", "setter": "set_param_y", "type": "float"}, {"description": "The minimum rotation in negative direction to break loose and rotate around the y-axis.", "getter": "_get_angular_lo_limit_y", "name": "angular_limit_y/lower_angle", "setter": "_set_angular_lo_limit_y", "type": "float"}, {"description": "The amount of rotational restitution across the y-axis. The lower, the more restitution occurs.", "getter": "get_param_y", "name": "angular_limit_y/restitution", "setter": "set_param_y", "type": "float"}, {"description": "The speed of all rotations across the y-axis.", "getter": "get_param_y", "name": "angular_limit_y/softness", "setter": "set_param_y", "type": "float"}, {"description": "The minimum rotation in positive direction to break loose and rotate around the y-axis.", "getter": "_get_angular_hi_limit_y", "name": "angular_limit_y/upper_angle", "setter": "_set_angular_hi_limit_y", "type": "float"}, {"description": "The amount of rotational damping across the z-axis. The lower, the more dampening occurs.", "getter": "get_param_z", "name": "angular_limit_z/damping", "setter": "set_param_z", "type": "float"}, {"description": "If [code]true[/code] rotation across the z-axis is limited.", "getter": "get_flag_z", "name": "angular_limit_z/enabled", "setter": "set_flag_z", "type": "bool"}, {"description": "When rotating across z-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.", "getter": "get_param_z", "name": "angular_limit_z/erp", "setter": "set_param_z", "type": "float"}, {"description": "The maximum amount of force that can occur, when rotating around z-axis.", "getter": "get_param_z", "name": "angular_limit_z/force_limit", "setter": "set_param_z", "type": "float"}, {"description": "The minimum rotation in negative direction to break loose and rotate around the z-axis.", "getter": "_get_angular_lo_limit_z", "name": "angular_limit_z/lower_angle", "setter": "_set_angular_lo_limit_z", "type": "float"}, {"description": "The amount of rotational restitution across the z-axis. The lower, the more restitution occurs.", "getter": "get_param_z", "name": "angular_limit_z/restitution", "setter": "set_param_z", "type": "float"}, {"description": "The speed of all rotations across the z-axis.", "getter": "get_param_z", "name": "angular_limit_z/softness", "setter": "set_param_z", "type": "float"}, {"description": "The minimum rotation in positive direction to break loose and rotate around the z-axis.", "getter": "_get_angular_hi_limit_z", "name": "angular_limit_z/upper_angle", "setter": "_set_angular_hi_limit_z", "type": "float"}, {"description": "If [code]true[/code] a rotating motor at the x-axis is enabled.", "getter": "get_flag_x", "name": "angular_motor_x/enabled", "setter": "set_flag_x", "type": "bool"}, {"description": "Maximum acceleration for the motor at the x-axis.", "getter": "get_param_x", "name": "angular_motor_x/force_limit", "setter": "set_param_x", "type": "float"}, {"description": "Target speed for the motor at the x-axis.", "getter": "get_param_x", "name": "angular_motor_x/target_velocity", "setter": "set_param_x", "type": "float"}, {"description": "If [code]true[/code] a rotating motor at the y-axis is enabled.", "getter": "get_flag_y", "name": "angular_motor_y/enabled", "setter": "set_flag_y", "type": "bool"}, {"description": "Maximum acceleration for the motor at the y-axis.", "getter": "get_param_y", "name": "angular_motor_y/force_limit", "setter": "set_param_y", "type": "float"}, {"description": "Target speed for the motor at the y-axis.", "getter": "get_param_y", "name": "angular_motor_y/target_velocity", "setter": "set_param_y", "type": "float"}, {"description": "If [code]true[/code] a rotating motor at the z-axis is enabled.", "getter": "get_flag_z", "name": "angular_motor_z/enabled", "setter": "set_flag_z", "type": "bool"}, {"description": "Maximum acceleration for the motor at the z-axis.", "getter": "get_param_z", "name": "angular_motor_z/force_limit", "setter": "set_param_z", "type": "float"}, {"description": "Target speed for the motor at the z-axis.", "getter": "get_param_z", "name": "angular_motor_z/target_velocity", "setter": "set_param_z", "type": "float"}, {"description": "The amount of damping that happens at the x-motion.", "getter": "get_param_x", "name": "linear_limit_x/damping", "setter": "set_param_x", "type": "float"}, {"description": "If [code]true[/code] the linear motion across the x-axis is limited.", "getter": "get_flag_x", "name": "linear_limit_x/enabled", "setter": "set_flag_x", "type": "bool"}, {"description": "The minimum difference between the pivot points' x-axis.", "getter": "get_param_x", "name": "linear_limit_x/lower_distance", "setter": "set_param_x", "type": "float"}, {"description": "The amount of restitution on the x-axis movement The lower, the more momentum gets lost.", "getter": "get_param_x", "name": "linear_limit_x/restitution", "setter": "set_param_x", "type": "float"}, {"description": "A factor applied to the movement across the x-axis The lower, the slower the movement.", "getter": "get_param_x", "name": "linear_limit_x/softness", "setter": "set_param_x", "type": "float"}, {"description": "The maximum difference between the pivot points' x-axis.", "getter": "get_param_x", "name": "linear_limit_x/upper_distance", "setter": "set_param_x", "type": "float"}, {"description": "The amount of damping that happens at the y-motion.", "getter": "get_param_y", "name": "linear_limit_y/damping", "setter": "set_param_y", "type": "float"}, {"description": "If [code]true[/code] the linear motion across the y-axis is limited.", "getter": "get_flag_y", "name": "linear_limit_y/enabled", "setter": "set_flag_y", "type": "bool"}, {"description": "The minimum difference between the pivot points' y-axis.", "getter": "get_param_y", "name": "linear_limit_y/lower_distance", "setter": "set_param_y", "type": "float"}, {"description": "The amount of restitution on the y-axis movement The lower, the more momentum gets lost.", "getter": "get_param_y", "name": "linear_limit_y/restitution", "setter": "set_param_y", "type": "float"}, {"description": "A factor applied to the movement across the y-axis The lower, the slower the movement.", "getter": "get_param_y", "name": "linear_limit_y/softness", "setter": "set_param_y", "type": "float"}, {"description": "The maximum difference between the pivot points' y-axis.", "getter": "get_param_y", "name": "linear_limit_y/upper_distance", "setter": "set_param_y", "type": "float"}, {"description": "The amount of damping that happens at the z-motion.", "getter": "get_param_z", "name": "linear_limit_z/damping", "setter": "set_param_z", "type": "float"}, {"description": "If [code]true[/code] the linear motion across the z-axis is limited.", "getter": "get_flag_z", "name": "linear_limit_z/enabled", "setter": "set_flag_z", "type": "bool"}, {"description": "The minimum difference between the pivot points' z-axis.", "getter": "get_param_z", "name": "linear_limit_z/lower_distance", "setter": "set_param_z", "type": "float"}, {"description": "The amount of restitution on the z-axis movement The lower, the more momentum gets lost.", "getter": "get_param_z", "name": "linear_limit_z/restitution", "setter": "set_param_z", "type": "float"}, {"description": "A factor applied to the movement across the z-axis The lower, the slower the movement.", "getter": "get_param_z", "name": "linear_limit_z/softness", "setter": "set_param_z", "type": "float"}, {"description": "The maximum difference between the pivot points' z-axis.", "getter": "get_param_z", "name": "linear_limit_z/upper_distance", "setter": "set_param_z", "type": "float"}, {"description": "If [code]true[/code] then there is a linear motor on the x-axis. It will attempt to reach the target velocity while staying within the force limits.", "getter": "get_flag_x", "name": "linear_motor_x/enabled", "setter": "set_flag_x", "type": "bool"}, {"description": "The maximum force the linear motor can apply on the x-axis while trying to reach the target velocity.", "getter": "get_param_x", "name": "linear_motor_x/force_limit", "setter": "set_param_x", "type": "float"}, {"description": "The speed that the linear motor will attempt to reach on the x-axis.", "getter": "get_param_x", "name": "linear_motor_x/target_velocity", "setter": "set_param_x", "type": "float"}, {"description": "If [code]true[/code] then there is a linear motor on the y-axis. It will attempt to reach the target velocity while staying within the force limits.", "getter": "get_flag_y", "name": "linear_motor_y/enabled", "setter": "set_flag_y", "type": "bool"}, {"description": "The maximum force the linear motor can apply on the y-axis while trying to reach the target velocity.", "getter": "get_param_y", "name": "linear_motor_y/force_limit", "setter": "set_param_y", "type": "float"}, {"description": "The speed that the linear motor will attempt to reach on the y-axis.", "getter": "get_param_y", "name": "linear_motor_y/target_velocity", "setter": "set_param_y", "type": "float"}, {"description": "If [code]true[/code] then there is a linear motor on the z-axis. It will attempt to reach the target velocity while staying within the force limits.", "getter": "get_flag_z", "name": "linear_motor_z/enabled", "setter": "set_flag_z", "type": "bool"}, {"description": "The maximum force the linear motor can apply on the z-axis while trying to reach the target velocity.", "getter": "get_param_z", "name": "linear_motor_z/force_limit", "setter": "set_param_z", "type": "float"}, {"description": "The speed that the linear motor will attempt to reach on the z-axis.", "getter": "get_param_z", "name": "linear_motor_z/target_velocity", "setter": "set_param_z", "type": "float"}], "methods": [], "name": "Generic6DOFJoint", "signals": [], "tutorials": {"links": []}}, "Geometry": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "extents", "type": "Vector3"}], "description": "Returns an array with 6 [Plane]s that describe the sides of a box centered at the origin. The box size is defined by [code]extents[/code], which represents one (positive) corner of the box (i.e. half its actual size).", "name": "build_box_planes", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "radius", "type": "float"}, {"description": "", "index": "1", "name": "height", "type": "float"}, {"description": "", "index": "2", "name": "sides", "type": "int"}, {"description": "", "index": "3", "name": "lats", "type": "int"}, {"default": "2", "description": "", "index": "4", "name": "axis", "type": "int"}], "description": "Returns an array of [Plane]s closely bounding a faceted capsule centered at the origin with radius [code]radius[/code] and height [code]height[/code]. The parameter [code]sides[/code] defines how many planes will be generated for the side part of the capsule, whereas [code]lats[/code] gives the number of latitudinal steps at the bottom and top of the capsule. The parameter [code]axis[/code] describes the axis along which the capsule is oriented (0 for X, 1 for Y, 2 for Z).", "name": "build_capsule_planes", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "radius", "type": "float"}, {"description": "", "index": "1", "name": "height", "type": "float"}, {"description": "", "index": "2", "name": "sides", "type": "int"}, {"default": "2", "description": "", "index": "3", "name": "axis", "type": "int"}], "description": "Returns an array of [Plane]s closely bounding a faceted cylinder centered at the origin with radius [code]radius[/code] and height [code]height[/code]. The parameter [code]sides[/code] defines how many planes will be generated for the round part of the cylinder. The parameter [code]axis[/code] describes the axis along which the cylinder is oriented (0 for X, 1 for Y, 2 for Z).", "name": "build_cylinder_planes", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "points", "type": "PoolVector3Array"}, {"description": "", "index": "1", "name": "plane", "type": "Plane"}], "description": "Clips the polygon defined by the points in [code]points[/code] against the [code]plane[/code] and returns the points of the clipped polygon.", "name": "clip_polygon", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "points", "type": "PoolVector2Array"}], "description": "Given an array of [Vector2]s, returns the convex hull as a list of points in counter-clockwise order. The last point is the same as the first one.", "name": "convex_hull_2d", "return_": {"description": "", "type": "PoolVector2Array"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector3"}, {"description": "", "index": "1", "name": "s1", "type": "Vector3"}, {"description": "", "index": "2", "name": "s2", "type": "Vector3"}], "description": "Returns the 3d point on the 3d segment ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point will always be inside the specified segment.", "name": "get_closest_point_to_segment", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}, {"description": "", "index": "1", "name": "s1", "type": "Vector2"}, {"description": "", "index": "2", "name": "s2", "type": "Vector2"}], "description": "Returns the 2d point on the 2d segment ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point will always be inside the specified segment.", "name": "get_closest_point_to_segment_2d", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector3"}, {"description": "", "index": "1", "name": "s1", "type": "Vector3"}, {"description": "", "index": "2", "name": "s2", "type": "Vector3"}], "description": "Returns the 3d point on the 3d line defined by ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point can be inside the segment ([code]s1[/code], [code]s2[/code]) or outside of it, i.e. somewhere on the line extending from the segment.", "name": "get_closest_point_to_segment_uncapped", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}, {"description": "", "index": "1", "name": "s1", "type": "Vector2"}, {"description": "", "index": "2", "name": "s2", "type": "Vector2"}], "description": "Returns the 2d point on the 2d line defined by ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point can be inside the segment ([code]s1[/code], [code]s2[/code]) or outside of it, i.e. somewhere on the line extending from the segment.", "name": "get_closest_point_to_segment_uncapped_2d", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "p1", "type": "Vector3"}, {"description": "", "index": "1", "name": "p2", "type": "Vector3"}, {"description": "", "index": "2", "name": "q1", "type": "Vector3"}, {"description": "", "index": "3", "name": "q2", "type": "Vector3"}], "description": "Given the two 3d segments ([code]p1[/code], [code]p2[/code]) and ([code]q1[/code], [code]q2[/code]), finds those two points on the two segments that are closest to each other. Returns a [PoolVector3Array] that contains this point on ([code]p1[/code], [code]p2[/code]) as well the accompanying point on ([code]q1[/code], [code]q2[/code]).", "name": "get_closest_points_between_segments", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "p1", "type": "Vector2"}, {"description": "", "index": "1", "name": "q1", "type": "Vector2"}, {"description": "", "index": "2", "name": "p2", "type": "Vector2"}, {"description": "", "index": "3", "name": "q2", "type": "Vector2"}], "description": "Given the two 2d segments ([code]p1[/code], [code]p2[/code]) and ([code]q1[/code], [code]q2[/code]), finds those two points on the two segments that are closest to each other. Returns a [PoolVector2Array] that contains this point on ([code]p1[/code], [code]p2[/code]) as well the accompanying point on ([code]q1[/code], [code]q2[/code]).", "name": "get_closest_points_between_segments_2d", "return_": {"description": "", "type": "PoolVector2Array"}}, {"arguments": [{"description": "", "index": "0", "name": "normal", "type": "Vector3"}], "description": "", "name": "get_uv84_normal_bit", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "from_a", "type": "Vector2"}, {"description": "", "index": "1", "name": "dir_a", "type": "Vector2"}, {"description": "", "index": "2", "name": "from_b", "type": "Vector2"}, {"description": "", "index": "3", "name": "dir_b", "type": "Vector2"}], "description": "Checks if the two lines ([code]from_a[/code], [code]dir_a[/code]) and ([code]from_b[/code], [code]dir_b[/code]) intersect. If yes, return the point of intersection as [Vector2]. If no intersection takes place, returns an empty [Variant]. Note that the lines are specified using direction vectors, not end points.", "name": "line_intersects_line_2d", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "sizes", "type": "PoolVector2Array"}], "description": "Given an array of [Vector2]s representing tiles, builds an atlas. The returned dictionary has two keys: [code]points[/code] is a vector of [Vector2] that specifies the positions of each tile, [code]size[/code] contains the overall size of the whole atlas as [Vector2].", "name": "make_atlas", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}, {"description": "", "index": "1", "name": "a", "type": "Vector2"}, {"description": "", "index": "2", "name": "b", "type": "Vector2"}, {"description": "", "index": "3", "name": "c", "type": "Vector2"}], "description": "Returns if [code]point[/code] is inside the triangle specified by [code]a[/code], [code]b[/code] and [code]c[/code].", "name": "point_is_inside_triangle", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}, {"description": "", "index": "1", "name": "dir", "type": "Vector3"}, {"description": "", "index": "2", "name": "a", "type": "Vector3"}, {"description": "", "index": "3", "name": "b", "type": "Vector3"}, {"description": "", "index": "4", "name": "c", "type": "Vector3"}], "description": "Tests if the 3d ray starting at [code]from[/code] with the direction of [code]dir[/code] intersects the triangle specified by [code]a[/code], [code]b[/code] and [code]c[/code]. If yes, returns the point of intersection as [Vector3]. If no intersection takes place, an empty [Variant] is returned.", "name": "ray_intersects_triangle", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "segment_from", "type": "Vector2"}, {"description": "", "index": "1", "name": "segment_to", "type": "Vector2"}, {"description": "", "index": "2", "name": "circle_position", "type": "Vector2"}, {"description": "", "index": "3", "name": "circle_radius", "type": "float"}], "description": "Given the 2d segment ([code]segment_from[/code], [code]segment_to[/code]), returns the position on the segment (as a number between 0 and 1) at which the segment hits the circle that is located at position [code]circle_position[/code] and has radius [code]circle_radius[/code]. If the segment does not intersect the circle, -1 is returned (this is also the case if the line extending the segment would intersect the circle, but the segment does not).", "name": "segment_intersects_circle", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}, {"description": "", "index": "1", "name": "to", "type": "Vector3"}, {"description": "", "index": "2", "name": "planes", "type": "Array"}], "description": "Given a convex hull defined though the [Plane]s in the array [code]planes[/code], tests if the segment ([code]from[/code], [code]to[/code]) intersects with that hull. If an intersection is found, returns a [PoolVector3Array] containing the point the intersection and the hull's normal. If no intersecion is found, an the returned array is empty.", "name": "segment_intersects_convex", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}, {"description": "", "index": "1", "name": "to", "type": "Vector3"}, {"description": "", "index": "2", "name": "height", "type": "float"}, {"description": "", "index": "3", "name": "radius", "type": "float"}], "description": "Checks if the segment ([code]from[/code], [code]to[/code]) intersects the cylinder with height [code]height[/code] that is centered at the origin and has radius [code]radius[/code]. If no, returns an empty [PoolVector3Array]. If an intersection takes place, the returned array contains the point of intersection and the cylinder's normal at the point of intersection.", "name": "segment_intersects_cylinder", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from_a", "type": "Vector2"}, {"description": "", "index": "1", "name": "to_a", "type": "Vector2"}, {"description": "", "index": "2", "name": "from_b", "type": "Vector2"}, {"description": "", "index": "3", "name": "to_b", "type": "Vector2"}], "description": "Checks if the two segments ([code]from_a[/code], [code]to_a[/code]) and ([code]from_b[/code], [code]to_b[/code]) intersect. If yes, return the point of intersection as [Vector2]. If no intersection takes place, returns an empty [Variant].", "name": "segment_intersects_segment_2d", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}, {"description": "", "index": "1", "name": "to", "type": "Vector3"}, {"description": "", "index": "2", "name": "sphere_position", "type": "Vector3"}, {"description": "", "index": "3", "name": "sphere_radius", "type": "float"}], "description": "Checks if the segment ([code]from[/code], [code]to[/code]) intersects the sphere that is located at [code]sphere_position[/code] and has radius [code]sphere_radius[/code]. If no, returns an empty [PoolVector3Array]. If yes, returns a [PoolVector3Array] containing the point of intersection and the sphere's normal at the point of intersection.", "name": "segment_intersects_sphere", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}, {"description": "", "index": "1", "name": "to", "type": "Vector3"}, {"description": "", "index": "2", "name": "a", "type": "Vector3"}, {"description": "", "index": "3", "name": "b", "type": "Vector3"}, {"description": "", "index": "4", "name": "c", "type": "Vector3"}], "description": "Tests if the segment ([code]from[/code], [code]to[/code]) intersects the triangle [code]a[/code], [code]b[/code], [code]c[/code]. If yes, returns the point of intersection as [Vector3]. If no intersection takes place, an empty [Variant] is returned.", "name": "segment_intersects_triangle", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "polygon", "type": "PoolVector2Array"}], "description": "Triangulates the polygon specified by the points in [code]polygon[/code]. Returns a [PoolIntArray] where each triangle consists of three consecutive point indices into [code]polygon[/code] (i.e. the returned array will have [code]n * 3[/code] elements, with [code]n[/code] being the number of found triangles). If the triangulation did not succeed, an empty [PoolIntArray] is returned.", "name": "triangulate_polygon", "return_": {"description": "", "type": "PoolIntArray"}}], "name": "Geometry", "signals": [], "tutorials": {"links": []}}, "GeometryInstance": {"brief_description": "Base node for geometry based visual instances.", "category": "Core", "constants": [{"description": "Will not cast any shadows.", "enum": "ShadowCastingSetting", "name": "SHADOW_CASTING_SETTING_OFF", "value": "0"}, {"description": "Will cast shadows from all visible faces in the GeometryInstance.\n\t\t\tWill take culling into account, so faces not being rendered will not be taken into account when shadow casting.", "enum": "ShadowCastingSetting", "name": "SHADOW_CASTING_SETTING_ON", "value": "1"}, {"description": "Will cast shadows from all visible faces in the GeometryInstance.\n\t\t\tWill not take culling into account, so all faces will be taken into account when shadow casting.", "enum": "ShadowCastingSetting", "name": "SHADOW_CASTING_SETTING_DOUBLE_SIDED", "value": "2"}, {"description": "Will only show the shadows casted from this object.\n\t\t\tIn other words: The actual mesh will not be visible, only the shadows casted from the mesh.", "enum": "ShadowCastingSetting", "name": "SHADOW_CASTING_SETTING_SHADOWS_ONLY", "value": "3"}, {"description": "Will allow the GeometryInstance to be used when baking lights using a [GIProbe] and/or any other form of baked lighting.\n\t\t\tAdded documentation for GeometryInstance and VisualInstance", "enum": "Flags", "name": "FLAG_USE_BAKED_LIGHT", "value": "0"}, {"description": "", "enum": "Flags", "name": "FLAG_MAX", "value": "2"}], "demos": {"links": []}, "description": "Base node for geometry based visual instances. Shares some common functionality like visibility and custom materials.", "inherits": "VisualInstance", "members": [{"description": "The selected shadow casting flag. See SHADOW_CASTING_SETTING_* constants for values.", "getter": "get_cast_shadows_setting", "name": "cast_shadow", "setter": "set_cast_shadows_setting", "type": "int"}, {"description": "The extra distance added to the GeometryInstance's bounding box ([AABB]) to increase its cull box.", "getter": "get_extra_cull_margin", "name": "extra_cull_margin", "setter": "set_extra_cull_margin", "type": "float"}, {"description": "The GeometryInstance's max LOD distance.", "getter": "get_lod_max_distance", "name": "lod_max_distance", "setter": "set_lod_max_distance", "type": "float"}, {"description": "The GeometryInstance's max LOD margin.", "getter": "get_lod_max_hysteresis", "name": "lod_max_hysteresis", "setter": "set_lod_max_hysteresis", "type": "float"}, {"description": "The GeometryInstance's min LOD distance.", "getter": "get_lod_min_distance", "name": "lod_min_distance", "setter": "set_lod_min_distance", "type": "float"}, {"description": "The GeometryInstance's min LOD margin.", "getter": "get_lod_min_hysteresis", "name": "lod_min_hysteresis", "setter": "set_lod_min_hysteresis", "type": "float"}, {"description": "The material override for the whole geometry.\n\t\t\tIf there is a material in material_override, it will be used instead of any material set in any material slot of the mesh.", "getter": "get_material_override", "name": "material_override", "setter": "set_material_override", "type": "Material"}, {"description": "If [code]true[/code] this GeometryInstance will be used when baking lights using a [GIProbe] and/or any other form of baked lighting.", "getter": "get_flag", "name": "use_in_baked_light", "setter": "set_flag", "type": "bool"}], "methods": [], "name": "GeometryInstance", "signals": [], "tutorials": {"links": []}}, "Gradient": {"brief_description": "Color interpolator node.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Given a set of colors, this node will interpolate them in order, meaning, that if you have color 1, color 2 and color3, the ramp will interpolate (generate the colors between two colors) from color 1 to color 2 and from color 2 to color 3. Initially the ramp will have 2 colors (black and white), one (black) at ramp lower offset offset 0 and the other (white) at the ramp higher offset 1.", "inherits": "Resource", "members": [{"description": "Gradient's colors returned as a [PoolColorArray].", "getter": "get_colors", "name": "colors", "setter": "set_colors", "type": "PoolColorArray"}, {"description": "Gradient's offsets returned as a [PoolRealArray].", "getter": "get_offsets", "name": "offsets", "setter": "set_offsets", "type": "PoolRealArray"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "offset", "type": "float"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Adds the specified color to the end of the ramp, with the specified offset", "name": "add_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}], "description": "Returns the color of the ramp color at index [i]point[/i]", "name": "get_color", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}], "description": "Returns the offset of the ramp color at index [i]point[/i]", "name": "get_offset", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the number of colors in the ramp", "name": "get_point_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "float"}], "description": "Returns the interpolated color specified by [i]offset[/i]", "name": "interpolate", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "int"}], "description": "Removes the color at the index [i]offset[/i]", "name": "remove_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Sets the color of the ramp color at index [i]point[/i]", "name": "set_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "int"}, {"description": "", "index": "1", "name": "offset", "type": "float"}], "description": "Sets the offset for the ramp color at index [i]point[/i]", "name": "set_offset", "return_": {"description": "", "type": "void"}}], "name": "Gradient", "signals": [], "tutorials": {"links": []}}, "GradientTexture": {"brief_description": "Gradient filled texture.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Uses a [Gradient] to fill the texture data, the gradient will be filled from left to right using colors obtained from the gradient, this means that the texture does not necessarily represent an exact copy of the gradient, but instead an interpolation of samples obtained from the gradient at fixed steps (see [method set_width]).", "inherits": "Texture", "members": [{"description": "The [Gradient] that will be used to fill the texture.", "getter": "get_gradient", "name": "gradient", "setter": "set_gradient", "type": "Gradient"}, {"description": "The number of color samples that will be obtained from the [Gradient].", "getter": "get_width", "name": "width", "setter": "set_width", "type": "int"}], "methods": [], "name": "GradientTexture", "signals": [], "tutorials": {"links": []}}, "GraphEdit": {"brief_description": "GraphEdit is an area capable of showing various GraphNodes. It manages connection events between them.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNodes slots is disabled by default.\n\t\tIt is greatly advised to enable low processor usage mode (see [method OS.set_low_processor_usage_mode]) when using GraphEdits.", "inherits": "Control", "members": [{"description": "If [code]true[/code], enables disconnection of existing connections in the GraphEdit by dragging the right end.", "getter": "is_right_disconnects_enabled", "name": "right_disconnects", "setter": "set_right_disconnects", "type": "bool"}, {"description": "The scroll offset.", "getter": "get_scroll_ofs", "name": "scroll_offset", "setter": "set_scroll_ofs", "type": "Vector2"}, {"description": "The snapping distance in pixels.", "getter": "get_snap", "name": "snap_distance", "setter": "set_snap", "type": "int"}, {"description": "If [code]true[/code], enables snapping.", "getter": "is_using_snap", "name": "use_snap", "setter": "set_use_snap", "type": "bool"}, {"description": "The current zoom value.", "getter": "get_zoom", "name": "zoom", "setter": "set_zoom", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from_type", "type": "int"}, {"description": "", "index": "1", "name": "to_type", "type": "int"}], "description": "Makes possible the connection between two different slot types. The type is defined with the [method GraphNode.set_slot] method.", "name": "add_valid_connection_type", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}], "description": "Makes possible to disconnect nodes when dragging from the slot at the left if it has the specified type.", "name": "add_valid_left_disconnect_type", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}], "description": "Makes possible to disconnect nodes when dragging from the slot at the right if it has the specified type.", "name": "add_valid_right_disconnect_type", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Remove all connections between nodes.", "name": "clear_connections", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "from_port", "type": "int"}, {"description": "", "index": "2", "name": "to", "type": "String"}, {"description": "", "index": "3", "name": "to_port", "type": "int"}], "description": "Create a connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode. If the connection already exists, no connection is created.", "name": "connect_node", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "from_port", "type": "int"}, {"description": "", "index": "2", "name": "to", "type": "String"}, {"description": "", "index": "3", "name": "to_port", "type": "int"}], "description": "Remove the connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode, if connection exists.", "name": "disconnect_node", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return an Array containing the list of connections. A connection consists in a structure of the form {from_slot: 0, from: \"GraphNode name 0\", to_slot: 1, to: \"GraphNode name 1\" }", "name": "get_connection_list", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "", "name": "get_zoom_hbox", "return_": {"description": "", "type": "HBoxContainer"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "from_port", "type": "int"}, {"description": "", "index": "2", "name": "to", "type": "String"}, {"description": "", "index": "3", "name": "to_port", "type": "int"}], "description": "Return true if the 'from_port' slot of 'from' GraphNode is connected to the 'to_port' slot of 'to' GraphNode.", "name": "is_node_connected", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "from_type", "type": "int"}, {"description": "", "index": "1", "name": "to_type", "type": "int"}], "description": "Returns whether it's possible to connect slots of the specified types.", "name": "is_valid_connection_type", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "from_type", "type": "int"}, {"description": "", "index": "1", "name": "to_type", "type": "int"}], "description": "Makes it not possible to connect between two different slot types. The type is defined with the [method GraphNode.set_slot] method.", "name": "remove_valid_connection_type", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}], "description": "Removes the possibility to disconnect nodes when dragging from the slot at the left if it has the specified type.", "name": "remove_valid_left_disconnect_type", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}], "description": "Removes the possibility to disconnect nodes when dragging from the slot at the right if it has the specified type.", "name": "remove_valid_right_disconnect_type", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "from_port", "type": "int"}, {"description": "", "index": "2", "name": "to", "type": "String"}, {"description": "", "index": "3", "name": "to_port", "type": "int"}, {"description": "", "index": "4", "name": "amount", "type": "float"}], "description": "", "name": "set_connection_activity", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Sets the specified [code]node[/code] as the one selected.", "name": "set_selected", "return_": {"description": "", "type": "void"}}], "name": "GraphEdit", "signals": [{"arguments": [], "description": "Signal sent at the beginning of a GraphNode movement.", "name": "_begin_node_move"}, {"arguments": [], "description": "Signal sent at the end of a GraphNode movement.", "name": "_end_node_move"}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "from_slot", "type": "int"}, {"description": "", "index": "2", "name": "to", "type": "String"}, {"description": "", "index": "3", "name": "to_slot", "type": "int"}], "description": "Signal sent to the GraphEdit when the connection between 'from_slot' slot of 'from' GraphNode and 'to_slot' slot of 'to' GraphNode is attempted to be created.", "name": "connection_request"}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "from_slot", "type": "int"}, {"description": "", "index": "2", "name": "release_position", "type": "Vector2"}], "description": "", "name": "connection_to_empty"}, {"arguments": [], "description": "Signal sent when a GraphNode is attempted to be removed from the GraphEdit.", "name": "delete_nodes_request"}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}, {"description": "", "index": "1", "name": "from_slot", "type": "int"}, {"description": "", "index": "2", "name": "to", "type": "String"}, {"description": "", "index": "3", "name": "to_slot", "type": "int"}], "description": "Signal sent to the GraphEdit when the connection between 'from_slot' slot of 'from' GraphNode and 'to_slot' slot of 'to' GraphNode is attempted to be removed.", "name": "disconnection_request"}, {"arguments": [], "description": "Signal sent when a GraphNode is attempted to be duplicated in the GraphEdit.", "name": "duplicate_nodes_request"}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Emitted when a GraphNode is selected.", "name": "node_selected"}, {"arguments": [{"description": "", "index": "0", "name": "p_position", "type": "Vector2"}], "description": "Signal sent when a popup is requested. Happens on right-clicking in the GraphEdit. 'p_position' is the position of the mouse pointer when the signal is sent.", "name": "popup_request"}, {"arguments": [{"description": "", "index": "0", "name": "ofs", "type": "Vector2"}], "description": "", "name": "scroll_offset_changed"}], "tutorials": {"links": []}}, "GraphNode": {"brief_description": "A GraphNode is a container with several input and output slots allowing connections between GraphNodes. Slots can have different, incompatible types.", "category": "Core", "constants": [{"description": "", "enum": "Overlay", "name": "OVERLAY_DISABLED", "value": "0"}, {"description": "", "enum": "Overlay", "name": "OVERLAY_BREAKPOINT", "value": "1"}, {"description": "", "enum": "Overlay", "name": "OVERLAY_POSITION", "value": "2"}], "demos": {"links": []}, "description": "A GraphNode is a container defined by a title. It can have 1 or more input and output slots, which can be enabled (shown) or disabled (not shown) and have different (incompatible) types. Colors can also be assigned to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input and output connections are left and right slots, but only enabled slots are counted as connections.", "inherits": "Container", "members": [{"description": "", "getter": "is_comment", "name": "comment", "setter": "set_comment", "type": "bool"}, {"description": "The offset of the GraphNode, relative to the scroll offset of the [GraphEdit]. Note that you cannot use position directly, as [GraphEdit] is a [Container].", "getter": "get_offset", "name": "offset", "setter": "set_offset", "type": "Vector2"}, {"description": "", "getter": "get_overlay", "name": "overlay", "setter": "set_overlay", "type": "int"}, {"description": "", "getter": "is_resizable", "name": "resizable", "setter": "set_resizable", "type": "bool"}, {"description": "", "getter": "is_selected", "name": "selected", "setter": "set_selected", "type": "bool"}, {"description": "", "getter": "is_close_button_visible", "name": "show_close", "setter": "set_show_close_button", "type": "bool"}, {"description": "", "getter": "get_title", "name": "title", "setter": "set_title", "type": "String"}], "methods": [{"arguments": [], "description": "Disable all input and output slots of the GraphNode.", "name": "clear_all_slots", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Disable input and output slot whose index is 'idx'.", "name": "clear_slot", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the color of the input connection 'idx'.", "name": "get_connection_input_color", "return_": {"description": "", "type": "Color"}}, {"arguments": [], "description": "Return the number of enabled input slots (connections) to the GraphNode.", "name": "get_connection_input_count", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the position of the input connection 'idx'.", "name": "get_connection_input_position", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the type of the input connection 'idx'.", "name": "get_connection_input_type", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the color of the output connection 'idx'.", "name": "get_connection_output_color", "return_": {"description": "", "type": "Color"}}, {"arguments": [], "description": "Return the number of enabled output slots (connections) of the GraphNode.", "name": "get_connection_output_count", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the position of the output connection 'idx'.", "name": "get_connection_output_position", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the type of the output connection 'idx'.", "name": "get_connection_output_type", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the color set to 'idx' left (input) slot.", "name": "get_slot_color_left", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the color set to 'idx' right (output) slot.", "name": "get_slot_color_right", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the (integer) type of left (input) 'idx' slot.", "name": "get_slot_type_left", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the (integer) type of right (output) 'idx' slot.", "name": "get_slot_type_right", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return true if left (input) slot 'idx' is enabled. False otherwise.", "name": "is_slot_enabled_left", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return true if right (output) slot 'idx' is enabled. False otherwise.", "name": "is_slot_enabled_right", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "enable_left", "type": "bool"}, {"description": "", "index": "2", "name": "type_left", "type": "int"}, {"description": "", "index": "3", "name": "color_left", "type": "Color"}, {"description": "", "index": "4", "name": "enable_right", "type": "bool"}, {"description": "", "index": "5", "name": "type_right", "type": "int"}, {"description": "", "index": "6", "name": "color_right", "type": "Color"}, {"default": "null", "description": "", "index": "7", "name": "custom_left", "type": "Texture"}, {"default": "null", "description": "", "index": "8", "name": "custom_right", "type": "Texture"}], "description": "", "name": "set_slot", "return_": {"description": "", "type": "void"}}], "name": "GraphNode", "signals": [{"arguments": [], "description": "Signal sent on closing the GraphNode.", "name": "close_request"}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector2"}, {"description": "", "index": "1", "name": "to", "type": "Vector2"}], "description": "Signal sent when the GraphNode is dragged.", "name": "dragged"}, {"arguments": [], "description": "Signal sent when the GraphNode is moved.", "name": "offset_changed"}, {"arguments": [], "description": "Signal sent when the GraphNode is requested to be displayed over other ones. Happens on focusing (clicking into) the GraphNode.", "name": "raise_request"}, {"arguments": [{"description": "", "index": "0", "name": "new_minsize", "type": "Vector2"}], "description": "", "name": "resize_request"}], "tutorials": {"links": []}}, "GridContainer": {"brief_description": "Grid container used to arrange elements in a grid like layout.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Grid container will arrange its children in a grid like structure, the grid columns are specified using the [method set_columns] method and the number of rows will be equal to the number of children in the container divided by the number of columns, for example: if the container has 5 children, and 2 columns, there will be 3 rows in the container. Notice that grid layout will preserve the columns and rows for every size of the container.", "inherits": "Container", "members": [{"description": "The number of columns in the [code]GridContainer[/code]. If modified, [code]GridContainer[/code] reorders its children to accommodate the new layout.", "getter": "get_columns", "name": "columns", "setter": "set_columns", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "row", "type": "int"}, {"description": "", "index": "1", "name": "column", "type": "int"}], "description": "", "name": "get_child_control_at_cell", "return_": {"description": "", "type": "Control"}}], "name": "GridContainer", "signals": [], "tutorials": {"links": []}}, "GrooveJoint2D": {"brief_description": "Groove constraint for 2D physics.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Groove constraint for 2D physics. This is useful for making a body \"slide\" through a segment placed in another.", "inherits": "Joint2D", "members": [{"description": "The body B's initial anchor position defined by the joint's origin and a local offset [member initial_offset] along the joint's y axis (along the groove). Default value: [code]25[/code]", "getter": "get_initial_offset", "name": "initial_offset", "setter": "set_initial_offset", "type": "float"}, {"description": "The groove's length. The groove is from the joint's origin towards [member length] along the joint's local y axis. Default value: [code]50[/code]", "getter": "get_length", "name": "length", "setter": "set_length", "type": "float"}], "methods": [], "name": "GrooveJoint2D", "signals": [], "tutorials": {"links": []}}, "HBoxContainer": {"brief_description": "Horizontal box container.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Horizontal box container. See [BoxContainer].", "inherits": "BoxContainer", "members": [], "methods": [], "name": "HBoxContainer", "signals": [], "tutorials": {"links": []}}, "HScrollBar": {"brief_description": "Horizontal scroll bar.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Horizontal scroll bar. See [ScrollBar]. This one goes from left (min) to right (max).", "inherits": "ScrollBar", "members": [], "methods": [], "name": "HScrollBar", "signals": [], "tutorials": {"links": []}}, "HSeparator": {"brief_description": "Horizontal separator.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Horizontal separator. See [Separator]. It is used to separate objects vertically, though (but it looks horizontal!).", "inherits": "Separator", "members": [], "methods": [], "name": "HSeparator", "signals": [], "tutorials": {"links": []}}, "HSlider": {"brief_description": "Horizontal slider.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Horizontal slider. See [Slider]. This one goes from left (min) to right (max).", "inherits": "Slider", "members": [], "methods": [], "name": "HSlider", "signals": [], "tutorials": {"links": []}}, "HSplitContainer": {"brief_description": "Horizontal split container.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Horizontal split container. See [SplitContainer]. This goes from left to right.", "inherits": "SplitContainer", "members": [], "methods": [], "name": "HSplitContainer", "signals": [], "tutorials": {"links": []}}, "HTTPClient": {"brief_description": "Hyper-text transfer protocol client.", "category": "Core", "constants": [{"description": "HTTP GET method. The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.", "enum": "Method", "name": "METHOD_GET", "value": "0"}, {"description": "HTTP HEAD method. The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful to request metadata like HTTP headers or to check if a resource exists.", "enum": "Method", "name": "METHOD_HEAD", "value": "1"}, {"description": "HTTP POST method. The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server. This is often used for forms and submitting data or uploading files.", "enum": "Method", "name": "METHOD_POST", "value": "2"}, {"description": "HTTP PUT method. The PUT method asks to replace all current representations of the target resource with the request payload. (You can think of [code]POST[/code] as \"create or update\" and [code]PUT[/code] as \"update\", although many services tend to not make a clear distinction or change their meaning).", "enum": "Method", "name": "METHOD_PUT", "value": "3"}, {"description": "HTTP DELETE method. The DELETE method requests to delete the specified resource.", "enum": "Method", "name": "METHOD_DELETE", "value": "4"}, {"description": "HTTP OPTIONS method. The OPTIONS method asks for a description of the communication options for the target resource. Rarely used.", "enum": "Method", "name": "METHOD_OPTIONS", "value": "5"}, {"description": "HTTP TRACE method. The TRACE method performs a message loop-back test along the path to the target resource. Returns the entire HTTP request received in the response body. Rarely used.", "enum": "Method", "name": "METHOD_TRACE", "value": "6"}, {"description": "HTTP CONNECT method. The CONNECT method establishes a tunnel to the server identified by the target resource. Rarely used.", "enum": "Method", "name": "METHOD_CONNECT", "value": "7"}, {"description": "HTTP PATCH method. The PATCH method is used to apply partial modifications to a resource.", "enum": "Method", "name": "METHOD_PATCH", "value": "8"}, {"description": "Marker for end of [code]METHOD_*[/code] enum. Not used.", "enum": "Method", "name": "METHOD_MAX", "value": "9"}, {"description": "Status: Disconnected from the server.", "enum": "Status", "name": "STATUS_DISCONNECTED", "value": "0"}, {"description": "Status: Currently resolving the hostname for the given URL into an IP.", "enum": "Status", "name": "STATUS_RESOLVING", "value": "1"}, {"description": "Status: DNS failure: Can't resolve the hostname for the given URL.", "enum": "Status", "name": "STATUS_CANT_RESOLVE", "value": "2"}, {"description": "Status: Currently connecting to server.", "enum": "Status", "name": "STATUS_CONNECTING", "value": "3"}, {"description": "Status: Can't connect to the server.", "enum": "Status", "name": "STATUS_CANT_CONNECT", "value": "4"}, {"description": "Status: Connection established.", "enum": "Status", "name": "STATUS_CONNECTED", "value": "5"}, {"description": "Status: Currently sending request.", "enum": "Status", "name": "STATUS_REQUESTING", "value": "6"}, {"description": "Status: HTTP body received.", "enum": "Status", "name": "STATUS_BODY", "value": "7"}, {"description": "Status: Error in HTTP connection.", "enum": "Status", "name": "STATUS_CONNECTION_ERROR", "value": "8"}, {"description": "Status: Error in SSL handshake.", "enum": "Status", "name": "STATUS_SSL_HANDSHAKE_ERROR", "value": "9"}, {"description": "HTTP status code [code]100 Continue[/code]. Interim response that indicates everything so far is OK and that the client should continue with the request (or ignore this status if already finished).", "enum": "ResponseCode", "name": "RESPONSE_CONTINUE", "value": "100"}, {"description": "HTTP status code [code]101 Switching Protocol[/code]. Sent in response to an [code]Upgrade[/code] request header by the client. Indicates the protocol the server is switching to.", "enum": "ResponseCode", "name": "RESPONSE_SWITCHING_PROTOCOLS", "value": "101"}, {"description": "HTTP status code [code]102 Processing[/code] (WebDAV). Indicates that the server has received and is processing the request, but no response is available yet.", "enum": "ResponseCode", "name": "RESPONSE_PROCESSING", "value": "102"}, {"description": "HTTP status code [code]200 OK[/code]. The request has succeeded. Default response for successful requests. Meaning varies depending on the request. GET: The resource has been fetched and is transmitted in the message body. HEAD: The entity headers are in the message body. POST: The resource describing the result of the action is transmitted in the message body. TRACE: The message body contains the request message as received by the server.", "enum": "ResponseCode", "name": "RESPONSE_OK", "value": "200"}, {"description": "HTTP status code [code]201 Created[/code]. The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a PUT request.", "enum": "ResponseCode", "name": "RESPONSE_CREATED", "value": "201"}, {"description": "HTTP status code [code]202 Accepted[/code]. The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing.", "enum": "ResponseCode", "name": "RESPONSE_ACCEPTED", "value": "202"}, {"description": "HTTP status code [code]203 Non-Authoritative Information[/code]. This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response.", "enum": "ResponseCode", "name": "RESPONSE_NON_AUTHORITATIVE_INFORMATION", "value": "203"}, {"description": "HTTP status code [code]204 No Content[/code]. There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.", "enum": "ResponseCode", "name": "RESPONSE_NO_CONTENT", "value": "204"}, {"description": "HTTP status code [code]205 Reset Content[/code]. The server has fulfilled the request and desires that the client resets the \"document view\" that caused the request to be sent to its original state as received from the origin server.", "enum": "ResponseCode", "name": "RESPONSE_RESET_CONTENT", "value": "205"}, {"description": "HTTP status code [code]206 Partial Content[/code]. This response code is used because of a range header sent by the client to separate download into multiple streams.", "enum": "ResponseCode", "name": "RESPONSE_PARTIAL_CONTENT", "value": "206"}, {"description": "HTTP status code [code]207 Multi-Status[/code] (WebDAV). A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate.", "enum": "ResponseCode", "name": "RESPONSE_MULTI_STATUS", "value": "207"}, {"description": "HTTP status code [code]208 Already Reported[/code] (WebDAV). Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly.", "enum": "ResponseCode", "name": "RESPONSE_ALREADY_REPORTED", "value": "208"}, {"description": "HTTP status code [code]226 IM Used[/code] (WebDAV). The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.", "enum": "ResponseCode", "name": "RESPONSE_IM_USED", "value": "226"}, {"description": "HTTP status code [code]300 Multiple Choice[/code]. The request has more than one possible responses and there is no standardized way to choose one of the responses. User-agent or user should choose one of them.", "enum": "ResponseCode", "name": "RESPONSE_MULTIPLE_CHOICES", "value": "300"}, {"description": "HTTP status code [code]301 Moved Permanently[/code]. Redirection. This response code means the URI of requested resource has been changed. The new URI is usually included in the response.", "enum": "ResponseCode", "name": "RESPONSE_MOVED_PERMANENTLY", "value": "301"}, {"description": "HTTP status code [code]302 Found[/code]. Temporary redirection. This response code means the URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests.", "enum": "ResponseCode", "name": "RESPONSE_FOUND", "value": "302"}, {"description": "HTTP status code [code]303 See Other[/code]. The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request.", "enum": "ResponseCode", "name": "RESPONSE_SEE_OTHER", "value": "303"}, {"description": "HTTP status code [code]304 Not Modified[/code]. A conditional GET or HEAD request has been received and would have resulted in a 200 OK response if it were not for the fact that the condition evaluated to false.", "enum": "ResponseCode", "name": "RESPONSE_NOT_MODIFIED", "value": "304"}, {"description": "HTTP status code [code]305 Use Proxy[/code]. Deprecated. Do not use.", "enum": "ResponseCode", "name": "RESPONSE_USE_PROXY", "value": "305"}, {"description": "HTTP status code [code]306 Switch Proxy[/code]. Deprecated. Do not use.", "enum": "ResponseCode", "name": "RESPONSE_SWITCH_PROXY", "value": "306"}, {"description": "HTTP status code [code]307 Temporary Redirect[/code]. The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.", "enum": "ResponseCode", "name": "RESPONSE_TEMPORARY_REDIRECT", "value": "307"}, {"description": "HTTP status code [code]308 Permanent Redirect[/code]. The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.", "enum": "ResponseCode", "name": "RESPONSE_PERMANENT_REDIRECT", "value": "308"}, {"description": "HTTP status code [code]400 Bad Request[/code]. The request was invalid. The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, invalid request contents, or deceptive request routing).", "enum": "ResponseCode", "name": "RESPONSE_BAD_REQUEST", "value": "400"}, {"description": "HTTP status code [code]401 Unauthorized[/code]. Credentials required. The request has not been applied because it lacks valid authentication credentials for the target resource.", "enum": "ResponseCode", "name": "RESPONSE_UNAUTHORIZED", "value": "401"}, {"description": "HTTP status code [code]402 Payment Required[/code]. This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems, however this is not currently used.", "enum": "ResponseCode", "name": "RESPONSE_PAYMENT_REQUIRED", "value": "402"}, {"description": "HTTP status code [code]403 Forbidden[/code]. The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike [code]401[/code], the client's identity is known to the server.", "enum": "ResponseCode", "name": "RESPONSE_FORBIDDEN", "value": "403"}, {"description": "HTTP status code [code]404 Not Found[/code]. The server can not find requested resource. Either the URL is not recognized or the endpoint is valid but the resource itself does not exist. May also be sent instead of 403 to hide existence of a resource if the client is not authorized.", "enum": "ResponseCode", "name": "RESPONSE_NOT_FOUND", "value": "404"}, {"description": "HTTP status code [code]405 Method Not Allowed[/code]. The request's HTTP method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code.", "enum": "ResponseCode", "name": "RESPONSE_METHOD_NOT_ALLOWED", "value": "405"}, {"description": "HTTP status code [code]406 Not Acceptable[/code]. The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request. Used when negotiation content.", "enum": "ResponseCode", "name": "RESPONSE_NOT_ACCEPTABLE", "value": "406"}, {"description": "HTTP status code [code]407 Proxy Authentication Required[/code]. Similar to 401 Unauthorized, but it indicates that the client needs to authenticate itself in order to use a proxy.", "enum": "ResponseCode", "name": "RESPONSE_PROXY_AUTHENTICATION_REQUIRED", "value": "407"}, {"description": "HTTP status code [code]408 Request Timeout[/code]. The server did not receive a complete request message within the time that it was prepared to wait.", "enum": "ResponseCode", "name": "RESPONSE_REQUEST_TIMEOUT", "value": "408"}, {"description": "HTTP status code [code]409 Conflict[/code]. The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.", "enum": "ResponseCode", "name": "RESPONSE_CONFLICT", "value": "409"}, {"description": "HTTP status code [code]410 Gone[/code]. The target resource is no longer available at the origin server and this condition is likely permanent.", "enum": "ResponseCode", "name": "RESPONSE_GONE", "value": "410"}, {"description": "HTTP status code [code]411 Length Required[/code]. The server refuses to accept the request without a defined Content-Length header.", "enum": "ResponseCode", "name": "RESPONSE_LENGTH_REQUIRED", "value": "411"}, {"description": "HTTP status code [code]412 Precondition Failed[/code]. One or more conditions given in the request header fields evaluated to false when tested on the server.", "enum": "ResponseCode", "name": "RESPONSE_PRECONDITION_FAILED", "value": "412"}, {"description": "HTTP status code [code]413 Entity Too Large[/code]. The server is refusing to process a request because the request payload is larger than the server is willing or able to process.", "enum": "ResponseCode", "name": "RESPONSE_REQUEST_ENTITY_TOO_LARGE", "value": "413"}, {"description": "HTTP status code [code]414 Request-URI Too Long[/code]. The server is refusing to service the request because the request-target is longer than the server is willing to interpret.", "enum": "ResponseCode", "name": "RESPONSE_REQUEST_URI_TOO_LONG", "value": "414"}, {"description": "HTTP status code [code]415 Unsupported Media Type[/code]. The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.", "enum": "ResponseCode", "name": "RESPONSE_UNSUPPORTED_MEDIA_TYPE", "value": "415"}, {"description": "HTTP status code [code]416 Requested Range Not Satisfiable[/code]. None of the ranges in the request's Range header field overlap the current extent of the selected resource or the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.", "enum": "ResponseCode", "name": "RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE", "value": "416"}, {"description": "HTTP status code [code]417 Expectation Failed[/code]. The expectation given in the request's Expect header field could not be met by at least one of the inbound servers.", "enum": "ResponseCode", "name": "RESPONSE_EXPECTATION_FAILED", "value": "417"}, {"description": "HTTP status code [code]418 I'm A Teapot[/code]. Any attempt to brew coffee with a teapot should result in the error code \"418 I'm a teapot\". The resulting entity body MAY be short and stout.", "enum": "ResponseCode", "name": "RESPONSE_IM_A_TEAPOT", "value": "418"}, {"description": "HTTP status code [code]421 Misdirected Request[/code]. The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI.", "enum": "ResponseCode", "name": "RESPONSE_MISDIRECTED_REQUEST", "value": "421"}, {"description": "HTTP status code [code]422 Unprocessable Entity[/code] (WebDAV). The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions.", "enum": "ResponseCode", "name": "RESPONSE_UNPROCESSABLE_ENTITY", "value": "422"}, {"description": "HTTP status code [code]423 Locked[/code] (WebDAV). The source or destination resource of a method is locked.", "enum": "ResponseCode", "name": "RESPONSE_LOCKED", "value": "423"}, {"description": "HTTP status code [code]424 Failed Dependency[/code] (WebDAV). The method could not be performed on the resource because the requested action depended on another action and that action failed.", "enum": "ResponseCode", "name": "RESPONSE_FAILED_DEPENDENCY", "value": "424"}, {"description": "HTTP status code [code]426 Upgrade Required[/code]. The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.", "enum": "ResponseCode", "name": "RESPONSE_UPGRADE_REQUIRED", "value": "426"}, {"description": "HTTP status code [code]428 Precondition Required[/code]. The origin server requires the request to be conditional.", "enum": "ResponseCode", "name": "RESPONSE_PRECONDITION_REQUIRED", "value": "428"}, {"description": "HTTP status code [code]429 Too Many Requests[/code]. The user has sent too many requests in a given amount of time (see \"rate limiting\"). Back off and increase time between requests or try again later.", "enum": "ResponseCode", "name": "RESPONSE_TOO_MANY_REQUESTS", "value": "429"}, {"description": "HTTP status code [code]431 Request Header Fields Too Large[/code]. The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.", "enum": "ResponseCode", "name": "RESPONSE_REQUEST_HEADER_FIELDS_TOO_LARGE", "value": "431"}, {"description": "HTTP status code [code]451 Response Unavailable For Legal Reasons[/code]. The server is denying access to the resource as a consequence of a legal demand.", "enum": "ResponseCode", "name": "RESPONSE_UNAVAILABLE_FOR_LEGAL_REASONS", "value": "451"}, {"description": "HTTP status code [code]500 Internal Server Error[/code]. The server encountered an unexpected condition that prevented it from fulfilling the request.", "enum": "ResponseCode", "name": "RESPONSE_INTERNAL_SERVER_ERROR", "value": "500"}, {"description": "HTTP status code [code]501 Not Implemented[/code]. The server does not support the functionality required to fulfill the request.", "enum": "ResponseCode", "name": "RESPONSE_NOT_IMPLEMENTED", "value": "501"}, {"description": "HTTP status code [code]502 Bad Gateway[/code]. The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request. Usually returned by load balancers or proxies.", "enum": "ResponseCode", "name": "RESPONSE_BAD_GATEWAY", "value": "502"}, {"description": "HTTP status code [code]503 Service Unavailable[/code]. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay. Try again later.", "enum": "ResponseCode", "name": "RESPONSE_SERVICE_UNAVAILABLE", "value": "503"}, {"description": "HTTP status code [code]504 Gateway Timeout[/code]. The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request. Usually returned by load balancers or proxies.", "enum": "ResponseCode", "name": "RESPONSE_GATEWAY_TIMEOUT", "value": "504"}, {"description": "HTTP status code [code]505 HTTP Version Not Supported[/code]. The server does not support, or refuses to support, the major version of HTTP that was used in the request message.", "enum": "ResponseCode", "name": "RESPONSE_HTTP_VERSION_NOT_SUPPORTED", "value": "505"}, {"description": "HTTP status code [code]506 Variant Also Negotiates[/code]. The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.", "enum": "ResponseCode", "name": "RESPONSE_VARIANT_ALSO_NEGOTIATES", "value": "506"}, {"description": "HTTP status code [code]507 Insufficient Storage[/code]. The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.", "enum": "ResponseCode", "name": "RESPONSE_INSUFFICIENT_STORAGE", "value": "507"}, {"description": "HTTP status code [code]508 Loop Detected[/code]. The server terminated an operation because it encountered an infinite loop while processing a request with \"Depth: infinity\". This status indicates that the entire operation failed.", "enum": "ResponseCode", "name": "RESPONSE_LOOP_DETECTED", "value": "508"}, {"description": "HTTP status code [code]510 Not Extended[/code]. The policy for accessing the resource has not been met in the request. The server should send back all the information necessary for the client to issue an extended request.", "enum": "ResponseCode", "name": "RESPONSE_NOT_EXTENDED", "value": "510"}, {"description": "HTTP status code [code]511 Network Authentication Required[/code]. The client needs to authenticate to gain network access.", "enum": "ResponseCode", "name": "RESPONSE_NETWORK_AUTH_REQUIRED", "value": "511"}], "demos": {"links": []}, "description": "Hyper-text transfer protocol client (sometimes called \"User Agent\"). Used to make HTTP requests to download web content, upload files and other data or to communicate with various services, among other use cases.\n\t\tNote that this client only needs to connect to a host once (see [method connect_to_host]) to send multiple requests. Because of this, methods that take URLs usually take just the part after the host instead of the full URL, as the client is already connected to a host. See [method request] for a full example and to get started.\n\t\tA [code]HTTPClient[/code] should be reused between multiple requests or to connect to different hosts instead of creating one client per request. Supports SSL and SSL server certificate verification. HTTP status codes in the 2xx range indicate success, 3xx redirection (i.e. \"try again, but over here\"), 4xx something was wrong with the request, and 5xx something went wrong on the server's side.\n\t\tFor more information on HTTP, see https://developer.mozilla.org/en-US/docs/Web/HTTP (or read RFC 2616 to get it straight from the source: https://tools.ietf.org/html/rfc2616).", "inherits": "Reference", "members": [{"description": "If [code]true[/code], execution will block until all data is read from the response.", "getter": "is_blocking_mode_enabled", "name": "blocking_mode_enabled", "setter": "set_blocking_mode", "type": "bool"}, {"description": "The connection to use for this client.", "getter": "get_connection", "name": "connection", "setter": "set_connection", "type": "StreamPeer"}], "methods": [{"arguments": [], "description": "Closes the current connection, allowing reuse of this [code]HTTPClient[/code].", "name": "close", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "host", "type": "String"}, {"default": "-1", "description": "", "index": "1", "name": "port", "type": "int"}, {"default": "false", "description": "", "index": "2", "name": "use_ssl", "type": "bool"}, {"default": "true", "description": "", "index": "3", "name": "verify_host", "type": "bool"}], "description": "Connect to a host. This needs to be done before any requests are sent.\n\t\t\t\tThe host should not have http:// prepended but will strip the protocol identifier if provided.\n\t\t\t\tIf no [code]port[/code] is specified (or [code]-1[/code] is used), it is automatically set to 80 for HTTP and 443 for HTTPS (if [code]use_ssl[/code] is enabled).\n\t\t\t\t[code]verify_host[/code] will check the SSL identity of the host if set to [code]true[/code].", "name": "connect_to_host", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the response's body length.", "name": "get_response_body_length", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the response's HTTP status code.", "name": "get_response_code", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the response headers.", "name": "get_response_headers", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [], "description": "Returns all response headers as dictionary where the case-sensitivity of the keys and values is kept like the server delivers it. A value is a simple String, this string can have more than one value where \"; \" is used as separator.\n\t\t\t\tStructure: (\"key\":\"value1; value2\")\n\t\t\t\tExample: (content-length:12), (Content-Type:application/json; charset=UTF-8)", "name": "get_response_headers_as_dictionary", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [], "description": "Returns a STATUS_* enum constant. Need to call [method poll] in order to get status updates.", "name": "get_status", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "If [code]true[/code] this [code]HTTPClient[/code] has a response available.", "name": "has_response", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "If [code]true[/code] this [code]HTTPClient[/code] has a response that is chunked.", "name": "is_response_chunked", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "This needs to be called in order to have any request processed. Check results with [method get_status]", "name": "poll", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "fields", "type": "Dictionary"}], "description": "Generates a GET/POST application/x-www-form-urlencoded style query string from a provided dictionary, e.g.:\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"username\": \"user\", \"password\": \"pass\"}\n\t\t\t\tString queryString = httpClient.query_string_from_dict(fields)\n\t\t\t\treturns:= \"username=user&password=pass\"\n\t\t\t\t[/codeblock]\n\t\t\t\tFurthermore, if a key has a null value, only the key itself is added, without equal sign and value. If the value is an array, for each value in it a pair with the same key is added.\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"single\": 123, \"not_valued\": null, \"multiple\": [22, 33, 44]}\n\t\t\t\tString queryString = httpClient.query_string_from_dict(fields)\n\t\t\t\treturns:= \"single=123&not_valued&multiple=22&multiple=33&multiple=44\"\n\t\t\t\t[/codeblock]", "name": "query_string_from_dict", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Reads one chunk from the response.", "name": "read_response_body_chunk", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [{"description": "", "index": "0", "name": "method", "type": "int"}, {"description": "", "index": "1", "name": "url", "type": "String"}, {"description": "", "index": "2", "name": "headers", "type": "PoolStringArray"}, {"default": "\"\"", "description": "", "index": "3", "name": "body", "type": "String"}], "description": "Sends a request to the connected host. The URL parameter is just the part after the host, so for [code]http://somehost.com/index.php[/code], it is [code]index.php[/code].\n\t\t\t\tHeaders are HTTP request headers. For available HTTP methods, see [code]METHOD_*[/code].\n\t\t\t\tTo create a POST request with query strings to push to the server, do:\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"username\" : \"user\", \"password\" : \"pass\"}\n\t\t\t\tvar queryString = httpClient.query_string_from_dict(fields)\n\t\t\t\tvar headers = [\"Content-Type: application/x-www-form-urlencoded\", \"Content-Length: \" + str(queryString.length())]\n\t\t\t\tvar result = httpClient.request(httpClient.METHOD_POST, \"index.php\", headers, queryString)\n\t\t\t\t[/codeblock]", "name": "request", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "method", "type": "int"}, {"description": "", "index": "1", "name": "url", "type": "String"}, {"description": "", "index": "2", "name": "headers", "type": "PoolStringArray"}, {"description": "", "index": "3", "name": "body", "type": "PoolByteArray"}], "description": "Sends a raw request to the connected host. The URL parameter is just the part after the host, so for [code]http://somehost.com/index.php[/code], it is [code]index.php[/code].\n\t\t\t\tHeaders are HTTP request headers. For available HTTP methods, see [code]METHOD_*[/code].\n\t\t\t\tSends the body data raw, as a byte array and does not encode it in any way.", "name": "request_raw", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bytes", "type": "int"}], "description": "Sets the size of the buffer used and maximum bytes to read per iteration. see [method read_response_body_chunk]", "name": "set_read_chunk_size", "return_": {"description": "", "type": "void"}}], "name": "HTTPClient", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/networking/http_client_class.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/networking/ssl_certificates.html"}]}}, "HTTPRequest": {"brief_description": "A node with the ability to send HTTP requests.", "category": "Core", "constants": [{"description": "Request successful.", "enum": "Result", "name": "RESULT_SUCCESS", "value": "0"}, {"description": "", "enum": "Result", "name": "RESULT_CHUNKED_BODY_SIZE_MISMATCH", "value": "1"}, {"description": "Request failed while connecting.", "enum": "Result", "name": "RESULT_CANT_CONNECT", "value": "2"}, {"description": "Request failed while resolving.", "enum": "Result", "name": "RESULT_CANT_RESOLVE", "value": "3"}, {"description": "Request failed due to connection(read/write) error.", "enum": "Result", "name": "RESULT_CONNECTION_ERROR", "value": "4"}, {"description": "Request failed on SSL handshake.", "enum": "Result", "name": "RESULT_SSL_HANDSHAKE_ERROR", "value": "5"}, {"description": "Request does not have a response(yet).", "enum": "Result", "name": "RESULT_NO_RESPONSE", "value": "6"}, {"description": "Request exceeded its maximum size limit, see [method set_body_size_limit].", "enum": "Result", "name": "RESULT_BODY_SIZE_LIMIT_EXCEEDED", "value": "7"}, {"description": "Request failed. (Unused)", "enum": "Result", "name": "RESULT_REQUEST_FAILED", "value": "8"}, {"description": "HTTPRequest couldn't open the download file.", "enum": "Result", "name": "RESULT_DOWNLOAD_FILE_CANT_OPEN", "value": "9"}, {"description": "HTTPRequest couldn't write to the download file.", "enum": "Result", "name": "RESULT_DOWNLOAD_FILE_WRITE_ERROR", "value": "10"}, {"description": "Request reached its maximum redirect limit, see [method set_max_redirects].", "enum": "Result", "name": "RESULT_REDIRECT_LIMIT_REACHED", "value": "11"}], "demos": {"links": []}, "description": "A node with the ability to send HTTP requests. Uses [HTTPClient] internally.\n\t\tCan be used to make HTTP requests, i.e. download or upload files or web content via HTTP.", "inherits": "Node", "members": [{"description": "Maximum allowed size for response bodies.", "getter": "get_body_size_limit", "name": "body_size_limit", "setter": "set_body_size_limit", "type": "int"}, {"description": "The file to download into. Will output any received file into it.", "getter": "get_download_file", "name": "download_file", "setter": "set_download_file", "type": "String"}, {"description": "Maximum number of allowed redirects.", "getter": "get_max_redirects", "name": "max_redirects", "setter": "set_max_redirects", "type": "int"}, {"description": "If [code]true[/code] multithreading is used to improve performance.", "getter": "is_using_threads", "name": "use_threads", "setter": "set_use_threads", "type": "bool"}], "methods": [{"arguments": [], "description": "Cancels the current request.", "name": "cancel_request", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the response body length.", "name": "get_body_size", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the amount of bytes this HTTPRequest downloaded.", "name": "get_downloaded_bytes", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the current status of the underlying [HTTPClient]. See [code]STATUS_*[/code] enum on [HTTPClient].", "name": "get_http_client_status", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "url", "type": "String"}, {"default": "PoolStringArray(  )", "description": "", "index": "1", "name": "custom_headers", "type": "PoolStringArray"}, {"default": "true", "description": "", "index": "2", "name": "ssl_validate_domain", "type": "bool"}, {"default": "0", "description": "", "index": "3", "name": "method", "type": "int"}, {"default": "\"\"", "description": "", "index": "4", "name": "request_data", "type": "String"}], "description": "Creates request on the underlying [HTTPClient]. If there is no configuration errors, it tries to connect using [method HTTPClient.connect_to_host] and passes parameters onto [method HTTPClient.request].\n\t\t\t\tReturns [code]OK[/code] if request is successfully created. (Does not imply that the server has responded), [code]ERR_UNCONFIGURED[/code] if not in the tree, [code]ERR_BUSY[/code] if still processing previous request, [code]ERR_INVALID_PARAMETER[/code] if given string is not a valid URL format, or [code]ERR_CANT_CONNECT[/code] if not using thread and the [HTTPClient] cannot connect to host.", "name": "request", "return_": {"description": "", "type": "int"}}], "name": "HTTPRequest", "signals": [{"arguments": [{"description": "", "index": "0", "name": "result", "type": "int"}, {"description": "", "index": "1", "name": "response_code", "type": "int"}, {"description": "", "index": "2", "name": "headers", "type": "PoolStringArray"}, {"description": "", "index": "3", "name": "body", "type": "PoolByteArray"}], "description": "This signal is emitted upon request completion.", "name": "request_completed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/networking/ssl_certificates.html"}]}}, "HingeJoint": {"brief_description": "A hinge between two 3D bodies.", "category": "Core", "constants": [{"description": "The speed with which the two bodies get pulled together when they move in different directions.", "enum": "Param", "name": "PARAM_BIAS", "value": "0"}, {"description": "The maximum rotation. only active if [member angular_limit/enable] is [code]true[/code].", "enum": "Param", "name": "PARAM_LIMIT_UPPER", "value": "1"}, {"description": "The minimum rotation. only active if [member angular_limit/enable] is [code]true[/code].", "enum": "Param", "name": "PARAM_LIMIT_LOWER", "value": "2"}, {"description": "The speed with which the rotation across the axis perpendicular to the hinge gets corrected.", "enum": "Param", "name": "PARAM_LIMIT_BIAS", "value": "3"}, {"description": "", "enum": "Param", "name": "PARAM_LIMIT_SOFTNESS", "value": "4"}, {"description": "The lower this value, the more the rotation gets slowed down.", "enum": "Param", "name": "PARAM_LIMIT_RELAXATION", "value": "5"}, {"description": "Target speed for the motor.", "enum": "Param", "name": "PARAM_MOTOR_TARGET_VELOCITY", "value": "6"}, {"description": "Maximum acceleration for the motor.", "enum": "Param", "name": "PARAM_MOTOR_MAX_IMPULSE", "value": "7"}, {"description": "End flag of PARAM_* constants, used internally.", "enum": "Param", "name": "PARAM_MAX", "value": "8"}, {"description": "If [code]true[/code] the hinges maximum and minimum rotation, defined by [member angular_limit/lower] and [member angular_limit/upper] has effects.", "enum": "Flag", "name": "FLAG_USE_LIMIT", "value": "0"}, {"description": "When activated, a motor turns the hinge.", "enum": "Flag", "name": "FLAG_ENABLE_MOTOR", "value": "1"}, {"description": "End flag of FLAG_* constants, used internally.", "enum": "Flag", "name": "FLAG_MAX", "value": "2"}], "demos": {"links": []}, "description": "Normally uses the z-axis of body A as the hinge axis, another axis can be specified when adding it manually though.", "inherits": "Joint", "members": [{"description": "The speed with which the rotation across the axis perpendicular to the hinge gets corrected.", "getter": "get_param", "name": "angular_limit/bias", "setter": "set_param", "type": "float"}, {"description": "If [code]true[/code] the hinges maximum and minimum rotation, defined by [member angular_limit/lower] and [member angular_limit/upper] has effects.", "getter": "get_flag", "name": "angular_limit/enable", "setter": "set_flag", "type": "bool"}, {"description": "The minimum rotation. only active if [member angular_limit/enable] is [code]true[/code].", "getter": "_get_lower_limit", "name": "angular_limit/lower", "setter": "_set_lower_limit", "type": "float"}, {"description": "The lower this value, the more the rotation gets slowed down.", "getter": "get_param", "name": "angular_limit/relaxation", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param", "name": "angular_limit/softness", "setter": "set_param", "type": "float"}, {"description": "The maximum rotation. only active if [member angular_limit/enable] is [code]true[/code].", "getter": "_get_upper_limit", "name": "angular_limit/upper", "setter": "_set_upper_limit", "type": "float"}, {"description": "When activated, a motor turns the hinge.", "getter": "get_flag", "name": "motor/enable", "setter": "set_flag", "type": "bool"}, {"description": "Maximum acceleration for the motor.", "getter": "get_param", "name": "motor/max_impulse", "setter": "set_param", "type": "float"}, {"description": "Target speed for the motor.", "getter": "get_param", "name": "motor/target_velocity", "setter": "set_param", "type": "float"}, {"description": "The speed with which the two bodies get pulled together when they move in different directions.", "getter": "get_param", "name": "params/bias", "setter": "set_param", "type": "float"}], "methods": [], "name": "HingeJoint", "signals": [], "tutorials": {"links": []}}, "IP": {"brief_description": "Internet protocol (IP) support functions like DNS resolution.", "category": "Core", "constants": [{"description": "DNS hostname resolver status: No status.", "enum": "ResolverStatus", "name": "RESOLVER_STATUS_NONE", "value": "0"}, {"description": "DNS hostname resolver status: Waiting.", "enum": "ResolverStatus", "name": "RESOLVER_STATUS_WAITING", "value": "1"}, {"description": "DNS hostname resolver status: Done.", "enum": "ResolverStatus", "name": "RESOLVER_STATUS_DONE", "value": "2"}, {"description": "DNS hostname resolver status: Error.", "enum": "ResolverStatus", "name": "RESOLVER_STATUS_ERROR", "value": "3"}, {"description": "Maximum number of concurrent DNS resolver queries allowed, [code]RESOLVER_INVALID_ID[/code] is returned if exceeded.", "name": "RESOLVER_MAX_QUERIES", "value": "32"}, {"description": "Invalid ID constant. Returned if [code]RESOLVER_MAX_QUERIES[/code] is exceeded.", "name": "RESOLVER_INVALID_ID", "value": "-1"}, {"description": "Address type: None.", "enum": "Type", "name": "TYPE_NONE", "value": "0"}, {"description": "Address type: Internet protocol version 4 (IPv4).", "enum": "Type", "name": "TYPE_IPV4", "value": "1"}, {"description": "Address type: Internet protocol version 6 (IPv6).", "enum": "Type", "name": "TYPE_IPV6", "value": "2"}, {"description": "Address type: Any.", "enum": "Type", "name": "TYPE_ANY", "value": "3"}], "demos": {"links": []}, "description": "IP contains support functions for the Internet Protocol (IP). TCP/IP support is in different classes (see [StreamPeerTCP] and [TCP_Server]). IP provides DNS hostname resolution support, both blocking and threaded.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"default": "\"\"", "description": "", "index": "0", "name": "hostname", "type": "String"}], "description": "Removes all of a \"hostname\"'s cached references. If no \"hostname\" is given then all cached IP addresses are removed.", "name": "clear_cache", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Removes a given item \"id\" from the queue. This should be used to free a queue after it has completed to enable more queries to happen.", "name": "erase_resolve_item", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns all of the user's current IPv4 and IPv6 addresses as an array.", "name": "get_local_addresses", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns a queued hostname's IP address, given its queue \"id\". Returns an empty string on error or if resolution hasn't happened yet (see [method get_resolve_item_status]).", "name": "get_resolve_item_address", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns a queued hostname's status as a RESOLVER_STATUS_* constant, given its queue \"id\".", "name": "get_resolve_item_status", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "host", "type": "String"}, {"default": "3", "description": "", "index": "1", "name": "ip_type", "type": "int"}], "description": "Returns a given hostname's IPv4 or IPv6 address when resolved (blocking-type method). The address type returned depends on the TYPE_* constant given as \"ip_type\".", "name": "resolve_hostname", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "host", "type": "String"}, {"default": "3", "description": "", "index": "1", "name": "ip_type", "type": "int"}], "description": "Creates a queue item to resolve a hostname to an IPv4 or IPv6 address depending on the TYPE_* constant given as \"ip_type\". Returns the queue ID if successful, or RESOLVER_INVALID_ID on error.", "name": "resolve_hostname_queue_item", "return_": {"description": "", "type": "int"}}], "name": "IP", "signals": [], "tutorials": {"links": []}}, "IP_Unix": {"brief_description": "Unix IP support. See [IP].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Unix-specific implementation of IP support functions. See [IP].", "inherits": "IP", "members": [], "methods": [], "name": "IP_Unix", "signals": [], "tutorials": {"links": []}}, "Image": {"brief_description": "Image datatype.", "category": "Core", "constants": [{"description": "", "enum": "Format", "name": "FORMAT_L8", "value": "0"}, {"description": "", "enum": "Format", "name": "FORMAT_LA8", "value": "1"}, {"description": "OpenGL texture format RED with a single component and a bitdepth of 8.", "enum": "Format", "name": "FORMAT_R8", "value": "2"}, {"description": "OpenGL texture format RG with two components and a bitdepth of 8 for each.", "enum": "Format", "name": "FORMAT_RG8", "value": "3"}, {"description": "OpenGL texture format RGB with three components, each with a bitdepth of 8.", "enum": "Format", "name": "FORMAT_RGB8", "value": "4"}, {"description": "OpenGL texture format RGBA with four components, each with a bitdepth of 8.", "enum": "Format", "name": "FORMAT_RGBA8", "value": "5"}, {"description": "OpenGL texture format RGBA with four components, each with a bitdepth of 4.", "enum": "Format", "name": "FORMAT_RGBA4444", "value": "6"}, {"description": "OpenGL texture format GL_RGB5_A1 where 5 bits of depth for each component of RGB and one bit for alpha.", "enum": "Format", "name": "FORMAT_RGBA5551", "value": "7"}, {"description": "OpenGL texture format GL_R32F where there's one component, a 32-bit floating-point value.", "enum": "Format", "name": "FORMAT_RF", "value": "8"}, {"description": "OpenGL texture format GL_RG32F where there are two components, each a 32-bit floating-point values.", "enum": "Format", "name": "FORMAT_RGF", "value": "9"}, {"description": "OpenGL texture format GL_RGB32F where there are three components, each a 32-bit floating-point values.", "enum": "Format", "name": "FORMAT_RGBF", "value": "10"}, {"description": "OpenGL texture format GL_RGBA32F where there are four components, each a 32-bit floating-point values.", "enum": "Format", "name": "FORMAT_RGBAF", "value": "11"}, {"description": "OpenGL texture format GL_R32F where there's one component, a 16-bit \"half-precision\" floating-point value.", "enum": "Format", "name": "FORMAT_RH", "value": "12"}, {"description": "OpenGL texture format GL_RG32F where there's two components, each a 16-bit \"half-precision\" floating-point value.", "enum": "Format", "name": "FORMAT_RGH", "value": "13"}, {"description": "OpenGL texture format GL_RGB32F where there's three components, each a 16-bit \"half-precision\" floating-point value.", "enum": "Format", "name": "FORMAT_RGBH", "value": "14"}, {"description": "OpenGL texture format GL_RGBA32F where there's four components, each a 16-bit \"half-precision\" floating-point value.", "enum": "Format", "name": "FORMAT_RGBAH", "value": "15"}, {"description": "A special OpenGL texture format where the three color components have 9 bits of precision and all three share a single exponent.", "enum": "Format", "name": "FORMAT_RGBE9995", "value": "16"}, {"description": "The S3TC texture format that uses Block Compression 1, and is the smallest variation of S3TC, only providing 1 bit of alpha and color data being premultiplied with alpha. More information can be found at https://www.khronos.org/opengl/wiki/S3_Texture_Compression.", "enum": "Format", "name": "FORMAT_DXT1", "value": "17"}, {"description": "The S3TC texture format that uses Block Compression 2, and color data is interpreted as not having been premultiplied by alpha. Well suited for images with sharp alpha transitions between translucent and opaque areas.", "enum": "Format", "name": "FORMAT_DXT3", "value": "18"}, {"description": "The S3TC texture format also known as Block Compression 3 or BC3 that contains 64 bits of alpha channel data followed by 64 bits of DXT1-encoded color data. Color data is not premultiplied by alpha, same as DXT3. DXT5 generally produces superior results for transparency gradients than DXT3.", "enum": "Format", "name": "FORMAT_DXT5", "value": "19"}, {"description": "Texture format that uses Red Green Texture Compression, normalizing the red channel data using the same compression algorithm that DXT5 uses for the alpha channel. More information can be found here https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression.", "enum": "Format", "name": "FORMAT_RGTC_R", "value": "20"}, {"description": "Texture format that uses Red Green Texture Compression, normalizing the red and green channel data using the same compression algorithm that DXT5 uses for the alpha channel.", "enum": "Format", "name": "FORMAT_RGTC_RG", "value": "21"}, {"description": "Texture format that uses BPTC compression with unsigned normalized RGBA components. More information can be found at https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression.", "enum": "Format", "name": "FORMAT_BPTC_RGBA", "value": "22"}, {"description": "Texture format that uses BPTC compression with signed floating-point RGB components.", "enum": "Format", "name": "FORMAT_BPTC_RGBF", "value": "23"}, {"description": "Texture format that uses BPTC compression with unsigned floating-point RGB components.", "enum": "Format", "name": "FORMAT_BPTC_RGBFU", "value": "24"}, {"description": "Texture format used on PowerVR-supported mobile platforms, uses 2 bit color depth with no alpha. More information on PVRTC can be found here https://en.wikipedia.org/wiki/PVRTC.", "enum": "Format", "name": "FORMAT_PVRTC2", "value": "25"}, {"description": "Same as PVRTC2, but with an alpha component.", "enum": "Format", "name": "FORMAT_PVRTC2A", "value": "26"}, {"description": "Similar to PVRTC2, but with 4 bit color depth and no alpha.", "enum": "Format", "name": "FORMAT_PVRTC4", "value": "27"}, {"description": "Same as PVRTC4, but with an alpha component.", "enum": "Format", "name": "FORMAT_PVRTC4A", "value": "28"}, {"description": "Ericsson Texture Compression format, also referred to as 'ETC1', and is part of the OpenGL ES graphics standard. An overview of the format is given at https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1.", "enum": "Format", "name": "FORMAT_ETC", "value": "29"}, {"description": "Ericsson Texture Compression format 2 variant R11_EAC, which provides one channel of unsigned data.", "enum": "Format", "name": "FORMAT_ETC2_R11", "value": "30"}, {"description": "Ericsson Texture Compression format 2 variant SIGNED_R11_EAC, which provides one channel of signed data.", "enum": "Format", "name": "FORMAT_ETC2_R11S", "value": "31"}, {"description": "Ericsson Texture Compression format 2 variant RG11_EAC, which provides two channels of unsigned data.", "enum": "Format", "name": "FORMAT_ETC2_RG11", "value": "32"}, {"description": "Ericsson Texture Compression format 2 variant SIGNED_RG11_EAC, which provides two channels of signed data.", "enum": "Format", "name": "FORMAT_ETC2_RG11S", "value": "33"}, {"description": "Ericsson Texture Compression format 2 variant RGB8, which is a followup of ETC1 and compresses RGB888 data.", "enum": "Format", "name": "FORMAT_ETC2_RGB8", "value": "34"}, {"description": "Ericsson Texture Compression format 2 variant RGBA8, which compresses RGBA8888 data with full alpha support.", "enum": "Format", "name": "FORMAT_ETC2_RGBA8", "value": "35"}, {"description": "Ericsson Texture Compression format 2 variant RGB8_PUNCHTHROUGH_ALPHA1, which compresses RGBA data to make alpha either fully transparent or fully opaque.", "enum": "Format", "name": "FORMAT_ETC2_RGB8A1", "value": "36"}, {"description": "", "enum": "Format", "name": "FORMAT_MAX", "value": "37"}, {"description": "", "enum": "Interpolation", "name": "INTERPOLATE_NEAREST", "value": "0"}, {"description": "", "enum": "Interpolation", "name": "INTERPOLATE_BILINEAR", "value": "1"}, {"description": "", "enum": "Interpolation", "name": "INTERPOLATE_CUBIC", "value": "2"}, {"description": "Performs bilinear separately on the two most suited mipmap levels, then linearly interpolates between them.\n\t\t\tIt's slower than [code]INTERPOLATE_BILINEAR[/code], but produces higher quality results, with much less aliasing artifacts.\n\t\t\tIf the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image. (Note that if you intend to scale multiple copies of the original image, it's better to call [code]generate_mipmaps[/code] on it in advance, to avoid wasting processing power in generating them again and again.)\n\t\t\tOn the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image.", "enum": "Interpolation", "name": "INTERPOLATE_TRILINEAR", "value": "3"}, {"description": "", "enum": "AlphaMode", "name": "ALPHA_NONE", "value": "0"}, {"description": "", "enum": "AlphaMode", "name": "ALPHA_BIT", "value": "1"}, {"description": "", "enum": "AlphaMode", "name": "ALPHA_BLEND", "value": "2"}, {"description": "", "enum": "CompressMode", "name": "COMPRESS_S3TC", "value": "0"}, {"description": "", "enum": "CompressMode", "name": "COMPRESS_PVRTC2", "value": "1"}, {"description": "", "enum": "CompressMode", "name": "COMPRESS_PVRTC4", "value": "2"}, {"description": "", "enum": "CompressMode", "name": "COMPRESS_ETC", "value": "3"}, {"description": "", "enum": "CompressMode", "name": "COMPRESS_ETC2", "value": "4"}, {"description": "", "enum": "CompressSource", "name": "COMPRESS_SOURCE_GENERIC", "value": "0"}, {"description": "", "enum": "CompressSource", "name": "COMPRESS_SOURCE_SRGB", "value": "1"}, {"description": "", "enum": "CompressSource", "name": "COMPRESS_SOURCE_NORMAL", "value": "2"}], "demos": {"links": []}, "description": "Native image datatype. Contains image data, which can be converted to a [Texture], and several functions to interact with it. The maximum width and height for an [code]Image[/code] is 16384 pixels.", "inherits": "Resource", "members": [{"description": "Holds all of the image's color data in a given format. See [code]FORMAT_*[/code] constants.", "getter": "_get_data", "name": "data", "setter": "_set_data", "type": "Dictionary"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "src", "type": "Image"}, {"description": "", "index": "1", "name": "src_rect", "type": "Rect2"}, {"description": "", "index": "2", "name": "dst", "type": "Vector2"}], "description": "Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dest[/code].", "name": "blend_rect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "src", "type": "Image"}, {"description": "", "index": "1", "name": "mask", "type": "Image"}, {"description": "", "index": "2", "name": "src_rect", "type": "Rect2"}, {"description": "", "index": "3", "name": "dst", "type": "Vector2"}], "description": "Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image using [code]mask[/code] image at coordinates [code]dst[/code]. Alpha channels are required for both [code]src[/code] and [code]mask[/code]. [code]dst[/code] pixels and [code]src[/code] pixels will blend if the corresponding mask pixel's alpha value is not 0. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats.", "name": "blend_rect_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "src", "type": "Image"}, {"description": "", "index": "1", "name": "src_rect", "type": "Rect2"}, {"description": "", "index": "2", "name": "dst", "type": "Vector2"}], "description": "Copies [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dst[/code].", "name": "blit_rect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "src", "type": "Image"}, {"description": "", "index": "1", "name": "mask", "type": "Image"}, {"description": "", "index": "2", "name": "src_rect", "type": "Rect2"}, {"description": "", "index": "3", "name": "dst", "type": "Vector2"}], "description": "Blits [code]src_rect[/code] area from [code]src[/code] image to this image at the coordinates given by [code]dst[/code]. [code]src[/code] pixel is copied onto [code]dst[/code] if the corresponding [code]mask[/code] pixel's alpha value is not 0. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats.", "name": "blit_rect_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "1.0", "description": "", "index": "0", "name": "bump_scale", "type": "float"}], "description": "", "name": "bumpmap_to_normalmap", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes the image's mipmaps.", "name": "clear_mipmaps", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mode", "type": "int"}, {"description": "", "index": "1", "name": "source", "type": "int"}, {"description": "", "index": "2", "name": "lossy_quality", "type": "float"}], "description": "Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. See [code]COMPRESS_*[/code] constants.", "name": "compress", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "format", "type": "int"}], "description": "Converts the image's format. See [code]FORMAT_*[/code] constants.", "name": "convert", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "src", "type": "Image"}], "description": "Copies [code]src[/code] image to this image.", "name": "copy_from", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "width", "type": "int"}, {"description": "", "index": "1", "name": "height", "type": "int"}, {"description": "", "index": "2", "name": "use_mipmaps", "type": "bool"}, {"description": "", "index": "3", "name": "format", "type": "int"}], "description": "Creates an empty image of given size and format. See [code]FORMAT_*[/code] constants. If [code]use_mipmaps[/code] is true then generate mipmaps for this image. See the [code]generate_mipmaps[/code] method.", "name": "create", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "width", "type": "int"}, {"description": "", "index": "1", "name": "height", "type": "int"}, {"description": "", "index": "2", "name": "use_mipmaps", "type": "bool"}, {"description": "", "index": "3", "name": "format", "type": "int"}, {"description": "", "index": "4", "name": "data", "type": "PoolByteArray"}], "description": "Creates a new image of given size and format. See [code]FORMAT_*[/code] constants. Fills the image with the given raw data. If [code]use_mipmaps[/code] is true then generate mipmaps for this image. See the [code]generate_mipmaps[/code] method.", "name": "create_from_data", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "width", "type": "int"}, {"description": "", "index": "1", "name": "height", "type": "int"}], "description": "Crops the image to the given [code]width[/code] and [code]height[/code]. If the specified size is larger than the current size, the extra area is filled with black pixels.", "name": "crop", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Decompresses the image if it is compressed. Returns an error if decompress function is not available.", "name": "decompress", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns ALPHA_BLEND if the image has data for alpha values. Returns ALPHA_BIT if all the alpha values are below a certain threshold or the maximum value. Returns ALPHA_NONE if no data for alpha values is found.", "name": "detect_alpha", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Stretches the image and enlarges it by a factor of 2. No interpolation is done.", "name": "expand_x2_hq2x", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "color", "type": "Color"}], "description": "Fills the image with a given [Color].", "name": "fill", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Blends low-alpha pixels with nearby pixels.", "name": "fix_alpha_edges", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Flips the image horizontally.", "name": "flip_x", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Flips the image vertically.", "name": "flip_y", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "renormalize", "type": "bool"}], "description": "Generates mipmaps for the image. Mipmaps are pre-calculated and lower resolution copies of the image. Mipmaps are automatically used if the image needs to be scaled down when rendered. This improves image quality and the performance of the rendering. Returns an error if the image is compressed, in a custom format or if the image's width/height is 0.", "name": "generate_mipmaps", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the image's raw data.", "name": "get_data", "qualifiers": "const", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [], "description": "Returns the image\u2019s format. See [code]FORMAT_*[/code] constants.", "name": "get_format", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the image's height.", "name": "get_height", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "mipmap", "type": "int"}], "description": "Returns the offset where the image's mipmap with index [code]mipmap[/code] is stored in the [code]data[/code] dictionary.", "name": "get_mipmap_offset", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "int"}, {"description": "", "index": "1", "name": "y", "type": "int"}], "description": "Returns the color of the pixel at [code](x, y)[/code] if the image is locked. If the image is unlocked it always returns a [Color] with the value [code](0, 0, 0, 1.0)[/code].", "name": "get_pixel", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "src", "type": "Vector2"}], "description": "", "name": "get_pixelv", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "rect", "type": "Rect2"}], "description": "Returns a new image that is a copy of the image's area specified with [code]rect[/code].", "name": "get_rect", "qualifiers": "const", "return_": {"description": "", "type": "Image"}}, {"arguments": [], "description": "Returns the image's size (width and height).", "name": "get_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns a [Rect2] enclosing the visible portion of the image.", "name": "get_used_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [], "description": "Returns the image's width.", "name": "get_width", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns [code]true[/code] if the image has generated mipmaps.", "name": "has_mipmaps", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the image is compressed.", "name": "is_compressed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the image has no data.", "name": "is_empty", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if all the image's pixels have an alpha value of 0. Returns [code]false[/code] if any pixel has an alpha value higher than 0.", "name": "is_invisible", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Loads an image from file [code]path[/code].", "name": "load", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "buffer", "type": "PoolByteArray"}], "description": "Loads an image from the binary contents of a JPEG file.", "name": "load_jpg_from_buffer", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "buffer", "type": "PoolByteArray"}], "description": "Loads an image from the binary contents of a PNG file.", "name": "load_png_from_buffer", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "buffer", "type": "PoolByteArray"}], "description": "Loads an image from the binary contents of a WebP file.", "name": "load_webp_from_buffer", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Locks the data for writing access.", "name": "lock", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normalmap. A normalmap can add lots of detail to a 3D surface without increasing the polygon count.", "name": "normalmap_to_xy", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Multiplies color values with alpha values. Resulting color values for a pixel are [code](color * alpha)/256[/code].", "name": "premultiply_alpha", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "width", "type": "int"}, {"description": "", "index": "1", "name": "height", "type": "int"}, {"default": "1", "description": "", "index": "2", "name": "interpolation", "type": "int"}], "description": "Resizes the image to the given [code]width[/code] and [code]height[/code]. New pixels are calculated using [code]interpolation[/code]. See [code]interpolation[/code] constants.", "name": "resize", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "square", "type": "bool"}], "description": "Resizes the image to the nearest power of 2 for the width and height. If [code]square[/code] is [code]true[/code] then set width and height to be the same.", "name": "resize_to_po2", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "rgbe_to_srgb", "return_": {"description": "", "type": "Image"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Saves the image as a PNG file to [code]path[/code].", "name": "save_png", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "int"}, {"description": "", "index": "1", "name": "y", "type": "int"}, {"description": "", "index": "2", "name": "color", "type": "Color"}], "description": "Sets the [Color] of the pixel at [code](x, y)[/code] if the image is locked. Example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar img = Image.new()\n\t\t\t\timg.create(img_width, img_height, false, Image.FORMAT_RGBA8)\n\t\t\t\timg.lock()\n\t\t\t\timg.set_pixel(x, y, color) # Works\n\t\t\t\timg.unlock()\n\t\t\t\timg.set_pixel(x, y, color) # Does not have an effect\n\t\t\t\t[/codeblock]", "name": "set_pixel", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "dst", "type": "Vector2"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "", "name": "set_pixelv", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Shrinks the image by a factor of 2.", "name": "shrink_x2", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Converts the raw data from the sRGB colorspace to a linear scale.", "name": "srgb_to_linear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Unlocks the data and prevents changes.", "name": "unlock", "return_": {"description": "", "type": "void"}}], "name": "Image", "signals": [], "tutorials": {"links": []}}, "ImageTexture": {"brief_description": "A [Texture] based on an [Image].", "category": "Core", "constants": [{"description": "[Image] data is stored raw and unaltered.", "enum": "Storage", "name": "STORAGE_RAW", "value": "0"}, {"description": "[Image] data is compressed with a lossy algorithm. You can set the storage quality with [method set_lossy_storage_quality].", "enum": "Storage", "name": "STORAGE_COMPRESS_LOSSY", "value": "1"}, {"description": "[Image] data is compressed with a lossless algorithm.", "enum": "Storage", "name": "STORAGE_COMPRESS_LOSSLESS", "value": "2"}], "demos": {"links": []}, "description": "A [Texture] based on an [Image]. Can be created from an [Image] with [method create_from_image].", "inherits": "Texture", "members": [{"description": "The storage quality for [code]ImageTexture[/code].STORAGE_COMPRESS_LOSSY.", "getter": "get_lossy_storage_quality", "name": "lossy_quality", "setter": "set_lossy_storage_quality", "type": "float"}, {"description": "The storage type (raw, lossy, or compressed).", "getter": "get_storage", "name": "storage", "setter": "set_storage", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "width", "type": "int"}, {"description": "", "index": "1", "name": "height", "type": "int"}, {"description": "", "index": "2", "name": "format", "type": "int"}, {"default": "7", "description": "", "index": "3", "name": "flags", "type": "int"}], "description": "Create a new [code]ImageTexture[/code] with \"width\" and \"height\".\n\t\t\t\t\"format\" one of [Image].FORMAT_*.\n\t\t\t\t\"flags\" one or more of [Texture].FLAG_*.", "name": "create", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "image", "type": "Image"}, {"default": "7", "description": "", "index": "1", "name": "flags", "type": "int"}], "description": "Create a new [code]ImageTexture[/code] from an [Image] with \"flags\" from [Texture].FLAG_*.", "name": "create_from_image", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the format of the [code]ImageTexture[/code], one of [Image].FORMAT_*.", "name": "get_format", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Load an [code]ImageTexture[/code] from a file path.", "name": "load", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "image", "type": "Image"}], "description": "Set the [Image] of this [code]ImageTexture[/code].", "name": "set_data", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "size", "type": "Vector2"}], "description": "Resizes the [code]ImageTexture[/code] to the specified dimensions.", "name": "set_size_override", "return_": {"description": "", "type": "void"}}], "name": "ImageTexture", "signals": [], "tutorials": {"links": []}}, "ImmediateGeometry": {"brief_description": "Draws simple geometry from code.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Draws simple geometry from code. Uses a drawing mode similar to OpenGL 1.x.", "inherits": "GeometryInstance", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "lats", "type": "int"}, {"description": "", "index": "1", "name": "lons", "type": "int"}, {"description": "", "index": "2", "name": "radius", "type": "float"}, {"default": "true", "description": "", "index": "3", "name": "add_uv", "type": "bool"}], "description": "Simple helper to draw a uvsphere, with given latitudes, longitude and radius.", "name": "add_sphere", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector3"}], "description": "Adds a vertex with the currently set color/uv/etc.", "name": "add_vertex", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "primitive", "type": "int"}, {"default": "null", "description": "", "index": "1", "name": "texture", "type": "Texture"}], "description": "Begin drawing (And optionally pass a texture override). When done call end(). For more information on how this works, search for glBegin() glEnd() references.\n\t\t\tFor the type of primitive, use the [Mesh].PRIMITIVE_* enumerations.", "name": "begin", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clears everything that was drawn using begin/end.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Ends a drawing context and displays the results.", "name": "end", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "color", "type": "Color"}], "description": "The current drawing color.", "name": "set_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "normal", "type": "Vector3"}], "description": "The next vertex's normal.", "name": "set_normal", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "tangent", "type": "Plane"}], "description": "The next vertex's tangent (and binormal facing).", "name": "set_tangent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "uv", "type": "Vector2"}], "description": "The next vertex's UV.", "name": "set_uv", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "uv", "type": "Vector2"}], "description": "The next vertex's second layer UV.", "name": "set_uv2", "return_": {"description": "", "type": "void"}}], "name": "ImmediateGeometry", "signals": [], "tutorials": {"links": []}}, "Input": {"brief_description": "A Singleton that deals with inputs.", "category": "Core", "constants": [{"description": "Makes the mouse cursor visible if it is hidden.", "enum": "MouseMode", "name": "MOUSE_MODE_VISIBLE", "value": "0"}, {"description": "Makes the mouse cursor hidden if it is visible.", "enum": "MouseMode", "name": "MOUSE_MODE_HIDDEN", "value": "1"}, {"description": "Captures the mouse. The mouse will be hidden and unable to leave the game window. But it will still register movement and mouse button presses.", "enum": "MouseMode", "name": "MOUSE_MODE_CAPTURED", "value": "2"}, {"description": "Makes the mouse cursor visible but confines it to the game window.", "enum": "MouseMode", "name": "MOUSE_MODE_CONFINED", "value": "3"}, {"description": "Arrow cursor. Standard, default pointing cursor.", "enum": "CursorShape", "name": "CURSOR_ARROW", "value": "0"}, {"description": "I-beam cursor. Usually used to show where the text cursor will appear when the mouse is clicked.", "enum": "CursorShape", "name": "CURSOR_IBEAM", "value": "1"}, {"description": "Pointing hand cursor. Usually used to indicate the pointer is over a link or other interactable item.", "enum": "CursorShape", "name": "CURSOR_POINTING_HAND", "value": "2"}, {"description": "Cross cursor. Typically appears over regions in which a drawing operation can be performance or for selections.", "enum": "CursorShape", "name": "CURSOR_CROSS", "value": "3"}, {"description": "Wait cursor. Indicates that the application is busy performing an operation.", "enum": "CursorShape", "name": "CURSOR_WAIT", "value": "4"}, {"description": "Busy cursor. See [code]CURSOR_WAIT[/code].", "enum": "CursorShape", "name": "CURSOR_BUSY", "value": "5"}, {"description": "Drag cursor. Usually displayed when dragging something.", "enum": "CursorShape", "name": "CURSOR_DRAG", "value": "6"}, {"description": "Can drop cursor. Usually displayed when dragging something to indicate that it can be dropped at the current position.", "enum": "CursorShape", "name": "CURSOR_CAN_DROP", "value": "7"}, {"description": "Forbidden cursor. Indicates that the current action is forbidden (for example, when dragging something) or that the control at a position is disabled.", "enum": "CursorShape", "name": "CURSOR_FORBIDDEN", "value": "8"}, {"description": "Vertical resize mouse cursor. A double headed vertical arrow. It tells the user they can resize the window or the panel vertically.", "enum": "CursorShape", "name": "CURSOR_VSIZE", "value": "9"}, {"description": "Horizontal resize mouse cursor. A double headed horizontal arrow. It tells the user they can resize the window or the panel horizontally.", "enum": "CursorShape", "name": "CURSOR_HSIZE", "value": "10"}, {"description": "Window resize mouse cursor. The cursor is a double headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically.", "enum": "CursorShape", "name": "CURSOR_BDIAGSIZE", "value": "11"}, {"description": "Window resize mouse cursor. The cursor is a double headed arrow that goes from the top left to the bottom right, the opposite of [code]CURSOR_BDIAGSIZE[/code]. It tells the user they can resize the window or the panel both horizontally and vertically.", "enum": "CursorShape", "name": "CURSOR_FDIAGSIZE", "value": "12"}, {"description": "Move cursor. Indicates that something can be moved.", "enum": "CursorShape", "name": "CURSOR_MOVE", "value": "13"}, {"description": "Vertical split mouse cursor. On Windows, it's the same as [code]CURSOR_VSIZE[/code].", "enum": "CursorShape", "name": "CURSOR_VSPLIT", "value": "14"}, {"description": "Horizontal split mouse cursor. On Windows, it's the same as [code]CURSOR_HSIZE[/code].", "enum": "CursorShape", "name": "CURSOR_HSPLIT", "value": "15"}, {"description": "Help cursor. Usually a question mark.", "enum": "CursorShape", "name": "CURSOR_HELP", "value": "16"}], "demos": {"links": []}, "description": "A Singleton that deals with inputs. This includes key presses, mouse buttons and movement, joypads, and input actions. Actions and their events can be set in the Project Settings / Input Map tab. Or be set with [InputMap].", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "This will simulate pressing the specified action.", "name": "action_press", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "If the specified action is already pressed, this will release it.", "name": "action_release", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mapping", "type": "String"}, {"default": "false", "description": "", "index": "1", "name": "update_existing", "type": "bool"}], "description": "Add a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.", "name": "add_joy_mapping", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "If the device has an accelerometer, this will return the acceleration. Otherwise, it returns an empty [Vector3].", "name": "get_accelerometer", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "", "name": "get_action_strength", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns an [Array] containing the device IDs of all currently connected joypads.", "name": "get_connected_joypads", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "If the device has an accelerometer, this will return the gravity. Otherwise, it returns an empty [Vector3].", "name": "get_gravity", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "If the device has a gyroscope, this will return the rate of rotation in rad/s around a device's x, y, and z axis. Otherwise, it returns an empty [Vector3].", "name": "get_gyroscope", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}, {"description": "", "index": "1", "name": "axis", "type": "int"}], "description": "Returns the current value of the joypad axis at given index (see [code]JOY_*[/code] constants in [@GlobalScope])", "name": "get_joy_axis", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "String"}], "description": "", "name": "get_joy_axis_index_from_string", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "axis_index", "type": "int"}], "description": "", "name": "get_joy_axis_string", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "button", "type": "String"}], "description": "", "name": "get_joy_button_index_from_string", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "button_index", "type": "int"}], "description": "", "name": "get_joy_button_string", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}], "description": "Returns a SDL2 compatible device guid on platforms that use gamepad remapping. Returns \"Default Gamepad\" otherwise.", "name": "get_joy_guid", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}], "description": "Returns the name of the joypad at the specified device index", "name": "get_joy_name", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}], "description": "Returns the duration of the current vibration effect in seconds.", "name": "get_joy_vibration_duration", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}], "description": "Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor.", "name": "get_joy_vibration_strength", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion.", "name": "get_last_mouse_speed", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "If the device has a magnetometer, this will return the magnetic field strength in micro-Tesla for all axes.", "name": "get_magnetometer", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time the bits are added together.", "name": "get_mouse_button_mask", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the mouse mode. See the constants for more information.", "name": "get_mouse_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Returns [code]true[/code] when the user starts pressing the action event, meaning it's true only on the frame that the user pressed down the button.\n\t\t\t\tThis is useful for code that needs to run only once when an action is pressed, instead of every frame while it's pressed.", "name": "is_action_just_pressed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Returns [code]true[/code] when the user stops pressing the action event, meaning it's true only on the frame that the user released the button.", "name": "is_action_just_released", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Returns [code]true[/code] if you are pressing the action event.", "name": "is_action_pressed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}, {"description": "", "index": "1", "name": "button", "type": "int"}], "description": "Returns [code]true[/code] if you are pressing the joypad button. (see [code]JOY_*[/code] constants in [@GlobalScope])", "name": "is_joy_button_pressed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}], "description": "Returns [code]true[/code] if the system knows the specified device. This means that it sets all button and axis indices exactly as defined in the [code]JOY_*[/code] constants (see [@GlobalScope]). Unknown joypads are not expected to match these constants, but you can still retrieve events from them.", "name": "is_joy_known", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "scancode", "type": "int"}], "description": "Returns [code]true[/code] if you are pressing the key. You can pass [code]KEY_*[/code], which are pre-defined constants listed in [@GlobalScope].", "name": "is_key_pressed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "button", "type": "int"}], "description": "Returns [code]true[/code] if you are pressing the mouse button. You can pass [code]BUTTON_*[/code], which are pre-defined constants listed in [@GlobalScope].", "name": "is_mouse_button_pressed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}, {"description": "", "index": "1", "name": "connected", "type": "bool"}, {"description": "", "index": "2", "name": "name", "type": "String"}, {"description": "", "index": "3", "name": "guid", "type": "String"}], "description": "", "name": "joy_connection_changed", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "event", "type": "InputEvent"}], "description": "Feeds an [InputEvent] to the game. Can be used to artificially trigger input events from code.", "name": "parse_input_event", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "guid", "type": "String"}], "description": "Removes all mappings from the internal db that match the given uid.", "name": "remove_joy_mapping", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "image", "type": "Resource"}, {"default": "0", "description": "", "index": "1", "name": "shape", "type": "int"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "2", "name": "hotspot", "type": "Vector2"}], "description": "Set a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified. Passing [code]null[/code] to the image parameter resets to the system cursor. See enum [code]CURSOR_*[/code] for the list of shapes.\n\t\t\t\t[code]image[/code]'s size must be lower than 256x256.\n\t\t\t\t[code]hotspot[/code] must be within [code]image[/code]'s size.", "name": "set_custom_mouse_cursor", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "0", "description": "", "index": "0", "name": "shape", "type": "int"}], "description": "", "name": "set_default_cursor_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mode", "type": "int"}], "description": "Set the mouse mode. See the constants for more information.", "name": "set_mouse_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}, {"description": "", "index": "1", "name": "weak_magnitude", "type": "float"}, {"description": "", "index": "2", "name": "strong_magnitude", "type": "float"}, {"default": "0", "description": "", "index": "3", "name": "duration", "type": "float"}], "description": "Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. weak_magnitude is the strength of the weak motor (between 0 and 1) and strong_magnitude is the strength of the strong motor (between 0 and 1). duration is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).\n\t\t\t\tNote that not every hardware is compatible with long effect durations, it is recommended to restart an effect if in need to play it for more than a few seconds.", "name": "start_joy_vibration", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}], "description": "Stops the vibration of the joypad.", "name": "stop_joy_vibration", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "to", "type": "Vector2"}], "description": "Sets the mouse position to the specified vector.", "name": "warp_mouse_position", "return_": {"description": "", "type": "void"}}], "name": "Input", "signals": [{"arguments": [{"description": "", "index": "0", "name": "device", "type": "int"}, {"description": "", "index": "1", "name": "connected", "type": "bool"}], "description": "Emitted when a joypad device has been connected or disconnected.", "name": "joy_connection_changed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/index.html"}]}}, "InputDefault": {"brief_description": "Default implementation of the [Input] class.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Default implementation of the [Input] class, used internally by the editor and games for default input management.", "inherits": "Input", "members": [], "methods": [], "name": "InputDefault", "signals": [], "tutorials": {"links": []}}, "InputEvent": {"brief_description": "Generic input event", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Base class of all sort of input event. See [method Node._input].", "inherits": "Resource", "members": [{"description": "The event's device ID.", "getter": "get_device", "name": "device", "setter": "set_device", "type": "int"}], "methods": [{"arguments": [], "description": "Returns a [String] representation of the event.", "name": "as_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "", "name": "get_action_strength", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Returns [code]true[/code] if this input event matches a pre-defined action of any type.", "name": "is_action", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Returns [code]true[/code] if the given action is being pressed (and is not an echo event for KEY events). Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].", "name": "is_action_pressed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Returns [code]true[/code] if the given action is released (i.e. not pressed). Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].", "name": "is_action_released", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this input event's type is one of the [code]InputEvent[/code] constants.", "name": "is_action_type", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this input event is an echo event (only for events of type KEY).", "name": "is_echo", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this input event is pressed. Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].", "name": "is_pressed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "event", "type": "InputEvent"}], "description": "", "name": "shortcut_match", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "xform", "type": "Transform2D"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "1", "name": "local_ofs", "type": "Vector2"}], "description": "", "name": "xformed_by", "qualifiers": "const", "return_": {"description": "", "type": "InputEvent"}}], "name": "InputEvent", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/inputevent.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/2d/2d_transforms.html"}]}}, "InputEventAction": {"brief_description": "Input event type for actions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Contains a generic action which can be targeted from several type of inputs. Actions can be created from the project settings menu [code]Project > Project Settings > Input Map[/code]. See [method Node._input].", "inherits": "InputEvent", "members": [{"description": "The action's name. Actions are accessed via this [String].", "getter": "get_action", "name": "action", "setter": "set_action", "type": "String"}, {"description": "If [code]true[/code] the action's state is pressed. If [code]false[/code] the action's state is released.", "getter": "is_pressed", "name": "pressed", "setter": "set_pressed", "type": "bool"}], "methods": [], "name": "InputEventAction", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/inputevent.html#actions"}]}}, "InputEventGesture": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "InputEventWithModifiers", "members": [{"description": "", "getter": "get_position", "name": "position", "setter": "set_position", "type": "Vector2"}], "methods": [], "name": "InputEventGesture", "signals": [], "tutorials": {"links": []}}, "InputEventJoypadButton": {"brief_description": "Input event for gamepad buttons.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Input event type for gamepad buttons. For joysticks see [InputEventJoypadMotion].", "inherits": "InputEvent", "members": [{"description": "Button identifier. One of the [code]JOY_BUTTON_*[/code] constants from [@GlobalScope].", "getter": "get_button_index", "name": "button_index", "setter": "set_button_index", "type": "int"}, {"description": "If [code]true[/code] the button's state is pressed. If [code]false[/code] the button's state is released.", "getter": "is_pressed", "name": "pressed", "setter": "set_pressed", "type": "bool"}, {"description": "Represents the pressure the user puts on the button with his finger, if the controller supports it. Ranges from [code]0[/code] to [code]1[/code].", "getter": "get_pressure", "name": "pressure", "setter": "set_pressure", "type": "float"}], "methods": [], "name": "InputEventJoypadButton", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/inputevent.html"}]}}, "InputEventJoypadMotion": {"brief_description": "Input event type for gamepad joysticks and other motions. For buttons see [code]InputEventJoypadButton[/code].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Stores information about joystick motions. One [code]InputEventJoypadMotion[/code] represents one axis at a time.", "inherits": "InputEvent", "members": [{"description": "Axis identifier. Use one of the [code]JOY_AXIS_*[/code] constants in [@GlobalScope].", "getter": "get_axis", "name": "axis", "setter": "set_axis", "type": "int"}, {"description": "Current position of the joystick on the given axis. The value ranges from [code]-1.0[/code] to [code]1.0[/code]. A value of [code]0[/code] means the axis is in its resting position.", "getter": "get_axis_value", "name": "axis_value", "setter": "set_axis_value", "type": "float"}], "methods": [], "name": "InputEventJoypadMotion", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/inputevent.html"}]}}, "InputEventKey": {"brief_description": "Input event type for keyboard events.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Stores key presses on the keyboard. Supports key presses, key releases and [member echo] events.", "inherits": "InputEventWithModifiers", "members": [{"description": "If [code]true[/code] the key was already pressed before this event. It means the user is holding the key down.", "getter": "is_echo", "name": "echo", "setter": "set_echo", "type": "bool"}, {"description": "If [code]true[/code] the key's state is pressed. If [code]false[/code] the key's state is released.", "getter": "is_pressed", "name": "pressed", "setter": "set_pressed", "type": "bool"}, {"description": "Key scancode, one of the [code]KEY_*[/code] constants in [@GlobalScope].", "getter": "get_scancode", "name": "scancode", "setter": "set_scancode", "type": "int"}, {"description": "Key unicode identifier when relevant.", "getter": "get_unicode", "name": "unicode", "setter": "set_unicode", "type": "int"}], "methods": [{"arguments": [], "description": "Returns the scancode combined with modifier keys such as [code]Shift[/code] or [code]Alt[/code]. See also [InputEventWithModifiers].", "name": "get_scancode_with_modifiers", "qualifiers": "const", "return_": {"description": "", "type": "int"}}], "name": "InputEventKey", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/inputevent.html"}]}}, "InputEventMagnifyGesture": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "InputEventGesture", "members": [{"description": "", "getter": "get_factor", "name": "factor", "setter": "set_factor", "type": "float"}], "methods": [], "name": "InputEventMagnifyGesture", "signals": [], "tutorials": {"links": []}}, "InputEventMouse": {"brief_description": "Base input event type for mouse events.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Stores general mouse events information.", "inherits": "InputEventWithModifiers", "members": [{"description": "Mouse button mask identifier, one of or a bitwise combination of the BUTTON_MASK_* constants in [@GlobalScope].", "getter": "get_button_mask", "name": "button_mask", "setter": "set_button_mask", "type": "int"}, {"description": "Mouse position relative to the current [Viewport] when used in [method Control._gui_input], otherwise is at 0,0.", "getter": "get_global_position", "name": "global_position", "setter": "set_global_position", "type": "Vector2"}, {"description": "Mouse local position relative to the [Viewport]. If used in [method Control._gui_input] the position is relative to the current [Control] which is under the mouse.", "getter": "get_position", "name": "position", "setter": "set_position", "type": "Vector2"}], "methods": [], "name": "InputEventMouse", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/inputevent.html"}]}}, "InputEventMouseButton": {"brief_description": "Input event type for mouse button events.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Contains mouse click information. See [method Node._input].", "inherits": "InputEventMouse", "members": [{"description": "Mouse button identifier, one of the BUTTON_* or BUTTON_WHEEL_* constants in [@GlobalScope].", "getter": "get_button_index", "name": "button_index", "setter": "set_button_index", "type": "int"}, {"description": "If [code]true[/code] the mouse button's state is a double-click. If [code]false[/code] the mouse button's state is released.", "getter": "is_doubleclick", "name": "doubleclick", "setter": "set_doubleclick", "type": "bool"}, {"description": "Magnitude. Amount (or delta) of the event. Used for scroll events, indicates scroll amount (vertically or horizontally). Only supported on some platforms, sensitivity varies by platform. May be 0 if not supported.", "getter": "get_factor", "name": "factor", "setter": "set_factor", "type": "float"}, {"description": "If [code]true[/code] the mouse button's state is pressed. If [code]false[/code] the mouse button's state is released.", "getter": "is_pressed", "name": "pressed", "setter": "set_pressed", "type": "bool"}], "methods": [], "name": "InputEventMouseButton", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/mouse_and_input_coordinates.html"}]}}, "InputEventMouseMotion": {"brief_description": "Input event type for mouse motion events.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Contains mouse motion information. Supports relative, absolute positions and speed. See [method Node._input].", "inherits": "InputEventMouse", "members": [{"description": "Mouse position relative to the previous position (position at the last frame).", "getter": "get_relative", "name": "relative", "setter": "set_relative", "type": "Vector2"}, {"description": "Mouse speed.", "getter": "get_speed", "name": "speed", "setter": "set_speed", "type": "Vector2"}], "methods": [], "name": "InputEventMouseMotion", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/mouse_and_input_coordinates.html"}]}}, "InputEventPanGesture": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "InputEventGesture", "members": [{"description": "", "getter": "get_delta", "name": "delta", "setter": "set_delta", "type": "Vector2"}], "methods": [], "name": "InputEventPanGesture", "signals": [], "tutorials": {"links": []}}, "InputEventScreenDrag": {"brief_description": "Input event type for screen drag events.\n\t\t(only available on mobile devices)", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Contains screen drag information. See [method Node._input].", "inherits": "InputEvent", "members": [{"description": "Drag event index in the case of a multi-drag event.", "getter": "get_index", "name": "index", "setter": "set_index", "type": "int"}, {"description": "Drag position.", "getter": "get_position", "name": "position", "setter": "set_position", "type": "Vector2"}, {"description": "Drag position relative to its start position.", "getter": "get_relative", "name": "relative", "setter": "set_relative", "type": "Vector2"}, {"description": "Drag speed.", "getter": "get_speed", "name": "speed", "setter": "set_speed", "type": "Vector2"}], "methods": [], "name": "InputEventScreenDrag", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/inputevent.html"}]}}, "InputEventScreenTouch": {"brief_description": "Input event type for screen touch events.\n\t\t(only available on mobile devices)", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Stores multi-touch press/release information. Supports touch press, touch release and [member index] for multi-touch count and order.", "inherits": "InputEvent", "members": [{"description": "Touch index in the case of a multi-touch event. One index = one finger.", "getter": "get_index", "name": "index", "setter": "set_index", "type": "int"}, {"description": "Touch position.", "getter": "get_position", "name": "position", "setter": "set_position", "type": "Vector2"}, {"description": "If [code]true[/code] the touch's state is pressed. If [code]false[/code] the touch's state is released.", "getter": "is_pressed", "name": "pressed", "setter": "set_pressed", "type": "bool"}], "methods": [], "name": "InputEventScreenTouch", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/inputevent.html"}]}}, "InputEventWithModifiers": {"brief_description": "Base class for keys events with modifiers.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Contains keys events information with modifiers support like [code]SHIFT[/code] or [code]ALT[/code]. See [method Node._input].", "inherits": "InputEvent", "members": [{"description": "State of the Alt modifier.", "getter": "get_alt", "name": "alt", "setter": "set_alt", "type": "bool"}, {"description": "State of the Command modifier.", "getter": "get_command", "name": "command", "setter": "set_command", "type": "bool"}, {"description": "State of the Ctrl modifier.", "getter": "get_control", "name": "control", "setter": "set_control", "type": "bool"}, {"description": "State of the Meta modifier.", "getter": "get_metakey", "name": "meta", "setter": "set_metakey", "type": "bool"}, {"description": "State of the Shift modifier.", "getter": "get_shift", "name": "shift", "setter": "set_shift", "type": "bool"}], "methods": [], "name": "InputEventWithModifiers", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/inputevent.html"}]}}, "InputMap": {"brief_description": "Singleton that manages [InputEventAction].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Manages all [InputEventAction] which can be created/modified from the project settings menu [code]Project > Project Settings > Input Map[/code] or in code with [method add_action] and [method action_add_event]. See [method Node._input].", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}, {"description": "", "index": "1", "name": "event", "type": "InputEvent"}], "description": "Adds an [InputEvent] to an action. This [InputEvent] will trigger the action.", "name": "action_add_event", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}, {"description": "", "index": "1", "name": "event", "type": "InputEvent"}], "description": "Removes an [InputEvent] from an action.", "name": "action_erase_event", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Removes all events from an action.", "name": "action_erase_events", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}, {"description": "", "index": "1", "name": "event", "type": "InputEvent"}], "description": "Returns [code]true[/code] if the action has the given [InputEvent] associated with it.", "name": "action_has_event", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}, {"description": "", "index": "1", "name": "deadzone", "type": "float"}], "description": "", "name": "action_set_deadzone", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}, {"default": "0.5", "description": "", "index": "1", "name": "deadzone", "type": "float"}], "description": "Adds an empty action to the [code]InputMap[/code] with a configurable [code]deadzone[/code].\n\t\t\t\tAn [InputEvent] can then be added to this action with [method action_add_event].", "name": "add_action", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Removes an action from the [code]InputMap[/code].", "name": "erase_action", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "event", "type": "InputEvent"}, {"description": "", "index": "1", "name": "action", "type": "String"}], "description": "Returns [true] if the given event is part of an existing action. This method ignores keyboard modifiers if the given [InputEvent] is not pressed (for proper release detection). See [method action_has_event] if you don't want this behavior.", "name": "event_is_action", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Returns an array of [InputEvent]s associated with a given action.", "name": "get_action_list", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns an array of all actions in the [code]InputMap[/code].", "name": "get_actions", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "action", "type": "String"}], "description": "Returns [code]true[/code] if the [code]InputMap[/code] has a registered action with the given name.", "name": "has_action", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Clears all [InputEventAction] in the [code]InputMap[/code] and load it anew from [ProjectSettings].", "name": "load_from_globals", "return_": {"description": "", "type": "void"}}], "name": "InputMap", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/inputs/inputevent.html#inputmap"}]}}, "InstancePlaceholder": {"brief_description": "Placeholder for the root [Node] of a [PackedScene].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Turning on the option [b]Load As Placeholder[/b] for an instanced scene in the editor causes it to be replaced by an InstancePlaceholder when running the game. This makes it possible to delay actually loading the scene until calling [method replace_by_instance]. This is useful to avoid loading large scenes all at once by loading parts of it selectively.\n\t\tThe InstancePlaceholder does not have a transform. This causes any child nodes to be positioned relatively to the Viewport from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again.", "inherits": "Node", "members": [], "methods": [{"arguments": [{"default": "false", "description": "", "index": "0", "name": "replace", "type": "bool"}, {"default": "null", "description": "", "index": "1", "name": "custom_scene", "type": "PackedScene"}], "description": "", "name": "create_instance", "return_": {"description": "", "type": "Node"}}, {"arguments": [], "description": "Retrieve the path to the [PackedScene] resource file that is loaded by default when calling [method replace_by_instance].", "name": "get_instance_path", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "with_order", "type": "bool"}], "description": "", "name": "get_stored_values", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"default": "null", "description": "", "index": "0", "name": "custom_scene", "type": "PackedScene"}], "description": "Replace this placeholder by the scene handed as an argument, or the original scene if no argument is given. As for all resources, the scene is loaded only if it's not loaded already. By manually loading the scene beforehand, delays caused by this function can be avoided.", "name": "replace_by_instance", "return_": {"description": "", "type": "void"}}], "name": "InstancePlaceholder", "signals": [], "tutorials": {"links": []}}, "InterpolatedCamera": {"brief_description": "Camera which moves toward another node.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "InterpolatedCamera is a [Camera] which smoothly moves to match a target node's position and rotation.\n\t\tIf it is not [member enabled] or does not have a valid target set, InterpolatedCamera acts like a normal Camera.", "inherits": "Camera", "members": [{"description": "If [code]true[/code] and a target is set, the camera will move automatically.", "getter": "is_interpolation_enabled", "name": "enabled", "setter": "set_interpolation_enabled", "type": "bool"}, {"description": "How quickly the camera moves toward its target. Higher values will result in tighter camera motion.", "getter": "get_speed", "name": "speed", "setter": "set_speed", "type": "float"}, {"description": "The target's [NodePath].", "getter": "get_target_path", "name": "target", "setter": "set_target_path", "type": "NodePath"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "target", "type": "Object"}], "description": "Sets the node to move toward and orient with.", "name": "set_target", "return_": {"description": "", "type": "void"}}], "name": "InterpolatedCamera", "signals": [], "tutorials": {"links": []}}, "ItemList": {"brief_description": "Control that provides a list of selectable items (and/or icons) in a single column, or optionally in multiple columns.", "category": "Core", "constants": [{"description": "", "enum": "IconMode", "name": "ICON_MODE_TOP", "value": "0"}, {"description": "", "enum": "IconMode", "name": "ICON_MODE_LEFT", "value": "1"}, {"description": "", "enum": "SelectMode", "name": "SELECT_SINGLE", "value": "0"}, {"description": "", "enum": "SelectMode", "name": "SELECT_MULTI", "value": "1"}], "demos": {"links": []}, "description": "This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons, or both text and icon. Tooltips are supported and may be different for every item in the list.\n\t\tSelectable items in the list may be selected or deselected and multiple selection may be enabled. Selection with right mouse button may also be enabled to allow use of popup context menus. Items may also be 'activated' with a double click (or Enter key).", "inherits": "Control", "members": [{"description": "If [code]true[/code] the currently selected item may be selected again.", "getter": "get_allow_reselect", "name": "allow_reselect", "setter": "set_allow_reselect", "type": "bool"}, {"description": "If [code]true[/code] a right mouse button click can select items.", "getter": "get_allow_rmb_select", "name": "allow_rmb_select", "setter": "set_allow_rmb_select", "type": "bool"}, {"description": "", "getter": "has_auto_height", "name": "auto_height", "setter": "set_auto_height", "type": "bool"}, {"description": "", "getter": "get_fixed_column_width", "name": "fixed_column_width", "setter": "set_fixed_column_width", "type": "int"}, {"description": "", "getter": "get_fixed_icon_size", "name": "fixed_icon_size", "setter": "set_fixed_icon_size", "type": "Vector2"}, {"description": "", "getter": "get_icon_mode", "name": "icon_mode", "setter": "set_icon_mode", "type": "int"}, {"description": "", "getter": "get_icon_scale", "name": "icon_scale", "setter": "set_icon_scale", "type": "float"}, {"description": "", "getter": "get_max_columns", "name": "max_columns", "setter": "set_max_columns", "type": "int"}, {"description": "", "getter": "get_max_text_lines", "name": "max_text_lines", "setter": "set_max_text_lines", "type": "int"}, {"description": "", "getter": "is_same_column_width", "name": "same_column_width", "setter": "set_same_column_width", "type": "bool"}, {"description": "Allow single or multiple selection. See the [code]SELECT_*[/code] constants.", "getter": "get_select_mode", "name": "select_mode", "setter": "set_select_mode", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "icon", "type": "Texture"}, {"default": "true", "description": "", "index": "1", "name": "selectable", "type": "bool"}], "description": "Adds an item to the item list with no text, only an icon.", "name": "add_icon_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}, {"default": "null", "description": "", "index": "1", "name": "icon", "type": "Texture"}, {"default": "true", "description": "", "index": "2", "name": "selectable", "type": "bool"}], "description": "Adds an item to the item list with specified text.  Specify an icon of null for a list item with no icon.\n\t\t\t\tIf selectable is true the list item will be selectable.", "name": "add_item", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Remove all items from the list.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Ensure selection is visible, adjusting the scroll position as necessary.", "name": "ensure_current_is_visible", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}, {"default": "false", "description": "", "index": "1", "name": "exact", "type": "bool"}], "description": "Given a position within the control return the item (if any) at that point.", "name": "get_item_at_position", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return count of items currently in the item list.", "name": "get_item_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_item_custom_bg_color", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_item_custom_fg_color", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_item_icon", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns a [Color] modulating item's icon at the specified index.", "name": "get_item_icon_modulate", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_item_icon_region", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_item_metadata", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the text for specified item index.", "name": "get_item_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return tooltip hint for specified item index.", "name": "get_item_tooltip", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the list of selected indexes.", "name": "get_selected_items", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [], "description": "Returns the current vertical scroll bar for the List.", "name": "get_v_scroll", "return_": {"description": "", "type": "VScrollBar"}}, {"arguments": [], "description": "Returns [code]true[/code] if one or more items are selected.", "name": "is_anything_selected", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns whether or not the item at the specified index is disabled", "name": "is_item_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns whether or not the item at the specified index is selectable.", "name": "is_item_selectable", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns whether the tooltip is enabled for specified item index.", "name": "is_item_tooltip_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns whether or not item at the specified index is currently selected.", "name": "is_selected", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "from_idx", "type": "int"}, {"description": "", "index": "1", "name": "to_idx", "type": "int"}], "description": "Moves item at index [code]from_idx[/code] to [code]to_idx[/code].", "name": "move_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Remove item at specified index from the list.", "name": "remove_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"default": "true", "description": "", "index": "1", "name": "single", "type": "bool"}], "description": "Select the item at the specified index.\n\t\t\t\tNote:  This method does not trigger the item selection signal.", "name": "select", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "custom_bg_color", "type": "Color"}], "description": "", "name": "set_item_custom_bg_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "custom_fg_color", "type": "Color"}], "description": "", "name": "set_item_custom_fg_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "disabled", "type": "bool"}], "description": "Disable (or enable) item at specified index.\n\t\t\t\tDisabled items are not be selectable and do not fire activation (Enter or double-click) signals.", "name": "set_item_disabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "icon", "type": "Texture"}], "description": "Set (or replace) icon of the item at the specified index.", "name": "set_item_icon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "modulate", "type": "Color"}], "description": "Sets a modulating [Color] for item's icon at the specified index.", "name": "set_item_icon_modulate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}], "description": "", "name": "set_item_icon_region", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "metadata", "type": "Variant"}], "description": "Sets a value (of any type) to be stored with the item at the specified index.", "name": "set_item_metadata", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "selectable", "type": "bool"}], "description": "Allow or disallow selection of the item at the specified index.", "name": "set_item_selectable", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "text", "type": "String"}], "description": "Sets text of item at specified index.", "name": "set_item_text", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "tooltip", "type": "String"}], "description": "Sets tooltip hint for item at specified index.", "name": "set_item_tooltip", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "Sets whether the tooltip is enabled for specified item index.", "name": "set_item_tooltip_enabled", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Sorts items in the list by their text.", "name": "sort_items_by_text", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Ensure item at specified index is not selected.", "name": "unselect", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Ensure there are no items selected.", "name": "unselect_all", "return_": {"description": "", "type": "void"}}], "name": "ItemList", "signals": [{"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Fired when specified list item is activated via double click or Enter.", "name": "item_activated"}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "at_position", "type": "Vector2"}], "description": "Fired when specified list item has been selected via right mouse clicking.\n\t\t\t\tThe click position is also provided to allow appropriate popup of context menus\n\t\t\t\tat the correct location.", "name": "item_rmb_selected"}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Fired when specified item has been selected.", "name": "item_selected"}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "selected", "type": "bool"}], "description": "Fired when a multiple selection is altered on a list allowing multiple selection.", "name": "multi_selected"}, {"arguments": [], "description": "", "name": "nothing_selected"}, {"arguments": [{"description": "", "index": "0", "name": "at_position", "type": "Vector2"}], "description": "", "name": "rmb_clicked"}], "tutorials": {"links": []}}, "JSON": {"brief_description": "Helper class for parsing JSON data.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Helper class for parsing JSON data. For usage example and other important hints, see [JSONParseResult].", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "json", "type": "String"}], "description": "Parses a JSON encoded string and returns a [JSONParseResult] containing the result.", "name": "parse", "return_": {"description": "", "type": "JSONParseResult"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}, {"default": "\"\"", "description": "", "index": "1", "name": "indent", "type": "String"}, {"default": "false", "description": "", "index": "2", "name": "sort_keys", "type": "bool"}], "description": "Converts a Variant var to JSON text and returns the result. Useful for serializing data to store or send over the network.", "name": "print", "return_": {"description": "", "type": "String"}}], "name": "JSON", "signals": [], "tutorials": {"links": []}}, "JSONParseResult": {"brief_description": "Data class wrapper for decoded JSON.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Returned by [method JSON.parse], [code]JSONParseResult[/code] contains decoded JSON or error information if JSON source not successfully parsed. You can check if JSON source was successfully parsed with [code]if json_result.error == OK[/code].", "inherits": "Reference", "members": [{"description": "The error type if JSON source was not successfully parsed. See [@GlobalScope] ERR_* constants.", "getter": "get_error", "name": "error", "setter": "set_error", "type": "int"}, {"description": "The line number where the error occurred if JSON source was not successfully parsed.", "getter": "get_error_line", "name": "error_line", "setter": "set_error_line", "type": "int"}, {"description": "The error message if JSON source was not successfully parsed. See [@GlobalScope] ERR_* constants.", "getter": "get_error_string", "name": "error_string", "setter": "set_error_string", "type": "String"}, {"description": "A [Variant] containing the parsed JSON. Use typeof() to check if it is what you expect. For example, if JSON source starts with curly braces ([code]{}[/code]) a [Dictionary] will be returned, if JSON source starts with braces ([code][][/code]) an [Array] will be returned.\n\t\t\t[i]Be aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to float types.\n\t\t\tNote that JSON objects do not preserve key order like Godot dictionaries, thus you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:[/i]\n\t\t\t[codeblock]\n\t\t\tvar p = JSON.parse('[\"hello\", \"world\", \"!\"]')\n\t\t\tif typeof(p.result) == TYPE_ARRAY:\n\t\t\t    print(p.result[0]) # prints 'hello'\n\t\t\telse:\n\t\t\t    print(\"unexpected results\")\n\t\t\t[/codeblock]", "getter": "get_result", "name": "result", "setter": "set_result", "type": "Variant"}], "methods": [], "name": "JSONParseResult", "signals": [], "tutorials": {"links": []}}, "JavaScript": {"brief_description": "Singleton that connects the engine with the browser's JavaScript context in HTML5 export.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "The JavaScript singleton is implemented only in HTML5 export. It's used to access the browser's JavaScript context. This allows interaction with embedding pages or calling third-party JavaScript APIs.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "code", "type": "String"}, {"default": "false", "description": "", "index": "1", "name": "use_global_execution_context", "type": "bool"}], "description": "Execute the string [code]code[/code] as JavaScript code within the browser window. This is a call to the actual global JavaScript function [code]eval()[/code].\n\t\t\t\tIf [code]use_global_execution_context[/code] is [code]true[/code], the code will be evaluated in the global execution context. Otherwise, it is evaluated in the execution context of a function within the engine's runtime environment.", "name": "eval", "return_": {"description": "", "type": "Variant"}}], "name": "JavaScript", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/getting_started/workflow/export/exporting_for_web.html#calling-javascript-from-script"}]}}, "Joint": {"brief_description": "Base class for all 3D joints", "category": "Core", "constants": [], "demos": {"links": []}, "description": "All 3D joints link two nodes, has a priority, and can decide if the two bodies of the nodes should be able to collide with each other", "inherits": "Spatial", "members": [{"description": "If [code]true[/code] the two bodies of the nodes are not able to collide with each other.", "getter": "get_exclude_nodes_from_collision", "name": "collision/exclude_nodes", "setter": "set_exclude_nodes_from_collision", "type": "bool"}, {"description": "The [Node], the first side of the Joint attaches to.", "getter": "get_node_a", "name": "nodes/node_a", "setter": "set_node_a", "type": "NodePath"}, {"description": "The [Node], the second side of the Joint attaches to.", "getter": "get_node_b", "name": "nodes/node_b", "setter": "set_node_b", "type": "NodePath"}, {"description": "The order in which the solver is executed compared to the other [Joints], the lower, the earlier.", "getter": "get_solver_priority", "name": "solver/priority", "setter": "set_solver_priority", "type": "int"}], "methods": [], "name": "Joint", "signals": [], "tutorials": {"links": []}}, "Joint2D": {"brief_description": "Base node for all joint constraints in 2D physics.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Base node for all joint constraints in 2D physics. Joints take 2 bodies and apply a custom constraint.", "inherits": "Node2D", "members": [{"description": "When [member node_a] and [member node_b] move in different directions the [code]bias[/code] controls how fast the joint pulls them back to their original position. The lower the [code]bias[/code] the more the two bodies can pull on the joint. Default value: [code]0[/code]", "getter": "get_bias", "name": "bias", "setter": "set_bias", "type": "float"}, {"description": "If [code]true[/code] [member node_a] and [member node_b] can collide. Default value: [code]false[/code].", "getter": "get_exclude_nodes_from_collision", "name": "disable_collision", "setter": "set_exclude_nodes_from_collision", "type": "bool"}, {"description": "The first body attached to the joint. Must derive from [PhysicsBody2D].", "getter": "get_node_a", "name": "node_a", "setter": "set_node_a", "type": "NodePath"}, {"description": "The second body attached to the joint. Must derive from [PhysicsBody2D].", "getter": "get_node_b", "name": "node_b", "setter": "set_node_b", "type": "NodePath"}], "methods": [], "name": "Joint2D", "signals": [], "tutorials": {"links": []}}, "KinematicBody": {"brief_description": "Kinematic body 3D node.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:\n\t\tSimulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).\n\t\tKinematic Characters: KinematicBody also has an API for moving objects (the [method move_and_collide] and [method move_and_slide] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.", "inherits": "PhysicsBody", "members": [{"description": "If the body is at least this close to another body, this body will consider them to be colliding.", "getter": "get_safe_margin", "name": "collision/safe_margin", "setter": "set_safe_margin", "type": "float"}, {"description": "", "getter": "get_axis_lock", "name": "move_lock_x", "setter": "set_axis_lock", "type": "bool"}, {"description": "", "getter": "get_axis_lock", "name": "move_lock_y", "setter": "set_axis_lock", "type": "bool"}, {"description": "", "getter": "get_axis_lock", "name": "move_lock_z", "setter": "set_axis_lock", "type": "bool"}], "methods": [{"arguments": [], "description": "Returns the velocity of the floor. Only updates when calling [method move_and_slide].", "name": "get_floor_velocity", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "slide_idx", "type": "int"}], "description": "Returns a [KinematicCollision], which contains information about a collision that occurred during the last [method move_and_slide] call. Since the body can collide several times in a single call to [method move_and_slide], you must specify the index of the collision in the range 0 to ([method get_slide_count] - 1).", "name": "get_slide_collision", "return_": {"description": "", "type": "KinematicCollision"}}, {"arguments": [], "description": "Returns the number of times the body collided and changed direction during the last call to [method move_and_slide].", "name": "get_slide_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns [code]true[/code] if the body is on the ceiling. Only updates when calling [method move_and_slide].", "name": "is_on_ceiling", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the body is on the floor. Only updates when calling [method move_and_slide].", "name": "is_on_floor", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the body is on a wall. Only updates when calling [method move_and_slide].", "name": "is_on_wall", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "rel_vec", "type": "Vector3"}, {"default": "true", "description": "", "index": "1", "name": "infinite_inertia", "type": "bool"}, {"default": "false", "description": "", "index": "2", "name": "test_only", "type": "bool"}], "description": "Moves the body along the vector [code]rel_vec[/code]. The body will stop if it collides. Returns a [KinematicCollision], which contains information about the collision.\n\t\t\t\tIf [code]test_only[/code] is [code]true[/true], the body does not move but the would-be collision information is given.", "name": "move_and_collide", "return_": {"description": "", "type": "KinematicCollision"}}, {"arguments": [{"description": "", "index": "0", "name": "linear_velocity", "type": "Vector3"}, {"default": "Vector3( 0, 0, 0 )", "description": "", "index": "1", "name": "floor_normal", "type": "Vector3"}, {"default": "false", "description": "", "index": "2", "name": "stop_on_slope", "type": "bool"}, {"default": "4", "description": "", "index": "3", "name": "max_slides", "type": "int"}, {"default": "0.785398", "description": "", "index": "4", "name": "floor_max_angle", "type": "float"}, {"default": "true", "description": "", "index": "5", "name": "infinite_inertia", "type": "bool"}], "description": "Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a [code]KinematicBody[/code] or [RigidBody], it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.\n\t\t\t\t[code]linear_velocity[/code] is a value in pixels per second. Unlike in for example [method move_and_collide], you should [i]not[/i] multiply it with [code]delta[/code] \u2014 this is done by the method.\n\t\t\t\t[code]floor_normal[/code] is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of [code]Vector3(0, 0, 0)[/code], everything is considered a wall. This is useful for topdown games.\n\t\t\t\t[i]TODO: Update for new stop_on_slode argument.[/i] If the body is standing on a slope and the horizontal speed (relative to the floor's speed) goes below [code]slope_stop_min_velocity[/code], the body will stop completely. This prevents the body from sliding down slopes when you include gravity in [code]linear_velocity[/code]. When set to lower values, the body will not be able to stand still on steep slopes.\n\t\t\t\tIf the body collides, it will change direction a maximum of [code]max_slides[/code] times before it stops.\n\t\t\t\t[code]floor_max_angle[/code] is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.\n\t\t\t\tReturns the movement that remained when the body stopped. To get more detailed information about collisions that occurred, use [method get_slide_collision].", "name": "move_and_slide", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "linear_velocity", "type": "Vector3"}, {"description": "", "index": "1", "name": "snap", "type": "Vector3"}, {"default": "Vector3( 0, 0, 0 )", "description": "", "index": "2", "name": "floor_normal", "type": "Vector3"}, {"default": "true", "description": "", "index": "3", "name": "infinite_inertia", "type": "bool"}, {"default": "false", "description": "", "index": "4", "name": "stop_on_slope", "type": "bool"}, {"default": "4", "description": "", "index": "5", "name": "max_bounces", "type": "int"}, {"default": "0.785398", "description": "", "index": "6", "name": "floor_max_angle", "type": "float"}], "description": "Moves the body while keeping it attached to slopes. Similar to [method move_and_slide].\n\t\t\t\tAs long as the [code]snap[/code] vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting[code]snap[/code] to[code](0, 0, 0)[/code] or by using [method move_and_slide] instead.", "name": "move_and_slide_with_snap", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Transform"}, {"description": "", "index": "1", "name": "rel_vec", "type": "Vector3"}, {"description": "", "index": "2", "name": "infinite_inertia", "type": "bool"}], "description": "Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [Transform], then tries to move the body along the vector [code]rel_vec[/code]. Returns [code]true[/code] if a collision would occur.", "name": "test_move", "return_": {"description": "", "type": "bool"}}], "name": "KinematicBody", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/kinematic_character_2d.html"}]}}, "KinematicBody2D": {"brief_description": "Kinematic body 2D node.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:\n\t\tSimulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).\n\t\tKinematic Characters: KinematicBody2D also has an API for moving objects (the [method move_and_collide] and [method move_and_slide] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.", "inherits": "PhysicsBody2D", "members": [{"description": "If the body is at least this close to another body, this body will consider them to be colliding.", "getter": "get_safe_margin", "name": "collision/safe_margin", "setter": "set_safe_margin", "type": "float"}, {"description": "If [code]true[/code] the body's movement will be synchronized to the physics frame. This is useful when animating movement via [AnimationPlayer], for example on moving platforms.", "getter": "is_sync_to_physics_enabled", "name": "motion/sync_to_physics", "setter": "set_sync_to_physics", "type": "bool"}], "methods": [{"arguments": [], "description": "Returns the velocity of the floor. Only updates when calling [method move_and_slide].", "name": "get_floor_velocity", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "slide_idx", "type": "int"}], "description": "Returns a [KinematicCollision2D], which contains information about a collision that occurred during the last [method move_and_slide] call. Since the body can collide several times in a single call to [method move_and_slide], you must specify the index of the collision in the range 0 to ([method get_slide_count] - 1).", "name": "get_slide_collision", "return_": {"description": "", "type": "KinematicCollision2D"}}, {"arguments": [], "description": "Returns the number of times the body collided and changed direction during the last call to [method move_and_slide].", "name": "get_slide_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns [code]true[/code] if the body is on the ceiling. Only updates when calling [method move_and_slide].", "name": "is_on_ceiling", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the body is on the floor. Only updates when calling [method move_and_slide].", "name": "is_on_floor", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the body is on a wall. Only updates when calling [method move_and_slide].", "name": "is_on_wall", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "rel_vec", "type": "Vector2"}, {"default": "true", "description": "", "index": "1", "name": "infinite_inertia", "type": "bool"}, {"default": "true", "description": "", "index": "2", "name": "exclude_raycast_shapes", "type": "bool"}, {"default": "false", "description": "", "index": "3", "name": "test_only", "type": "bool"}], "description": "Moves the body along the vector [code]rel_vec[/code]. The body will stop if it collides. Returns a [KinematicCollision2D], which contains information about the collision.", "name": "move_and_collide", "return_": {"description": "", "type": "KinematicCollision2D"}}, {"arguments": [{"description": "", "index": "0", "name": "linear_velocity", "type": "Vector2"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "1", "name": "floor_normal", "type": "Vector2"}, {"default": "true", "description": "", "index": "2", "name": "infinite_inertia", "type": "bool"}, {"default": "false", "description": "", "index": "3", "name": "stop_on_slope", "type": "bool"}, {"default": "4", "description": "", "index": "4", "name": "max_bounces", "type": "int"}, {"default": "0.785398", "description": "", "index": "5", "name": "floor_max_angle", "type": "float"}], "description": "Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a [code]KinematicBody2D[/code] or [RigidBody2D], it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.\n\t\t\t\t[code]linear_velocity[/code] is a value in pixels per second. Unlike in for example [method move_and_collide], you should [i]not[/i] multiply it with [code]delta[/code] \u2014 this is done by the method.\n\t\t\t\t[code]floor_normal[/code] is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of [code]Vector2(0, 0)[/code], everything is considered a wall. This is useful for topdown games.\n\t\t\t\t[i]TODO: Update for stop_on_slope argument.[/i] If the body is standing on a slope and the horizontal speed (relative to the floor's speed) goes below [code]slope_stop_min_velocity[/code], the body will stop completely. This prevents the body from sliding down slopes when you include gravity in [code]linear_velocity[/code]. When set to lower values, the body will not be able to stand still on steep slopes.\n\t\t\t\tIf the body collides, it will change direction a maximum of [code]max_bounces[/code] times before it stops.\n\t\t\t\t[code]floor_max_angle[/code] is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.\n\t\t\t\tReturns the movement that remained when the body stopped. To get more detailed information about collisions that occurred, use [method get_slide_collision].", "name": "move_and_slide", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "linear_velocity", "type": "Vector2"}, {"description": "", "index": "1", "name": "snap", "type": "Vector2"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "2", "name": "floor_normal", "type": "Vector2"}, {"default": "true", "description": "", "index": "3", "name": "infinite_inertia", "type": "bool"}, {"default": "false", "description": "", "index": "4", "name": "stop_on_slope", "type": "bool"}, {"default": "4", "description": "", "index": "5", "name": "max_bounces", "type": "int"}, {"default": "0.785398", "description": "", "index": "6", "name": "floor_max_angle", "type": "float"}], "description": "Moves the body while keeping it attached to slopes. Similar to [method move_and_slide].\n\t\t\t\tAs long as the [code]snap[/code] vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting[code]snap[/code] to[code](0, 0)[/code] or by using [method move_and_slide] instead.", "name": "move_and_slide_with_snap", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Transform2D"}, {"description": "", "index": "1", "name": "rel_vec", "type": "Vector2"}, {"description": "", "index": "2", "name": "infinite_inertia", "type": "bool"}], "description": "Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [Transform2D], then tries to move the body along the vector [code]rel_vec[/code]. Returns [code]true[/code] if a collision would occur.", "name": "test_move", "return_": {"description": "", "type": "bool"}}], "name": "KinematicBody2D", "signals": [], "tutorials": {"links": []}}, "KinematicCollision": {"brief_description": "Collision data for KinematicBody collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Contains collision data for KinematicBody collisions. When a [KinematicBody] is moved using [method KinematicBody.move_and_collide], it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision object is returned.\n\t\tThis object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.", "inherits": "Reference", "members": [{"description": "The colliding body.", "getter": "get_collider", "name": "collider", "setter": "", "type": "Object"}, {"description": "The colliding body's unique [RID].", "getter": "get_collider_id", "name": "collider_id", "setter": "", "type": "int"}, {"description": "The colliding body's metadata. See [Object].", "getter": "get_collider_metadata", "name": "collider_metadata", "setter": "", "type": "Variant"}, {"description": "The colliding body's shape.", "getter": "get_collider_shape", "name": "collider_shape", "setter": "", "type": "Object"}, {"description": "The colliding shape's index. See [CollisionObject].", "getter": "get_collider_shape_index", "name": "collider_shape_index", "setter": "", "type": "int"}, {"description": "The colliding object's velocity.", "getter": "get_collider_velocity", "name": "collider_velocity", "setter": "", "type": "Vector3"}, {"description": "The moving object's colliding shape.", "getter": "get_local_shape", "name": "local_shape", "setter": "", "type": "Object"}, {"description": "The colliding body's shape's normal at the point of collision.", "getter": "get_normal", "name": "normal", "setter": "", "type": "Vector3"}, {"description": "The point of collision.", "getter": "get_position", "name": "position", "setter": "", "type": "Vector3"}, {"description": "The moving object's remaining movement vector.", "getter": "get_remainder", "name": "remainder", "setter": "", "type": "Vector3"}, {"description": "The distance the moving object traveled before collision.", "getter": "get_travel", "name": "travel", "setter": "", "type": "Vector3"}], "methods": [], "name": "KinematicCollision", "signals": [], "tutorials": {"links": []}}, "KinematicCollision2D": {"brief_description": "Collision data for KinematicBody2D collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Contains collision data for KinematicBody2D collisions. When a [KinematicBody2D] is moved using [method KinematicBody2D.move_and_collide], it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision2D object is returned.\n\t\tThis object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.", "inherits": "Reference", "members": [{"description": "The colliding body.", "getter": "get_collider", "name": "collider", "setter": "", "type": "Object"}, {"description": "The colliding body's unique [RID].", "getter": "get_collider_id", "name": "collider_id", "setter": "", "type": "int"}, {"description": "The colliding body's metadata. See [Object].", "getter": "get_collider_metadata", "name": "collider_metadata", "setter": "", "type": "Variant"}, {"description": "The colliding body's shape.", "getter": "get_collider_shape", "name": "collider_shape", "setter": "", "type": "Object"}, {"description": "The colliding shape's index. See [CollisionObject2D].", "getter": "get_collider_shape_index", "name": "collider_shape_index", "setter": "", "type": "int"}, {"description": "The colliding object's velocity.", "getter": "get_collider_velocity", "name": "collider_velocity", "setter": "", "type": "Vector2"}, {"description": "The moving object's colliding shape.", "getter": "get_local_shape", "name": "local_shape", "setter": "", "type": "Object"}, {"description": "The colliding body's shape's normal at the point of collision.", "getter": "get_normal", "name": "normal", "setter": "", "type": "Vector2"}, {"description": "The point of collision.", "getter": "get_position", "name": "position", "setter": "", "type": "Vector2"}, {"description": "The moving object's remaining movement vector.", "getter": "get_remainder", "name": "remainder", "setter": "", "type": "Vector2"}, {"description": "The distance the moving object traveled before collision.", "getter": "get_travel", "name": "travel", "setter": "", "type": "Vector2"}], "methods": [], "name": "KinematicCollision2D", "signals": [], "tutorials": {"links": []}}, "Label": {"brief_description": "Displays plain text in a line or wrapped inside a rectangle. For formatted text, use [RichTextLabel].", "category": "Core", "constants": [{"description": "Align rows to the left (default).", "enum": "Align", "name": "ALIGN_LEFT", "value": "0"}, {"description": "Align rows centered.", "enum": "Align", "name": "ALIGN_CENTER", "value": "1"}, {"description": "Align rows to the right (default).", "enum": "Align", "name": "ALIGN_RIGHT", "value": "2"}, {"description": "Expand row whitespaces to fit the width.", "enum": "Align", "name": "ALIGN_FILL", "value": "3"}, {"description": "Align the whole text to the top.", "enum": "VAlign", "name": "VALIGN_TOP", "value": "0"}, {"description": "Align the whole text to the center.", "enum": "VAlign", "name": "VALIGN_CENTER", "value": "1"}, {"description": "Align the whole text to the bottom.", "enum": "VAlign", "name": "VALIGN_BOTTOM", "value": "2"}, {"description": "Align the whole text by spreading the rows.", "enum": "VAlign", "name": "VALIGN_FILL", "value": "3"}], "demos": {"links": []}, "description": "Label displays plain text on the screen. It gives you control over the horizontal and vertical alignment, and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics or other formatting. For that, use [RichTextLabel] instead.\n\t\tNote that contrarily to most other [Control]s, Label's [member Control.mouse_filter] defaults to MOUSE_FILTER_IGNORE (i.e. it doesn't react to mouse input events).", "inherits": "Control", "members": [{"description": "Controls the text's horizontal align. Supports left, center, right, and fill, or justify. Set it to one of the [code]ALIGN_*[/code] constants.", "getter": "get_align", "name": "align", "setter": "set_align", "type": "int"}, {"description": "If [code]true[/code], wraps the text inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. Default: false.", "getter": "has_autowrap", "name": "autowrap", "setter": "set_autowrap", "type": "bool"}, {"description": "If [code]true[/code], the Label only shows the text that fits inside its bounding rectangle. It also lets you scale the node down freely.", "getter": "is_clipping_text", "name": "clip_text", "setter": "set_clip_text", "type": "bool"}, {"description": "The node ignores the first [code]lines_skipped[/code] lines before it starts to display text.", "getter": "get_lines_skipped", "name": "lines_skipped", "setter": "set_lines_skipped", "type": "int"}, {"description": "Limits the lines of text the node shows on screen.", "getter": "get_max_lines_visible", "name": "max_lines_visible", "setter": "set_max_lines_visible", "type": "int"}, {"description": "Limits the count of visible characters. If you set [code]percent_visible[/code] to 50, only up to half of the text's characters will display on screen. Useful to animate the text in a dialog box.", "getter": "get_percent_visible", "name": "percent_visible", "setter": "set_percent_visible", "type": "float"}, {"description": "The text to display on screen.", "getter": "get_text", "name": "text", "setter": "set_text", "type": "String"}, {"description": "If [code]true[/code], all the text displays as UPPERCASE.", "getter": "is_uppercase", "name": "uppercase", "setter": "set_uppercase", "type": "bool"}, {"description": "Controls the text's vertical align. Supports top, center, bottom, and fill. Set it to one of the [code]VALIGN_*[/code] constants.", "getter": "get_valign", "name": "valign", "setter": "set_valign", "type": "int"}, {"description": "Restricts the number of characters to display. Set to -1 to disable.", "getter": "get_visible_characters", "name": "visible_characters", "setter": "set_visible_characters", "type": "int"}], "methods": [{"arguments": [], "description": "Returns the amount of lines of text the Label has.", "name": "get_line_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the font size in pixels.", "name": "get_line_height", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the total length of the text.", "name": "get_total_character_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the number of lines shown. Useful if the [code]Label[/code] 's height cannot currently display all lines.", "name": "get_visible_line_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}], "name": "Label", "signals": [], "tutorials": {"links": []}}, "LargeTexture": {"brief_description": "A Texture capable of storing many smaller Textures with offsets.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A Texture capable of storing many smaller Textures with offsets.\n\t\tYou can dynamically add pieces([Texture]) to this [code]LargeTexture[/code] using different offsets.", "inherits": "Texture", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "ofs", "type": "Vector2"}, {"description": "", "index": "1", "name": "texture", "type": "Texture"}], "description": "Add another [Texture] to this [code]LargeTexture[/code], starting on offset \"ofs\".", "name": "add_piece", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Clears the [code]LargeTexture[/code].", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the number of pieces currently in this [code]LargeTexture[/code].", "name": "get_piece_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the offset of the piece with index \"idx\".", "name": "get_piece_offset", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the [Texture] of the piece with index \"idx\".", "name": "get_piece_texture", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "ofs", "type": "Vector2"}], "description": "Sets the offset of the piece with index \"idx\" to \"ofs\".", "name": "set_piece_offset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "texture", "type": "Texture"}], "description": "Sets the [Texture] of the piece with index \"idx\" to  \"ofs\".", "name": "set_piece_texture", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "size", "type": "Vector2"}], "description": "Sets the size of this [code]LargeTexture[/code].", "name": "set_size", "return_": {"description": "", "type": "void"}}], "name": "LargeTexture", "signals": [], "tutorials": {"links": []}}, "Light": {"brief_description": "Provides a base class for different kinds of light nodes.", "category": "Core", "constants": [{"description": "", "enum": "Param", "name": "PARAM_ENERGY", "value": "0"}, {"description": "", "enum": "Param", "name": "PARAM_INDIRECT_ENERGY", "value": "1"}, {"description": "", "enum": "Param", "name": "PARAM_SPECULAR", "value": "2"}, {"description": "", "enum": "Param", "name": "PARAM_RANGE", "value": "3"}, {"description": "", "enum": "Param", "name": "PARAM_ATTENUATION", "value": "4"}, {"description": "", "enum": "Param", "name": "PARAM_SPOT_ANGLE", "value": "5"}, {"description": "", "enum": "Param", "name": "PARAM_SPOT_ATTENUATION", "value": "6"}, {"description": "", "enum": "Param", "name": "PARAM_CONTACT_SHADOW_SIZE", "value": "7"}, {"description": "", "enum": "Param", "name": "PARAM_SHADOW_MAX_DISTANCE", "value": "8"}, {"description": "", "enum": "Param", "name": "PARAM_SHADOW_SPLIT_1_OFFSET", "value": "9"}, {"description": "", "enum": "Param", "name": "PARAM_SHADOW_SPLIT_2_OFFSET", "value": "10"}, {"description": "", "enum": "Param", "name": "PARAM_SHADOW_SPLIT_3_OFFSET", "value": "11"}, {"description": "", "enum": "Param", "name": "PARAM_SHADOW_NORMAL_BIAS", "value": "12"}, {"description": "", "enum": "Param", "name": "PARAM_SHADOW_BIAS", "value": "13"}, {"description": "", "enum": "Param", "name": "PARAM_SHADOW_BIAS_SPLIT_SCALE", "value": "14"}, {"description": "", "enum": "Param", "name": "PARAM_MAX", "value": "15"}, {"description": "Light is ignored when baking. Note: hiding a light does [i]not[/i] affect baking.", "enum": "BakeMode", "name": "BAKE_DISABLED", "value": "0"}, {"description": "Only indirect lighting will be baked. Default value.", "enum": "BakeMode", "name": "BAKE_INDIRECT", "value": "1"}, {"description": "Both direct and indirect light will be baked. Note: you should hide the light if you don't want it to appear twice (dynamic and baked).", "enum": "BakeMode", "name": "BAKE_ALL", "value": "2"}], "demos": {"links": []}, "description": "Light is the abstract base class for light nodes, so it shouldn't be used directly (It can't be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.", "inherits": "VisualInstance", "members": [{"description": "If [code]true[/code] the light only appears in the editor and will not be visible at runtime. Default value:[code]false[/code].", "getter": "is_editor_only", "name": "editor_only", "setter": "set_editor_only", "type": "bool"}, {"description": "The light's bake mode. See [enum BakeMode].", "getter": "get_bake_mode", "name": "light_bake_mode", "setter": "set_bake_mode", "type": "int"}, {"description": "The light's color.", "getter": "get_color", "name": "light_color", "setter": "set_color", "type": "Color"}, {"description": "The light will affect objects in the selected layers.", "getter": "get_cull_mask", "name": "light_cull_mask", "setter": "set_cull_mask", "type": "int"}, {"description": "The light's strength multiplier.", "getter": "get_param", "name": "light_energy", "setter": "set_param", "type": "float"}, {"description": "Secondary multiplier used with indirect light (light bounces). This works in baked light or GIProbe.", "getter": "get_param", "name": "light_indirect_energy", "setter": "set_param", "type": "float"}, {"description": "If [code]true[/code] the light's effect is reversed, darkening areas and casting bright shadows. Default value: [code]false[/code].", "getter": "is_negative", "name": "light_negative", "setter": "set_negative", "type": "bool"}, {"description": "The intensity of the specular blob in objects affected by the light. At [code]0[/code] the light becomes a pure diffuse light.", "getter": "get_param", "name": "light_specular", "setter": "set_param", "type": "float"}, {"description": "Used to adjust shadow appearance. Too small a value results in self shadowing, while too large a value causes shadows to separate from casters. Adjust as needed.", "getter": "get_param", "name": "shadow_bias", "setter": "set_param", "type": "float"}, {"description": "The color of shadows cast by this light.", "getter": "get_shadow_color", "name": "shadow_color", "setter": "set_shadow_color", "type": "Color"}, {"description": "Attempts to reduce [member shadow_bias] gap.", "getter": "get_param", "name": "shadow_contact", "setter": "set_param", "type": "float"}, {"description": "If [code]true[/code] the light will cast shadows. Default value: [code]false[/code].", "getter": "has_shadow", "name": "shadow_enabled", "setter": "set_shadow", "type": "bool"}, {"description": "", "getter": "get_shadow_reverse_cull_face", "name": "shadow_reverse_cull_face", "setter": "set_shadow_reverse_cull_face", "type": "bool"}], "methods": [], "name": "Light", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/lights_and_shadows.html"}]}}, "Light2D": {"brief_description": "Casts light in a 2D environment.", "category": "Core", "constants": [{"description": "Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behaviour of a light.", "enum": "Mode", "name": "MODE_ADD", "value": "0"}, {"description": "Subtracts the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect.", "enum": "Mode", "name": "MODE_SUB", "value": "1"}, {"description": "Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation.", "enum": "Mode", "name": "MODE_MIX", "value": "2"}, {"description": "The light texture of the Light2D is used as a mask, hiding or revealing parts of the screen underneath depending on the value of each pixel of the light (mask) texture.", "enum": "Mode", "name": "MODE_MASK", "value": "3"}, {"description": "No filter applies to the shadow map. See [method shadow_filter].", "enum": "ShadowFilter", "name": "SHADOW_FILTER_NONE", "value": "0"}, {"description": "Percentage closer filtering (3 samples) applies to the shadow map. See [method shadow_filter].", "enum": "ShadowFilter", "name": "SHADOW_FILTER_PCF3", "value": "1"}, {"description": "Percentage closer filtering (5 samples) applies to the shadow map. See [method shadow_filter].", "enum": "ShadowFilter", "name": "SHADOW_FILTER_PCF5", "value": "2"}, {"description": "Percentage closer filtering (7 samples) applies to the shadow map. See [method shadow_filter].", "enum": "ShadowFilter", "name": "SHADOW_FILTER_PCF7", "value": "3"}, {"description": "Percentage closer filtering (9 samples) applies to the shadow map. See [method shadow_filter].", "enum": "ShadowFilter", "name": "SHADOW_FILTER_PCF9", "value": "4"}, {"description": "Percentage closer filtering (13 samples) applies to the shadow map. See [method shadow_filter].", "enum": "ShadowFilter", "name": "SHADOW_FILTER_PCF13", "value": "5"}], "demos": {"links": []}, "description": "Casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related). Note that Light2D can be used as a mask.", "inherits": "Node2D", "members": [{"description": "The Light2D's [Color].", "getter": "get_color", "name": "color", "setter": "set_color", "type": "Color"}, {"description": "If [code]true[/code] Light2D will only appear when editing the scene. Default value: [code]false[/code].", "getter": "is_editor_only", "name": "editor_only", "setter": "set_editor_only", "type": "bool"}, {"description": "If [code]true[/code] Light2D will emit light. Default value: [code]true[/code].", "getter": "is_enabled", "name": "enabled", "setter": "set_enabled", "type": "bool"}, {"description": "The Light2D's energy value. The larger the value, the stronger the light.", "getter": "get_energy", "name": "energy", "setter": "set_energy", "type": "float"}, {"description": "The Light2D's mode. See MODE_* constants for values.", "getter": "get_mode", "name": "mode", "setter": "set_mode", "type": "int"}, {"description": "The offset of the Light2D's [code]texture[/code].", "getter": "get_texture_offset", "name": "offset", "setter": "set_texture_offset", "type": "Vector2"}, {"description": "The height of the Light2D. Used with 2D normal mapping.", "getter": "get_height", "name": "range_height", "setter": "set_height", "type": "float"}, {"description": "The layer mask. Only objects with a matching mask will be affected by the Light2D.", "getter": "get_item_cull_mask", "name": "range_item_cull_mask", "setter": "set_item_cull_mask", "type": "int"}, {"description": "Maximum layer value of objects that are affected by the Light2D. Default value: [code]0[/code].", "getter": "get_layer_range_max", "name": "range_layer_max", "setter": "set_layer_range_max", "type": "int"}, {"description": "Minimum layer value of objects that are affected by the Light2D. Default value: [code]0[/code].", "getter": "get_layer_range_min", "name": "range_layer_min", "setter": "set_layer_range_min", "type": "int"}, {"description": "Maximum [code]Z[/code] value of objects that are affected by the Light2D. Default value: [code]1024[/code].", "getter": "get_z_range_max", "name": "range_z_max", "setter": "set_z_range_max", "type": "int"}, {"description": "Minimum [code]z[/code] value of objects that are affected by the Light2D. Default value: [code]-1024[/code].", "getter": "get_z_range_min", "name": "range_z_min", "setter": "set_z_range_min", "type": "int"}, {"description": "Shadow buffer size. Default value: [code]2048[/code].", "getter": "get_shadow_buffer_size", "name": "shadow_buffer_size", "setter": "set_shadow_buffer_size", "type": "int"}, {"description": "[Color] of shadows cast by the Light2D.", "getter": "get_shadow_color", "name": "shadow_color", "setter": "set_shadow_color", "type": "Color"}, {"description": "If [code]true[/code] the Light2D will cast shadows. Default value: [code]false[/code].", "getter": "is_shadow_enabled", "name": "shadow_enabled", "setter": "set_shadow_enabled", "type": "bool"}, {"description": "Shadow filter type. Use SHADOW_FILTER_* constants to set [code]shadow_filter[/code]. Default value: [code]None[/code].", "getter": "get_shadow_filter", "name": "shadow_filter", "setter": "set_shadow_filter", "type": "int"}, {"description": "Smoothing value for shadows.", "getter": "get_shadow_smooth", "name": "shadow_filter_smooth", "setter": "set_shadow_smooth", "type": "float"}, {"description": "Smooth shadow gradient length.", "getter": "get_shadow_gradient_length", "name": "shadow_gradient_length", "setter": "set_shadow_gradient_length", "type": "float"}, {"description": "The shadow mask. Used with [LightOccluder2D] to cast shadows. Only occluders with a matching shadow mask will cast shadows.", "getter": "get_item_shadow_cull_mask", "name": "shadow_item_cull_mask", "setter": "set_item_shadow_cull_mask", "type": "int"}, {"description": "[Texture] used for the Light2D's appearance.", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}, {"description": "The [code]texture[/code]'s scale factor.", "getter": "get_texture_scale", "name": "texture_scale", "setter": "set_texture_scale", "type": "float"}], "methods": [], "name": "Light2D", "signals": [], "tutorials": {"links": []}}, "LightOccluder2D": {"brief_description": "Occludes light cast by a Light2D, casting shadows.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an [OccluderPolygon2D] in order for the shadow to be computed.", "inherits": "Node2D", "members": [{"description": "The LightOccluder2D's light mask. The LightOccluder2D will cast shadows only from Light2D(s) that have the same light mask(s).", "getter": "get_occluder_light_mask", "name": "light_mask", "setter": "set_occluder_light_mask", "type": "int"}, {"description": "The [OccluderPolygon2D] used to compute the shadow.", "getter": "get_occluder_polygon", "name": "occluder", "setter": "set_occluder_polygon", "type": "OccluderPolygon2D"}], "methods": [], "name": "LightOccluder2D", "signals": [], "tutorials": {"links": []}}, "Line2D": {"brief_description": "A 2D line.", "category": "Core", "constants": [{"description": "The line's joints will be pointy. If [code]sharp_limit[/code] is greater than the rotation of a joint, it becomes a bevel joint instead.", "enum": "LineJointMode", "name": "LINE_JOINT_SHARP", "value": "0"}, {"description": "The line's joints will be bevelled/chamfered.", "enum": "LineJointMode", "name": "LINE_JOINT_BEVEL", "value": "1"}, {"description": "The line's joints will be rounded.", "enum": "LineJointMode", "name": "LINE_JOINT_ROUND", "value": "2"}, {"description": "Don't have a line cap.", "enum": "LineCapMode", "name": "LINE_CAP_NONE", "value": "0"}, {"description": "Draws the line cap as a box.", "enum": "LineCapMode", "name": "LINE_CAP_BOX", "value": "1"}, {"description": "Draws the line cap as a circle.", "enum": "LineCapMode", "name": "LINE_CAP_ROUND", "value": "2"}, {"description": "Takes the left pixels of the texture and renders it over the whole line.", "enum": "LineTextureMode", "name": "LINE_TEXTURE_NONE", "value": "0"}, {"description": "Tiles the texture over the line. The texture need to be imported with Repeat Enabled for it to work properly.", "enum": "LineTextureMode", "name": "LINE_TEXTURE_TILE", "value": "1"}, {"description": "Stretches the texture across the line. Import the texture with Repeat Disabled for best results.", "enum": "LineTextureMode", "name": "LINE_TEXTURE_STRETCH", "value": "2"}], "demos": {"links": []}, "description": "A line through several points in 2D space.", "inherits": "Node2D", "members": [{"description": "Controls the style of the line's first point. Use [code]LINE_CAP_*[/code] constants. Default value: [code]LINE_CAP_NONE[/code].", "getter": "get_begin_cap_mode", "name": "begin_cap_mode", "setter": "set_begin_cap_mode", "type": "int"}, {"description": "The line's color. Will not be used if a gradient is set.", "getter": "get_default_color", "name": "default_color", "setter": "set_default_color", "type": "Color"}, {"description": "Controls the style of the line's last point. Use [code]LINE_CAP_*[/code] constants. Default value: [code]LINE_CAP_NONE[/code].", "getter": "get_end_cap_mode", "name": "end_cap_mode", "setter": "set_end_cap_mode", "type": "int"}, {"description": "The gradient is drawn through the whole line from start to finish. The default color will not be used if a gradient is set.", "getter": "get_gradient", "name": "gradient", "setter": "set_gradient", "type": "Gradient"}, {"description": "The style for the points between the start and the end.", "getter": "get_joint_mode", "name": "joint_mode", "setter": "set_joint_mode", "type": "int"}, {"description": "The points that form the lines. The line is drawn between every point set in this array.", "getter": "get_points", "name": "points", "setter": "set_points", "type": "PoolVector2Array"}, {"description": "The smoothness of the rounded joints and caps. This is only used if a cap or joint is set as round.", "getter": "get_round_precision", "name": "round_precision", "setter": "set_round_precision", "type": "int"}, {"description": "The direction difference in radians between vector points. This value is only used if [code]joint mode[/code] is set to [code]LINE_JOINT_SHARP[/code].", "getter": "get_sharp_limit", "name": "sharp_limit", "setter": "set_sharp_limit", "type": "float"}, {"description": "The texture used for the line's texture. Uses [code]texture_mode[/code] for drawing style.", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}, {"description": "The style to render the [code]texture[/code] on the line. Use [code]LINE_TEXTURE_*[/code] constants. Default value: [code]LINE_TEXTURE_NONE[/code].", "getter": "get_texture_mode", "name": "texture_mode", "setter": "set_texture_mode", "type": "int"}, {"description": "The line's width.", "getter": "get_width", "name": "width", "setter": "set_width", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Add a point at the [code]position[/code]. Appends the point at the end of the line.", "name": "add_point", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the Line2D's amount of points.", "name": "get_point_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "i", "type": "int"}], "description": "Returns point [code]i[/code]'s position.", "name": "get_point_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "i", "type": "int"}], "description": "Remove the point at index [code]i[/code] from the line.", "name": "remove_point", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "i", "type": "int"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}], "description": "Overwrites the position in point [code]i[/code] with the supplied [code]position[/code].", "name": "set_point_position", "return_": {"description": "", "type": "void"}}], "name": "Line2D", "signals": [], "tutorials": {"links": []}}, "LineEdit": {"brief_description": "Control that provides single line string editing.", "category": "Core", "constants": [{"description": "Aligns the text on the left hand side of the [LineEdit].", "enum": "Align", "name": "ALIGN_LEFT", "value": "0"}, {"description": "Centers the text in the middle of the [LineEdit].", "enum": "Align", "name": "ALIGN_CENTER", "value": "1"}, {"description": "Aligns the text on the right hand side of the [LineEdit].", "enum": "Align", "name": "ALIGN_RIGHT", "value": "2"}, {"description": "Stretches whitespaces to fit the [LineEdit]'s width.", "enum": "Align", "name": "ALIGN_FILL", "value": "3"}, {"description": "Cuts (Copies and clears) the selected text.", "enum": "MenuItems", "name": "MENU_CUT", "value": "0"}, {"description": "Copies the selected text.", "enum": "MenuItems", "name": "MENU_COPY", "value": "1"}, {"description": "Pastes the clipboard text over the selected text (or at the cursor's position).", "enum": "MenuItems", "name": "MENU_PASTE", "value": "2"}, {"description": "Erases the whole [Linedit] text.", "enum": "MenuItems", "name": "MENU_CLEAR", "value": "3"}, {"description": "Selects the whole [Linedit] text.", "enum": "MenuItems", "name": "MENU_SELECT_ALL", "value": "4"}, {"description": "Undoes the previous action.", "enum": "MenuItems", "name": "MENU_UNDO", "value": "5"}, {"description": "", "enum": "MenuItems", "name": "MENU_REDO", "value": "6"}, {"description": "", "enum": "MenuItems", "name": "MENU_MAX", "value": "7"}], "demos": {"links": []}, "description": "LineEdit provides a single line string editor, used for text fields.", "inherits": "Control", "members": [{"description": "Text alignment as defined in the ALIGN_* enum.", "getter": "get_align", "name": "align", "setter": "set_align", "type": "int"}, {"description": "If [code]true[/code] the caret (visual cursor) blinks.", "getter": "cursor_get_blink_enabled", "name": "caret_blink", "setter": "cursor_set_blink_enabled", "type": "bool"}, {"description": "Duration (in seconds) of a caret's blinking cycle.", "getter": "cursor_get_blink_speed", "name": "caret_blink_speed", "setter": "cursor_set_blink_speed", "type": "float"}, {"description": "The cursor's position inside the [code]LineEdit[/code]. When set, the text may scroll to accommodate it.", "getter": "get_cursor_position", "name": "caret_position", "setter": "set_cursor_position", "type": "int"}, {"description": "", "getter": "is_clear_button_enabled", "name": "clear_button_enabled", "setter": "set_clear_button_enabled", "type": "bool"}, {"description": "If [code]true[/code] the context menu will appear when right clicked.", "getter": "is_context_menu_enabled", "name": "context_menu_enabled", "setter": "set_context_menu_enabled", "type": "bool"}, {"description": "If [code]false[/code] existing text cannot be modified and new text cannot be added.", "getter": "is_editable", "name": "editable", "setter": "set_editable", "type": "bool"}, {"description": "If [code]true[/code] the [LineEdit] width will increase to stay longer than the [member text]. It will [b]not[/b] compress if the [member text] is shortened.", "getter": "get_expand_to_text_length", "name": "expand_to_text_length", "setter": "set_expand_to_text_length", "type": "bool"}, {"description": "Defines how the [LineEdit] can grab focus (Keyboard and mouse, only keyboard, or none). See [code]enum FocusMode[/code] in [Control] for details.", "getter": "get_focus_mode", "name": "focus_mode", "setter": "set_focus_mode", "type": "int"}, {"description": "Maximum amount of characters that can be entered inside the [LineEdit]. If [code]0[/code], there is no limit.", "getter": "get_max_length", "name": "max_length", "setter": "set_max_length", "type": "int"}, {"description": "Opacity of the [member placeholder_text]. From [code]0[/code] to [code]1[/code].", "getter": "get_placeholder_alpha", "name": "placeholder_alpha", "setter": "set_placeholder_alpha", "type": "float"}, {"description": "Text shown when the [LineEdit] is empty. It is [b]not[/b] the [LineEdit]'s default value (see [member text]).", "getter": "get_placeholder", "name": "placeholder_text", "setter": "set_placeholder", "type": "String"}, {"description": "If [code]true[/code], every character is replaced with the secret character (see [member secret_character]).", "getter": "is_secret", "name": "secret", "setter": "set_secret", "type": "bool"}, {"description": "The character to use to mask secret input (defaults to \"*\"). Only a single character can be used as the secret character.", "getter": "get_secret_character", "name": "secret_character", "setter": "set_secret_character", "type": "String"}, {"description": "String value of the [LineEdit].", "getter": "get_text", "name": "text", "setter": "set_text", "type": "String"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}], "description": "Adds [code]text[/code] after the cursor. If the resulting value is longer than [member max_length], nothing happens.", "name": "append_at_cursor", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Erases the [LineEdit] text.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clears the current selection.", "name": "deselect", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the [PopupMenu] of this [code]LineEdit[/code]. By default, this menu is displayed when right-clicking on the [LineEdit].", "name": "get_menu", "qualifiers": "const", "return_": {"description": "", "type": "PopupMenu"}}, {"arguments": [{"description": "", "index": "0", "name": "option", "type": "int"}], "description": "Executes a given action as defined in the MENU_* enum.", "name": "menu_option", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "0", "description": "", "index": "0", "name": "from", "type": "int"}, {"default": "-1", "description": "", "index": "1", "name": "to", "type": "int"}], "description": "Selects characters inside [LineEdit] between [code]from[/code] and [code]to[/code]. By default [code]from[/code] is at the beginning and [code]to[/code] at the end.\n\t\t\t\t[codeblock]\n\t\t\t\ttext = \"Welcome\"\n\t\t\t\tselect()     # Welcome\n\t\t\t\tselect(4)    # ome\n\t\t\t\tselect(2, 5) # lco\n\t\t\t\t[/codeblock]", "name": "select", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Selects the whole [String].", "name": "select_all", "return_": {"description": "", "type": "void"}}], "name": "LineEdit", "signals": [{"arguments": [{"description": "", "index": "0", "name": "new_text", "type": "String"}], "description": "Emitted when the text changes.", "name": "text_changed"}, {"arguments": [{"description": "", "index": "0", "name": "new_text", "type": "String"}], "description": "Emitted when the user presses KEY_ENTER on the [code]LineEdit[/code].", "name": "text_entered"}], "tutorials": {"links": []}}, "LineShape2D": {"brief_description": "Line shape for 2D collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Line shape for 2D collisions. It works like a 2D plane and will not allow any body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame.", "inherits": "Shape2D", "members": [{"description": "The line's distance from the origin.", "getter": "get_d", "name": "d", "setter": "set_d", "type": "float"}, {"description": "The line's normal.", "getter": "get_normal", "name": "normal", "setter": "set_normal", "type": "Vector2"}], "methods": [], "name": "LineShape2D", "signals": [], "tutorials": {"links": []}}, "LinkButton": {"brief_description": "Simple button used to represent a link to some resource.", "category": "Core", "constants": [{"description": "The LinkButton will always show an underline at the bottom of its text", "enum": "UnderlineMode", "name": "UNDERLINE_MODE_ALWAYS", "value": "0"}, {"description": "The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it.", "enum": "UnderlineMode", "name": "UNDERLINE_MODE_ON_HOVER", "value": "1"}, {"description": "The LinkButton will never show an underline at the bottom of its text.", "enum": "UnderlineMode", "name": "UNDERLINE_MODE_NEVER", "value": "2"}], "demos": {"links": []}, "description": "This kind of buttons are primarily used when the interaction with the button causes a context change (like linking to a web page).", "inherits": "BaseButton", "members": [{"description": "", "getter": "get_text", "name": "text", "setter": "set_text", "type": "String"}, {"description": "", "getter": "get_underline_mode", "name": "underline", "setter": "set_underline_mode", "type": "int"}], "methods": [], "name": "LinkButton", "signals": [], "tutorials": {"links": []}}, "Listener": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Spatial", "members": [], "methods": [{"arguments": [], "description": "", "name": "clear_current", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_listener_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [], "description": "", "name": "is_current", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "make_current", "return_": {"description": "", "type": "void"}}], "name": "Listener", "signals": [], "tutorials": {"links": []}}, "MainLoop": {"brief_description": "Main loop is the abstract main loop base class.", "category": "Core", "constants": [{"description": "", "name": "NOTIFICATION_WM_MOUSE_ENTER", "value": "2"}, {"description": "", "name": "NOTIFICATION_WM_MOUSE_EXIT", "value": "3"}, {"description": "", "name": "NOTIFICATION_WM_FOCUS_IN", "value": "4"}, {"description": "", "name": "NOTIFICATION_WM_FOCUS_OUT", "value": "5"}, {"description": "", "name": "NOTIFICATION_WM_QUIT_REQUEST", "value": "6"}, {"description": "", "name": "NOTIFICATION_WM_GO_BACK_REQUEST", "value": "7"}, {"description": "", "name": "NOTIFICATION_WM_UNFOCUS_REQUEST", "value": "8"}, {"description": "", "name": "NOTIFICATION_OS_MEMORY_WARNING", "value": "9"}, {"description": "", "name": "NOTIFICATION_TRANSLATION_CHANGED", "value": "90"}, {"description": "", "name": "NOTIFICATION_WM_ABOUT", "value": "91"}, {"description": "", "name": "NOTIFICATION_CRASH", "value": "92"}], "demos": {"links": []}, "description": "Main loop is the abstract main loop base class. All other main loop classes are derived from it. Upon application start, a [code]MainLoop[/code] has to be provided to OS, else the application will exit. This happens automatically (and a [SceneTree] is created), unless a main [Script] is supplied, which may or not create and return a [code]MainLoop[/code].", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "files", "type": "PoolStringArray"}, {"description": "", "index": "1", "name": "screen", "type": "int"}], "description": "", "name": "_drop_files", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Called before the program exits.", "name": "_finalize", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}], "description": "Called each idle frame with time since last call as an only argument.", "name": "_idle", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Called once during initialization.", "name": "_initialize", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "ev", "type": "InputEvent"}], "description": "", "name": "_input_event", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}], "description": "", "name": "_input_text", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}], "description": "", "name": "_iteration", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "finish", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}], "description": "", "name": "idle", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "init", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "ev", "type": "InputEvent"}], "description": "", "name": "input_event", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}], "description": "", "name": "input_text", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}], "description": "", "name": "iteration", "return_": {"description": "", "type": "bool"}}], "name": "MainLoop", "signals": [], "tutorials": {"links": []}}, "MarginContainer": {"brief_description": "Simple margin container.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Simple margin container. Adds a left margin to anything contained.", "inherits": "Container", "members": [], "methods": [], "name": "MarginContainer", "signals": [], "tutorials": {"links": []}}, "Marshalls": {"brief_description": "Data transformation (marshalling) and encoding helpers.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Provides data transformation and encoding utility functions.", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "base64_str", "type": "String"}], "description": "Return [PoolByteArray] of a given base64 encoded String.", "name": "base64_to_raw", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [{"description": "", "index": "0", "name": "base64_str", "type": "String"}], "description": "Return utf8 String of a given base64 encoded String.", "name": "base64_to_utf8", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "base64_str", "type": "String"}], "description": "Return [Variant] of a given base64 encoded String.", "name": "base64_to_variant", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "array", "type": "PoolByteArray"}], "description": "Return base64 encoded String of a given [PoolByteArray].", "name": "raw_to_base64", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "utf8_str", "type": "String"}], "description": "Return base64 encoded String of a given utf8 String.", "name": "utf8_to_base64", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "variant", "type": "Variant"}], "description": "Return base64 encoded String of a given [Variant].", "name": "variant_to_base64", "return_": {"description": "", "type": "String"}}], "name": "Marshalls", "signals": [], "tutorials": {"links": []}}, "Material": {"brief_description": "Abstract base [Resource] for coloring and shading geometry.", "category": "Core", "constants": [{"description": "", "name": "RENDER_PRIORITY_MAX", "value": "127"}, {"description": "", "name": "RENDER_PRIORITY_MIN", "value": "-128"}], "demos": {"links": []}, "description": "Material is a base [Resource] used for coloring and shading geometry. All materials inherit from it and almost all [VisualInstance] derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.", "inherits": "Resource", "members": [{"description": "", "getter": "get_next_pass", "name": "next_pass", "setter": "set_next_pass", "type": "Material"}, {"description": "", "getter": "get_render_priority", "name": "render_priority", "setter": "set_render_priority", "type": "int"}], "methods": [], "name": "Material", "signals": [], "tutorials": {"links": []}}, "MenuButton": {"brief_description": "Special button that brings up a [PopupMenu] when clicked.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Special button that brings up a [PopupMenu] when clicked. That's pretty much all it does, as it's just a helper class when building GUIs.", "inherits": "Button", "members": [], "methods": [{"arguments": [], "description": "Return the [PopupMenu] contained in this button.", "name": "get_popup", "qualifiers": "const", "return_": {"description": "", "type": "PopupMenu"}}, {"arguments": [{"description": "", "index": "0", "name": "disabled", "type": "bool"}], "description": "", "name": "set_disable_shortcuts", "return_": {"description": "", "type": "void"}}], "name": "MenuButton", "signals": [{"arguments": [], "description": "Emitted when [PopupMenu] of this MenuButton is about to show.", "name": "about_to_show"}], "tutorials": {"links": []}}, "Mesh": {"brief_description": "A [Resource] that contains vertex-array based geometry.", "category": "Core", "constants": [{"description": "Render array as points (one vertex equals one point).", "enum": "PrimitiveType", "name": "PRIMITIVE_POINTS", "value": "0"}, {"description": "Render array as lines (every two vertices a line is created).", "enum": "PrimitiveType", "name": "PRIMITIVE_LINES", "value": "1"}, {"description": "Render array as line strip.", "enum": "PrimitiveType", "name": "PRIMITIVE_LINE_STRIP", "value": "2"}, {"description": "Render array as line loop (like line strip, but closed).", "enum": "PrimitiveType", "name": "PRIMITIVE_LINE_LOOP", "value": "3"}, {"description": "Render array as triangles (every three vertices a triangle is created).", "enum": "PrimitiveType", "name": "PRIMITIVE_TRIANGLES", "value": "4"}, {"description": "Render array as triangle strips.", "enum": "PrimitiveType", "name": "PRIMITIVE_TRIANGLE_STRIP", "value": "5"}, {"description": "Render array as triangle fans.", "enum": "PrimitiveType", "name": "PRIMITIVE_TRIANGLE_FAN", "value": "6"}, {"description": "", "enum": "BlendShapeMode", "name": "BLEND_SHAPE_MODE_NORMALIZED", "value": "0"}, {"description": "", "enum": "BlendShapeMode", "name": "BLEND_SHAPE_MODE_RELATIVE", "value": "1"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_VERTEX", "value": "1"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_NORMAL", "value": "2"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_TANGENT", "value": "4"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_COLOR", "value": "8"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_TEX_UV", "value": "16"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_TEX_UV2", "value": "32"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_BONES", "value": "64"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_WEIGHTS", "value": "128"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_INDEX", "value": "256"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_BASE", "value": "9"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_VERTEX", "value": "512"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_NORMAL", "value": "1024"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_TANGENT", "value": "2048"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_COLOR", "value": "4096"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_TEX_UV", "value": "8192"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_TEX_UV2", "value": "16384"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_BONES", "value": "32768"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_WEIGHTS", "value": "65536"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_INDEX", "value": "131072"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FLAG_USE_2D_VERTICES", "value": "262144"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_FLAG_USE_16_BIT_BONES", "value": "524288"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_DEFAULT", "value": "97280"}, {"description": "Array of vertices.", "enum": "ArrayType", "name": "ARRAY_VERTEX", "value": "0"}, {"description": "Array of normals.", "enum": "ArrayType", "name": "ARRAY_NORMAL", "value": "1"}, {"description": "Array of tangents as an array of floats, 4 floats per tangent.", "enum": "ArrayType", "name": "ARRAY_TANGENT", "value": "2"}, {"description": "Array of colors.", "enum": "ArrayType", "name": "ARRAY_COLOR", "value": "3"}, {"description": "Array of UV coordinates.", "enum": "ArrayType", "name": "ARRAY_TEX_UV", "value": "4"}, {"description": "Array of second set of UV coordinates.", "enum": "ArrayType", "name": "ARRAY_TEX_UV2", "value": "5"}, {"description": "Array of bone data.", "enum": "ArrayType", "name": "ARRAY_BONES", "value": "6"}, {"description": "Array of weights.", "enum": "ArrayType", "name": "ARRAY_WEIGHTS", "value": "7"}, {"description": "Array of indices.", "enum": "ArrayType", "name": "ARRAY_INDEX", "value": "8"}, {"description": "", "enum": "ArrayType", "name": "ARRAY_MAX", "value": "9"}], "demos": {"links": []}, "description": "Mesh is a type of [Resource] that contains vertex-array based geometry, divided in [i]surfaces[/i]. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.", "inherits": "Resource", "members": [{"description": "", "getter": "get_lightmap_size_hint", "name": "lightmap_size_hint", "setter": "set_lightmap_size_hint", "type": "Vector2"}], "methods": [{"arguments": [], "description": "Calculate a [ConvexPolygonShape] from the mesh.", "name": "create_convex_shape", "qualifiers": "const", "return_": {"description": "", "type": "Shape"}}, {"arguments": [{"description": "", "index": "0", "name": "margin", "type": "float"}], "description": "Calculate an outline mesh at a defined offset (margin) from the original mesh. Note: Typically returns the vertices in reverse order (e.g. clockwise to anti-clockwise).", "name": "create_outline", "qualifiers": "const", "return_": {"description": "", "type": "Mesh"}}, {"arguments": [], "description": "Calculate a [ConcavePolygonShape] from the mesh.", "name": "create_trimesh_shape", "qualifiers": "const", "return_": {"description": "", "type": "Shape"}}, {"arguments": [], "description": "Generate a [TriangleMesh] from the mesh.", "name": "generate_triangle_mesh", "qualifiers": "const", "return_": {"description": "", "type": "TriangleMesh"}}, {"arguments": [], "description": "Returns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle.", "name": "get_faces", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [], "description": "Return the amount of surfaces that the [code]Mesh[/code] holds.", "name": "get_surface_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}], "description": "Returns the arrays for the vertices, normals, uvs, etc. that make up the requested surface (see [method ArrayMesh.add_surface_from_arrays]).", "name": "surface_get_arrays", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}], "description": "Returns the blend shape arrays for the requested surface.", "name": "surface_get_blend_shape_arrays", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "surf_idx", "type": "int"}], "description": "Return a [Material] in a given surface. Surface is rendered using this material.", "name": "surface_get_material", "qualifiers": "const", "return_": {"description": "", "type": "Material"}}], "name": "Mesh", "signals": [], "tutorials": {"links": []}}, "MeshDataTool": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "ArrayMesh"}], "description": "", "name": "commit_to_surface", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "ArrayMesh"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "", "name": "create_from_surface", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_edge_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_edge_faces", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_edge_meta", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "vertex", "type": "int"}], "description": "", "name": "get_edge_vertex", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_face_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "edge", "type": "int"}], "description": "", "name": "get_face_edge", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_face_meta", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_face_normal", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "vertex", "type": "int"}], "description": "", "name": "get_face_vertex", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_format", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_material", "qualifiers": "const", "return_": {"description": "", "type": "Material"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex_bones", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex_color", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [], "description": "", "name": "get_vertex_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex_edges", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex_faces", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex_meta", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex_normal", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex_tangent", "qualifiers": "const", "return_": {"description": "", "type": "Plane"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex_uv", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex_uv2", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_vertex_weights", "qualifiers": "const", "return_": {"description": "", "type": "PoolRealArray"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "meta", "type": "Variant"}], "description": "", "name": "set_edge_meta", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "meta", "type": "Variant"}], "description": "", "name": "set_face_meta", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "material", "type": "Material"}], "description": "", "name": "set_material", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "vertex", "type": "Vector3"}], "description": "", "name": "set_vertex", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "bones", "type": "PoolIntArray"}], "description": "", "name": "set_vertex_bones", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "", "name": "set_vertex_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "meta", "type": "Variant"}], "description": "", "name": "set_vertex_meta", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "normal", "type": "Vector3"}], "description": "", "name": "set_vertex_normal", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "tangent", "type": "Plane"}], "description": "", "name": "set_vertex_tangent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "uv", "type": "Vector2"}], "description": "", "name": "set_vertex_uv", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "uv2", "type": "Vector2"}], "description": "", "name": "set_vertex_uv2", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "weights", "type": "PoolRealArray"}], "description": "", "name": "set_vertex_weights", "return_": {"description": "", "type": "void"}}], "name": "MeshDataTool", "signals": [], "tutorials": {"links": []}}, "MeshInstance": {"brief_description": "Node that instances meshes into a scenario.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "MeshInstance is a node that takes a [Mesh] resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single [Mesh] in many places. This allows to reuse geometry and save on resources. When a [Mesh] has to be instanced more than thousands of times at close proximity, consider using a [MultiMesh] in a [MultiMeshInstance] instead.", "inherits": "GeometryInstance", "members": [{"description": "The [Mesh] resource for the instance.", "getter": "get_mesh", "name": "mesh", "setter": "set_mesh", "type": "Mesh"}, {"description": "[NodePath] to the [Skeleton] associated with the instance.", "getter": "get_skeleton_path", "name": "skeleton", "setter": "set_skeleton_path", "type": "NodePath"}], "methods": [{"arguments": [], "description": "This helper creates a [StaticBody] child node with a [ConvexPolygonShape] collision shape calculated from the mesh geometry. It's mainly used for testing.", "name": "create_convex_collision", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "This helper creates a [MeshInstance] child node with gizmos at every vertex calculated from the mesh geometry. It's mainly used for testing.", "name": "create_debug_tangents", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "This helper creates a [StaticBody] child node with a [ConcavePolygonShape] collision shape calculated from the mesh geometry. It's mainly used for testing.", "name": "create_trimesh_collision", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "surface", "type": "int"}], "description": "Returns the [Material] for a surface of the [Mesh] resource.", "name": "get_surface_material", "qualifiers": "const", "return_": {"description": "", "type": "Material"}}, {"arguments": [{"description": "", "index": "0", "name": "surface", "type": "int"}, {"description": "", "index": "1", "name": "material", "type": "Material"}], "description": "Sets the [Material] for a surface of the [Mesh] resource.", "name": "set_surface_material", "return_": {"description": "", "type": "void"}}], "name": "MeshInstance", "signals": [], "tutorials": {"links": []}}, "MeshInstance2D": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Node2D", "members": [{"description": "", "getter": "get_mesh", "name": "mesh", "setter": "set_mesh", "type": "Mesh"}, {"description": "", "getter": "get_normal_map", "name": "normal_map", "setter": "set_normal_map", "type": "Texture"}, {"description": "", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}], "methods": [], "name": "MeshInstance2D", "signals": [], "tutorials": {"links": []}}, "MeshLibrary": {"brief_description": "Library of meshes.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Library of meshes. Contains a list of [Mesh] resources, each with name and ID. Useful for GridMap or painting Terrain.", "inherits": "Resource", "members": [], "methods": [{"arguments": [], "description": "Clear the library.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Create a new item in the library, supplied an id.", "name": "create_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "find_item_by_name", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the list of items.", "name": "get_item_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Return the mesh of the item.", "name": "get_item_mesh", "qualifiers": "const", "return_": {"description": "", "type": "Mesh"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Return the name of the item.", "name": "get_item_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "get_item_navmesh", "qualifiers": "const", "return_": {"description": "", "type": "NavigationMesh"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "get_item_preview", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "get_item_shapes", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Get an unused id for a new item.", "name": "get_last_unused_item_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Remove the item.", "name": "remove_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "mesh", "type": "Mesh"}], "description": "Set the mesh of the item.", "name": "set_item_mesh", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "name", "type": "String"}], "description": "Set the name of the item.", "name": "set_item_name", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "navmesh", "type": "NavigationMesh"}], "description": "", "name": "set_item_navmesh", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "texture", "type": "Texture"}], "description": "", "name": "set_item_preview", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shapes", "type": "Array"}], "description": "", "name": "set_item_shapes", "return_": {"description": "", "type": "void"}}], "name": "MeshLibrary", "signals": [], "tutorials": {"links": []}}, "MultiMesh": {"brief_description": "Provides high performance mesh instancing.", "category": "Core", "constants": [{"description": "", "enum": "TransformFormat", "name": "TRANSFORM_2D", "value": "0"}, {"description": "", "enum": "TransformFormat", "name": "TRANSFORM_3D", "value": "1"}, {"description": "", "enum": "ColorFormat", "name": "COLOR_NONE", "value": "0"}, {"description": "", "enum": "ColorFormat", "name": "COLOR_8BIT", "value": "1"}, {"description": "", "enum": "ColorFormat", "name": "COLOR_FLOAT", "value": "2"}], "demos": {"links": []}, "description": "MultiMesh provides low level mesh instancing. If the amount of [Mesh] instances needed goes from hundreds to thousands (and most need to be visible at close proximity) creating such a large amount of [MeshInstance] nodes may affect performance by using too much CPU or video memory.\n\t\tFor this case a MultiMesh becomes very useful, as it can draw thousands of instances with little API overhead.\n\t\tAs a drawback, if the instances are too far away of each other, performance may be reduced as every single instance will always rendered (they are spatially indexed as one, for the whole object).\n\t\tSince instances may have any behavior, the AABB used for visibility must be provided by the user.", "inherits": "Resource", "members": [{"description": "", "getter": "get_color_format", "name": "color_format", "setter": "set_color_format", "type": "int"}, {"description": "", "getter": "get_instance_count", "name": "instance_count", "setter": "set_instance_count", "type": "int"}, {"description": "", "getter": "get_mesh", "name": "mesh", "setter": "set_mesh", "type": "Mesh"}, {"description": "", "getter": "get_transform_format", "name": "transform_format", "setter": "set_transform_format", "type": "int"}], "methods": [{"arguments": [], "description": "Return the visibility AABB.", "name": "get_aabb", "qualifiers": "const", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "int"}], "description": "Get the color of a specific instance.", "name": "get_instance_color", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "int"}], "description": "Return the transform of a specific instance.", "name": "get_instance_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "int"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Set the color of a specific instance.", "name": "set_instance_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "int"}, {"description": "", "index": "1", "name": "transform", "type": "Transform"}], "description": "Set the transform for a specific instance.", "name": "set_instance_transform", "return_": {"description": "", "type": "void"}}], "name": "MultiMesh", "signals": [], "tutorials": {"links": []}}, "MultiMeshInstance": {"brief_description": "Node that instances a [MultiMesh].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "[code]MultiMeshInstance[/code] is a specialized node to instance [GeometryInstance]s based on a [MultiMesh] resource.\n\t\tThis is useful to optimize the rendering of a high amount of instances of a given mesh (for example tree in a forest or grass strands).", "inherits": "GeometryInstance", "members": [{"description": "The [MultiMesh] resource that will be used and shared among all instances of the [code]MultiMeshInstance[/code].", "getter": "get_multimesh", "name": "multimesh", "setter": "set_multimesh", "type": "MultiMesh"}], "methods": [], "name": "MultiMeshInstance", "signals": [], "tutorials": {"links": []}}, "MultiplayerAPI": {"brief_description": "High Level Multiplayer API.", "category": "Core", "constants": [{"description": "Used with [method Node.rpc_config] or [method Node.rset_config] to disable a method or property for all RPC calls, making it unavailable. Default for all methods.", "enum": "RPCMode", "name": "RPC_MODE_DISABLED", "value": "0"}, {"description": "Used with [method Node.rpc_config] or [method Node.rset_config] to set a method to be called or a property to be changed only on the remote end, not locally. Analogous to the [code]remote[/code] keyword. Calls and property changes are accepted from all remote peers, no matter if they are node's master or slaves.", "enum": "RPCMode", "name": "RPC_MODE_REMOTE", "value": "1"}, {"description": "Behave like [code]RPC_MODE_REMOTE[/code] but also make the call or property change locally. Analogous to the [code]sync[/code] keyword.", "enum": "RPCMode", "name": "RPC_MODE_SYNC", "value": "2"}, {"description": "Used with [method Node.rpc_config] or [method Node.rset_config] to set a method to be called or a property to be changed only on the network master for this node. Analogous to the [code]master[/code] keyword. Only accepts calls or property changes from the node's network slaves, see [method Node.set_network_master].", "enum": "RPCMode", "name": "RPC_MODE_MASTER", "value": "3"}, {"description": "Used with [method Node.rpc_config] or [method Node.rset_config] to set a method to be called or a property to be changed only on slaves for this node. Analogous to the [code]slave[/code] keyword. Only accepts calls or property changes from the node's network master, see [method Node.set_network_master].", "enum": "RPCMode", "name": "RPC_MODE_SLAVE", "value": "4"}, {"description": "Behave like [code]RPC_MODE_REMOTE[/code] but also make the call or property change locally. Same as [code]RPC_MODE_SYNC[/code] which is only kept for compatibility. Analogous to the [code]remotesync[/code] keyword.", "enum": "RPCMode", "name": "RPC_MODE_REMOTESYNC", "value": "5"}, {"description": "Behave like [code]RPC_MODE_MASTER[/code] but also make the call or property change locally. Analogous to the [code]mastersync[/code] keyword.", "enum": "RPCMode", "name": "RPC_MODE_MASTERSYNC", "value": "6"}, {"description": "Behave like [code]RPC_MODE_SLAVE[/code] but also make the call or property change locally. Analogous to the [code]slavesync[/code] keyword.", "enum": "RPCMode", "name": "RPC_MODE_SLAVESYNC", "value": "7"}], "demos": {"links": []}, "description": "This class implements most of the logic behind the high level multiplayer API.\n\t\tBy default, [SceneTree] has a reference to this class that is used to provide multiplayer capabilities (i.e. RPC/RSET) across the whole scene.\n\t\tIt is possible to override the MultiplayerAPI instance used by specific Nodes by setting the [member Node.custom_multiplayer] property, effectively allowing to run both client and server in the same scene.", "inherits": "Reference", "members": [{"description": "The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the MultiplayerAPI will become a network server (check with [method is_network_server]) and will set root node's network mode to master (see NETWORK_MODE_* constants in [Node]), or it will become a regular peer with root node set to slave. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to MultiplayerAPI's signals.", "getter": "get_network_peer", "name": "network_peer", "setter": "set_network_peer", "type": "NetworkedMultiplayerPeer"}, {"description": "If [code]true[/code] the MultiplayerAPI's [member network_peer] refuses new incoming connections.", "getter": "is_refusing_new_network_connections", "name": "refuse_new_network_connections", "setter": "set_refuse_new_network_connections", "type": "bool"}], "methods": [{"arguments": [], "description": "Clears the current MultiplayerAPI network state (you shouldn't call this unless you know what you are doing).", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the peer IDs of all connected peers of this MultiplayerAPI's [member network_peer].", "name": "get_network_connected_peers", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [], "description": "Returns the unique peer ID of this MultiplayerAPI's [member network_peer].", "name": "get_network_unique_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the sender's peer ID for the RPC currently being executed.\n\t\t\t\tNOTE: If not inside an RPC this method will return 0.", "name": "get_rpc_sender_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns [code]true[/code] if there is a [member network_peer] set.", "name": "has_network_peer", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this MultiplayerAPI's [member network_peer] is in server mode (listening for connections).", "name": "is_network_server", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Method used for polling the MultiplayerAPI. You only need to worry about this if you are using [member Node.custom_multiplayer] override or you set [member SceneTree.multiplayer_poll] to [code]false[/code]. By default [SceneTree] will poll its MultiplayerAPI for you.\n\t\t\t\tNOTE: This method results in RPCs and RSETs being called, so they will be executed in the same context of this function (e.g. [code]_process[/code], [code]physics[/code], [Thread]).", "name": "poll", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bytes", "type": "PoolByteArray"}, {"default": "0", "description": "", "index": "1", "name": "id", "type": "int"}, {"default": "2", "description": "", "index": "2", "name": "mode", "type": "int"}], "description": "Sends the given raw [code]bytes[/code] to a specific peer identified by [code]id[/code] (see [method NetworkedMultiplayerPeer.set_target_peer]). Default ID is [code]0[/code], i.e. broadcast to all peers.", "name": "send_bytes", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Sets the base root node to use for RPCs. Instead of an absolute path, a relative path will be used to find the node upon which the RPC should be executed.\n\t\t\t\tThis effectively allows to have different branches of the scene tree to be managed by different MultiplayerAPI, allowing for example to run both client and server in the same scene.", "name": "set_root_node", "return_": {"description": "", "type": "void"}}], "name": "MultiplayerAPI", "signals": [{"arguments": [], "description": "Emitted whenever this MultiplayerAPI's [member network_peer] successfully connected to a server. Only emitted on clients.", "name": "connected_to_server"}, {"arguments": [], "description": "Emitted whenever this MultiplayerAPI's [member network_peer] fails to establish a connection to a server. Only emitted on clients.", "name": "connection_failed"}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Emitted whenever this MultiplayerAPI's [member network_peer] connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1).", "name": "network_peer_connected"}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Emitted whenever this MultiplayerAPI's [member network_peer] disconnects from a peer. Clients get notified when other clients disconnect from the same server.", "name": "network_peer_disconnected"}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "packet", "type": "PoolByteArray"}], "description": "Emitted whenever this MultiplayerAPI's [member network_peer] receive a [code]packet[/code] with custom data (see [method send_bytes]). ID is the peer ID of the peer that sent the packet.", "name": "network_peer_packet"}, {"arguments": [], "description": "Emitted whenever this MultiplayerAPI's [member network_peer] disconnects from server. Only emitted on clients.", "name": "server_disconnected"}], "tutorials": {"links": []}}, "Mutex": {"brief_description": "A synchronization Mutex.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A synchronization Mutex. Element used to synchronize multiple [Thread]s. Basically a binary [Semaphore]. Guarantees that only one thread can ever acquire this lock at a time. Can be used to protect a critical section. Be careful to avoid deadlocks.", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "Lock this [code]Mutex[/code], blocks until it is unlocked by the current owner.", "name": "lock", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Try locking this [code]Mutex[/code], does not block. Returns [OK] on success, [ERR_BUSY] otherwise.", "name": "try_lock", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Unlock this [code]Mutex[/code], leaving it to other threads.", "name": "unlock", "return_": {"description": "", "type": "void"}}], "name": "Mutex", "signals": [], "tutorials": {"links": []}}, "Navigation": {"brief_description": "Mesh-based navigation and pathfinding node.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Provides navigation and pathfinding within a collection of [NavigationMesh]es. By default these will be automatically collected from child [NavigationMeshInstance] nodes, but they can also be added on the fly with [method navmesh_add]. In addition to basic pathfinding, this class also assists with aligning navigation agents with the meshes they are navigating on.", "inherits": "Spatial", "members": [{"description": "Defines which direction is up. By default this is [code](0, 1, 0)[/code], which is the world up direction.", "getter": "get_up_vector", "name": "up_vector", "setter": "set_up_vector", "type": "Vector3"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "to_point", "type": "Vector3"}], "description": "Returns the navigation point closest to the point given. Points are in local coordinate space.", "name": "get_closest_point", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "to_point", "type": "Vector3"}], "description": "Returns the surface normal at the navigation point closest to the point given. Useful for rotating a navigation agent according to the navigation mesh it moves on.", "name": "get_closest_point_normal", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "to_point", "type": "Vector3"}], "description": "Returns the owner of the [NavigationMesh] which contains the navigation point closest to the point given. This is usually a [NavigtionMeshInstance]. For meshes added via [method navmesh_add], returns the owner that was given (or [code]null[/code] if the [code]owner[/code] parameter was omitted).", "name": "get_closest_point_owner", "return_": {"description": "", "type": "Object"}}, {"arguments": [{"description": "", "index": "0", "name": "start", "type": "Vector3"}, {"description": "", "index": "1", "name": "end", "type": "Vector3"}, {"default": "false", "description": "", "index": "2", "name": "use_collision", "type": "bool"}], "description": "Returns the navigation point closest to the given line segment. When enabling [code]use_collision[/code], only considers intersection points between segment and navigation meshes. If multiple intersection points are found, the one closest to the segment start point is returned.", "name": "get_closest_point_to_segment", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "start", "type": "Vector3"}, {"description": "", "index": "1", "name": "end", "type": "Vector3"}, {"default": "true", "description": "", "index": "2", "name": "optimize", "type": "bool"}], "description": "Returns the path between two given points. Points are in local coordinate space. If [code]optimize[/code] is [code]true[/code] (the default), the agent properties associated with each [NavigationMesh] (raidus, height, etc.) are considered in the path calculation, otherwise they are ignored.", "name": "get_simple_path", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "NavigationMesh"}, {"description": "", "index": "1", "name": "xform", "type": "Transform"}, {"default": "null", "description": "", "index": "2", "name": "owner", "type": "Object"}], "description": "Adds a [NavigationMesh]. Returns an ID for use with [method navmesh_remove] or [method navmesh_set_transform]. If given, a [Transform2D] is applied to the polygon. The optional [code]owner[/code] is used as return value for [method get_closest_point_owner].", "name": "navmesh_add", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Removes the [NavigationMesh] with the given ID.", "name": "navmesh_remove", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "xform", "type": "Transform"}], "description": "Sets the transform applied to the [NavigationMesh] with the given ID.", "name": "navmesh_set_transform", "return_": {"description": "", "type": "void"}}], "name": "Navigation", "signals": [], "tutorials": {"links": []}}, "Navigation2D": {"brief_description": "2D navigation and pathfinding node.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Navigation2D provides navigation and pathfinding within a 2D area, specified as a collection of [NavigationPolygon] resources. By default these are automatically collected from child [NavigationPolygonInstance] nodes, but they can also be added on the fly with [method navpoly_add].", "inherits": "Node2D", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "to_point", "type": "Vector2"}], "description": "Returns the navigation point closest to the point given. Points are in local coordinate space.", "name": "get_closest_point", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "to_point", "type": "Vector2"}], "description": "Returns the owner of the [NavigationPolygon] which contains the navigation point closest to the point given. This is usually a [NavigtionPolygonInstance]. For polygons added via [method navpoly_add], returns the owner that was given (or [code]null[/code] if the [code]owner[/code] parameter was omitted).", "name": "get_closest_point_owner", "return_": {"description": "", "type": "Object"}}, {"arguments": [{"description": "", "index": "0", "name": "start", "type": "Vector2"}, {"description": "", "index": "1", "name": "end", "type": "Vector2"}, {"default": "true", "description": "", "index": "2", "name": "optimize", "type": "bool"}], "description": "Returns the path between two given points. Points are in local coordinate space. If [code]optimize[/code] is [code]true[/code] (the default), the path is smoothed by merging path segments where possible.", "name": "get_simple_path", "return_": {"description": "", "type": "PoolVector2Array"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "NavigationPolygon"}, {"description": "", "index": "1", "name": "xform", "type": "Transform2D"}, {"default": "null", "description": "", "index": "2", "name": "owner", "type": "Object"}], "description": "Adds a [NavigationPolygon]. Returns an ID for use with [method navpoly_remove] or [method navpoly_set_transform]. If given, a [Transform2D] is applied to the polygon. The optional [code]owner[/code] is used as return value for [method get_closest_point_owner].", "name": "navpoly_add", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Removes the [NavigationPolygon] with the given ID.", "name": "navpoly_remove", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "xform", "type": "Transform2D"}], "description": "Sets the transform applied to the [NavigationPolygon] with the given ID.", "name": "navpoly_set_transform", "return_": {"description": "", "type": "void"}}], "name": "Navigation2D", "signals": [], "tutorials": {"links": []}}, "NavigationMesh": {"brief_description": "", "category": "Core", "constants": [{"description": "", "name": "SAMPLE_PARTITION_WATERSHED", "value": "0"}, {"description": "", "name": "SAMPLE_PARTITION_MONOTONE", "value": "1"}, {"description": "", "name": "SAMPLE_PARTITION_LAYERS", "value": "2"}], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [{"description": "", "getter": "get_agent_height", "name": "agent/height", "setter": "set_agent_height", "type": "float"}, {"description": "", "getter": "get_agent_max_climb", "name": "agent/max_climb", "setter": "set_agent_max_climb", "type": "float"}, {"description": "", "getter": "get_agent_max_slope", "name": "agent/max_slope", "setter": "set_agent_max_slope", "type": "float"}, {"description": "", "getter": "get_agent_radius", "name": "agent/radius", "setter": "set_agent_radius", "type": "float"}, {"description": "", "getter": "get_cell_height", "name": "cell/height", "setter": "set_cell_height", "type": "float"}, {"description": "", "getter": "get_cell_size", "name": "cell/size", "setter": "set_cell_size", "type": "float"}, {"description": "", "getter": "get_detail_sample_distance", "name": "detail/sample_distance", "setter": "set_detail_sample_distance", "type": "float"}, {"description": "", "getter": "get_detail_sample_max_error", "name": "detail/sample_max_error", "setter": "set_detail_sample_max_error", "type": "float"}, {"description": "", "getter": "get_edge_max_error", "name": "edge/max_error", "setter": "set_edge_max_error", "type": "float"}, {"description": "", "getter": "get_edge_max_length", "name": "edge/max_length", "setter": "set_edge_max_length", "type": "float"}, {"description": "", "getter": "get_filter_walkable_low_height_spans", "name": "filter/filter_walkable_low_height_spans", "setter": "set_filter_walkable_low_height_spans", "type": "bool"}, {"description": "", "getter": "get_filter_ledge_spans", "name": "filter/ledge_spans", "setter": "set_filter_ledge_spans", "type": "bool"}, {"description": "", "getter": "get_filter_low_hanging_obstacles", "name": "filter/low_hanging_obstacles", "setter": "set_filter_low_hanging_obstacles", "type": "bool"}, {"description": "", "getter": "get_verts_per_poly", "name": "polygon/verts_per_poly", "setter": "set_verts_per_poly", "type": "float"}, {"description": "", "getter": "get_region_merge_size", "name": "region/merge_size", "setter": "set_region_merge_size", "type": "float"}, {"description": "", "getter": "get_region_min_size", "name": "region/min_size", "setter": "set_region_min_size", "type": "float"}, {"description": "", "getter": "get_sample_partition_type", "name": "sample_partition_type/sample_partition_type", "setter": "set_sample_partition_type", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "polygon", "type": "PoolIntArray"}], "description": "", "name": "add_polygon", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "clear_polygons", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "Mesh"}], "description": "", "name": "create_from_mesh", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_polygon", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [], "description": "", "name": "get_polygon_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_vertices", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "vertices", "type": "PoolVector3Array"}], "description": "", "name": "set_vertices", "return_": {"description": "", "type": "void"}}], "name": "NavigationMesh", "signals": [], "tutorials": {"links": []}}, "NavigationMeshInstance": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Spatial", "members": [{"description": "", "getter": "is_enabled", "name": "enabled", "setter": "set_enabled", "type": "bool"}, {"description": "", "getter": "get_navigation_mesh", "name": "navmesh", "setter": "set_navigation_mesh", "type": "NavigationMesh"}], "methods": [], "name": "NavigationMeshInstance", "signals": [], "tutorials": {"links": []}}, "NavigationPolygon": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "outline", "type": "PoolVector2Array"}], "description": "", "name": "add_outline", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "outline", "type": "PoolVector2Array"}, {"description": "", "index": "1", "name": "index", "type": "int"}], "description": "", "name": "add_outline_at_index", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "polygon", "type": "PoolIntArray"}], "description": "", "name": "add_polygon", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "clear_outlines", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "clear_polygons", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_outline", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector2Array"}}, {"arguments": [], "description": "", "name": "get_outline_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_polygon", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [], "description": "", "name": "get_polygon_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_vertices", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector2Array"}}, {"arguments": [], "description": "", "name": "make_polygons_from_outlines", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "remove_outline", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "outline", "type": "PoolVector2Array"}], "description": "", "name": "set_outline", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "vertices", "type": "PoolVector2Array"}], "description": "", "name": "set_vertices", "return_": {"description": "", "type": "void"}}], "name": "NavigationPolygon", "signals": [], "tutorials": {"links": []}}, "NavigationPolygonInstance": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Node2D", "members": [{"description": "", "getter": "is_enabled", "name": "enabled", "setter": "set_enabled", "type": "bool"}, {"description": "", "getter": "get_navigation_polygon", "name": "navpoly", "setter": "set_navigation_polygon", "type": "NavigationPolygon"}], "methods": [], "name": "NavigationPolygonInstance", "signals": [], "tutorials": {"links": []}}, "NetworkedMultiplayerPeer": {"brief_description": "A high-level network interface to simplify multiplayer interactions.", "category": "Core", "constants": [{"description": "Packets are sent via unordered UDP packets.", "enum": "TransferMode", "name": "TRANSFER_MODE_UNRELIABLE", "value": "0"}, {"description": "Packets are sent via ordered UDP packets.", "enum": "TransferMode", "name": "TRANSFER_MODE_UNRELIABLE_ORDERED", "value": "1"}, {"description": "Packets are sent via TCP packets.", "enum": "TransferMode", "name": "TRANSFER_MODE_RELIABLE", "value": "2"}, {"description": "The ongoing connection disconnected.", "enum": "ConnectionStatus", "name": "CONNECTION_DISCONNECTED", "value": "0"}, {"description": "A connection attempt is ongoing.", "enum": "ConnectionStatus", "name": "CONNECTION_CONNECTING", "value": "1"}, {"description": "The connection attempt succeeded.", "enum": "ConnectionStatus", "name": "CONNECTION_CONNECTED", "value": "2"}, {"description": "Packets are sent to the server and then redistributed to other peers.", "name": "TARGET_PEER_BROADCAST", "value": "0"}, {"description": "Packets are sent to the server alone.", "name": "TARGET_PEER_SERVER", "value": "1"}], "demos": {"links": []}, "description": "Manages the connection to network peers. Assigns unique IDs to each client connected to the server.", "inherits": "PacketPeer", "members": [{"description": "If [code]true[/code] this [code]NetworkedMultiplayerPeer[/code] refuses new connections. Default value: [code]false[/code].", "getter": "is_refusing_new_connections", "name": "refuse_new_connections", "setter": "set_refuse_new_connections", "type": "bool"}, {"description": "The manner in which to send packets to the [code]target_peer[/code]. See [enum TransferMode].", "getter": "get_transfer_mode", "name": "transfer_mode", "setter": "set_transfer_mode", "type": "int"}], "methods": [{"arguments": [], "description": "Returns the current state of the connection. See [enum ConnectionStatus].", "name": "get_connection_status", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the ID of the [code]NetworkedMultiplayerPeer[/code] who sent the most recent packet.", "name": "get_packet_peer", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the ID of this [code]NetworkedMultiplayerPeer[/code].", "name": "get_unique_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Waits up to 1 second to receive a new network event.", "name": "poll", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Sets the peer to which packets will be sent.\n\t\t\t\tThe [code]id[/code] can be one of: [code]TARGET_PEER_BROADCAST[/code] to send to all connected peers, [code]TARGET_PEER_SERVER[/code] to send to the peer acting as server, a valid peer ID to send to that specific peer, a negative peer ID to send to all peers except that one. Default: [code]TARGET_PEER_BROADCAST[/code]", "name": "set_target_peer", "return_": {"description": "", "type": "void"}}], "name": "NetworkedMultiplayerPeer", "signals": [{"arguments": [], "description": "Emitted when a connection attempt fails.", "name": "connection_failed"}, {"arguments": [], "description": "Emitted when a connection attempt succeeds.", "name": "connection_succeeded"}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Emitted by the server when a client connects.", "name": "peer_connected"}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Emitted by the server when a client disconnects.", "name": "peer_disconnected"}, {"arguments": [], "description": "Emitted by clients when the server disconnects.", "name": "server_disconnected"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/networking/high_level_multiplayer.html"}]}}, "Nil": {"brief_description": "", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolColorArray"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolVector3Array"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolVector2Array"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolStringArray"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolRealArray"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolIntArray"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolByteArray"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Array"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Dictionary"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Object"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "RID"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "NodePath"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Color"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Transform"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Basis"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "AABB"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Quat"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Plane"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Transform2D"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Rect2"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector2"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "float"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "int"}], "description": "", "name": "Nil", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "bool"}], "description": "", "name": "Nil", "return_": {}}], "name": "Nil", "signals": [], "tutorials": {"links": []}}, "NinePatchRect": {"brief_description": "Scalable texture-based frame that tiles the texture's centers and sides, but keeps the corners' original size. Perfect for panels and dialog boxes.", "category": "Core", "constants": [{"description": "Doesn't do anything at the time of writing. Default value for [code]axis_stretch_horizontal[/code] and [code]axis_stretch_vertical[/code].", "enum": "AxisStretchMode", "name": "AXIS_STRETCH_MODE_STRETCH", "value": "0"}, {"description": "Doesn't do anything at the time of writing.", "enum": "AxisStretchMode", "name": "AXIS_STRETCH_MODE_TILE", "value": "1"}, {"description": "Doesn't do anything at the time of writing.", "enum": "AxisStretchMode", "name": "AXIS_STRETCH_MODE_TILE_FIT", "value": "2"}], "demos": {"links": []}, "description": "Better known as 9-slice panels, NinePatchRect produces clean panels of any size, based on a small texture. To do so, it splits the texture in a 3 by 3 grid. When you scale the node, it tiles the texture's sides horizontally or vertically, the center on both axes but it doesn't scale or tile the corners.", "inherits": "Control", "members": [{"description": "Doesn't do anything at the time of writing.", "getter": "get_h_axis_stretch_mode", "name": "axis_stretch_horizontal", "setter": "set_h_axis_stretch_mode", "type": "int"}, {"description": "Doesn't do anything at the time of writing.", "getter": "get_v_axis_stretch_mode", "name": "axis_stretch_vertical", "setter": "set_v_axis_stretch_mode", "type": "int"}, {"description": "If [code]true[/code], draw the panel's center. Else, only draw the 9-slice's borders. Default value: [code]true[/code]", "getter": "is_draw_center_enabled", "name": "draw_center", "setter": "set_draw_center", "type": "bool"}, {"description": "The height of the 9-slice's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.", "getter": "get_patch_margin", "name": "patch_margin_bottom", "setter": "set_patch_margin", "type": "int"}, {"description": "The height of the 9-slice's left column.", "getter": "get_patch_margin", "name": "patch_margin_left", "setter": "set_patch_margin", "type": "int"}, {"description": "The height of the 9-slice's right column.", "getter": "get_patch_margin", "name": "patch_margin_right", "setter": "set_patch_margin", "type": "int"}, {"description": "The height of the 9-slice's top row.", "getter": "get_patch_margin", "name": "patch_margin_top", "setter": "set_patch_margin", "type": "int"}, {"description": "Rectangular region of the texture to sample from. If you're working with an atlas, use this property to define the area the 9-slice should use. All other properties are relative to this one.", "getter": "get_region_rect", "name": "region_rect", "setter": "set_region_rect", "type": "Rect2"}, {"description": "The node's texture resource.", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}], "methods": [], "name": "NinePatchRect", "signals": [{"arguments": [], "description": "Fired when the node's texture changes.", "name": "texture_changed"}], "tutorials": {"links": []}}, "Node": {"brief_description": "Base class for all [i]scene[/i] objects.", "category": "Core", "constants": [{"description": "Notification received when the node enters a [SceneTree].", "name": "NOTIFICATION_ENTER_TREE", "value": "10"}, {"description": "Notification received when the node is about to exit a [SceneTree].", "name": "NOTIFICATION_EXIT_TREE", "value": "11"}, {"description": "Notification received when the node is moved in the parent.", "name": "NOTIFICATION_MOVED_IN_PARENT", "value": "12"}, {"description": "Notification received when the node is ready. See [method _ready].", "name": "NOTIFICATION_READY", "value": "13"}, {"description": "Notification received when the node is paused.", "name": "NOTIFICATION_PAUSED", "value": "14"}, {"description": "Notification received when the node is unpaused.", "name": "NOTIFICATION_UNPAUSED", "value": "15"}, {"description": "Notification received every frame when the physics process flag is set (see [method set_physics_process]).", "name": "NOTIFICATION_PHYSICS_PROCESS", "value": "16"}, {"description": "Notification received every frame when the process flag is set (see [method set_process]).", "name": "NOTIFICATION_PROCESS", "value": "17"}, {"description": "Notification received when a node is set as a child of another node. Note that this doesn't mean that a node entered the Scene Tree.", "name": "NOTIFICATION_PARENTED", "value": "18"}, {"description": "Notification received when a node is unparented (parent removed it from the list of children).", "name": "NOTIFICATION_UNPARENTED", "value": "19"}, {"description": "Notification received when the node is instanced.", "name": "NOTIFICATION_INSTANCED", "value": "20"}, {"description": "Notification received when a drag begins.", "name": "NOTIFICATION_DRAG_BEGIN", "value": "21"}, {"description": "Notification received when a drag ends.", "name": "NOTIFICATION_DRAG_END", "value": "22"}, {"description": "Notification received when the node's [NodePath] changed.", "name": "NOTIFICATION_PATH_CHANGED", "value": "23"}, {"description": "Notification received when translations may have changed. Can be triggered by the user changing the locale. Can be used to respond to language changes, for example to change the UI strings on the fly. Useful when working with the built-in translation support, like [method Object.tr].", "name": "NOTIFICATION_TRANSLATION_CHANGED", "value": "24"}, {"description": "Notification received every frame when the internal process flag is set (see [method set_process_internal]).", "name": "NOTIFICATION_INTERNAL_PROCESS", "value": "25"}, {"description": "Notification received every frame when the internal physics process flag is set (see [method set_physics_process_internal]).", "name": "NOTIFICATION_INTERNAL_PHYSICS_PROCESS", "value": "26"}, {"description": "Inherits pause mode from the node's parent. For the root node, it is equivalent to PAUSE_MODE_STOP. Default.", "enum": "PauseMode", "name": "PAUSE_MODE_INHERIT", "value": "0"}, {"description": "Stop processing when the [SceneTree] is paused.", "enum": "PauseMode", "name": "PAUSE_MODE_STOP", "value": "1"}, {"description": "Continue to process regardless of the [SceneTree] pause state.", "enum": "PauseMode", "name": "PAUSE_MODE_PROCESS", "value": "2"}, {"description": "Duplicate the node's signals.", "enum": "DuplicateFlags", "name": "DUPLICATE_SIGNALS", "value": "1"}, {"description": "Duplicate the node's groups.", "enum": "DuplicateFlags", "name": "DUPLICATE_GROUPS", "value": "2"}, {"description": "Duplicate the node's scripts.", "enum": "DuplicateFlags", "name": "DUPLICATE_SCRIPTS", "value": "4"}, {"description": "Duplicate using instancing.", "enum": "DuplicateFlags", "name": "DUPLICATE_USE_INSTANCING", "value": "8"}], "demos": {"links": []}, "description": "Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.\n\t\tA tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects.\n\t\t[b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its [method _enter_tree] callback is triggered. Child nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's.\n\t\tOnce all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, starting with the children and moving up to the parent nodes.\n\t\tThis means that when adding a node to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (recursively for the entire scene tree).\n\t\t[b]Processing:[/b] Nodes can override the \"process\" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] is passed as an argument. Physics processing (callback [method _physics_process], toggled with [method set_physics_process]) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.\n\t\tNodes can also process input events. When present, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it.\n\t\tTo keep track of the scene hierarchy (especially when instancing scenes into other scenes), an \"owner\" can be set for the node with [method set_owner]. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.\n\t\tFinally, when a node is freed with [method free] or [method queue_free], it will also free all its children.\n\t\t[b]Groups:[/b] Nodes can be added to as many groups as you want to be easy to manage, you could create groups like \"enemies\" or \"collectables\" for example, depending on your game. See [method add_to_group], [method is_in_group] and [method remove_from_group]. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on [SceneTree].\n\t\t[b]Networking with nodes:[/b] After connecting to a server (or making one, see [NetworkedMultiplayerENet]) it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling [method rpc] with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call Godot will use its [NodePath] (make sure node names are the same on all peers). Also take a look at the high-level networking tutorial and corresponding demos.", "inherits": "Object", "members": [{"description": "The override to the default [MultiplayerAPI]. Set to null to use the default SceneTree one.", "getter": "get_custom_multiplayer", "name": "custom_multiplayer", "setter": "set_custom_multiplayer", "type": "MultiplayerAPI"}, {"description": "When a scene is instanced from a file, its topmost node contains the filename from which it was loaded.", "getter": "get_filename", "name": "filename", "setter": "set_filename", "type": "String"}, {"description": "The [MultiplayerAPI] instance associated with this node. Either the [member custom_multiplayer], or the default SceneTree one (if inside tree).", "getter": "get_multiplayer", "name": "multiplayer", "setter": "", "type": "MultiplayerAPI"}, {"description": "The name of the node. This name is unique among the siblings (other child nodes from the same parent). When set to an existing name, the node will be automatically renamed", "getter": "get_name", "name": "name", "setter": "set_name", "type": "String"}, {"description": "The node owner. A node can have any other node as owner (as long as it is a valid parent, grandparent, etc. ascending in the tree). When saving a node (using [PackedScene]) all the nodes it owns will be saved with it. This allows for the creation of complex [SceneTree]s, with instancing and subinstancing.", "getter": "get_owner", "name": "owner", "setter": "set_owner", "type": "Node"}, {"description": "Pause mode. How the node will behave if the [SceneTree] is paused.", "getter": "get_pause_mode", "name": "pause_mode", "setter": "set_pause_mode", "type": "int"}], "methods": [{"arguments": [], "description": "Called when the node enters the [SceneTree] (e.g. upon instancing, scene changing, or after calling [method add_child] in a script). If the node has children, its [method _enter_tree] callback will be called first, and then that of the children.\n\t\t\t\tCorresponds to the NOTIFICATION_ENTER_TREE notification in [method Object._notification].", "name": "_enter_tree", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Called when the node is about to leave the [SceneTree] (e.g. upon freeing, scene changing, or after calling [method remove_child] in a script). If the node has children, its [method _exit_tree] callback will be called last, after all its children have left the tree.\n\t\t\t\tCorresponds to the NOTIFICATION_EXIT_TREE notification in [method Object._notification] and signal [signal tree_exiting]. To get notified when the node has already left the active tree, connect to the [signal tree_exited]", "name": "_exit_tree", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "_get_configuration_warning", "qualifiers": "virtual", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "event", "type": "InputEvent"}], "description": "Called when there is an input event. The input event propagates up through the node tree until a node consumes it.\n\t\t\t\tIt is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_input].\n\t\t\t\tTo consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called.\n\t\t\t\tFor gameplay input, [method _unhandled_input] and [method _unhandled_key_input] are usually a better fit as they allow the GUI to intercept the events first.", "name": "_input", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}], "description": "Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the [code]delta[/code] variable should be constant.\n\t\t\t\tIt is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_physics_process].\n\t\t\t\tCorresponds to the NOTIFICATION_PHYSICS_PROCESS notification in [method Object._notification].", "name": "_physics_process", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}], "description": "Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the [code]delta[/code] time since the previous frame is not constant.\n\t\t\t\tIt is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process].\n\t\t\t\tCorresponds to the NOTIFICATION_PROCESS notification in [method Object._notification].", "name": "_process", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their [method _ready] callbacks get triggered first, and the parent node will receive the ready notification afterwards.\n\t\t\t\tCorresponds to the NOTIFICATION_READY notification in [method Object._notification]. See also the [code]onready[/code] keyword for variables.\n\t\t\t\tUsually used for initialization. For even earlier initialization, [method Object._init] may be used. Also see [method _enter_tree].", "name": "_ready", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "event", "type": "InputEvent"}], "description": "Called when an [InputEvent] hasn't been consumed by [method _input] or any GUI. The input event propagates up through the node tree until a node consumes it.\n\t\t\t\tIt is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_input].\n\t\t\t\tTo consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called.\n\t\t\t\tFor gameplay input, this and [method _unhandled_key_input] are usually a better fit than [method _input] as they allow the GUI to intercept the events first.", "name": "_unhandled_input", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "event", "type": "InputEventKey"}], "description": "Called when an [InputEventKey] hasn't been consumed by [method _input] or any GUI. The input event propagates up through the node tree until a node consumes it.\n\t\t\t\tIt is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_key_input].\n\t\t\t\tTo consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called.\n\t\t\t\tFor gameplay input, this and [method _unhandled_input] are usually a better fit than [method _input] as they allow the GUI to intercept the events first.", "name": "_unhandled_key_input", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}, {"default": "false", "description": "", "index": "1", "name": "legible_unique_name", "type": "bool"}], "description": "Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.\n\t\t\t\tSetting \"legible_unique_name\" [code]true[/code] creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.", "name": "add_child", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}, {"description": "", "index": "1", "name": "child_node", "type": "Node"}, {"default": "false", "description": "", "index": "2", "name": "legible_unique_name", "type": "bool"}], "description": "Adds a child node. The child is placed below the given node in the list of children.\n\t\t\t\tSetting \"legible_unique_name\" [code]true[/code] creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.", "name": "add_child_below_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "group", "type": "String"}, {"default": "false", "description": "", "index": "1", "name": "persistent", "type": "bool"}], "description": "Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example \"enemies\" or \"collectables\". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see [method is_inside_tree]). See notes in the description, and the group methods in [SceneTree].", "name": "add_to_group", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns [code]true[/code] if the node can process while the scene tree is paused (see [method set_pause_mode]). Always returns [code]true[/code] if the scene tree is not paused, and [code]false[/code] if the node is not in the tree. FIXME: Why FAIL_COND?", "name": "can_process", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"default": "15", "description": "", "index": "0", "name": "flags", "type": "int"}], "description": "Duplicates the node, returning a new node.\n\t\t\t\tYou can fine-tune the behavior using the [code]flags[/code]. See DUPLICATE_* constants.", "name": "duplicate", "qualifiers": "const", "return_": {"description": "", "type": "Node"}}, {"arguments": [{"description": "", "index": "0", "name": "mask", "type": "String"}, {"default": "true", "description": "", "index": "1", "name": "recursive", "type": "bool"}, {"default": "true", "description": "", "index": "2", "name": "owned", "type": "bool"}], "description": "Finds a descendant of this node whose name matches [code]mask[/code] as in [method String.match] (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.", "name": "find_node", "qualifiers": "const", "return_": {"description": "", "type": "Node"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns a child node by its index (see [method get_child_count]). This method is often used for iterating all children of a node.", "name": "get_child", "qualifiers": "const", "return_": {"description": "", "type": "Node"}}, {"arguments": [], "description": "Returns the number of child nodes.", "name": "get_child_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns an array of references to node's children.", "name": "get_children", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns an array listing the groups that the node is a member of.", "name": "get_groups", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns the node's index, i.e. its position among the siblings of its parent.", "name": "get_index", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the peer ID of the network master for this node. See [method set_network_master].", "name": "get_network_master", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "NodePath"}], "description": "Fetches a node. The [NodePath] can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a [code]null instance[/code] is returned and attempts to access it will result in an \"Attempt to call <method> on a null instance.\" error.\n\t\t\t\t[b]Note:[/b] Fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]).\n\t\t\t\t[b]Example:[/b] Assume your current node is Character and the following tree:\n\t\t\t\t[codeblock]\n\t\t\t\t/root\n\t\t\t\t/root/Character\n\t\t\t\t/root/Character/Sword\n\t\t\t\t/root/Character/Backpack/Dagger\n\t\t\t\t/root/MyGame\n\t\t\t\t/root/Swamp/Alligator\n\t\t\t\t/root/Swamp/Mosquito\n\t\t\t\t/root/Swamp/Goblin\n\t\t\t\t[/codeblock]\n\t\t\t\tPossible paths are:\n\t\t\t\t[codeblock]\n\t\t\t\tget_node(\"Sword\")\n\t\t\t\tget_node(\"Backpack/Dagger\")\n\t\t\t\tget_node(\"../Swamp/Alligator\")\n\t\t\t\tget_node(\"/root/MyGame\")\n\t\t\t\t[/codeblock]", "name": "get_node", "qualifiers": "const", "return_": {"description": "", "type": "Node"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "NodePath"}], "description": "", "name": "get_node_and_resource", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns the parent node of the current node, or an empty [code]Node[/code] if the node lacks a parent.", "name": "get_parent", "qualifiers": "const", "return_": {"description": "", "type": "Node"}}, {"arguments": [], "description": "Returns the absolute path of the current node. This only works if the current node is inside the scene tree (see [method is_inside_tree]).", "name": "get_path", "qualifiers": "const", "return_": {"description": "", "type": "NodePath"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Returns the relative [NodePath] from this node to the specified [code]node[/code]. Both nodes must be in the same scene or the function will fail.", "name": "get_path_to", "qualifiers": "const", "return_": {"description": "", "type": "NodePath"}}, {"arguments": [], "description": "Returns the time elapsed since the last physics-bound frame (see [method _physics_process]). This is always a constant value in physics processing unless the frames per second is changed in [OS].", "name": "get_physics_process_delta_time", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the node's order in the scene tree branch. For example, if called on the first child node the position is [code]0[/code].", "name": "get_position_in_parent", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame.", "name": "get_process_delta_time", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns [code]true[/code] if this is an instance load placeholder. See [InstancePlaceholder].", "name": "get_scene_instance_load_placeholder", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the [SceneTree] that contains this node.", "name": "get_tree", "qualifiers": "const", "return_": {"description": "", "type": "SceneTree"}}, {"arguments": [], "description": "Returns the node's [Viewport].", "name": "get_viewport", "qualifiers": "const", "return_": {"description": "", "type": "Viewport"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "NodePath"}], "description": "Returns [code]true[/code] if the node that the [NodePath] points to exists.", "name": "has_node", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "NodePath"}], "description": "", "name": "has_node_and_resource", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Returns [code]true[/code] if the given node is a direct or indirect child of the current node.", "name": "is_a_parent_of", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the node is folded (collapsed) in the Scene dock.", "name": "is_displayed_folded", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Returns [code]true[/code] if the given node occurs later in the scene hierarchy than the current node.", "name": "is_greater_than", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "group", "type": "String"}], "description": "Returns [code]true[/code] if this node is in the specified group. See notes in the description, and the group methods in [SceneTree].", "name": "is_in_group", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this node is currently inside a [SceneTree].", "name": "is_inside_tree", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the local system is the master of this node.", "name": "is_network_master", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if physics processing is enabled (see [method set_physics_process]).", "name": "is_physics_processing", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if internal physics processing is enabled (see [method set_physics_process_internal]).", "name": "is_physics_processing_internal", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if processing is enabled (see [method set_process]).", "name": "is_processing", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the node is processing input (see [method set_process_input]).", "name": "is_processing_input", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if internal processing is enabled (see [method set_process_internal]).", "name": "is_processing_internal", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the node is processing unhandled input (see [method set_process_unhandled_input]).", "name": "is_processing_unhandled_input", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the node is processing unhandled key input (see [method set_process_unhandled_key_input]).", "name": "is_processing_unhandled_key_input", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "child_node", "type": "Node"}, {"description": "", "index": "1", "name": "to_position", "type": "int"}], "description": "Moves a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.", "name": "move_child", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Prints all stray nodes (nodes outside the [SceneTree]). Used for debugging. Works only in debug builds.", "name": "print_stray_nodes", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Prints the tree to stdout. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the [method get_node] function. Example output:\n\t\t\t\t[codeblock]\n\t\t\t\tTheGame\n\t\t\t\tTheGame/Menu\n\t\t\t\tTheGame/Menu/Label\n\t\t\t\tTheGame/Menu/Camera2D\n\t\t\t\tTheGame/SplashScreen\n\t\t\t\tTheGame/SplashScreen/Camera2D\n\t\t\t\t[/codeblock]", "name": "print_tree", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Similar to [method print_tree], this prints the tree to stdout. This version displays a more graphical representation similar to what is displayed in the scene inspector. It is useful for inspecting larger trees. Example output:\n\t\t\t\t[codeblock]\n\t\t\t\t \u2516\u2574TheGame\n\t\t\t\t    \u2520\u2574Menu\n\t\t\t\t    \u2503  \u2520\u2574Label\n\t\t\t\t    \u2503  \u2516\u2574Camera2D\n\t\t\t\t    \u2516-SplashScreen\n\t\t\t\t       \u2516\u2574Camera2D\n\t\t\t\t[/codeblock]", "name": "print_tree_pretty", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "method", "type": "String"}, {"default": "[  ]", "description": "", "index": "1", "name": "args", "type": "Array"}, {"default": "false", "description": "", "index": "2", "name": "parent_first", "type": "bool"}], "description": "Calls the given method (if present) with the arguments given in [code]args[/code] on this node and recursively on all its children. If the parent_first argument is [code]true[/code] then the method will be called on the current node first, then on all children. If it is [code]false[/code] then the children will be called first.", "name": "propagate_call", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "int"}], "description": "Notifies the current node and all its children recursively by calling notification() on all of them.", "name": "propagate_notification", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to [method Object.free]. Use [method Object.is_queued_for_deletion] to check whether a node will be deleted at the end of the frame.", "name": "queue_free", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Moves this node to the top of the array of nodes of the parent node. This is often useful in GUIs ([Control] nodes), because their order of drawing depends on their order in the tree.", "name": "raise", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed.", "name": "remove_and_skip", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Removes a child node. The node is NOT deleted and must be deleted manually.", "name": "remove_child", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "group", "type": "String"}], "description": "Removes a node from a group. See notes in the description, and the group methods in [SceneTree].", "name": "remove_from_group", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}, {"default": "false", "description": "", "index": "1", "name": "keep_data", "type": "bool"}], "description": "Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost.", "name": "replace_by", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Requests that [code]_ready[/code] be called again.", "name": "request_ready", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "method", "type": "String"}], "description": "Sends a remote procedure call request for the given [code]method[/code] to peers on the network (and locally), optionally sending all additional arguments as arguments to the method called by the RPC. The call request will only be received by nodes with the same [NodePath], including the exact same node name. Behaviour depends on the RPC configuration for the given method, see [method rpc_config]. Methods are not exposed to RPCs by default. Also see [method rset] and [method rset_config] for properties. Returns an empty [Variant]. Note that you can only safely use RPCs on clients after you received the [code]connected_to_server[/code] signal from the [SceneTree]. You also need to keep track of the connection state, either by the [SceneTree] signals like [code]server_disconnected[/code] or by checking [code]SceneTree.network_peer.get_connection_status() == CONNECTION_CONNECTED[/code].", "name": "rpc", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "method", "type": "String"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Changes the RPC mode for the given [code]method[/code] to the given [code]mode[/code]. See [enum MultiplayerAPI.RPCMode]. An alternative is annotating methods and properties with the corresponding keywords ([code]remote[/code], [code]sync[/code], [code]master[/code], [code]slave[/code]). By default, methods are not exposed to networking (and RPCs). Also see [method rset] and [method rset_config] for properties.", "name": "rpc_config", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "peer_id", "type": "int"}, {"description": "", "index": "1", "name": "method", "type": "String"}], "description": "Sends a [method rpc] to a specific peer identified by [code]peer_id[/code] (see [method NetworkedMultiplayerPeer.set_target_peer]). Returns an empty [Variant].", "name": "rpc_id", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "method", "type": "String"}], "description": "Sends a [method rpc] using an unreliable protocol. Returns an empty [Variant].", "name": "rpc_unreliable", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "peer_id", "type": "int"}, {"description": "", "index": "1", "name": "method", "type": "String"}], "description": "Sends a [method rpc] to a specific peer identified by [code]peer_id[/code] using an unreliable protocol (see [method NetworkedMultiplayerPeer.set_target_peer]). Returns an empty [Variant].", "name": "rpc_unreliable_id", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "Remotely changes a property's value on other peers (and locally). Behaviour depends on the RPC configuration for the given property, see [method rset_config]. Also see [method rpc] for RPCs for methods, most information applies to this method as well.", "name": "rset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Changes the RPC mode for the given [code]property[/code] to the given [code]mode[/code]. See [enum MultiplayerAPI.RPCMode]. An alternative is annotating methods and properties with the corresponding keywords ([code]remote[/code], [code]sync[/code], [code]master[/code], [code]slave[/code]). By default, properties are not exposed to networking (and RPCs). Also see [method rpc] and [method rpc_config] for methods.", "name": "rset_config", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "peer_id", "type": "int"}, {"description": "", "index": "1", "name": "property", "type": "String"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Remotely changes the property's value on a specific peer identified by [code]peer_id[/code] (see [method NetworkedMultiplayerPeer.set_target_peer]).", "name": "rset_id", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "Remotely changes the property's value on other peers (and locally) using an unreliable protocol.", "name": "rset_unreliable", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "peer_id", "type": "int"}, {"description": "", "index": "1", "name": "property", "type": "String"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Remotely changes property's value on a specific peer identified by [code]peer_id[/code] using an unreliable protocol (see [method NetworkedMultiplayerPeer.set_target_peer]).", "name": "rset_unreliable_id", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "fold", "type": "bool"}], "description": "Sets the folded state of the node in the Scene dock.", "name": "set_display_folded", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"default": "true", "description": "", "index": "1", "name": "recursive", "type": "bool"}], "description": "Sets the node's network master to the peer with the given peer ID. The network master is the peer that has authority over the node on the network. Useful in conjunction with the [code]master[/code] and [code]slave[/code] keywords. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server). If [code]recursive[/code], the given peer is recursively set as the master for all children of this node.", "name": "set_network_master", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a NOTIFICATION_PHYSICS_PROCESS at a fixed (usually 60 fps, see [OS] to change) interval (and the [method _physics_process] callback will be called if exists). Enabled automatically if [method _physics_process] is overridden. Any calls to this before [method _ready] will be ignored.", "name": "set_physics_process", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Enables or disables internal physics for this node. Internal physics processing happens in isolation from the normal [method _physics_process] calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting ([method set_physics_process]). Only useful for advanced uses to manipulate built-in nodes behaviour.", "name": "set_physics_process_internal", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Enables or disables processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the [method _process] callback will be called if exists). Enabled automatically if [method _process] is overridden. Any calls to this before [method _ready] will be ignored.", "name": "set_process", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Enables or disables input processing. This is not required for GUI controls! Enabled automatically if [method _input] is overridden. Any calls to this before [method _ready] will be ignored.", "name": "set_process_input", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Enables or disabled internal processing for this node. Internal processing happens in isolation from the normal [method _process] calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting ([method set_process]). Only useful for advanced uses to manipulate built-in nodes behaviour.", "name": "set_process_internal", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "priority", "type": "int"}], "description": "", "name": "set_process_priority", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a [Control]). Enabled automatically if [method _unhandled_input] is overridden. Any calls to this before [method _ready] will be ignored.", "name": "set_process_unhandled_input", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Enables unhandled key input processing. Enabled automatically if [method _unhandled_key_input] is overridden. Any calls to this before [method _ready] will be ignored.", "name": "set_process_unhandled_key_input", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "load_placeholder", "type": "bool"}], "description": "Sets whether this is an instance load placeholder. See [InstancePlaceholder].", "name": "set_scene_instance_load_placeholder", "return_": {"description": "", "type": "void"}}], "name": "Node", "signals": [{"arguments": [], "description": "Emitted when the node is ready.", "name": "ready"}, {"arguments": [], "description": "Emitted when the node is renamed.", "name": "renamed"}, {"arguments": [], "description": "Emitted when the node enters the tree.", "name": "tree_entered"}, {"arguments": [], "description": "Emitted after the node exits the tree and is no longer active.", "name": "tree_exited"}, {"arguments": [], "description": "Emitted when the node is still active but about to exit the tree. This is the right place for de-initialization (or a \"destructor\", if you will).", "name": "tree_exiting"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/getting_started/step_by_step/scenes_and_nodes.html"}]}}, "Node2D": {"brief_description": "A 2D game object, parent of all 2D related nodes. Has a position, rotation, scale and Z-index.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A 2D game object, with a position, rotation and scale. All 2D physics nodes and sprites inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control on the node's render order.", "inherits": "CanvasItem", "members": [{"description": "Global position.", "getter": "get_global_position", "name": "global_position", "setter": "set_global_position", "type": "Vector2"}, {"description": "Global rotation in radians.", "getter": "get_global_rotation", "name": "global_rotation", "setter": "set_global_rotation", "type": "float"}, {"description": "Global rotation in degrees.", "getter": "get_global_rotation_degrees", "name": "global_rotation_degrees", "setter": "set_global_rotation_degrees", "type": "float"}, {"description": "Global scale.", "getter": "get_global_scale", "name": "global_scale", "setter": "set_global_scale", "type": "Vector2"}, {"description": "Global [Transform2D].", "getter": "get_global_transform", "name": "global_transform", "setter": "set_global_transform", "type": "Transform2D"}, {"description": "Position, relative to the node's parent.", "getter": "get_position", "name": "position", "setter": "set_position", "type": "Vector2"}, {"description": "Rotation in radians, relative to the node's parent.", "getter": "get_rotation", "name": "rotation", "setter": "set_rotation", "type": "float"}, {"description": "Rotation in degrees, relative to the node's parent.", "getter": "get_rotation_degrees", "name": "rotation_degrees", "setter": "set_rotation_degrees", "type": "float"}, {"description": "The node's scale. Unscaled value: [code](1, 1)[/code]", "getter": "get_scale", "name": "scale", "setter": "set_scale", "type": "Vector2"}, {"description": "Local [Transform2D].", "getter": "get_transform", "name": "transform", "setter": "set_transform", "type": "Transform2D"}, {"description": "If [code]true[/code] the node's Z-index is relative to its parent's Z-index. If this node's Z-index is 2 and its parent's effective Z-index is 3, then this node's effective Z-index will be 2 + 3 = 5.", "getter": "is_z_relative", "name": "z_as_relative", "setter": "set_z_as_relative", "type": "bool"}, {"description": "Z-index. Controls the order in which the nodes render. A node with a higher Z-index will display in front of others.", "getter": "get_z_index", "name": "z_index", "setter": "set_z_index", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "ratio", "type": "Vector2"}], "description": "Multiplies the current scale by the 'ratio' vector.", "name": "apply_scale", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}], "description": "Returns the angle between the node and the 'point' in radians.", "name": "get_angle_to", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "parent", "type": "Node"}], "description": "Returns the [Transform2D] relative to this node's parent.", "name": "get_relative_transform_to_parent", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "Vector2"}], "description": "Adds the 'offset' vector to the node's global position.", "name": "global_translate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}], "description": "Rotates the node so it points towards the 'point'.", "name": "look_at", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}, {"default": "false", "description": "", "index": "1", "name": "scaled", "type": "bool"}], "description": "Applies a local translation on the node's X axis based on the [method Node._process]'s [code]delta[/code]. If [code]scaled[/code] is false, normalizes the movement.", "name": "move_local_x", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "delta", "type": "float"}, {"default": "false", "description": "", "index": "1", "name": "scaled", "type": "bool"}], "description": "Applies a local translation on the node's Y axis based on the [method Node._process]'s [code]delta[/code]. If [code]scaled[/code] is false, normalizes the movement.", "name": "move_local_y", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "radians", "type": "float"}], "description": "Applies a rotation to the node, in radians, starting from its current rotation.", "name": "rotate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "local_point", "type": "Vector2"}], "description": "Converts a local point's coordinates to global coordinates.", "name": "to_global", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "global_point", "type": "Vector2"}], "description": "Converts a global point's coordinates to local coordinates.", "name": "to_local", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "Vector2"}], "description": "Translates the node by the given [code]offset[/code] in local coordinates.", "name": "translate", "return_": {"description": "", "type": "void"}}], "name": "Node2D", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/2d/custom_drawing_in_2d.html"}]}}, "NodePath": {"brief_description": "Pre-parsed scene tree path.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "A pre-parsed relative or absolute path in a scene tree, for use with [method Node.get_node] and similar functions. It can reference a node, a resource within a node, or a property of a node or resource. For instance, [code]\"Path2D/PathFollow2D/Sprite:texture:size\"[/code] would refer to the size property of the texture resource on the node named \"Sprite\" which is a child of the other named nodes in the path. Note that if you want to get a resource, you must end the path with a colon, otherwise the last element will be used as a property name.\n\t\tYou will usually just pass a string to [method Node.get_node] and it will be automatically converted, but you may occasionally want to parse a path ahead of time with [code]NodePath[/code] or the literal syntax [code]@\"path\"[/code]. Exporting a [code]NodePath[/code] variable will give you a node selection widget in the properties panel of the editor, which can often be useful.\n\t\tA [code]NodePath[/code] is made up of a list of node names, a list of \"subnode\" (resource) names, and the name of a property in the final node or resource.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}], "description": "Create a NodePath from a string, e.g. \"Path2D/PathFollow2D/Sprite:texture:size\". A path is absolute if it starts with a slash. Absolute paths are only valid in the global scene tree, not within individual scenes. In a relative path, [code]\".\"[/code] and [code]\"..\"[/code] indicate the current node and its parent.", "name": "NodePath", "return_": {"description": "", "type": "NodePath"}}, {"arguments": [], "description": "", "name": "get_as_property_path", "return_": {"description": "", "type": "NodePath"}}, {"arguments": [], "description": "", "name": "get_concatenated_subnames", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Get the node name indicated by [code]idx[/code] (0 to [method get_name_count])", "name": "get_name", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the number of node names which make up the path.", "name": "get_name_count", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Get the resource name indicated by [code]idx[/code] (0 to [method get_subname_count])", "name": "get_subname", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the number of resource names in the path.", "name": "get_subname_count", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return true if the node path is absolute (not relative).", "name": "is_absolute", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Return true if the node path is empty.", "name": "is_empty", "return_": {"description": "", "type": "bool"}}], "name": "NodePath", "signals": [], "tutorials": {"links": []}}, "OS": {"brief_description": "Operating System functions.", "category": "Core", "constants": [{"description": "Sunday.", "enum": "Weekday", "name": "DAY_SUNDAY", "value": "0"}, {"description": "Monday.", "enum": "Weekday", "name": "DAY_MONDAY", "value": "1"}, {"description": "Tuesday.", "enum": "Weekday", "name": "DAY_TUESDAY", "value": "2"}, {"description": "Wednesday.", "enum": "Weekday", "name": "DAY_WEDNESDAY", "value": "3"}, {"description": "Thursday.", "enum": "Weekday", "name": "DAY_THURSDAY", "value": "4"}, {"description": "Friday.", "enum": "Weekday", "name": "DAY_FRIDAY", "value": "5"}, {"description": "Saturday.", "enum": "Weekday", "name": "DAY_SATURDAY", "value": "6"}, {"description": "January.", "enum": "Month", "name": "MONTH_JANUARY", "value": "1"}, {"description": "February.", "enum": "Month", "name": "MONTH_FEBRUARY", "value": "2"}, {"description": "March.", "enum": "Month", "name": "MONTH_MARCH", "value": "3"}, {"description": "April.", "enum": "Month", "name": "MONTH_APRIL", "value": "4"}, {"description": "May.", "enum": "Month", "name": "MONTH_MAY", "value": "5"}, {"description": "June.", "enum": "Month", "name": "MONTH_JUNE", "value": "6"}, {"description": "July.", "enum": "Month", "name": "MONTH_JULY", "value": "7"}, {"description": "August.", "enum": "Month", "name": "MONTH_AUGUST", "value": "8"}, {"description": "September.", "enum": "Month", "name": "MONTH_SEPTEMBER", "value": "9"}, {"description": "October.", "enum": "Month", "name": "MONTH_OCTOBER", "value": "10"}, {"description": "November.", "enum": "Month", "name": "MONTH_NOVEMBER", "value": "11"}, {"description": "December.", "enum": "Month", "name": "MONTH_DECEMBER", "value": "12"}, {"description": "Landscape screen orientation.", "enum": "ScreenOrientation", "name": "SCREEN_ORIENTATION_LANDSCAPE", "value": "0"}, {"description": "Portrait screen orientation.", "enum": "ScreenOrientation", "name": "SCREEN_ORIENTATION_PORTRAIT", "value": "1"}, {"description": "Reverse landscape screen orientation.", "enum": "ScreenOrientation", "name": "SCREEN_ORIENTATION_REVERSE_LANDSCAPE", "value": "2"}, {"description": "Reverse portrait screen orientation.", "enum": "ScreenOrientation", "name": "SCREEN_ORIENTATION_REVERSE_PORTRAIT", "value": "3"}, {"description": "Uses landscape or reverse landscape based on the hardware sensor.", "enum": "ScreenOrientation", "name": "SCREEN_ORIENTATION_SENSOR_LANDSCAPE", "value": "4"}, {"description": "Uses portrait or reverse portrait based on the hardware sensor.", "enum": "ScreenOrientation", "name": "SCREEN_ORIENTATION_SENSOR_PORTRAIT", "value": "5"}, {"description": "Uses most suitable orientation based on the hardware sensor.", "enum": "ScreenOrientation", "name": "SCREEN_ORIENTATION_SENSOR", "value": "6"}, {"description": "Desktop directory path.", "enum": "SystemDir", "name": "SYSTEM_DIR_DESKTOP", "value": "0"}, {"description": "DCIM (Digital Camera Images) directory path.", "enum": "SystemDir", "name": "SYSTEM_DIR_DCIM", "value": "1"}, {"description": "Documents directory path.", "enum": "SystemDir", "name": "SYSTEM_DIR_DOCUMENTS", "value": "2"}, {"description": "Downloads directory path.", "enum": "SystemDir", "name": "SYSTEM_DIR_DOWNLOADS", "value": "3"}, {"description": "Movies directory path.", "enum": "SystemDir", "name": "SYSTEM_DIR_MOVIES", "value": "4"}, {"description": "Music directory path.", "enum": "SystemDir", "name": "SYSTEM_DIR_MUSIC", "value": "5"}, {"description": "Pictures directory path.", "enum": "SystemDir", "name": "SYSTEM_DIR_PICTURES", "value": "6"}, {"description": "Ringtones directory path.", "enum": "SystemDir", "name": "SYSTEM_DIR_RINGTONES", "value": "7"}, {"description": "Unknown powerstate.", "enum": "PowerState", "name": "POWERSTATE_UNKNOWN", "value": "0"}, {"description": "Unplugged, running on battery.", "enum": "PowerState", "name": "POWERSTATE_ON_BATTERY", "value": "1"}, {"description": "Plugged in, no battery available.", "enum": "PowerState", "name": "POWERSTATE_NO_BATTERY", "value": "2"}, {"description": "Plugged in, battery charging.", "enum": "PowerState", "name": "POWERSTATE_CHARGING", "value": "3"}, {"description": "Plugged in, battery fully charged.", "enum": "PowerState", "name": "POWERSTATE_CHARGED", "value": "4"}], "demos": {"links": []}, "description": "Operating System functions. OS Wraps the most common functionality to communicate with the host Operating System, such as: mouse grabbing, mouse cursors, clipboard, video mode, date and time, timers, environment variables, execution of binaries, command line, etc.", "inherits": "Object", "members": [{"description": "The clipboard from the host OS. Might be unavailable on some platforms.", "getter": "get_clipboard", "name": "clipboard", "setter": "set_clipboard", "type": "String"}, {"description": "The current screen index (starting from 0).", "getter": "get_current_screen", "name": "current_screen", "setter": "set_current_screen", "type": "int"}, {"description": "The exit code passed to the OS when the main loop exits.", "getter": "get_exit_code", "name": "exit_code", "setter": "set_exit_code", "type": "int"}, {"description": "If [code]true[/code] the engine tries to keep the screen on while the game is running. Useful on mobile.", "getter": "is_keep_screen_on", "name": "keep_screen_on", "setter": "set_keep_screen_on", "type": "bool"}, {"description": "If [code]true[/code] the engine optimizes for low processor usage by only refreshing the screen if needed. Can improve battery consumption on mobile.", "getter": "is_in_low_processor_usage_mode", "name": "low_processor_usage_mode", "setter": "set_low_processor_usage_mode", "type": "bool"}, {"description": "The current screen orientation.", "getter": "get_screen_orientation", "name": "screen_orientation", "setter": "set_screen_orientation", "type": "int"}, {"description": "If [code]true[/code] vertical synchronization (Vsync) is enabled.", "getter": "is_vsync_enabled", "name": "vsync_enabled", "setter": "set_use_vsync", "type": "bool"}, {"description": "If [code]true[/code] removes the window frame.", "getter": "get_borderless_window", "name": "window_borderless", "setter": "set_borderless_window", "type": "bool"}, {"description": "If [code]true[/code] the window is fullscreen.", "getter": "is_window_fullscreen", "name": "window_fullscreen", "setter": "set_window_fullscreen", "type": "bool"}, {"description": "If [code]true[/code] the window is maximized.", "getter": "is_window_maximized", "name": "window_maximized", "setter": "set_window_maximized", "type": "bool"}, {"description": "If [code]true[/code] the window is minimized.", "getter": "is_window_minimized", "name": "window_minimized", "setter": "set_window_minimized", "type": "bool"}, {"description": "", "getter": "get_window_per_pixel_transparency_enabled", "name": "window_per_pixel_transparency_enabled", "setter": "set_window_per_pixel_transparency_enabled", "type": "bool"}, {"description": "The window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right.", "getter": "get_window_position", "name": "window_position", "setter": "set_window_position", "type": "Vector2"}, {"description": "If [code]true[/code], the window is resizable by the user.", "getter": "is_window_resizable", "name": "window_resizable", "setter": "set_window_resizable", "type": "bool"}, {"description": "The size of the window (without counting window manager decorations).", "getter": "get_window_size", "name": "window_size", "setter": "set_window_size", "type": "Vector2"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}, {"default": "\"Alert!\"", "description": "", "index": "1", "name": "title", "type": "String"}], "description": "Displays a modal dialog box utilizing the host OS.", "name": "alert", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns [code]true[/code] if the host OS allows drawing.", "name": "can_draw", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the current host platform is using multiple threads.", "name": "can_use_threads", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Centers the window on the screen if in windowed mode.", "name": "center_window", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "close_midi_inputs", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "msec", "type": "int"}], "description": "Delay execution of the current thread by given milliseconds.", "name": "delay_msec", "qualifiers": "const", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "usec", "type": "int"}], "description": "Delay execution of the current thread by given microseconds.", "name": "delay_usec", "qualifiers": "const", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "file", "type": "String"}], "description": "Dumps the memory allocation ringlist to a file (only works in debug).\n\t\t\t\tEntry format per line: \"Address - Size - Description\".", "name": "dump_memory_to_file", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "file", "type": "String"}], "description": "Dumps all used resources to file (only works in debug).\n\t\t\t\tEntry format per line: \"Resource Type : Resource Location\".\n\t\t\t\tAt the end of the file is a statistic of all used Resource Types.", "name": "dump_resources_to_file", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "arguments", "type": "PoolStringArray"}, {"description": "", "index": "2", "name": "blocking", "type": "bool"}, {"default": "[  ]", "description": "", "index": "3", "name": "output", "type": "Array"}], "description": "Execute the file at the given path with the arguments passed as an array of strings. Platform path resolution will take place. The resolved file must exist and be executable.\n\t\t\t\tThe arguments are used in the given order and separated by a space, so [code]OS.execute('ping', ['-c', '3', 'godotengine.org'])[/code] will resolve to [code]ping -c 3 godotengine.org[/code] in the system's shell.\n\t\t\t\tThis method has slightly different behaviour based on whether the [code]blocking[/code] mode is enabled.\n\t\t\t\tWhen [code]blocking[/code] is enabled, the Godot thread will pause its execution while waiting for the process to terminate. The shell output of the process will be written to the [code]output[/code] array as a single string. When the process terminates, the Godot thread will resume execution.\n\t\t\t\tWhen [code]blocking[/code] is disabled, the Godot thread will continue while the new process runs. It is not possible to retrieve the shell output in non-blocking mode, so [code]output[/code] will be empty.\n\t\t\t\tThe return value also depends on the blocking mode. When blocking, the method will return -2 (no process ID information is available in blocking mode). When non-blocking, the method returns a process ID, which you can use to monitor the process (and potentially terminate it with [method kill]). If the process forking (non-blocking) or opening (blocking) fails, the method will return -1.\n\t\t\t\tExample of blocking mode and retrieving the shell output:\n\t\t\t\t[codeblock]\n\t\t\t\tvar output = []\n\t\t\t\tOS.execute('ls', ['-l', '/tmp'], true, output)\n\t\t\t\t[/codeblock]\n\t\t\t\tExample of non-blocking mode, running another instance of the project and storing its process ID:\n\t\t\t\t[codeblock]\n\t\t\t\tvar pid = OS.execute(OS.get_executable_path(), [], false)\n\t\t\t\t[/codeblock]\n\t\t\t\tIf you wish to access a shell built-in or perform a composite command, a platform-specific shell can be invoked. For example:\n\t\t\t\t[codeblock]\n\t\t\t\tOS.execute('CMD.exe', ['/C', 'cd %TEMP% && dir'], true, output)\n\t\t\t\t[/codeblock]", "name": "execute", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "string", "type": "String"}], "description": "Returns the scancode of the given string (e.g. \"Escape\")", "name": "find_scancode_from_string", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the total number of available audio drivers.", "name": "get_audio_driver_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "driver", "type": "int"}], "description": "Returns the audio driver name for the given index.", "name": "get_audio_driver_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the command line arguments passed to the engine.", "name": "get_cmdline_args", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [], "description": "", "name": "get_connected_midi_inputs", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "utc", "type": "bool"}], "description": "Returns current date as a dictionary of keys: year, month, day, weekday, dst (daylight savings time).", "name": "get_date", "qualifiers": "const", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "utc", "type": "bool"}], "description": "Returns current datetime as a dictionary of keys: year, month, day, weekday, dst (daylight savings time), hour, minute, second.", "name": "get_datetime", "qualifiers": "const", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"description": "", "index": "0", "name": "unix_time_val", "type": "int"}], "description": "Get a dictionary of time values when given epoch time.\n\t\t\t\tDictionary Time values will be a union of values from [method get_time] and [method get_date] dictionaries (with the exception of dst = day light standard time, as it cannot be determined from epoch).", "name": "get_datetime_from_unix_time", "qualifiers": "const", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [], "description": "Returns the total amount of dynamic memory used (only works in debug).", "name": "get_dynamic_memory_usage", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "environment", "type": "String"}], "description": "Returns an environment variable.", "name": "get_environment", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the path to the current engine executable.", "name": "get_executable_path", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the current latin keyboard variant as a String.\n\t\t\t\tPossible return values are: \"QWERTY\", \"AZERTY\", \"QZERTY\", \"DVORAK\", \"NEO\", \"COLEMAK\" or \"ERROR\".", "name": "get_latin_keyboard_variant", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the host OS locale.", "name": "get_locale", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the model name of the current device.", "name": "get_model_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the name of the host OS. Possible values are: \"Android\", \"Haiku\", \"iOS\", \"HTML5\", \"OSX\", \"Server\", \"Windows\", \"UWP\", \"X11\".", "name": "get_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the amount of battery left in the device as a percentage.", "name": "get_power_percent_left", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the time in seconds before the device runs out of battery.", "name": "get_power_seconds_left", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the current state of the device regarding battery and power. See [code]POWERSTATE_*[/code] constants.", "name": "get_power_state", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the game process ID", "name": "get_process_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the number of cores available in the host machine.", "name": "get_processor_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the window size including decorations like window borders.", "name": "get_real_window_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "code", "type": "int"}], "description": "Returns the given scancode as a string (e.g. Return values: \"Escape\", \"Shift+Escape\").", "name": "get_scancode_string", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the number of displays attached to the host machine.", "name": "get_screen_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"default": "-1", "description": "", "index": "0", "name": "screen", "type": "int"}], "description": "Returns the dots per inch density of the specified screen.\n\t\t\t\tOn Android Devices, the actual screen densities are grouped into six generalized densities:\n\t\t\t\t\tldpi    - 120 dpi\n\t\t\t\t\tmdpi    - 160 dpi\n\t\t\t\t\thdpi    - 240 dpi\n\t\t\t\t\txhdpi   - 320 dpi\n\t\t\t\t\txxhdpi  - 480 dpi\n\t\t\t\t\txxxhdpi - 640 dpi", "name": "get_screen_dpi", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"default": "-1", "description": "", "index": "0", "name": "screen", "type": "int"}], "description": "Returns the position of the specified screen by index. If no screen index is provided, the current screen will be used.", "name": "get_screen_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"default": "-1", "description": "", "index": "0", "name": "screen", "type": "int"}], "description": "Returns the dimensions in pixels of the specified screen.", "name": "get_screen_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "", "name": "get_splash_tick_msec", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the max amount of static memory used (only works in debug).", "name": "get_static_memory_peak_usage", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the amount of static memory being used by the program in bytes.", "name": "get_static_memory_usage", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "dir", "type": "int"}], "description": "Returns the actual path to commonly used folders across different platforms. Available locations are specified in [OS.SystemDir].", "name": "get_system_dir", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the epoch time of the operating system in seconds.", "name": "get_system_time_secs", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the amount of time passed in milliseconds since the engine started.", "name": "get_ticks_msec", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the amount of time passed in microseconds since the engine started.", "name": "get_ticks_usec", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "utc", "type": "bool"}], "description": "Returns current time as a dictionary of keys: hour, minute, second.", "name": "get_time", "qualifiers": "const", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [], "description": "Returns the current time zone as a dictionary with the keys: bias and name.", "name": "get_time_zone_info", "qualifiers": "const", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [], "description": "Returns a string that is unique to the device.\n\t\t\t\tReturns empty string on HTML5 and UWP which are not supported yet.", "name": "get_unique_id", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the current unix epoch timestamp.", "name": "get_unix_time", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "datetime", "type": "Dictionary"}], "description": "Get an epoch time value from a dictionary of time values.\n\t\t\t\t[code]datetime[/code] must be populated with the following keys: year, month, day, hour, minute, second.\n\t\t\t\tYou can pass the output from [method get_datetime_from_unix_time] directly into this function. Daylight savings time (dst), if present, is ignored.", "name": "get_unix_time_from_datetime", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the absolute directory path where user data is written ([code]user://[/code]).\n\t\t\t\tOn Linux, this is [code]~/.local/share/godot/app_userdata/[project_name][/code], or [code]~/.local/share/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.\n\t\t\t\tOn macOS, this is [code]~/Library/Application Support/Godot/app_userdata/[project_name][/code], or [code]~/Library/Application Support/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.\n\t\t\t\tOn Windows, this is [code]%APPDATA%/Godot/app_userdata/[project_name][/code], or [code]%APPDATA%/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.\n\t\t\t\tIf the project name is empty, [code]user://[/code] falls back to [code]res://[/code].", "name": "get_user_data_dir", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "get_video_driver_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "driver", "type": "int"}], "description": "", "name": "get_video_driver_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the on-screen keyboard's height in pixels. Returns 0 if there is no keyboard or it is currently hidden.", "name": "get_virtual_keyboard_height", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_window_safe_area", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "environment", "type": "String"}], "description": "Returns [code]true[/code] if an environment variable exists.", "name": "has_environment", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "tag_name", "type": "String"}], "description": "Returns [code]true[/code] if the feature for the given feature tag is supported in the currently running instance, depending on platform, build etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. See feature tags documentation.", "name": "has_feature", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the device has a touchscreen or emulates one.", "name": "has_touchscreen_ui_hint", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the platform has a virtual keyboard, [code]false[/code] otherwise.", "name": "has_virtual_keyboard", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Hides the virtual keyboard if it is shown, does nothing otherwise.", "name": "hide_virtual_keyboard", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns [code]true[/code] if the build is a debug build.\n\t\t\t\tReturns [code]true[/code] when running in the editor.\n\t\t\t\tReturns [code]false[/code] if the build is a release build.", "name": "is_debug_build", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the \"Okay\" button should appear on the left and \"Cancel\" on the right.", "name": "is_ok_left_and_cancel_right", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "code", "type": "int"}], "description": "Returns [code]true[/code] if the input code has a unicode character.", "name": "is_scancode_unicode", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the engine was executed with -v (verbose stdout).", "name": "is_stdout_verbose", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "If [code]true[/code], the [code]user://[/code] file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable.", "name": "is_userfs_persistent", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the window should always be on top of other windows.", "name": "is_window_always_on_top", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "pid", "type": "int"}], "description": "Kill (terminate) the process identified by the given process ID ([code]pid[/code]), e.g. the one returned by [method execute] in non-blocking mode.\n\t\t\t\tNote that this method can also be used to kill processes that were not spawned by the game.", "name": "kill", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns [code]true[/code] if native video is playing.", "name": "native_video_is_playing", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Pauses native video playback.", "name": "native_video_pause", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "volume", "type": "float"}, {"description": "", "index": "2", "name": "audio_track", "type": "String"}, {"description": "", "index": "3", "name": "subtitle_track", "type": "String"}], "description": "Plays native video from the specified path, at the given volume and with audio and subtitle tracks.", "name": "native_video_play", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Stops native video playback.", "name": "native_video_stop", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Resumes native video playback.", "name": "native_video_unpause", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "open_midi_inputs", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "\"\"", "description": "", "index": "0", "name": "tofile", "type": "String"}], "description": "Shows all resources in the game. Optionally the list can be written to a file.", "name": "print_all_resources", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Shows the list of loaded textures sorted by size in memory.", "name": "print_all_textures_by_size", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "types", "type": "PoolStringArray"}], "description": "Shows the number of resources loaded by the game of the given types.", "name": "print_resources_by_type", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "short", "type": "bool"}], "description": "Shows all resources currently used by the game.", "name": "print_resources_in_use", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Request the user attention to the window. It'll flash the taskbar button on Windows or bounce the dock icon on OSX.", "name": "request_attention", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "icon", "type": "Image"}], "description": "Sets the game's icon.", "name": "set_icon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "", "name": "set_ime_position", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Sets the name of the current thread.", "name": "set_thread_name", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "enabled", "type": "bool"}], "description": "Enables backup saves if [code]enabled[/code] is [code]true[/code].", "name": "set_use_file_access_save_and_swap", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enabled", "type": "bool"}], "description": "Sets whether the window should always be on top.", "name": "set_window_always_on_top", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "title", "type": "String"}], "description": "Sets the window title to the specified string.", "name": "set_window_title", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "uri", "type": "String"}], "description": "Requests the OS to open a resource with the most appropriate program. For example.\n\t\t\t\t\t[code]OS.shell_open(\"C:\\\\Users\\name\\Downloads\")[/code] on Windows opens the file explorer at the downloads folders of the user.\n\t\t\t\t\t[code]OS.shell_open(\"http://godotengine.org\")[/code] opens the default web browser on the official Godot website.", "name": "shell_open", "return_": {"description": "", "type": "int"}}, {"arguments": [{"default": "\"\"", "description": "", "index": "0", "name": "existing_text", "type": "String"}], "description": "Shows the virtual keyboard if the platform has one. The [i]existing_text[/i] parameter is useful for implementing your own LineEdit, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).", "name": "show_virtual_keyboard", "return_": {"description": "", "type": "void"}}], "name": "OS", "signals": [], "tutorials": {"links": []}}, "Object": {"brief_description": "Base class for all non built-in types.", "category": "Core", "constants": [{"description": "Called right when the object is initialized. Not available in script.", "name": "NOTIFICATION_POSTINITIALIZE", "value": "0"}, {"description": "Called before the object is about to be deleted.", "name": "NOTIFICATION_PREDELETE", "value": "1"}, {"description": "Connect a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time.", "enum": "ConnectFlags", "name": "CONNECT_DEFERRED", "value": "1"}, {"description": "Persisting connections are saved when the object is serialized to file.", "enum": "ConnectFlags", "name": "CONNECT_PERSIST", "value": "2"}, {"description": "One shot connections disconnect themselves after emission.", "enum": "ConnectFlags", "name": "CONNECT_ONESHOT", "value": "4"}, {"description": "", "enum": "ConnectFlags", "name": "CONNECT_REFERENCE_COUNTED", "value": "8"}], "demos": {"links": []}, "description": "Base class for all non built-in types. Everything not a built-in type starts the inheritance chain from this class.\n\t\tObjects do not manage memory, if inheriting from one the object will most likely have to be deleted manually (call the [method free] function from the script or delete from C++).\n\t\tSome derivatives add memory management, such as [Reference] (which keeps a reference count and deletes itself automatically when no longer referenced) and [Node], which deletes the children tree when deleted.\n\t\tObjects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in [method _get_property_list] and handled in [method _get] and [method _set]. However, scripting languages and C++ have simpler means to export them.\n\t\tObjects also receive notifications ([method _notification]). Notifications are a simple way to notify the object about simple events, so they can all be handled together.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}], "description": "Returns the given property. Returns [code]null[/code] if the [code]property[/code] does not exist.", "name": "_get", "qualifiers": "virtual", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Returns the object's property list as an [Array] of dictionaries. Dictionaries must contain: name:String, type:int (see TYPE_* enum in [@GlobalScope]) and optionally: hint:int (see PROPERTY_HINT_* in [@GlobalScope]), hint_string:String, usage:int (see PROPERTY_USAGE_* in [@GlobalScope]).", "name": "_get_property_list", "qualifiers": "virtual", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "The virtual method called upon initialization.", "name": "_init", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "int"}], "description": "Notify the object internally using an ID.", "name": "_notification", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "Sets a property. Returns [code]true[/code] if the [code]property[/code] exists.", "name": "_set", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "signal", "type": "String"}, {"default": "[  ]", "description": "", "index": "1", "name": "arguments", "type": "Array"}], "description": "Adds a user-defined [code]signal[/code]. Arguments are optional, but can be added as an [Array] of dictionaries, each containing \"name\" and \"type\" (from [@GlobalScope] TYPE_*).", "name": "add_user_signal", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "method", "type": "String"}], "description": "Calls the [code]method[/code] on the object and returns a result. Pass parameters as a comma separated list.", "name": "call", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "method", "type": "String"}], "description": "Calls the [code]method[/code] on the object during idle time and returns a result. Pass parameters as a comma separated list.", "name": "call_deferred", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "method", "type": "String"}, {"description": "", "index": "1", "name": "arg_array", "type": "Array"}], "description": "Calls the [code]method[/code] on the object and returns a result. Pass parameters as an [Array].", "name": "callv", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Returns [code]true[/code] if the object can translate strings.", "name": "can_translate_messages", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "signal", "type": "String"}, {"description": "", "index": "1", "name": "target", "type": "Object"}, {"description": "", "index": "2", "name": "method", "type": "String"}, {"default": "[  ]", "description": "", "index": "3", "name": "binds", "type": "Array"}, {"default": "0", "description": "", "index": "4", "name": "flags", "type": "int"}], "description": "Connects a [code]signal[/code] to a [code]method[/code] on a [code]target[/code] object. Pass optional [code]binds[/code] to the call. Use [code]flags[/code] to set deferred or one shot connections. See [code]CONNECT_*[/code] constants. A [code]signal[/code] can only be connected once to a [code]method[/code]. It will throw an error if already connected. To avoid this, first use [method is_connected] to check for existing connections.", "name": "connect", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "signal", "type": "String"}, {"description": "", "index": "1", "name": "target", "type": "Object"}, {"description": "", "index": "2", "name": "method", "type": "String"}], "description": "Disconnects a [code]signal[/code] from a [code]method[/code] on the given [code]target[/code].", "name": "disconnect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "signal", "type": "String"}], "description": "Emits the given [code]signal[/code].", "name": "emit_signal", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Deletes the object from memory.", "name": "free", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}], "description": "Returns a [Variant] for a [code]property[/code].", "name": "get", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Returns the object's class as a [String].", "name": "get_class", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns an [Array] of dictionaries with information about signals that are connected to the object.\n\t\t\t\tInside each [Dictionary] there are 3 fields:\n\t\t\t\t- \"source\" is a reference to signal emitter.\n\t\t\t\t- \"signal_name\" is name of connected signal.\n\t\t\t\t- \"method_name\" is a name of method to which signal is connected.", "name": "get_incoming_connections", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "NodePath"}], "description": "Get indexed object property by String.\n\t\t\t\tProperty indices get accessed with colon seperation, for example: [code]position:x[/code]", "name": "get_indexed", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Returns the object's unique instance ID.", "name": "get_instance_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Returns the object's metadata for the given [code]name[/code].", "name": "get_meta", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Returns the object's metadata as a [PoolStringArray].", "name": "get_meta_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [], "description": "Returns the object's methods and their signatures as an [Array].", "name": "get_method_list", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns the list of properties as an [Array] of dictionaries. Dictionaries contain: name:String, type:int (see TYPE_* enum in [@GlobalScope]) and optionally: hint:int (see PROPERTY_HINT_* in [@GlobalScope]), hint_string:String, usage:int (see PROPERTY_USAGE_* in [@GlobalScope]).", "name": "get_property_list", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns the object's [Script] or [code]null[/code] if one doesn't exist.", "name": "get_script", "qualifiers": "const", "return_": {"description": "", "type": "Reference"}}, {"arguments": [{"description": "", "index": "0", "name": "signal", "type": "String"}], "description": "Returns an [Array] of connections for the given [code]signal[/code].", "name": "get_signal_connection_list", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns the list of signals as an [Array] of dictionaries.", "name": "get_signal_list", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Returns [code]true[/code] if a metadata is found with the given [code]name[/code].", "name": "has_meta", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "method", "type": "String"}], "description": "Returns [code]true[/code] if the object contains the given [code]method[/code].", "name": "has_method", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "signal", "type": "String"}], "description": "Returns [code]true[/code] if the given user-defined [code]signal[/code] exists.", "name": "has_user_signal", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if signal emission blocking is enabled.", "name": "is_blocking_signals", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Returns [code]true[/code] if the object inherits from the given [code]type[/code].", "name": "is_class", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "signal", "type": "String"}, {"description": "", "index": "1", "name": "target", "type": "Object"}, {"description": "", "index": "2", "name": "method", "type": "String"}], "description": "Returns [code]true[/code] if a connection exists for a given [code]signal[/code], [code]target[/code], and [code]method[/code].", "name": "is_connected", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the [code]queue_free[/code] method was called for the object.", "name": "is_queued_for_deletion", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "int"}, {"default": "false", "description": "", "index": "1", "name": "reversed", "type": "bool"}], "description": "Notify the object of something.", "name": "notification", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "property_list_changed_notify", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "Set property into the object.", "name": "set", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "If set to true, signal emission is blocked.", "name": "set_block_signals", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "property", "type": "NodePath"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "", "name": "set_indexed", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Define whether the object can translate strings (with calls to [method tr]). Default is true.", "name": "set_message_translation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "Set a metadata into the object. Metadata is serialized. Metadata can be [i]anything[/i].", "name": "set_meta", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "script", "type": "Reference"}], "description": "Set a script into the object, scripts extend the object functionality.", "name": "set_script", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "message", "type": "String"}], "description": "Translate a message. Only works if message translation is enabled (which it is by default). See [method set_message_translation].", "name": "tr", "qualifiers": "const", "return_": {"description": "", "type": "String"}}], "name": "Object", "signals": [{"arguments": [], "description": "Emitted whenever the script of the Object is changed.", "name": "script_changed"}], "tutorials": {"links": []}}, "OccluderPolygon2D": {"brief_description": "Defines a 2D polygon for LightOccluder2D.", "category": "Core", "constants": [{"description": "Culling mode for the occlusion. Disabled means no culling. See [member cull_mode].", "enum": "CullMode", "name": "CULL_DISABLED", "value": "0"}, {"description": "Culling mode for the occlusion. Sets the culling to be in clockwise direction. See [member cull_mode].", "enum": "CullMode", "name": "CULL_CLOCKWISE", "value": "1"}, {"description": "Culling mode for the occlusion. Sets the culling to be in counter clockwise direction. See [member cull_mode].", "enum": "CullMode", "name": "CULL_COUNTER_CLOCKWISE", "value": "2"}], "demos": {"links": []}, "description": "Editor facility that helps you draw a 2D polygon used as resource for [LightOccluder2D].", "inherits": "Resource", "members": [{"description": "If [code]true[/code] closes the polygon. A closed OccluderPolygon2D occludes the light coming from any direction. An opened OccluderPolygon2D occludes the light only at its outline's direction. Default value [code]true[/code].", "getter": "is_closed", "name": "closed", "setter": "set_closed", "type": "bool"}, {"description": "Set the direction of the occlusion culling when not [code]CULL_DISABLED[/code]. Default value [code]DISABLED[/code].", "getter": "get_cull_mode", "name": "cull_mode", "setter": "set_cull_mode", "type": "int"}, {"description": "A [Vector2] array with the index for polygon's vertices positions.", "getter": "get_polygon", "name": "polygon", "setter": "set_polygon", "type": "PoolVector2Array"}], "methods": [], "name": "OccluderPolygon2D", "signals": [], "tutorials": {"links": []}}, "OmniLight": {"brief_description": "Omnidirectional light, such as a light bulb or a candle.", "category": "Core", "constants": [{"description": "", "enum": "ShadowMode", "name": "SHADOW_DUAL_PARABOLOID", "value": "0"}, {"description": "", "enum": "ShadowMode", "name": "SHADOW_CUBE", "value": "1"}, {"description": "", "enum": "ShadowDetail", "name": "SHADOW_DETAIL_VERTICAL", "value": "0"}, {"description": "", "enum": "ShadowDetail", "name": "SHADOW_DETAIL_HORIZONTAL", "value": "1"}], "demos": {"links": []}, "description": "An Omnidirectional light is a type of [Light] that emits light in all directions. The light is attenuated by distance and this attenuation can be configured by changing its energy, radius, and attenuation parameters.", "inherits": "Light", "members": [{"description": "The light's attenuation (drop-off) curve. A number of presets are available in the Inspector.", "getter": "get_param", "name": "omni_attenuation", "setter": "set_param", "type": "float"}, {"description": "Maximum distance the light affects.", "getter": "get_param", "name": "omni_range", "setter": "set_param", "type": "float"}, {"description": "See [enum ShadowDetail].", "getter": "get_shadow_detail", "name": "omni_shadow_detail", "setter": "set_shadow_detail", "type": "int"}, {"description": "See [enum ShadowMode].", "getter": "get_shadow_mode", "name": "omni_shadow_mode", "setter": "set_shadow_mode", "type": "int"}], "methods": [], "name": "OmniLight", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/lights_and_shadows.html"}]}}, "OptionButton": {"brief_description": "Button control that provides selectable options when pressed.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the \"current\" item and is displayed as the button text.", "inherits": "Button", "members": [{"description": "", "getter": "get_selected", "name": "selected", "setter": "_select_int", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "texture", "type": "Texture"}, {"description": "", "index": "1", "name": "label", "type": "String"}, {"default": "-1", "description": "", "index": "2", "name": "id", "type": "int"}], "description": "Add an item, with a \"texture\" icon, text \"label\" and (optionally) id. If no \"id\" is passed, \"id\" becomes the item index. New items are appended at the end.", "name": "add_icon_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "label", "type": "String"}, {"default": "-1", "description": "", "index": "1", "name": "id", "type": "int"}], "description": "Add an item, with text \"label\" and (optionally) id. If no \"id\" is passed, \"id\" becomes the item index. New items are appended at the end.", "name": "add_item", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Add a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end.", "name": "add_separator", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clear all the items in the [code]OptionButton[/code].", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the amount of items in the OptionButton.", "name": "get_item_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the icon of the item at index \"idx\".", "name": "get_item_icon", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the ID of the item at index \"idx\".", "name": "get_item_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_item_metadata", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the text of the item at index \"idx\".", "name": "get_item_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Return the [PopupMenu] contained in this button.", "name": "get_popup", "qualifiers": "const", "return_": {"description": "", "type": "PopupMenu"}}, {"arguments": [], "description": "", "name": "get_selected_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_selected_metadata", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "is_item_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "remove_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Select an item by index and make it the current item.", "name": "select", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "disabled", "type": "bool"}], "description": "", "name": "set_item_disabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "texture", "type": "Texture"}], "description": "Set the icon of an item at index \"idx\".", "name": "set_item_icon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "Set the ID of an item at index \"idx\".", "name": "set_item_id", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "metadata", "type": "Variant"}], "description": "", "name": "set_item_metadata", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "text", "type": "String"}], "description": "Set the text of an item at index \"idx\".", "name": "set_item_text", "return_": {"description": "", "type": "void"}}], "name": "OptionButton", "signals": [{"arguments": [{"description": "", "index": "0", "name": "ID", "type": "int"}], "description": "This signal is emitted when user navigated to an item using [code]ui_up[/code] or [code]ui_down[/code] action. ID of the item selected is passed as argument (if no IDs were added, ID will be just the item index).", "name": "item_focused"}, {"arguments": [{"description": "", "index": "0", "name": "ID", "type": "int"}], "description": "This signal is emitted when the current item was changed by the user. ID of the item selected is passed as argument (if no IDs were added, ID will be just the item index).", "name": "item_selected"}], "tutorials": {"links": []}}, "OrientedPathFollow": {"brief_description": "Oriented point sampler for a [Path].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This node behaves like [PathFollow], except it uses its parent [Path] up vector information to enforce orientation. \n\t\tMake sure to check if the curve of this node's parent [Path] has up vectors enabled. See [PathFollow] and [Curve3D] for further information.", "inherits": "Spatial", "members": [{"description": "If [code]true[/code] the position between two cached points is interpolated cubically, and linearly otherwise.\n\t\t\tThe points along the [Curve3D] of the [Path] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\tThere are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.", "getter": "get_cubic_interpolation", "name": "cubic_interp", "setter": "set_cubic_interpolation", "type": "bool"}, {"description": "The node's offset along the curve.", "getter": "get_h_offset", "name": "h_offset", "setter": "set_h_offset", "type": "float"}, {"description": "If [code]true[/code], any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.", "getter": "has_loop", "name": "loop", "setter": "set_loop", "type": "bool"}, {"description": "The distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path.", "getter": "get_offset", "name": "offset", "setter": "set_offset", "type": "float"}, {"description": "The distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.", "getter": "get_unit_offset", "name": "unit_offset", "setter": "set_unit_offset", "type": "float"}, {"description": "The node's offset perpendicular to the curve.", "getter": "get_v_offset", "name": "v_offset", "setter": "set_v_offset", "type": "float"}], "methods": [], "name": "OrientedPathFollow", "signals": [], "tutorials": {"links": []}}, "PCKPacker": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "pck_path", "type": "String"}, {"description": "", "index": "1", "name": "source_path", "type": "String"}], "description": "", "name": "add_file", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "verbose", "type": "bool"}], "description": "", "name": "flush", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "pck_name", "type": "String"}, {"description": "", "index": "1", "name": "alignment", "type": "int"}], "description": "", "name": "pck_start", "return_": {"description": "", "type": "int"}}], "name": "PCKPacker", "signals": [], "tutorials": {"links": []}}, "PHashTranslation": {"brief_description": "Optimized translation.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Optimized translation. Uses real-time compressed translations, which results in very small dictionaries.", "inherits": "Translation", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Translation"}], "description": "", "name": "generate", "return_": {"description": "", "type": "void"}}], "name": "PHashTranslation", "signals": [], "tutorials": {"links": []}}, "PackedDataContainer": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [{"description": "", "getter": "_get_data", "name": "__data__", "setter": "_set_data", "type": "PoolByteArray"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}], "description": "", "name": "pack", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "size", "qualifiers": "const", "return_": {"description": "", "type": "int"}}], "name": "PackedDataContainer", "signals": [], "tutorials": {"links": []}}, "PackedDataContainerRef": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "", "name": "size", "qualifiers": "const", "return_": {"description": "", "type": "int"}}], "name": "PackedDataContainerRef", "signals": [], "tutorials": {"links": []}}, "PackedScene": {"brief_description": "An abstraction of a serialized scene.", "category": "Core", "constants": [{"description": "If passed to [method instance], blocks edits to the scene state.", "enum": "GenEditState", "name": "GEN_EDIT_STATE_DISABLED", "value": "0"}, {"description": "If passed to [method instance], provides local scene resources to the local scene. Requires tools compiled.", "enum": "GenEditState", "name": "GEN_EDIT_STATE_INSTANCE", "value": "1"}, {"description": "If passed to [method instance], provides local scene resources to the local scene. Only the main scene should receive the main edit state. Requires tools compiled.", "enum": "GenEditState", "name": "GEN_EDIT_STATE_MAIN", "value": "2"}], "demos": {"links": []}, "description": "A simplified interface to a scene file. Provides access to operations and checks that can be performed on the scene resource itself.\n\t\tCan be used to save a node to a file. When saving, the node as well as all the node it owns get saved (see [code]owner[/code] property on [Node]). Note that the node doesn't need to own itself.\n\t\tExample of saving a node:\n\t\t[codeblock]\n\t\tvar scene = PackedScene.new()\n\t\tvar result = scene.pack(child)\n\t\tif result == OK:\n\t\t    ResourceSaver.save(\"res://path/name.scn\", scene) // or user://...\n\t\t[/codeblock]", "inherits": "Resource", "members": [{"description": "A dictionary representation of the scene contents.\n\t\t\tAvailable keys include \"rnames\" and \"variants\" for resources, \"node_count\", \"nodes\", \"node_paths\" for nodes, \"editable_instances\" for base scene children overrides, \"conn_count\" and \"conns\" for signal connections, and \"version\" for the format style of the PackedScene.", "getter": "_get_bundled_scene", "name": "_bundled", "setter": "_set_bundled_scene", "type": "Dictionary"}], "methods": [{"arguments": [], "description": "Returns [code]true[/code] if the scene file has nodes.", "name": "can_instance", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the [code]SceneState[/code] representing the scene file contents.", "name": "get_state", "return_": {"description": "", "type": "SceneState"}}, {"arguments": [{"default": "0", "description": "", "index": "0", "name": "edit_state", "type": "int"}], "description": "Instantiates the scene's node hierarchy. Triggers child scene instantiation(s). Triggers the [enum Object.NOTIFICATION_INSTANCED] notification on the root node.", "name": "instance", "qualifiers": "const", "return_": {"description": "", "type": "Node"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "Node"}], "description": "Pack will ignore any sub-nodes not owned by given node. See [method Node.set_owner].", "name": "pack", "return_": {"description": "", "type": "int"}}], "name": "PackedScene", "signals": [], "tutorials": {"links": []}}, "PacketPeer": {"brief_description": "Abstraction and base class for packet-based protocols.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low level bytes or having to worry about network ordering.", "inherits": "Reference", "members": [{"description": "", "getter": "is_object_decoding_allowed", "name": "allow_object_decoding", "setter": "set_allow_object_decoding", "type": "bool"}], "methods": [{"arguments": [], "description": "Return the number of packets currently available in the ring-buffer.", "name": "get_available_packet_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Get a raw packet.", "name": "get_packet", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [], "description": "Return the error state of the last packet received (via [method get_packet] and [method get_var]).", "name": "get_packet_error", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Get a Variant.", "name": "get_var", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "buffer", "type": "PoolByteArray"}], "description": "Send a raw packet.", "name": "put_packet", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "var", "type": "Variant"}], "description": "Send a Variant as a packet.", "name": "put_var", "return_": {"description": "", "type": "int"}}], "name": "PacketPeer", "signals": [], "tutorials": {"links": []}}, "PacketPeerStream": {"brief_description": "Wrapper to use a PacketPeer over a StreamPeer.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.", "inherits": "PacketPeer", "members": [{"description": "", "getter": "get_input_buffer_max_size", "name": "input_buffer_max_size", "setter": "set_input_buffer_max_size", "type": "int"}, {"description": "", "getter": "get_output_buffer_max_size", "name": "output_buffer_max_size", "setter": "set_output_buffer_max_size", "type": "int"}, {"description": "The wrapped [StreamPeer] object.", "getter": "get_stream_peer", "name": "stream_peer", "setter": "set_stream_peer", "type": "StreamPeer"}], "methods": [], "name": "PacketPeerStream", "signals": [], "tutorials": {"links": []}}, "PacketPeerUDP": {"brief_description": "UDP packet peer.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "UDP packet peer. Can be used to send raw UDP packets as well as [Variant]s.", "inherits": "PacketPeer", "members": [], "methods": [{"arguments": [], "description": "Close the UDP socket the [code]PacketPeerUDP[/code] is currently listening on.", "name": "close", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the IP of the remote peer that sent the last packet(that was received with [method PacketPeer.get_packet] or [method PacketPeer.get_var]).", "name": "get_packet_ip", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Return the port of the remote peer that sent the last packet(that was received with [method PacketPeer.get_packet] or [method PacketPeer.get_var]).", "name": "get_packet_port", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return whether this [code]PacketPeerUDP[/code] is listening.", "name": "is_listening", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "port", "type": "int"}, {"default": "\"*\"", "description": "", "index": "1", "name": "bind_address", "type": "String"}, {"default": "65536", "description": "", "index": "2", "name": "recv_buf_size", "type": "int"}], "description": "Make this [code]PacketPeerUDP[/code] listen on the \"port\" binding to \"bind_address\" with a buffer size \"recv_buf_size\".\n\t\t\t\tIf \"bind_address\" is set as \"*\" (default), the peer will listen on all available addresses (both IPv4 and IPv6).\n\t\t\t\tIf \"bind_address\" is set as \"0.0.0.0\" (for IPv4) or \"::\" (for IPv6), the peer will listen on all available addresses matching that IP type.\n\t\t\t\tIf \"bind_address\" is set to any valid address (e.g. \"192.168.1.101\", \"::1\", etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists).", "name": "listen", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "host", "type": "String"}, {"description": "", "index": "1", "name": "port", "type": "int"}], "description": "Set the destination address and port for sending packets and variables, a hostname will be resolved using if valid.", "name": "set_dest_address", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Wait for a packet to arrive on the listening port, see [method listen].", "name": "wait", "return_": {"description": "", "type": "int"}}], "name": "PacketPeerUDP", "signals": [], "tutorials": {"links": []}}, "Panel": {"brief_description": "Provides an opaque background for [Control] children.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Panel is a [Control] that displays an opaque background. It's commonly used as a parent and container for other types of [Control] nodes.", "inherits": "Control", "members": [], "methods": [], "name": "Panel", "signals": [], "tutorials": {"links": []}}, "PanelContainer": {"brief_description": "Panel container type.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Panel container type. This container fits controls inside of the delimited area of a stylebox. It's useful for giving controls an outline.", "inherits": "Container", "members": [], "methods": [], "name": "PanelContainer", "signals": [], "tutorials": {"links": []}}, "PanoramaSky": {"brief_description": "A type of [Sky] used to draw a background texture.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A resource referenced in an [Environment] that is used to draw a background. The Panorama sky functions similar to skyboxes in other engines except it uses a equirectangular sky map instead of a cube map.", "inherits": "Sky", "members": [{"description": "[Texture] to be applied to the PanoramaSky.", "getter": "get_panorama", "name": "panorama", "setter": "set_panorama", "type": "Texture"}], "methods": [], "name": "PanoramaSky", "signals": [], "tutorials": {"links": []}}, "ParallaxBackground": {"brief_description": "A node used to create a parallax scrolling background.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A ParallaxBackground uses one or more [ParallaxLayer] child nodes to create a parallax effect. Each [ParallaxLayer] can move at a different speed using [member ParallaxLayer.motion_offset]. This creates an illusion of depth in a 2D game. If not used with a [Camera2D], you must manually calculate the [member scroll_offset].", "inherits": "CanvasLayer", "members": [{"description": "Base position offset of all [ParallaxLayer] children.", "getter": "get_scroll_base_offset", "name": "scroll_base_offset", "setter": "set_scroll_base_offset", "type": "Vector2"}, {"description": "Base motion scale of all [ParallaxLayer] children.", "getter": "get_scroll_base_scale", "name": "scroll_base_scale", "setter": "set_scroll_base_scale", "type": "Vector2"}, {"description": "If [code]true[/code] elements in [ParallaxLayer] child aren't affected by the zoom level of the camera.", "getter": "is_ignore_camera_zoom", "name": "scroll_ignore_camera_zoom", "setter": "set_ignore_camera_zoom", "type": "bool"}, {"description": "Top left limits for scrolling to begin. If the camera is outside of this limit the background will stop scrolling. Must be lower than [member scroll_limit_end] to work.", "getter": "get_limit_begin", "name": "scroll_limit_begin", "setter": "set_limit_begin", "type": "Vector2"}, {"description": "Right bottom limits for scrolling to end. If the camera is outside of this limit the background will stop scrolling. Must be higher than [member scroll_limit_begin] to work.", "getter": "get_limit_end", "name": "scroll_limit_end", "setter": "set_limit_end", "type": "Vector2"}, {"description": "The ParallaxBackground's scroll value. Calculated automatically when using a [Camera2D], but can be used to manually manage scrolling when no camera is present.", "getter": "get_scroll_offset", "name": "scroll_offset", "setter": "set_scroll_offset", "type": "Vector2"}], "methods": [], "name": "ParallaxBackground", "signals": [], "tutorials": {"links": []}}, "ParallaxLayer": {"brief_description": "A parallax scrolling layer to be used with [ParallaxBackground].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A ParallaxLayer must be the child of a [ParallaxBackground] node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the [member ParallaxBackground.scroll_offset] value.\n\t\tThis node's children will be affected by its scroll offset.", "inherits": "Node2D", "members": [{"description": "The ParallaxLayer's [Texture] mirroring. Useful for creating an infinite scrolling background. If an axis is set to [code]0[/code] the [Texture] will not be mirrored. Default value: [code](0, 0)[/code].", "getter": "get_mirroring", "name": "motion_mirroring", "setter": "set_mirroring", "type": "Vector2"}, {"description": "The ParallaxLayer's offset relative to the parent ParallaxBackground's [member ParallaxBackground.scroll_offset].", "getter": "get_motion_offset", "name": "motion_offset", "setter": "set_motion_offset", "type": "Vector2"}, {"description": "Multiplies the ParallaxLayer's motion. If an axis is set to [code]0[/code] it will not scroll.", "getter": "get_motion_scale", "name": "motion_scale", "setter": "set_motion_scale", "type": "Vector2"}], "methods": [], "name": "ParallaxLayer", "signals": [], "tutorials": {"links": []}}, "Particles": {"brief_description": "3D particle emitter.", "category": "Core", "constants": [{"description": "Particles are drawn in the order emitted.", "enum": "DrawOrder", "name": "DRAW_ORDER_INDEX", "value": "0"}, {"description": "Particles are drawn in order of remaining lifetime.", "enum": "DrawOrder", "name": "DRAW_ORDER_LIFETIME", "value": "1"}, {"description": "Particles are drawn in order of depth.", "enum": "DrawOrder", "name": "DRAW_ORDER_VIEW_DEPTH", "value": "2"}, {"description": "Maximum number of draw passes supported.", "name": "MAX_DRAW_PASSES", "value": "4"}], "demos": {"links": []}, "description": "3D particle node used to create a variety of particle systems and effects. [code]Particles[/code] features an emitter that generates some number of particles at a given rate.\n\t\tUse the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.", "inherits": "GeometryInstance", "members": [{"description": "Number of particles to emit.", "getter": "get_amount", "name": "amount", "setter": "set_amount", "type": "int"}, {"description": "Particle draw order. Uses [code]DRAW_ORDER_*[/code] values. Default value: [code]DRAW_ORDER_INDEX[/code].", "getter": "get_draw_order", "name": "draw_order", "setter": "set_draw_order", "type": "int"}, {"description": "[Mesh] that is drawn for the first draw pass.", "getter": "get_draw_pass_mesh", "name": "draw_pass_1", "setter": "set_draw_pass_mesh", "type": "Mesh"}, {"description": "[Mesh] that is drawn for the second draw pass.", "getter": "get_draw_pass_mesh", "name": "draw_pass_2", "setter": "set_draw_pass_mesh", "type": "Mesh"}, {"description": "[Mesh] that is drawn for the third draw pass.", "getter": "get_draw_pass_mesh", "name": "draw_pass_3", "setter": "set_draw_pass_mesh", "type": "Mesh"}, {"description": "[Mesh] that is drawn for the fourth draw pass.", "getter": "get_draw_pass_mesh", "name": "draw_pass_4", "setter": "set_draw_pass_mesh", "type": "Mesh"}, {"description": "The number of draw passes when rendering particles.", "getter": "get_draw_passes", "name": "draw_passes", "setter": "set_draw_passes", "type": "int"}, {"description": "If [code]true[/code] particles are being emitted. Default value: [code]true[/code].", "getter": "is_emitting", "name": "emitting", "setter": "set_emitting", "type": "bool"}, {"description": "Time ratio between each emission. If [code]0[/code] particles are emitted continuously. If [code]1[/code] all particles are emitted simultaneously. Default value: [code]0[/code].", "getter": "get_explosiveness_ratio", "name": "explosiveness", "setter": "set_explosiveness_ratio", "type": "float"}, {"description": "", "getter": "get_fixed_fps", "name": "fixed_fps", "setter": "set_fixed_fps", "type": "int"}, {"description": "", "getter": "get_fractional_delta", "name": "fract_delta", "setter": "set_fractional_delta", "type": "bool"}, {"description": "Amount of time each particle will exist. Default value: [code]1[/code].", "getter": "get_lifetime", "name": "lifetime", "setter": "set_lifetime", "type": "float"}, {"description": "If [code]true[/code] particles use the parent node's coordinate space. If [code]false[/code] they use global coordinates. Default value: [code]true[/code].", "getter": "get_use_local_coordinates", "name": "local_coords", "setter": "set_use_local_coordinates", "type": "bool"}, {"description": "If [code]true[/code] only [code]amount[/code] particles will be emitted. Default value: [code]false[/code].", "getter": "get_one_shot", "name": "one_shot", "setter": "set_one_shot", "type": "bool"}, {"description": "Amount of time to preprocess the particles before animation starts. Lets you start the animation some time after particles have started emitting.", "getter": "get_pre_process_time", "name": "preprocess", "setter": "set_pre_process_time", "type": "float"}, {"description": "[Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial].", "getter": "get_process_material", "name": "process_material", "setter": "set_process_material", "type": "Material"}, {"description": "Emission randomness ratio. Default value: [code]0[/code].", "getter": "get_randomness_ratio", "name": "randomness", "setter": "set_randomness_ratio", "type": "float"}, {"description": "Speed scaling ratio. Default value: [code]1[/code]. A value of [code]0[/code] can be used to pause the particles.", "getter": "get_speed_scale", "name": "speed_scale", "setter": "set_speed_scale", "type": "float"}, {"description": "The [AABB] that determines the area of the world part of which needs to be visible on screen for the particle system to be active.", "getter": "get_visibility_aabb", "name": "visibility_aabb", "setter": "set_visibility_aabb", "type": "AABB"}], "methods": [{"arguments": [], "description": "", "name": "capture_aabb", "qualifiers": "const", "return_": {"description": "", "type": "AABB"}}, {"arguments": [], "description": "Restarts the particle emmission, clearing existing particles.", "name": "restart", "return_": {"description": "", "type": "void"}}], "name": "Particles", "signals": [], "tutorials": {"links": []}}, "Particles2D": {"brief_description": "2D particle emitter.", "category": "Core", "constants": [{"description": "Particles are drawn in the order emitted.", "enum": "DrawOrder", "name": "DRAW_ORDER_INDEX", "value": "0"}, {"description": "Particles are drawn in order of remaining lifetime.", "enum": "DrawOrder", "name": "DRAW_ORDER_LIFETIME", "value": "1"}], "demos": {"links": []}, "description": "2D particle node used to create a variety of particle systems and effects. [code]Particles2D[/code] features an emitter that generates some number of particles at a given rate.\n\t\tUse the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.", "inherits": "Node2D", "members": [{"description": "Number of particles emitted in one emission cycle.", "getter": "get_amount", "name": "amount", "setter": "set_amount", "type": "int"}, {"description": "Particle draw order. Uses [code]DRAW_ORDER_*[/code] values. Default value: [code]DRAW_ORDER_INDEX[/code].", "getter": "get_draw_order", "name": "draw_order", "setter": "set_draw_order", "type": "int"}, {"description": "If [code]true[/code] particles are being emitted. Default value: [code]true[/code].", "getter": "is_emitting", "name": "emitting", "setter": "set_emitting", "type": "bool"}, {"description": "How rapidly particles in an emission cycle are emitted. If greater than [code]0[/code], there will be a gap in emissions before the next cycle begins. Default value: [code]0[/code].", "getter": "get_explosiveness_ratio", "name": "explosiveness", "setter": "set_explosiveness_ratio", "type": "float"}, {"description": "", "getter": "get_fixed_fps", "name": "fixed_fps", "setter": "set_fixed_fps", "type": "int"}, {"description": "", "getter": "get_fractional_delta", "name": "fract_delta", "setter": "set_fractional_delta", "type": "bool"}, {"description": "Number of horizontal frames in [code]texture[/code].", "getter": "get_h_frames", "name": "h_frames", "setter": "set_h_frames", "type": "int"}, {"description": "Amount of time each particle will exist. Default value: [code]1[/code].", "getter": "get_lifetime", "name": "lifetime", "setter": "set_lifetime", "type": "float"}, {"description": "If [code]true[/code] particles use the parent node's coordinate space. If [code]false[/code] they use global coordinates. Default value: [code]true[/code].", "getter": "get_use_local_coordinates", "name": "local_coords", "setter": "set_use_local_coordinates", "type": "bool"}, {"description": "", "getter": "get_normal_map", "name": "normal_map", "setter": "set_normal_map", "type": "Texture"}, {"description": "If [code]true[/code] only one emission cycle occurs. If set [code]true[/code] during a cycle, emission will stop at the cycle's end. Default value: [code]false[/code].", "getter": "get_one_shot", "name": "one_shot", "setter": "set_one_shot", "type": "bool"}, {"description": "Particle system starts as if it had already run for this many seconds.", "getter": "get_pre_process_time", "name": "preprocess", "setter": "set_pre_process_time", "type": "float"}, {"description": "[Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial].", "getter": "get_process_material", "name": "process_material", "setter": "set_process_material", "type": "Material"}, {"description": "Emission lifetime randomness ratio. Default value: [code]0[/code].", "getter": "get_randomness_ratio", "name": "randomness", "setter": "set_randomness_ratio", "type": "float"}, {"description": "Particle system's running speed scaling ratio. Default value: [code]1[/code]. A value of [code]0[/code] can be used to pause the particles.", "getter": "get_speed_scale", "name": "speed_scale", "setter": "set_speed_scale", "type": "float"}, {"description": "Particle texture. If [code]null[/code] particles will be squares.", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}, {"description": "Number of vertical frames in [code]texture[/code].", "getter": "get_v_frames", "name": "v_frames", "setter": "set_v_frames", "type": "int"}, {"description": "Editor visibility helper.", "getter": "get_visibility_rect", "name": "visibility_rect", "setter": "set_visibility_rect", "type": "Rect2"}], "methods": [{"arguments": [], "description": "", "name": "capture_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [], "description": "", "name": "restart", "return_": {"description": "", "type": "void"}}], "name": "Particles2D", "signals": [], "tutorials": {"links": []}}, "ParticlesMaterial": {"brief_description": "Particle properties for [Particles] and [Particles2D] nodes.", "category": "Core", "constants": [{"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set initial velocity properties.", "enum": "Parameter", "name": "PARAM_INITIAL_LINEAR_VELOCITY", "value": "0"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set angular velocity properties.", "enum": "Parameter", "name": "PARAM_ANGULAR_VELOCITY", "value": "1"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set orbital_velocity properties.", "enum": "Parameter", "name": "PARAM_ORBIT_VELOCITY", "value": "2"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set linear acceleration properties.", "enum": "Parameter", "name": "PARAM_LINEAR_ACCEL", "value": "3"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set radial acceleration properties.", "enum": "Parameter", "name": "PARAM_RADIAL_ACCEL", "value": "4"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set tangential acceleration properties.", "enum": "Parameter", "name": "PARAM_TANGENTIAL_ACCEL", "value": "5"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set damping properties.", "enum": "Parameter", "name": "PARAM_DAMPING", "value": "6"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set angle properties.", "enum": "Parameter", "name": "PARAM_ANGLE", "value": "7"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set scale properties.", "enum": "Parameter", "name": "PARAM_SCALE", "value": "8"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set hue_variation properties.", "enum": "Parameter", "name": "PARAM_HUE_VARIATION", "value": "9"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set animation speed properties.", "enum": "Parameter", "name": "PARAM_ANIM_SPEED", "value": "10"}, {"description": "Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set animation offset properties.", "enum": "Parameter", "name": "PARAM_ANIM_OFFSET", "value": "11"}, {"description": "", "enum": "Parameter", "name": "PARAM_MAX", "value": "12"}, {"description": "Use with [method set_flag] to set [member flag_align_y].", "enum": "Flags", "name": "FLAG_ALIGN_Y_TO_VELOCITY", "value": "0"}, {"description": "Use with [method set_flag] to set [member flag_rotate_y]", "enum": "Flags", "name": "FLAG_ROTATE_Y", "value": "1"}, {"description": "", "enum": "Flags", "name": "FLAG_MAX", "value": "4"}, {"description": "All particles will be emitted from a single point.", "enum": "EmissionShape", "name": "EMISSION_SHAPE_POINT", "value": "0"}, {"description": "Particles will be emitted in the volume of a sphere.", "enum": "EmissionShape", "name": "EMISSION_SHAPE_SPHERE", "value": "1"}, {"description": "Particles will be emitted in the volume of a box.", "enum": "EmissionShape", "name": "EMISSION_SHAPE_BOX", "value": "2"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_POINTS", "value": "3"}, {"description": "", "enum": "EmissionShape", "name": "EMISSION_SHAPE_DIRECTED_POINTS", "value": "4"}], "demos": {"links": []}, "description": "ParticlesMaterial defines particle properties and behavior. It is used in the [code]process_material[/code] of [Particles] and [Particles2D] emitter nodes.\n\t\tSome of this material's properties are applied to each particle when emitted, while others can have a [CurveTexture] applied to vary values over the lifetime of the particle.", "inherits": "Material", "members": [{"description": "Initial rotation applied to each particle.", "getter": "get_param", "name": "angle", "setter": "set_param", "type": "float"}, {"description": "Each particle's rotation will be animated along this [CurveTexture].", "getter": "get_param_texture", "name": "angle_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Rotation randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "angle_random", "setter": "set_param_randomness", "type": "float"}, {"description": "Initial angular velocity applied to each particle.", "getter": "get_param", "name": "angular_velocity", "setter": "set_param", "type": "float"}, {"description": "Each particle's angular velocity will vary along this [CurveTexture].", "getter": "get_param_texture", "name": "angular_velocity_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Angular velocity randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "angular_velocity_random", "setter": "set_param_randomness", "type": "float"}, {"description": "If [code]true[/code] animation will loop. Default value: [code]false[/code].", "getter": "get_flag", "name": "anim_loop", "setter": "set_flag", "type": "bool"}, {"description": "Particle animation offset.", "getter": "get_param", "name": "anim_offset", "setter": "set_param", "type": "float"}, {"description": "Each particle's animation offset will vary along this [CurveTexture].", "getter": "get_param_texture", "name": "anim_offset_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Animation offset randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "anim_offset_random", "setter": "set_param_randomness", "type": "float"}, {"description": "Particle animation speed.", "getter": "get_param", "name": "anim_speed", "setter": "set_param", "type": "float"}, {"description": "Each particle's animation speed will vary along this [CurveTexture].", "getter": "get_param_texture", "name": "anim_speed_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Animation speed randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "anim_speed_random", "setter": "set_param_randomness", "type": "float"}, {"description": "Each particle's initial color. If the [Particle2D]'s [code]texture[/code] is defined, it will be multiplied by this color.", "getter": "get_color", "name": "color", "setter": "set_color", "type": "Color"}, {"description": "Each particle's color will vary along this [GradientTexture].", "getter": "get_color_ramp", "name": "color_ramp", "setter": "set_color_ramp", "type": "Texture"}, {"description": "The rate at which particles lose velocity.", "getter": "get_param", "name": "damping", "setter": "set_param", "type": "float"}, {"description": "Damping will vary along this [CurveTexture].", "getter": "get_param_texture", "name": "damping_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Damping randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "damping_random", "setter": "set_param_randomness", "type": "float"}, {"description": "The box's extents if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_BOX[/code].", "getter": "get_emission_box_extents", "name": "emission_box_extents", "setter": "set_emission_box_extents", "type": "Vector3"}, {"description": "", "getter": "get_emission_color_texture", "name": "emission_color_texture", "setter": "set_emission_color_texture", "type": "Texture"}, {"description": "", "getter": "get_emission_normal_texture", "name": "emission_normal_texture", "setter": "set_emission_normal_texture", "type": "Texture"}, {"description": "The number of emission points if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_POINTS[/code] or [code]EMISSION_SHAPE_DIRECTED_POINTS[/code].", "getter": "get_emission_point_count", "name": "emission_point_count", "setter": "set_emission_point_count", "type": "int"}, {"description": "", "getter": "get_emission_point_texture", "name": "emission_point_texture", "setter": "set_emission_point_texture", "type": "Texture"}, {"description": "Particles will be emitted inside this region. Use [code]EMISSION_SHAPE_*[/code] constants for values. Default value: [code]EMISSION_SHAPE_POINT[/code].", "getter": "get_emission_shape", "name": "emission_shape", "setter": "set_emission_shape", "type": "int"}, {"description": "The sphere's radius if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_SPHERE[/code].", "getter": "get_emission_sphere_radius", "name": "emission_sphere_radius", "setter": "set_emission_sphere_radius", "type": "float"}, {"description": "", "getter": "get_flag", "name": "flag_align_y", "setter": "set_flag", "type": "bool"}, {"description": "If [code]true[/code] particles will not move on the z axis. Default value: [code]true[/code] for [Particles2D], [code]false[/code] for [Particles].", "getter": "get_flag", "name": "flag_disable_z", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "flag_rotate_y", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flatness", "name": "flatness", "setter": "set_flatness", "type": "float"}, {"description": "Gravity applied to every particle. Default value: [code](0, 98, 0)[/code].", "getter": "get_gravity", "name": "gravity", "setter": "set_gravity", "type": "Vector3"}, {"description": "Initial hue variation applied to each particle.", "getter": "get_param", "name": "hue_variation", "setter": "set_param", "type": "float"}, {"description": "Each particle's hue will vary along this [CurveTexture].", "getter": "get_param_texture", "name": "hue_variation_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Hue variation randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "hue_variation_random", "setter": "set_param_randomness", "type": "float"}, {"description": "Initial velocity for each particle.", "getter": "get_param", "name": "initial_velocity", "setter": "set_param", "type": "float"}, {"description": "Initial velocity randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "initial_velocity_random", "setter": "set_param_randomness", "type": "float"}, {"description": "Linear acceleration applied to each particle.", "getter": "get_param", "name": "linear_accel", "setter": "set_param", "type": "float"}, {"description": "Each particle's linear acceleration will vary along this [CurveTexture].", "getter": "get_param_texture", "name": "linear_accel_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Linear acceleration randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "linear_accel_random", "setter": "set_param_randomness", "type": "float"}, {"description": "Orbital velocity applied to each particle.", "getter": "get_param", "name": "orbit_velocity", "setter": "set_param", "type": "float"}, {"description": "Each particle's orbital velocity will vary along this [CurveTexture].", "getter": "get_param_texture", "name": "orbit_velocity_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Orbital velocity randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "orbit_velocity_random", "setter": "set_param_randomness", "type": "float"}, {"description": "Radial acceleration applied to each particle.", "getter": "get_param", "name": "radial_accel", "setter": "set_param", "type": "float"}, {"description": "Each particle's radial acceleration will vary along this [CurveTexture].", "getter": "get_param_texture", "name": "radial_accel_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Radial acceleration randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "radial_accel_random", "setter": "set_param_randomness", "type": "float"}, {"description": "Initial scale applied to each particle.", "getter": "get_param", "name": "scale", "setter": "set_param", "type": "float"}, {"description": "Each particle's scale will vary along this [CurveTexture].", "getter": "get_param_texture", "name": "scale_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Scale randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "scale_random", "setter": "set_param_randomness", "type": "float"}, {"description": "Each particle's initial direction range from [code]+spread[/code] to [code]-spread[/code] degrees. Default value: [code]45[/code].", "getter": "get_spread", "name": "spread", "setter": "set_spread", "type": "float"}, {"description": "Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity.", "getter": "get_param", "name": "tangential_accel", "setter": "set_param", "type": "float"}, {"description": "Each particle's tangential acceleration will vary along this [CurveTexture].", "getter": "get_param_texture", "name": "tangential_accel_curve", "setter": "set_param_texture", "type": "Texture"}, {"description": "Tangential acceleration randomness ratio. Default value: [code]0[/code].", "getter": "get_param_randomness", "name": "tangential_accel_random", "setter": "set_param_randomness", "type": "float"}, {"description": "Trail particles' color will vary along this [GradientTexture].", "getter": "get_trail_color_modifier", "name": "trail_color_modifier", "setter": "set_trail_color_modifier", "type": "GradientTexture"}, {"description": "Emitter will emit [code]amount[/code] divided by [code]trail_divisor[/code] particles. The remaining particles will be used as trail(s).", "getter": "get_trail_divisor", "name": "trail_divisor", "setter": "set_trail_divisor", "type": "int"}, {"description": "Trail particles' size will vary along this [CurveTexture].", "getter": "get_trail_size_modifier", "name": "trail_size_modifier", "setter": "set_trail_size_modifier", "type": "CurveTexture"}], "methods": [], "name": "ParticlesMaterial", "signals": [], "tutorials": {"links": []}}, "Path": {"brief_description": "Container for a [Curve3D].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This class is a container/Node-ification of a [Curve3D], so it can have [Spatial] properties and [Node] info.", "inherits": "Spatial", "members": [{"description": "", "getter": "get_curve", "name": "curve", "setter": "set_curve", "type": "Curve3D"}], "methods": [], "name": "Path", "signals": [{"arguments": [], "description": "", "name": "curve_changed"}], "tutorials": {"links": []}}, "Path2D": {"brief_description": "Contains a [Curve2D] path for [PathFollow2D] nodes to follow.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Can have [PathFollow2D] child-nodes moving along the [Curve2D]. See [PathFollow2D] for more information on this usage.", "inherits": "Node2D", "members": [{"description": "A [Curve2D] describing the path.", "getter": "get_curve", "name": "curve", "setter": "set_curve", "type": "Curve2D"}], "methods": [], "name": "Path2D", "signals": [], "tutorials": {"links": []}}, "PathFollow": {"brief_description": "Point sampler for a [Path].", "category": "Core", "constants": [{"description": "Forbids the PathFollow to rotate.", "enum": "RotationMode", "name": "ROTATION_NONE", "value": "0"}, {"description": "Allows the PathFollow to rotate in the Y axis only.", "enum": "RotationMode", "name": "ROTATION_Y", "value": "1"}, {"description": "Allows the PathFollow to rotate in both the X, and Y axes.", "enum": "RotationMode", "name": "ROTATION_XY", "value": "2"}, {"description": "Allows the PathFollow to rotate in any axis.", "enum": "RotationMode", "name": "ROTATION_XYZ", "value": "3"}], "demos": {"links": []}, "description": "This node takes its parent [Path], and returns the coordinates of a point within it, given a distance from the first vertex.\n\t\tIt is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.", "inherits": "Spatial", "members": [{"description": "If [code]true[/code] the position between two cached points is interpolated cubically, and linearly otherwise.\n\t\t\tThe points along the [Curve3D] of the [Path] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\tThere are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.", "getter": "get_cubic_interpolation", "name": "cubic_interp", "setter": "set_cubic_interpolation", "type": "bool"}, {"description": "The node's offset along the curve.", "getter": "get_h_offset", "name": "h_offset", "setter": "set_h_offset", "type": "float"}, {"description": "If [code]true[/code], any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.", "getter": "has_loop", "name": "loop", "setter": "set_loop", "type": "bool"}, {"description": "The distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path.", "getter": "get_offset", "name": "offset", "setter": "set_offset", "type": "float"}, {"description": "Allows or forbids rotation on one or more axes, depending on the constants being used.", "getter": "get_rotation_mode", "name": "rotation_mode", "setter": "set_rotation_mode", "type": "int"}, {"description": "The distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.", "getter": "get_unit_offset", "name": "unit_offset", "setter": "set_unit_offset", "type": "float"}, {"description": "The node's offset perpendicular to the curve.", "getter": "get_v_offset", "name": "v_offset", "setter": "set_v_offset", "type": "float"}], "methods": [], "name": "PathFollow", "signals": [], "tutorials": {"links": []}}, "PathFollow2D": {"brief_description": "Point sampler for a [Path2D].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This node takes its parent [Path2D], and returns the coordinates of a point within it, given a distance from the first vertex.\n\t\tIt is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.", "inherits": "Node2D", "members": [{"description": "If [code]true[/code] the position between two cached points is interpolated cubically, and linearly otherwise.\n\t\t\tThe points along the [Curve2D] of the [Path2D] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\tThere are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.", "getter": "get_cubic_interpolation", "name": "cubic_interp", "setter": "set_cubic_interpolation", "type": "bool"}, {"description": "The node's offset along the curve.", "getter": "get_h_offset", "name": "h_offset", "setter": "set_h_offset", "type": "float"}, {"description": "", "getter": "get_lookahead", "name": "lookahead", "setter": "set_lookahead", "type": "float"}, {"description": "If [code]true[/code], any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.", "getter": "has_loop", "name": "loop", "setter": "set_loop", "type": "bool"}, {"description": "The distance along the path in pixels.", "getter": "get_offset", "name": "offset", "setter": "set_offset", "type": "float"}, {"description": "If [code]true[/code], this node rotates to follow the path, making its descendants rotate.", "getter": "is_rotating", "name": "rotate", "setter": "set_rotate", "type": "bool"}, {"description": "The distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last). This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.", "getter": "get_unit_offset", "name": "unit_offset", "setter": "set_unit_offset", "type": "float"}, {"description": "The node's offset perpendicular to the curve.", "getter": "get_v_offset", "name": "v_offset", "setter": "set_v_offset", "type": "float"}], "methods": [], "name": "PathFollow2D", "signals": [], "tutorials": {"links": []}}, "Performance": {"brief_description": "Exposes performance related data.", "category": "Core", "constants": [{"description": "Frames per second.", "enum": "Monitor", "name": "TIME_FPS", "value": "0"}, {"description": "Time it took to complete one frame.", "enum": "Monitor", "name": "TIME_PROCESS", "value": "1"}, {"description": "Time it took to complete one physics frame.", "enum": "Monitor", "name": "TIME_PHYSICS_PROCESS", "value": "2"}, {"description": "Static memory currently used, in bytes. Not available in release builds.", "enum": "Monitor", "name": "MEMORY_STATIC", "value": "3"}, {"description": "Dynamic memory currently used, in bytes. Not available in release builds.", "enum": "Monitor", "name": "MEMORY_DYNAMIC", "value": "4"}, {"description": "Available static memory. Not available in release builds.", "enum": "Monitor", "name": "MEMORY_STATIC_MAX", "value": "5"}, {"description": "Available dynamic memory. Not available in release builds.", "enum": "Monitor", "name": "MEMORY_DYNAMIC_MAX", "value": "6"}, {"description": "Largest amount of memory the message queue buffer has used, in bytes. The message queue is used for deferred functions calls and notifications.", "enum": "Monitor", "name": "MEMORY_MESSAGE_BUFFER_MAX", "value": "7"}, {"description": "Number of objects currently instanced (including nodes).", "enum": "Monitor", "name": "OBJECT_COUNT", "value": "8"}, {"description": "Number of resources currently used.", "enum": "Monitor", "name": "OBJECT_RESOURCE_COUNT", "value": "9"}, {"description": "Number of nodes currently instanced. This also includes the root node, as well as any nodes not in the scene tree.", "enum": "Monitor", "name": "OBJECT_NODE_COUNT", "value": "10"}, {"description": "3D objects drawn per frame.", "enum": "Monitor", "name": "RENDER_OBJECTS_IN_FRAME", "value": "11"}, {"description": "Vertices drawn per frame. 3D only.", "enum": "Monitor", "name": "RENDER_VERTICES_IN_FRAME", "value": "12"}, {"description": "Material changes per frame. 3D only", "enum": "Monitor", "name": "RENDER_MATERIAL_CHANGES_IN_FRAME", "value": "13"}, {"description": "Shader changes per frame. 3D only.", "enum": "Monitor", "name": "RENDER_SHADER_CHANGES_IN_FRAME", "value": "14"}, {"description": "Render surface changes per frame. 3D only.", "enum": "Monitor", "name": "RENDER_SURFACE_CHANGES_IN_FRAME", "value": "15"}, {"description": "Draw calls per frame. 3D only.", "enum": "Monitor", "name": "RENDER_DRAW_CALLS_IN_FRAME", "value": "16"}, {"description": "Video memory used. Includes both texture and vertex memory.", "enum": "Monitor", "name": "RENDER_VIDEO_MEM_USED", "value": "17"}, {"description": "Texture memory used.", "enum": "Monitor", "name": "RENDER_TEXTURE_MEM_USED", "value": "18"}, {"description": "Vertex memory used.", "enum": "Monitor", "name": "RENDER_VERTEX_MEM_USED", "value": "19"}, {"description": "", "enum": "Monitor", "name": "RENDER_USAGE_VIDEO_MEM_TOTAL", "value": "20"}, {"description": "Number of active [RigidBody2D] nodes in the game.", "enum": "Monitor", "name": "PHYSICS_2D_ACTIVE_OBJECTS", "value": "21"}, {"description": "Number of collision pairs in the 2D physics engine.", "enum": "Monitor", "name": "PHYSICS_2D_COLLISION_PAIRS", "value": "22"}, {"description": "Number of islands in the 2D physics engine.", "enum": "Monitor", "name": "PHYSICS_2D_ISLAND_COUNT", "value": "23"}, {"description": "Number of active [RigidBody] and [VehicleBody] nodes in the game.", "enum": "Monitor", "name": "PHYSICS_3D_ACTIVE_OBJECTS", "value": "24"}, {"description": "Number of collision pairs in the 3D physics engine.", "enum": "Monitor", "name": "PHYSICS_3D_COLLISION_PAIRS", "value": "25"}, {"description": "Number of islands in the 3D physics engine.", "enum": "Monitor", "name": "PHYSICS_3D_ISLAND_COUNT", "value": "26"}, {"description": "", "enum": "Monitor", "name": "AUDIO_OUTPUT_LATENCY", "value": "27"}, {"description": "", "enum": "Monitor", "name": "MONITOR_MAX", "value": "28"}], "demos": {"links": []}, "description": "This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the [i]Monitor[/i] tab in the editor's [i]Debugger[/i] panel. By using the [method get_monitor] method of this class, you can access this data from your code. Note that a few of these monitors are only available in debug mode and will always return 0 when used in a release build.\n\t\tMany of these monitors are not updated in real-time, so there may be a short delay between changes.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "monitor", "type": "int"}], "description": "Returns the value of one of the available monitors. You should provide one of this class's constants as the argument, like this:\n\t\t\t\t[codeblock]\n\t\t\t\tprint(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console\n\t\t\t\t[/codeblock]", "name": "get_monitor", "qualifiers": "const", "return_": {"description": "", "type": "float"}}], "name": "Performance", "signals": [], "tutorials": {"links": []}}, "PhysicalBone": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "JointType", "name": "JOINT_TYPE_NONE", "value": "0"}, {"description": "", "enum": "JointType", "name": "JOINT_TYPE_PIN", "value": "1"}, {"description": "", "enum": "JointType", "name": "JOINT_TYPE_CONE", "value": "2"}, {"description": "", "enum": "JointType", "name": "JOINT_TYPE_HINGE", "value": "3"}, {"description": "", "enum": "JointType", "name": "JOINT_TYPE_SLIDER", "value": "4"}, {"description": "", "enum": "JointType", "name": "JOINT_TYPE_6DOF", "value": "5"}], "demos": {"links": []}, "description": "", "inherits": "PhysicsBody", "members": [{"description": "", "getter": "get_body_offset", "name": "body_offset", "setter": "set_body_offset", "type": "Transform"}, {"description": "", "getter": "get_bounce", "name": "bounce", "setter": "set_bounce", "type": "float"}, {"description": "", "getter": "get_friction", "name": "friction", "setter": "set_friction", "type": "float"}, {"description": "", "getter": "get_gravity_scale", "name": "gravity_scale", "setter": "set_gravity_scale", "type": "float"}, {"description": "", "getter": "get_joint_offset", "name": "joint_offset", "setter": "set_joint_offset", "type": "Transform"}, {"description": "", "getter": "get_joint_type", "name": "joint_type", "setter": "set_joint_type", "type": "int"}, {"description": "", "getter": "get_mass", "name": "mass", "setter": "set_mass", "type": "float"}, {"description": "", "getter": "get_weight", "name": "weight", "setter": "set_weight", "type": "float"}], "methods": [{"arguments": [], "description": "", "name": "get_bone_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_simulate_physics", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "is_simulating_physics", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "is_static_body", "return_": {"description": "", "type": "bool"}}], "name": "PhysicalBone", "signals": [], "tutorials": {"links": []}}, "Physics2DDirectBodyState": {"brief_description": "Direct access object to a physics body in the [Physics2DServer].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Direct access object to a physics body in the [Physics2DServer]. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body.", "inherits": "Object", "members": [{"description": "The angular velocity of the body.", "getter": "get_angular_velocity", "name": "angular_velocity", "setter": "set_angular_velocity", "type": "float"}, {"description": "The inverse of the inertia of the body.", "getter": "get_inverse_inertia", "name": "inverse_inertia", "setter": "", "type": "float"}, {"description": "The inverse of the mass of the body.", "getter": "get_inverse_mass", "name": "inverse_mass", "setter": "", "type": "float"}, {"description": "The linear velocity of the body.", "getter": "get_linear_velocity", "name": "linear_velocity", "setter": "set_linear_velocity", "type": "Vector2"}, {"description": "[code]true[/code] if this body is currently sleeping (not active).", "getter": "is_sleeping", "name": "sleeping", "setter": "set_sleep_state", "type": "bool"}, {"description": "The timestep (delta) used for the simulation.", "getter": "get_step", "name": "step", "setter": "", "type": "float"}, {"description": "The rate at which the body stops rotating, if there are not any other forces moving it.", "getter": "get_total_angular_damp", "name": "total_angular_damp", "setter": "", "type": "float"}, {"description": "The total gravity vector being currently applied to this body.", "getter": "get_total_gravity", "name": "total_gravity", "setter": "", "type": "Vector2"}, {"description": "The rate at which the body stops moving, if there are not any other forces moving it.", "getter": "get_total_linear_damp", "name": "total_linear_damp", "setter": "", "type": "float"}, {"description": "The transformation matrix of the body.", "getter": "get_transform", "name": "transform", "setter": "set_transform", "type": "Transform2D"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "force", "type": "Vector2"}], "description": "", "name": "add_central_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "Vector2"}, {"description": "", "index": "1", "name": "force", "type": "Vector2"}], "description": "", "name": "add_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "torque", "type": "float"}], "description": "", "name": "add_torque", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "impulse", "type": "Vector2"}], "description": "", "name": "apply_central_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "Vector2"}, {"description": "", "index": "1", "name": "impulse", "type": "Vector2"}], "description": "", "name": "apply_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "impulse", "type": "float"}], "description": "", "name": "apply_torque_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Return the [RID] of the collider.", "name": "get_contact_collider", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Return the object id of the collider.", "name": "get_contact_collider_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Return the collider object, this depends on how it was created (will return a scene node if such was used to create it).", "name": "get_contact_collider_object", "qualifiers": "const", "return_": {"description": "", "type": "Object"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Return the contact position in the collider.", "name": "get_contact_collider_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Return the collider shape index.", "name": "get_contact_collider_shape", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Return the metadata of the collided shape. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].", "name": "get_contact_collider_shape_metadata", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Return the linear velocity vector at contact point of the collider.", "name": "get_contact_collider_velocity_at_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Return the amount of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts.", "name": "get_contact_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Return the local normal (of this body) of the contact point.", "name": "get_contact_local_normal", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Return the local position (of this body) of the contact point.", "name": "get_contact_local_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Return the local shape index of the collision.", "name": "get_contact_local_shape", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the current state of space, useful for queries.", "name": "get_space_state", "return_": {"description": "", "type": "Physics2DDirectSpaceState"}}, {"arguments": [], "description": "Call the built-in force integration code.", "name": "integrate_forces", "return_": {"description": "", "type": "void"}}], "name": "Physics2DDirectBodyState", "signals": [], "tutorials": {"links": []}}, "Physics2DDirectBodyStateSW": {"brief_description": "Software implementation of [Physics2DDirectBodyState].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Software implementation of [Physics2DDirectBodyState]. This object exposes no new methods or properties and should not be used, as [Physics2DDirectBodyState] selects the best implementation available.", "inherits": "Physics2DDirectBodyState", "members": [], "methods": [], "name": "Physics2DDirectBodyStateSW", "signals": [], "tutorials": {"links": []}}, "Physics2DDirectSpaceState": {"brief_description": "Direct access object to a space in the [Physics2DServer].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Direct access object to a space in the [Physics2DServer]. It's used mainly to do queries against objects and areas residing in a given space.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "shape", "type": "Physics2DShapeQueryParameters"}], "description": "Checks how far the shape can travel toward a point. Note that both the shape and the motion are supplied through a [Physics2DShapeQueryParameters] object. The method will return an array with two floats between 0 and 1, both representing a fraction of [code]motion[/code]. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be [1, 1].\n\t\t\t\tIf the shape can not move, the array will be empty.", "name": "cast_motion", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "Physics2DShapeQueryParameters"}, {"default": "32", "description": "", "index": "1", "name": "max_results", "type": "int"}], "description": "Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time.", "name": "collide_shape", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "Physics2DShapeQueryParameters"}], "description": "Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. If it collides with more than one shape, the nearest one is selected. Note that this method does not take into account the [code]motion[/code] property of the object. The returned object is a dictionary containing the following fields:\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]linear_velocity[/code]: The colliding object's velocity [Vector2]. If the object is an [Area2D], the result is [code](0, 0)[/code].\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]point[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the shape did not intersect anything, then an empty dictionary is returned instead.", "name": "get_rest_info", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}, {"default": "32", "description": "", "index": "1", "name": "max_results", "type": "int"}, {"default": "[  ]", "description": "", "index": "2", "name": "exclude", "type": "Array"}, {"default": "2147483647", "description": "", "index": "3", "name": "collision_layer", "type": "int"}, {"default": "true", "description": "", "index": "4", "name": "collide_with_bodies", "type": "bool"}, {"default": "false", "description": "", "index": "5", "name": "collide_with_areas", "type": "bool"}], "description": "Checks whether a point is inside any shape. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tAdditionally, the method can take an [code]exclude[/code] array of objects or [RID]s that are to be excluded from collisions, a [code]collision_mask[/code] bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with [PhysicsBody]s or [Area]s, respectively.", "name": "intersect_point", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector2"}, {"description": "", "index": "1", "name": "to", "type": "Vector2"}, {"default": "[  ]", "description": "", "index": "2", "name": "exclude", "type": "Array"}, {"default": "2147483647", "description": "", "index": "3", "name": "collision_layer", "type": "int"}, {"default": "true", "description": "", "index": "4", "name": "collide_with_bodies", "type": "bool"}, {"default": "false", "description": "", "index": "5", "name": "collide_with_areas", "type": "bool"}], "description": "Intersects a ray in a given space. The returned object is a dictionary with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]position[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the ray did not intersect anything, then an empty dictionary is returned instead.\n\t\t\t\tAdditionally, the method can take an [code]exclude[/code] array of objects or [RID]s that are to be excluded from collisions, a [code]collision_mask[/code] bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with [PhysicsBody]s or [Area]s, respectively.", "name": "intersect_ray", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "Physics2DShapeQueryParameters"}, {"default": "32", "description": "", "index": "1", "name": "max_results", "type": "int"}], "description": "Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. Note that this method does not take into account the [code]motion[/code] property of the object. The intersected shapes are returned in an array containing dictionaries with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tThe number of intersections can be limited with the second parameter, to reduce the processing time.", "name": "intersect_shape", "return_": {"description": "", "type": "Array"}}], "name": "Physics2DDirectSpaceState", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/ray-casting.html"}]}}, "Physics2DServer": {"brief_description": "Physics 2D Server.", "category": "Core", "constants": [{"description": "Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated.", "enum": "SpaceParameter", "name": "SPACE_PARAM_CONTACT_RECYCLE_RADIUS", "value": "0"}, {"description": "Constant to set/get the maximum distance a shape can be from another before they are considered separated.", "enum": "SpaceParameter", "name": "SPACE_PARAM_CONTACT_MAX_SEPARATION", "value": "1"}, {"description": "Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision.", "enum": "SpaceParameter", "name": "SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION", "value": "2"}, {"description": "Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.", "enum": "SpaceParameter", "name": "SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD", "value": "3"}, {"description": "Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.", "enum": "SpaceParameter", "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD", "value": "4"}, {"description": "Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time.", "enum": "SpaceParameter", "name": "SPACE_PARAM_BODY_TIME_TO_SLEEP", "value": "5"}, {"description": "Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects \"rebound\", after violating a constraint, to avoid leaving them in that state because of numerical imprecision.", "enum": "SpaceParameter", "name": "SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS", "value": "6"}, {"description": "This is the constant for creating line shapes. A line shape is an infinite line with an origin point, and a normal. Thus, it can be used for front/behind checks.", "enum": "ShapeType", "name": "SHAPE_LINE", "value": "0"}, {"description": "", "enum": "ShapeType", "name": "SHAPE_RAY", "value": "1"}, {"description": "This is the constant for creating segment shapes. A segment shape is a line from a point A to a point B. It can be checked for intersections.", "enum": "ShapeType", "name": "SHAPE_SEGMENT", "value": "2"}, {"description": "This is the constant for creating circle shapes. A circle shape only has a radius. It can be used for intersections and inside/outside checks.", "enum": "ShapeType", "name": "SHAPE_CIRCLE", "value": "3"}, {"description": "This is the constant for creating rectangle shapes. A rectangle shape is defined by a width and a height. It can be used for intersections and inside/outside checks.", "enum": "ShapeType", "name": "SHAPE_RECTANGLE", "value": "4"}, {"description": "This is the constant for creating capsule shapes. A capsule shape is defined by a radius and a length. It can be used for intersections and inside/outside checks.", "enum": "ShapeType", "name": "SHAPE_CAPSULE", "value": "5"}, {"description": "This is the constant for creating convex polygon shapes. A polygon is defined by a list of points. It can be used for intersections and inside/outside checks. Unlike the method [method CollisionPolygon2D.set_polygon], polygons modified with [method shape_set_data] do not verify that the points supplied form is a convex polygon.", "enum": "ShapeType", "name": "SHAPE_CONVEX_POLYGON", "value": "6"}, {"description": "This is the constant for creating concave polygon shapes. A polygon is defined by a list of points. It can be used for intersections checks, but not for inside/outside checks.", "enum": "ShapeType", "name": "SHAPE_CONCAVE_POLYGON", "value": "7"}, {"description": "This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.", "enum": "ShapeType", "name": "SHAPE_CUSTOM", "value": "8"}, {"description": "Constant to set/get gravity strength in an area.", "enum": "AreaParameter", "name": "AREA_PARAM_GRAVITY", "value": "0"}, {"description": "Constant to set/get gravity vector/center in an area.", "enum": "AreaParameter", "name": "AREA_PARAM_GRAVITY_VECTOR", "value": "1"}, {"description": "Constant to set/get whether the gravity vector of an area is a direction, or a center point.", "enum": "AreaParameter", "name": "AREA_PARAM_GRAVITY_IS_POINT", "value": "2"}, {"description": "Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance.", "enum": "AreaParameter", "name": "AREA_PARAM_GRAVITY_DISTANCE_SCALE", "value": "3"}, {"description": "This constant was used to set/get the falloff factor for point gravity. It has been superseded by AREA_PARAM_GRAVITY_DISTANCE_SCALE.", "enum": "AreaParameter", "name": "AREA_PARAM_GRAVITY_POINT_ATTENUATION", "value": "4"}, {"description": "Constant to set/get the linear dampening factor of an area.", "enum": "AreaParameter", "name": "AREA_PARAM_LINEAR_DAMP", "value": "5"}, {"description": "Constant to set/get the angular dampening factor of an area.", "enum": "AreaParameter", "name": "AREA_PARAM_ANGULAR_DAMP", "value": "6"}, {"description": "Constant to set/get the priority (order of processing) of an area.", "enum": "AreaParameter", "name": "AREA_PARAM_PRIORITY", "value": "7"}, {"description": "This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.", "enum": "AreaSpaceOverrideMode", "name": "AREA_SPACE_OVERRIDE_DISABLED", "value": "0"}, {"description": "This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.", "enum": "AreaSpaceOverrideMode", "name": "AREA_SPACE_OVERRIDE_COMBINE", "value": "1"}, {"description": "This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.", "enum": "AreaSpaceOverrideMode", "name": "AREA_SPACE_OVERRIDE_COMBINE_REPLACE", "value": "2"}, {"description": "This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.", "enum": "AreaSpaceOverrideMode", "name": "AREA_SPACE_OVERRIDE_REPLACE", "value": "3"}, {"description": "This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.", "enum": "AreaSpaceOverrideMode", "name": "AREA_SPACE_OVERRIDE_REPLACE_COMBINE", "value": "4"}, {"description": "Constant for static bodies.", "enum": "BodyMode", "name": "BODY_MODE_STATIC", "value": "0"}, {"description": "Constant for kinematic bodies.", "enum": "BodyMode", "name": "BODY_MODE_KINEMATIC", "value": "1"}, {"description": "Constant for rigid bodies.", "enum": "BodyMode", "name": "BODY_MODE_RIGID", "value": "2"}, {"description": "Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics.", "enum": "BodyMode", "name": "BODY_MODE_CHARACTER", "value": "3"}, {"description": "Constant to set/get a body's bounce factor.", "enum": "BodyParameter", "name": "BODY_PARAM_BOUNCE", "value": "0"}, {"description": "Constant to set/get a body's friction.", "enum": "BodyParameter", "name": "BODY_PARAM_FRICTION", "value": "1"}, {"description": "Constant to set/get a body's mass.", "enum": "BodyParameter", "name": "BODY_PARAM_MASS", "value": "2"}, {"description": "Constant to set/get a body's inertia.", "enum": "BodyParameter", "name": "BODY_PARAM_INERTIA", "value": "3"}, {"description": "Constant to set/get a body's gravity multiplier.", "enum": "BodyParameter", "name": "BODY_PARAM_GRAVITY_SCALE", "value": "4"}, {"description": "Constant to set/get a body's linear dampening factor.", "enum": "BodyParameter", "name": "BODY_PARAM_LINEAR_DAMP", "value": "5"}, {"description": "Constant to set/get a body's angular dampening factor.", "enum": "BodyParameter", "name": "BODY_PARAM_ANGULAR_DAMP", "value": "6"}, {"description": "This is the last ID for body parameters. Any attempt to set this property is ignored. Any attempt to get it returns 0.", "enum": "BodyParameter", "name": "BODY_PARAM_MAX", "value": "7"}, {"description": "Constant to set/get the current transform matrix of the body.", "enum": "BodyState", "name": "BODY_STATE_TRANSFORM", "value": "0"}, {"description": "Constant to set/get the current linear velocity of the body.", "enum": "BodyState", "name": "BODY_STATE_LINEAR_VELOCITY", "value": "1"}, {"description": "Constant to set/get the current angular velocity of the body.", "enum": "BodyState", "name": "BODY_STATE_ANGULAR_VELOCITY", "value": "2"}, {"description": "Constant to sleep/wake up a body, or to get whether it is sleeping.", "enum": "BodyState", "name": "BODY_STATE_SLEEPING", "value": "3"}, {"description": "Constant to set/get whether the body can sleep.", "enum": "BodyState", "name": "BODY_STATE_CAN_SLEEP", "value": "4"}, {"description": "Constant to create pin joints.", "enum": "JointType", "name": "JOINT_PIN", "value": "0"}, {"description": "Constant to create groove joints.", "enum": "JointType", "name": "JOINT_GROOVE", "value": "1"}, {"description": "Constant to create damped spring joints.", "enum": "JointType", "name": "JOINT_DAMPED_SPRING", "value": "2"}, {"description": "", "enum": "JointParam", "name": "JOINT_PARAM_BIAS", "value": "0"}, {"description": "", "enum": "JointParam", "name": "JOINT_PARAM_MAX_BIAS", "value": "1"}, {"description": "", "enum": "JointParam", "name": "JOINT_PARAM_MAX_FORCE", "value": "2"}, {"description": "Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.", "enum": "DampedStringParam", "name": "DAMPED_STRING_REST_LENGTH", "value": "0"}, {"description": "Set the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.", "enum": "DampedStringParam", "name": "DAMPED_STRING_STIFFNESS", "value": "1"}, {"description": "Set the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).", "enum": "DampedStringParam", "name": "DAMPED_STRING_DAMPING", "value": "2"}, {"description": "Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.", "enum": "CCDMode", "name": "CCD_MODE_DISABLED", "value": "0"}, {"description": "Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise.", "enum": "CCDMode", "name": "CCD_MODE_CAST_RAY", "value": "1"}, {"description": "Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise.", "enum": "CCDMode", "name": "CCD_MODE_CAST_SHAPE", "value": "2"}, {"description": "The value of the first parameter and area callback function receives, when an object enters one of its shapes.", "enum": "AreaBodyStatus", "name": "AREA_BODY_ADDED", "value": "0"}, {"description": "The value of the first parameter and area callback function receives, when an object exits one of its shapes.", "enum": "AreaBodyStatus", "name": "AREA_BODY_REMOVED", "value": "1"}, {"description": "Constant to get the number of objects that are not sleeping.", "enum": "ProcessInfo", "name": "INFO_ACTIVE_OBJECTS", "value": "0"}, {"description": "Constant to get the number of possible collisions.", "enum": "ProcessInfo", "name": "INFO_COLLISION_PAIRS", "value": "1"}, {"description": "Constant to get the number of space regions where a collision could occur.", "enum": "ProcessInfo", "name": "INFO_ISLAND_COUNT", "value": "2"}], "demos": {"links": []}, "description": "Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape", "type": "RID"}, {"default": "Transform2D( 1, 0, 0, 1, 0, 0 )", "description": "", "index": "2", "name": "transform", "type": "Transform2D"}], "description": "Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.", "name": "area_add_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree.", "name": "area_attach_object_instance_id", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.", "name": "area_clear_shapes", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates an [Area2D].", "name": "area_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Gets the instance ID of the object the area is assigned to.", "name": "area_get_object_instance_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.", "name": "area_get_param", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Returns the [RID] of the nth shape of an area.", "name": "area_get_shape", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Returns the number of shapes assigned to an area.", "name": "area_get_shape_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Returns the transform matrix of a shape within an area.", "name": "area_get_shape_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Returns the space assigned to the area.", "name": "area_get_space", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Returns the space override mode for the area.", "name": "area_get_space_override_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Returns the transform matrix for an area.", "name": "area_get_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Removes a shape from an area. It does not delete the shape, so it can be reassigned later.", "name": "area_remove_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "receiver", "type": "Object"}, {"description": "", "index": "2", "name": "method", "type": "String"}], "description": "", "name": "area_set_area_monitor_callback", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "layer", "type": "int"}], "description": "Assigns the area to one or many physics layers.", "name": "area_set_collision_layer", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "mask", "type": "int"}], "description": "Sets which physics layers the area will monitor.", "name": "area_set_collision_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "receiver", "type": "Object"}, {"description": "", "index": "2", "name": "method", "type": "String"}], "description": "Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:\n\t\t\t\t1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.\n\t\t\t\t2: [RID] of the object that entered/exited the area.\n\t\t\t\t3: Instance ID of the object that entered/exited the area.\n\t\t\t\t4: The shape index of the object that entered/exited the area.\n\t\t\t\t5: The shape index of the area where the object entered/exited.", "name": "area_set_monitor_callback", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "monitorable", "type": "bool"}], "description": "", "name": "area_set_monitorable", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.", "name": "area_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "shape", "type": "RID"}], "description": "Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].", "name": "area_set_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "disable", "type": "bool"}], "description": "Disables a given shape in an area.", "name": "area_set_shape_disabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "transform", "type": "Transform2D"}], "description": "Sets the transform matrix for an area shape.", "name": "area_set_shape_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "space", "type": "RID"}], "description": "Assigns a space to the area.", "name": "area_set_space", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.", "name": "area_set_space_override_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "transform", "type": "Transform2D"}], "description": "Sets the transform matrix for an area.", "name": "area_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "force", "type": "Vector2"}], "description": "", "name": "body_add_central_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "excepted_body", "type": "RID"}], "description": "Adds a body to the list of bodies exempt from collisions.", "name": "body_add_collision_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "offset", "type": "Vector2"}, {"description": "", "index": "2", "name": "force", "type": "Vector2"}], "description": "Adds a positioned force to the applied force and torque. As with [method body_apply_impulse], both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied.", "name": "body_add_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape", "type": "RID"}, {"default": "Transform2D( 1, 0, 0, 1, 0, 0 )", "description": "", "index": "2", "name": "transform", "type": "Transform2D"}], "description": "Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.", "name": "body_add_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "torque", "type": "float"}], "description": "", "name": "body_add_torque", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "impulse", "type": "Vector2"}], "description": "", "name": "body_apply_central_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}, {"description": "", "index": "2", "name": "impulse", "type": "Vector2"}], "description": "Adds a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates.", "name": "body_apply_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "impulse", "type": "float"}], "description": "", "name": "body_apply_torque_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree.", "name": "body_attach_object_instance_id", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Removes all shapes from a body.", "name": "body_clear_shapes", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.", "name": "body_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the physics layer or layers a body belongs to.", "name": "body_get_collision_layer", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the physics layer or layers a body can collide with.", "name": "body_get_collision_mask", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the continuous collision detection mode.", "name": "body_get_continuous_collision_detection_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the [Physics2DDirectBodyState] of the body.", "name": "body_get_direct_state", "return_": {"description": "", "type": "Physics2DDirectBodyState"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].", "name": "body_get_max_contacts_reported", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the body mode.", "name": "body_get_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Gets the instance ID of the object the area is assigned to.", "name": "body_get_object_instance_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.", "name": "body_get_param", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Returns the [RID] of the nth shape of a body.", "name": "body_get_shape", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the number of shapes assigned to a body.", "name": "body_get_shape_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Returns the metadata of a shape of a body.", "name": "body_get_shape_metadata", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Returns the transform matrix of a body shape.", "name": "body_get_shape_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the [RID] of the space assigned to a body.", "name": "body_get_space", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "state", "type": "int"}], "description": "Returns a body state.", "name": "body_get_state", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).", "name": "body_is_omitting_force_integration", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "excepted_body", "type": "RID"}], "description": "Removes a body from the list of bodies exempt from collisions.", "name": "body_remove_collision_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.", "name": "body_remove_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "axis_velocity", "type": "Vector2"}], "description": "Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.", "name": "body_set_axis_velocity", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "layer", "type": "int"}], "description": "Sets the physics layer or layers a body belongs to.", "name": "body_set_collision_layer", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "mask", "type": "int"}], "description": "Sets the physics layer or layers a body can collide with.", "name": "body_set_collision_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Sets the continuous collision detection mode from any of the CCD_MODE_* constants.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.", "name": "body_set_continuous_collision_detection_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "receiver", "type": "Object"}, {"description": "", "index": "2", "name": "method", "type": "String"}, {"default": "null", "description": "", "index": "3", "name": "userdata", "type": "Variant"}], "description": "Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force_integration]).", "name": "body_set_force_integration_callback", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "amount", "type": "int"}], "description": "Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.", "name": "body_set_max_contacts_reported", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Sets the body mode, from one of the constants BODY_MODE*.", "name": "body_set_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).", "name": "body_set_omit_force_integration", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.", "name": "body_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "shape", "type": "RID"}], "description": "Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].", "name": "body_set_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "enable", "type": "bool"}], "description": "Enables one way collision on body if [code]enable[/code] is [code]true[/code].", "name": "body_set_shape_as_one_way_collision", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "disable", "type": "bool"}], "description": "Disables shape in body if [code]disable[/code] is [code]true[/code].", "name": "body_set_shape_disabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "metadata", "type": "Variant"}], "description": "Sets metadata of a shape within a body. This metadata is different from [method Object.set_meta], and can be retrieved on shape queries.", "name": "body_set_shape_metadata", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "transform", "type": "Transform2D"}], "description": "Sets the transform matrix for a body shape.", "name": "body_set_shape_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "space", "type": "RID"}], "description": "Assigns a space to the body (see [method space_create]).", "name": "body_set_space", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "state", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Sets a body state (see BODY_STATE* constants).", "name": "body_set_state", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "from", "type": "Transform2D"}, {"description": "", "index": "2", "name": "motion", "type": "Vector2"}, {"description": "", "index": "3", "name": "infinite_inertia", "type": "bool"}, {"default": "0.08", "description": "", "index": "4", "name": "margin", "type": "float"}, {"default": "null", "description": "", "index": "5", "name": "result", "type": "Physics2DTestMotionResult"}], "description": "Returns whether a body can move from a given point in a given direction. Apart from the boolean return value, a [Physics2DTestMotionResult] can be passed to return additional information in.", "name": "body_test_motion", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "capsule_shape_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "", "name": "circle_shape_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "", "name": "concave_polygon_shape_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "", "name": "convex_polygon_shape_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "anchor_a", "type": "Vector2"}, {"description": "", "index": "1", "name": "anchor_b", "type": "Vector2"}, {"description": "", "index": "2", "name": "body_a", "type": "RID"}, {"description": "", "index": "3", "name": "body_b", "type": "RID"}], "description": "Creates a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself.", "name": "damped_spring_joint_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Returns the value of a damped spring joint parameter.", "name": "damped_string_joint_get_param", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "Sets a damped spring joint parameter. Parameters are explained in the DAMPED_STRING* constants.", "name": "damped_string_joint_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rid", "type": "RID"}], "description": "Destroys any of the objects created by Physics2DServer. If the [RID] passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console.", "name": "free_rid", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "process_info", "type": "int"}], "description": "Returns information about the current state of the 2D physics engine. The states are listed under the INFO_* constants.", "name": "get_process_info", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "groove1_a", "type": "Vector2"}, {"description": "", "index": "1", "name": "groove2_a", "type": "Vector2"}, {"description": "", "index": "2", "name": "anchor_b", "type": "Vector2"}, {"description": "", "index": "3", "name": "body_a", "type": "RID"}, {"description": "", "index": "4", "name": "body_b", "type": "RID"}], "description": "Creates a groove joint between two bodies. If not specified, the bodyies are assumed to be the joint itself.", "name": "groove_joint_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Returns the value of a joint parameter.", "name": "joint_get_param", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}], "description": "Returns the type of a joint (see JOINT_* constants).", "name": "joint_get_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "Sets a joint parameter. Parameters are explained in the JOINT_PARAM* constants.", "name": "joint_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "line_shape_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "anchor", "type": "Vector2"}, {"description": "", "index": "1", "name": "body_a", "type": "RID"}, {"description": "", "index": "2", "name": "body_b", "type": "RID"}], "description": "Creates a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself.", "name": "pin_joint_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "", "name": "ray_shape_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "", "name": "rectangle_shape_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "", "name": "segment_shape_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "active", "type": "bool"}], "description": "Activates or deactivates the 2D physics engine.", "name": "set_active", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "RID"}], "description": "Returns the shape data.", "name": "shape_get_data", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "RID"}], "description": "Returns the type of shape (see SHAPE_* constants).", "name": "shape_get_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "RID"}, {"description": "", "index": "1", "name": "data", "type": "Variant"}], "description": "Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].", "name": "shape_set_data", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].", "name": "space_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "space", "type": "RID"}], "description": "Returns the state of a space, a [Physics2DDirectSpaceState]. This object can be used to make collision/intersection queries.", "name": "space_get_direct_state", "return_": {"description": "", "type": "Physics2DDirectSpaceState"}}, {"arguments": [{"description": "", "index": "0", "name": "space", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Returns the value of a space parameter.", "name": "space_get_param", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "space", "type": "RID"}], "description": "Returns whether the space is active.", "name": "space_is_active", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "space", "type": "RID"}, {"description": "", "index": "1", "name": "active", "type": "bool"}], "description": "Marks a space as active. It will not have an effect, unless it is assigned to an area or body.", "name": "space_set_active", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "space", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.", "name": "space_set_param", "return_": {"description": "", "type": "void"}}], "name": "Physics2DServer", "signals": [], "tutorials": {"links": []}}, "Physics2DServerSW": {"brief_description": "Software implementation of [Physics2DServer].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This class exposes no new methods or properties and should not be used, as [Physics2DServer] automatically selects the best implementation available.", "inherits": "Physics2DServer", "members": [], "methods": [], "name": "Physics2DServerSW", "signals": [], "tutorials": {"links": []}}, "Physics2DShapeQueryParameters": {"brief_description": "Parameters to be sent to a 2D shape physics query.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This class contains the shape and other parameters for intersection/collision queries.", "inherits": "Reference", "members": [{"description": "", "getter": "is_collide_with_areas_enabled", "name": "collide_with_areas", "setter": "set_collide_with_areas", "type": "bool"}, {"description": "", "getter": "is_collide_with_bodies_enabled", "name": "collide_with_bodies", "setter": "set_collide_with_bodies", "type": "bool"}, {"description": "The physics layer the query should be made on.", "getter": "get_collision_layer", "name": "collision_layer", "setter": "set_collision_layer", "type": "int"}, {"description": "The list of objects or object [RID]s, that will be excluded from collisions.", "getter": "get_exclude", "name": "exclude", "setter": "set_exclude", "type": "Array"}, {"description": "The collision margin for the shape.", "getter": "get_margin", "name": "margin", "setter": "set_margin", "type": "float"}, {"description": "The motion of the shape being queried for.", "getter": "get_motion", "name": "motion", "setter": "set_motion", "type": "Vector2"}, {"description": "The [RID] of the queried shape. See [method set_shape] also.", "getter": "get_shape_rid", "name": "shape_rid", "setter": "set_shape_rid", "type": "RID"}, {"description": "the transform matrix of the queried shape.", "getter": "get_transform", "name": "transform", "setter": "set_transform", "type": "Transform2D"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "shape", "type": "Resource"}], "description": "Set the [Shape2D] that will be used for collision/intersection queries.", "name": "set_shape", "return_": {"description": "", "type": "void"}}], "name": "Physics2DShapeQueryParameters", "signals": [], "tutorials": {"links": []}}, "Physics2DShapeQueryResult": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "", "name": "get_result_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_result_object", "qualifiers": "const", "return_": {"description": "", "type": "Object"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_result_object_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_result_object_shape", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_result_rid", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}], "name": "Physics2DShapeQueryResult", "signals": [], "tutorials": {"links": []}}, "Physics2DTestMotionResult": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [{"description": "", "getter": "get_collider", "name": "collider", "setter": "", "type": "Object"}, {"description": "", "getter": "get_collider_id", "name": "collider_id", "setter": "", "type": "int"}, {"description": "", "getter": "get_collider_rid", "name": "collider_rid", "setter": "", "type": "RID"}, {"description": "", "getter": "get_collider_shape", "name": "collider_shape", "setter": "", "type": "int"}, {"description": "", "getter": "get_collider_velocity", "name": "collider_velocity", "setter": "", "type": "Vector2"}, {"description": "", "getter": "get_collision_normal", "name": "collision_normal", "setter": "", "type": "Vector2"}, {"description": "", "getter": "get_collision_point", "name": "collision_point", "setter": "", "type": "Vector2"}, {"description": "", "getter": "get_motion", "name": "motion", "setter": "", "type": "Vector2"}, {"description": "", "getter": "get_motion_remainder", "name": "motion_remainder", "setter": "", "type": "Vector2"}], "methods": [], "name": "Physics2DTestMotionResult", "signals": [], "tutorials": {"links": []}}, "PhysicsBody": {"brief_description": "Base class for all objects affected by physics in 3D space.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "PhysicsBody is an abstract base class for implementing a physics body. All *Body types inherit from it.", "inherits": "CollisionObject", "members": [{"description": "The physics layers this area is in.\n\t\t\tCollidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.\n\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.", "getter": "get_collision_layer", "name": "collision_layer", "setter": "set_collision_layer", "type": "int"}, {"description": "The physics layers this area can scan for collisions.", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "Adds a body to the list of bodies that this body can't collide with.", "name": "add_collision_exception_with", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "", "name": "get_collision_layer_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "", "name": "get_collision_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "Removes a body from the list of bodies that this body can't collide with.", "name": "remove_collision_exception_with", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "", "name": "set_collision_layer_bit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "", "name": "set_collision_mask_bit", "return_": {"description": "", "type": "void"}}], "name": "PhysicsBody", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/physics_introduction.html"}]}}, "PhysicsBody2D": {"brief_description": "Base class for all objects affected by physics in 2D space.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it.", "inherits": "CollisionObject2D", "members": [{"description": "The physics layers this area is in.\n\t\t\tCollidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.\n\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.", "getter": "get_collision_layer", "name": "collision_layer", "setter": "set_collision_layer", "type": "int"}, {"description": "The physics layers this area can scan for collisions.", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}, {"description": "Both collision_layer and collision_mask. Returns collision_layer when accessed. Updates collision_layers and collision_mask when modified.", "getter": "_get_layers", "name": "layers", "setter": "_set_layers", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "Adds a body to the list of bodies that this body can't collide with.", "name": "add_collision_exception_with", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "Return an individual bit on the collision mask.", "name": "get_collision_layer_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "Return an individual bit on the collision mask.", "name": "get_collision_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "Removes a body from the list of bodies that this body can't collide with.", "name": "remove_collision_exception_with", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "Set/clear individual bits on the layer mask. This makes getting a body in/out of only one layer easier.", "name": "set_collision_layer_bit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.", "name": "set_collision_mask_bit", "return_": {"description": "", "type": "void"}}], "name": "PhysicsBody2D", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/physics_introduction.html"}]}}, "PhysicsDirectBodyState": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Object", "members": [{"description": "The angular velocity of the body.", "getter": "get_angular_velocity", "name": "angular_velocity", "setter": "set_angular_velocity", "type": "Vector3"}, {"description": "", "getter": "get_center_of_mass", "name": "center_of_mass", "setter": "", "type": "Vector3"}, {"description": "The inverse of the inertia of the body.", "getter": "get_inverse_inertia", "name": "inverse_inertia", "setter": "", "type": "Vector3"}, {"description": "The inverse of the mass of the body.", "getter": "get_inverse_mass", "name": "inverse_mass", "setter": "", "type": "float"}, {"description": "The linear velocity of the body.", "getter": "get_linear_velocity", "name": "linear_velocity", "setter": "set_linear_velocity", "type": "Vector3"}, {"description": "", "getter": "get_principal_inertia_axes", "name": "principal_inertia_axes", "setter": "", "type": "Basis"}, {"description": "[code]true[/code] if this body is currently sleeping (not active).", "getter": "is_sleeping", "name": "sleeping", "setter": "set_sleep_state", "type": "bool"}, {"description": "The timestep (delta) used for the simulation.", "getter": "get_step", "name": "step", "setter": "", "type": "float"}, {"description": "The rate at which the body stops rotating, if there are not any other forces moving it.", "getter": "get_total_angular_damp", "name": "total_angular_damp", "setter": "", "type": "float"}, {"description": "The total gravity vector being currently applied to this body.", "getter": "get_total_gravity", "name": "total_gravity", "setter": "", "type": "Vector3"}, {"description": "The rate at which the body stops moving, if there are not any other forces moving it.", "getter": "get_total_linear_damp", "name": "total_linear_damp", "setter": "", "type": "float"}, {"description": "The transformation matrix of the body.", "getter": "get_transform", "name": "transform", "setter": "set_transform", "type": "Transform"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "force", "type": "Vector3"}], "description": "Adds a constant directional force without affecting rotation.\n\t\t\t\tThis is equivalent to [code]add_force(force, Vector3(0,0,0))[/code].", "name": "add_central_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "force", "type": "Vector3"}, {"description": "", "index": "1", "name": "position", "type": "Vector3"}], "description": "Adds a constant force (i.e. acceleration).", "name": "add_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "torque", "type": "Vector3"}], "description": "Adds a constant rotational force (i.e. a motor) without affecting position.", "name": "add_torque", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "j", "type": "Vector3"}], "description": "Applies a single directional impulse without affecting rotation.\n\t\t\t\tThis is equivalent to ``apply_impulse(Vector3(0,0,0), impulse)``.", "name": "apply_central_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector3"}, {"description": "", "index": "1", "name": "j", "type": "Vector3"}], "description": "Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the position are in global coordinates, and the position is relative to the object's origin.", "name": "apply_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "j", "type": "Vector3"}], "description": "Apply a torque impulse (which will be affected by the body mass and shape). This will rotate the body around the passed in vector.", "name": "apply_torque_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "", "name": "get_contact_collider", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "", "name": "get_contact_collider_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "", "name": "get_contact_collider_object", "qualifiers": "const", "return_": {"description": "", "type": "Object"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "", "name": "get_contact_collider_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "", "name": "get_contact_collider_shape", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "", "name": "get_contact_collider_velocity_at_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "", "name": "get_contact_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "Impulse created by the contact. Only implemented for Bullet physics.", "name": "get_contact_impulse", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "", "name": "get_contact_local_normal", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "", "name": "get_contact_local_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "contact_idx", "type": "int"}], "description": "", "name": "get_contact_local_shape", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_space_state", "return_": {"description": "", "type": "PhysicsDirectSpaceState"}}, {"arguments": [], "description": "", "name": "integrate_forces", "return_": {"description": "", "type": "void"}}], "name": "PhysicsDirectBodyState", "signals": [], "tutorials": {"links": []}}, "PhysicsDirectSpaceState": {"brief_description": "Direct access object to a space in the [PhysicsServer].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Direct access object to a space in the [PhysicsServer]. It's used mainly to do queries against objects and areas residing in a given space.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "shape", "type": "PhysicsShapeQueryParameters"}, {"description": "", "index": "1", "name": "motion", "type": "Vector3"}], "description": "Checks whether the shape can travel to a point. The method will return an array with two floats between 0 and 1, both representing a fraction of [code]motion[/code]. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be [1, 1].\n\t\t\t\tIf the shape can not move, the array will be empty.", "name": "cast_motion", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "PhysicsShapeQueryParameters"}, {"default": "32", "description": "", "index": "1", "name": "max_results", "type": "int"}], "description": "Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time.", "name": "collide_shape", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "PhysicsShapeQueryParameters"}], "description": "Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. If it collides with more than a shape, the nearest one is selected. The returned object is a dictionary containing the following fields:\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]linear_velocity[/code]: The colliding object's velocity [Vector3]. If the object is an [Area], the result is [code](0, 0, 0)[/code].\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]point[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the shape did not intersect anything, then an empty dictionary is returned instead.", "name": "get_rest_info", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}, {"description": "", "index": "1", "name": "to", "type": "Vector3"}, {"default": "[  ]", "description": "", "index": "2", "name": "exclude", "type": "Array"}, {"default": "2147483647", "description": "", "index": "3", "name": "collision_mask", "type": "int"}, {"default": "true", "description": "", "index": "4", "name": "collide_with_bodies", "type": "bool"}, {"default": "false", "description": "", "index": "5", "name": "collide_with_areas", "type": "bool"}], "description": "Intersects a ray in a given space. The returned object is a dictionary with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]position[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the ray did not intersect anything, then an empty dictionary is returned instead.\n\t\t\t\tAdditionally, the method can take an [code]exclude[/code] array of objects or [RID]s that are to be excluded from collisions, a [code]collision_mask[/code] bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with [PhysicsBody]s or [Area]s, respectively.", "name": "intersect_ray", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "PhysicsShapeQueryParameters"}, {"default": "32", "description": "", "index": "1", "name": "max_results", "type": "int"}], "description": "Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tThe number of intersections can be limited with the second parameter, to reduce the processing time.", "name": "intersect_shape", "return_": {"description": "", "type": "Array"}}], "name": "PhysicsDirectSpaceState", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/ray-casting.html"}]}}, "PhysicsMaterial": {"brief_description": "A material for physics properties.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Provides a means of modifying the collision properties of a [PhysicsBody].", "inherits": "Resource", "members": [{"description": "", "getter": "is_absorbent", "name": "absorbent", "setter": "set_absorbent", "type": "bool"}, {"description": "The body's bounciness. Default value: [code]0[/code].", "getter": "get_bounce", "name": "bounce", "setter": "set_bounce", "type": "float"}, {"description": "The body's friction. Values range from [code]0[/code] (frictionless) to [code]1[/code] (maximum friction). Default value: [code]1[/code].", "getter": "get_friction", "name": "friction", "setter": "set_friction", "type": "float"}, {"description": "", "getter": "is_rough", "name": "rough", "setter": "set_rough", "type": "bool"}], "methods": [], "name": "PhysicsMaterial", "signals": [], "tutorials": {"links": []}}, "PhysicsServer": {"brief_description": "Server interface for low level physics access.", "category": "Core", "constants": [{"description": "The [Joint] is a [PinJoint].", "enum": "JointType", "name": "JOINT_PIN", "value": "0"}, {"description": "The [Joint] is a [HingeJoint].", "enum": "JointType", "name": "JOINT_HINGE", "value": "1"}, {"description": "The [Joint] is a [SliderJoint].", "enum": "JointType", "name": "JOINT_SLIDER", "value": "2"}, {"description": "The [Joint] is a [ConeTwistJoint].", "enum": "JointType", "name": "JOINT_CONE_TWIST", "value": "3"}, {"description": "The [Joint] is a [Generic6DOFJoint].", "enum": "JointType", "name": "JOINT_6DOF", "value": "4"}, {"description": "The strength with which the pinned objects try to stay in positional relation to each other.\n\t\t\tThe higher, the stronger.", "enum": "PinJointParam", "name": "PIN_JOINT_BIAS", "value": "0"}, {"description": "The strength with which the pinned objects try to stay in velocity relation to each other.\n\t\t\tThe higher, the stronger.", "enum": "PinJointParam", "name": "PIN_JOINT_DAMPING", "value": "1"}, {"description": "If above 0, this value is the maximum value for an impulse that this Joint puts on it's ends.", "enum": "PinJointParam", "name": "PIN_JOINT_IMPULSE_CLAMP", "value": "2"}, {"description": "The speed with which the two bodies get pulled together when they move in different directions.", "enum": "HingeJointParam", "name": "HINGE_JOINT_BIAS", "value": "0"}, {"description": "The maximum rotation across the Hinge.", "enum": "HingeJointParam", "name": "HINGE_JOINT_LIMIT_UPPER", "value": "1"}, {"description": "The minimum rotation across the Hinge.", "enum": "HingeJointParam", "name": "HINGE_JOINT_LIMIT_LOWER", "value": "2"}, {"description": "The speed with which the rotation across the axis perpendicular to the hinge gets corrected.", "enum": "HingeJointParam", "name": "HINGE_JOINT_LIMIT_BIAS", "value": "3"}, {"description": "", "enum": "HingeJointParam", "name": "HINGE_JOINT_LIMIT_SOFTNESS", "value": "4"}, {"description": "The lower this value, the more the rotation gets slowed down.", "enum": "HingeJointParam", "name": "HINGE_JOINT_LIMIT_RELAXATION", "value": "5"}, {"description": "Target speed for the motor.", "enum": "HingeJointParam", "name": "HINGE_JOINT_MOTOR_TARGET_VELOCITY", "value": "6"}, {"description": "Maximum acceleration for the motor.", "enum": "HingeJointParam", "name": "HINGE_JOINT_MOTOR_MAX_IMPULSE", "value": "7"}, {"description": "If [code]true[/code] the Hinge has a maximum and a minimum rotation.", "enum": "HingeJointFlag", "name": "HINGE_JOINT_FLAG_USE_LIMIT", "value": "0"}, {"description": "If [code]true[/code] a motor turns the Hinge", "enum": "HingeJointFlag", "name": "HINGE_JOINT_FLAG_ENABLE_MOTOR", "value": "1"}, {"description": "The maximum difference between the pivot points on their x-axis before damping happens.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_LIMIT_UPPER", "value": "0"}, {"description": "The minimum difference between the pivot points on their x-axis before damping happens.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_LIMIT_LOWER", "value": "1"}, {"description": "A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS", "value": "2"}, {"description": "The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION", "value": "3"}, {"description": "The amount of damping once the slider limits are surpassed.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_LIMIT_DAMPING", "value": "4"}, {"description": "A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_MOTION_SOFTNESS", "value": "5"}, {"description": "The amount of restitution inside the slider limits.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_MOTION_RESTITUTION", "value": "6"}, {"description": "The amount of damping inside the slider limits.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_MOTION_DAMPING", "value": "7"}, {"description": "A factor applied to the movement across axes orthogonal to the slider.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS", "value": "8"}, {"description": "The amount of restitution when movement is across axes orthogonal to the slider.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION", "value": "9"}, {"description": "The amount of damping when movement is across axes orthogonal to the slider.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING", "value": "10"}, {"description": "The upper limit of rotation in the slider.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_LIMIT_UPPER", "value": "11"}, {"description": "The lower limit of rotation in the slider.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_LIMIT_LOWER", "value": "12"}, {"description": "A factor applied to the all rotation once the limit is surpassed.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS", "value": "13"}, {"description": "The amount of restitution of the rotation when the limit is surpassed.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION", "value": "14"}, {"description": "The amount of damping of the rotation when the limit is surpassed.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_LIMIT_DAMPING", "value": "15"}, {"description": "A factor that gets applied to the all rotation in the limits.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS", "value": "16"}, {"description": "The amount of restitution of the rotation in the limits.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION", "value": "17"}, {"description": "The amount of damping of the rotation in the limits.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_MOTION_DAMPING", "value": "18"}, {"description": "A factor that gets applied to the all rotation across axes orthogonal to the slider.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS", "value": "19"}, {"description": "The amount of restitution of the rotation across axes orthogonal to the slider.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION", "value": "20"}, {"description": "The amount of damping of the rotation across axes orthogonal to the slider.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING", "value": "21"}, {"description": "End flag of SLIDER_JOINT_* constants, used internally.", "enum": "SliderJointParam", "name": "SLIDER_JOINT_MAX", "value": "22"}, {"description": "Swing is rotation from side to side, around the axis perpendicular to the twist axis.\n\t\t\tThe swing span defines, how much rotation will not get corrected allong the swing axis.\n\t\t\tCould be defined as looseness in the [ConeTwistJoint].\n\t\t\tIf below 0.05, this behaviour is locked. Default value: [code]PI/4[/code].", "enum": "ConeTwistJointParam", "name": "CONE_TWIST_JOINT_SWING_SPAN", "value": "0"}, {"description": "Twist is the rotation around the twist axis, this value defined how far the joint can twist.\n\t\t\tTwist is locked if below 0.05.", "enum": "ConeTwistJointParam", "name": "CONE_TWIST_JOINT_TWIST_SPAN", "value": "1"}, {"description": "The speed with which the swing or twist will take place.\n\t\t\tThe higher, the faster.", "enum": "ConeTwistJointParam", "name": "CONE_TWIST_JOINT_BIAS", "value": "2"}, {"description": "The ease with which the Joint twists, if it's too low, it takes more force to twist the joint.", "enum": "ConeTwistJointParam", "name": "CONE_TWIST_JOINT_SOFTNESS", "value": "3"}, {"description": "Defines, how fast the swing- and twist-speed-difference on both sides gets synced.", "enum": "ConeTwistJointParam", "name": "CONE_TWIST_JOINT_RELAXATION", "value": "4"}, {"description": "The minimum difference between the pivot points' axes.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_LINEAR_LOWER_LIMIT", "value": "0"}, {"description": "The maximum difference between the pivot points' axes.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_LINEAR_UPPER_LIMIT", "value": "1"}, {"description": "A factor that gets applied to the movement across the axes. The lower, the slower the movement.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS", "value": "2"}, {"description": "The amount of restitution on the axes movement. The lower, the more velocity-energy gets lost.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_LINEAR_RESTITUTION", "value": "3"}, {"description": "The amount of damping that happens at the linear motion across the axes.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_LINEAR_DAMPING", "value": "4"}, {"description": "The velocity that the joint's linear motor will attempt to reach.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY", "value": "5"}, {"description": "The maximum force that the linear motor can apply while trying to reach the target velocity.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT", "value": "6"}, {"description": "The minimum rotation in negative direction to break loose and rotate around the axes.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_ANGULAR_LOWER_LIMIT", "value": "7"}, {"description": "The minimum rotation in positive direction to break loose and rotate around the axes.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_ANGULAR_UPPER_LIMIT", "value": "8"}, {"description": "A factor that gets multiplied onto all rotations across the axes.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS", "value": "9"}, {"description": "The amount of rotational damping across the axes. The lower, the more dampening occurs.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_ANGULAR_DAMPING", "value": "10"}, {"description": "The amount of rotational restitution across the axes. The lower, the more restitution occurs.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_ANGULAR_RESTITUTION", "value": "11"}, {"description": "The maximum amount of force that can occur, when rotating around the axes.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_ANGULAR_FORCE_LIMIT", "value": "12"}, {"description": "When correcting the crossing of limits in rotation across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_ANGULAR_ERP", "value": "13"}, {"description": "Target speed for the motor at the axes.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY", "value": "14"}, {"description": "Maximum acceleration for the motor at the axes.", "enum": "G6DOFJointAxisParam", "name": "G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT", "value": "15"}, {"description": "If [code]set[/code] there is linear motion possible within the given limits.", "enum": "G6DOFJointAxisFlag", "name": "G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT", "value": "0"}, {"description": "If [code]set[/code] there is rotational motion possible.", "enum": "G6DOFJointAxisFlag", "name": "G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT", "value": "1"}, {"description": "If [code]set[/code] there is a rotational motor across these axes.", "enum": "G6DOFJointAxisFlag", "name": "G6DOF_JOINT_FLAG_ENABLE_MOTOR", "value": "2"}, {"description": "If [code]set[/code] there is a linear motor on this axis that targets a specific velocity.", "enum": "G6DOFJointAxisFlag", "name": "G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR", "value": "3"}, {"description": "The [Shape] is a [PlaneShape].", "enum": "ShapeType", "name": "SHAPE_PLANE", "value": "0"}, {"description": "The [Shape] is a [RayShape].", "enum": "ShapeType", "name": "SHAPE_RAY", "value": "1"}, {"description": "The [Shape] is a [SphereShape].", "enum": "ShapeType", "name": "SHAPE_SPHERE", "value": "2"}, {"description": "The [Shape] is a [BoxShape].", "enum": "ShapeType", "name": "SHAPE_BOX", "value": "3"}, {"description": "The [Shape] is a [CapsuleShape].", "enum": "ShapeType", "name": "SHAPE_CAPSULE", "value": "4"}, {"description": "The [Shape] is a [CylinderShape].", "enum": "ShapeType", "name": "SHAPE_CYLINDER", "value": "5"}, {"description": "The [Shape] is a [ConvexPolygonShape].", "enum": "ShapeType", "name": "SHAPE_CONVEX_POLYGON", "value": "6"}, {"description": "The [Shape] is a [ConcavePolygonShape].", "enum": "ShapeType", "name": "SHAPE_CONCAVE_POLYGON", "value": "7"}, {"description": "The [Shape] is a [HeightMapShape].", "enum": "ShapeType", "name": "SHAPE_HEIGHTMAP", "value": "8"}, {"description": "This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.", "enum": "ShapeType", "name": "SHAPE_CUSTOM", "value": "9"}, {"description": "Constant to set/get gravity strength in an area.", "enum": "AreaParameter", "name": "AREA_PARAM_GRAVITY", "value": "0"}, {"description": "Constant to set/get gravity vector/center in an area.", "enum": "AreaParameter", "name": "AREA_PARAM_GRAVITY_VECTOR", "value": "1"}, {"description": "Constant to set/get whether the gravity vector of an area is a direction, or a center point.", "enum": "AreaParameter", "name": "AREA_PARAM_GRAVITY_IS_POINT", "value": "2"}, {"description": "Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance.", "enum": "AreaParameter", "name": "AREA_PARAM_GRAVITY_DISTANCE_SCALE", "value": "3"}, {"description": "This constant was used to set/get the falloff factor for point gravity. It has been superseded by AREA_PARAM_GRAVITY_DISTANCE_SCALE.", "enum": "AreaParameter", "name": "AREA_PARAM_GRAVITY_POINT_ATTENUATION", "value": "4"}, {"description": "Constant to set/get the linear dampening factor of an area.", "enum": "AreaParameter", "name": "AREA_PARAM_LINEAR_DAMP", "value": "5"}, {"description": "Constant to set/get the angular dampening factor of an area.", "enum": "AreaParameter", "name": "AREA_PARAM_ANGULAR_DAMP", "value": "6"}, {"description": "Constant to set/get the priority (order of processing) of an area.", "enum": "AreaParameter", "name": "AREA_PARAM_PRIORITY", "value": "7"}, {"description": "This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.", "enum": "AreaSpaceOverrideMode", "name": "AREA_SPACE_OVERRIDE_DISABLED", "value": "0"}, {"description": "This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.", "enum": "AreaSpaceOverrideMode", "name": "AREA_SPACE_OVERRIDE_COMBINE", "value": "1"}, {"description": "This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.", "enum": "AreaSpaceOverrideMode", "name": "AREA_SPACE_OVERRIDE_COMBINE_REPLACE", "value": "2"}, {"description": "This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.", "enum": "AreaSpaceOverrideMode", "name": "AREA_SPACE_OVERRIDE_REPLACE", "value": "3"}, {"description": "This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.", "enum": "AreaSpaceOverrideMode", "name": "AREA_SPACE_OVERRIDE_REPLACE_COMBINE", "value": "4"}, {"description": "Constant for static bodies.", "enum": "BodyMode", "name": "BODY_MODE_STATIC", "value": "0"}, {"description": "Constant for kinematic bodies.", "enum": "BodyMode", "name": "BODY_MODE_KINEMATIC", "value": "1"}, {"description": "Constant for rigid bodies.", "enum": "BodyMode", "name": "BODY_MODE_RIGID", "value": "2"}, {"description": "", "enum": "BodyMode", "name": "BODY_MODE_SOFT", "value": "3"}, {"description": "Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics.", "enum": "BodyMode", "name": "BODY_MODE_CHARACTER", "value": "4"}, {"description": "Constant to set/get a body's bounce factor.", "enum": "BodyParameter", "name": "BODY_PARAM_BOUNCE", "value": "0"}, {"description": "Constant to set/get a body's friction.", "enum": "BodyParameter", "name": "BODY_PARAM_FRICTION", "value": "1"}, {"description": "Constant to set/get a body's mass.", "enum": "BodyParameter", "name": "BODY_PARAM_MASS", "value": "2"}, {"description": "Constant to set/get a body's gravity multiplier.", "enum": "BodyParameter", "name": "BODY_PARAM_GRAVITY_SCALE", "value": "3"}, {"description": "Constant to set/get a body's linear dampening factor.", "enum": "BodyParameter", "name": "BODY_PARAM_LINEAR_DAMP", "value": "4"}, {"description": "Constant to set/get a body's angular dampening factor.", "enum": "BodyParameter", "name": "BODY_PARAM_ANGULAR_DAMP", "value": "5"}, {"description": "This is the last ID for body parameters. Any attempt to set this property is ignored. Any attempt to get it returns 0.", "enum": "BodyParameter", "name": "BODY_PARAM_MAX", "value": "6"}, {"description": "Constant to set/get the current transform matrix of the body.", "enum": "BodyState", "name": "BODY_STATE_TRANSFORM", "value": "0"}, {"description": "Constant to set/get the current linear velocity of the body.", "enum": "BodyState", "name": "BODY_STATE_LINEAR_VELOCITY", "value": "1"}, {"description": "Constant to set/get the current angular velocity of the body.", "enum": "BodyState", "name": "BODY_STATE_ANGULAR_VELOCITY", "value": "2"}, {"description": "Constant to sleep/wake up a body, or to get whether it is sleeping.", "enum": "BodyState", "name": "BODY_STATE_SLEEPING", "value": "3"}, {"description": "Constant to set/get whether the body can sleep.", "enum": "BodyState", "name": "BODY_STATE_CAN_SLEEP", "value": "4"}, {"description": "The value of the first parameter and area callback function receives, when an object enters one of its shapes.", "enum": "AreaBodyStatus", "name": "AREA_BODY_ADDED", "value": "0"}, {"description": "The value of the first parameter and area callback function receives, when an object exits one of its shapes.", "enum": "AreaBodyStatus", "name": "AREA_BODY_REMOVED", "value": "1"}, {"description": "Constant to get the number of objects that are not sleeping.", "enum": "ProcessInfo", "name": "INFO_ACTIVE_OBJECTS", "value": "0"}, {"description": "Constant to get the number of possible collisions.", "enum": "ProcessInfo", "name": "INFO_COLLISION_PAIRS", "value": "1"}, {"description": "Constant to get the number of space regions where a collision could occur.", "enum": "ProcessInfo", "name": "INFO_ISLAND_COUNT", "value": "2"}, {"description": "Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated.", "enum": "SpaceParameter", "name": "SPACE_PARAM_CONTACT_RECYCLE_RADIUS", "value": "0"}, {"description": "Constant to set/get the maximum distance a shape can be from another before they are considered separated.", "enum": "SpaceParameter", "name": "SPACE_PARAM_CONTACT_MAX_SEPARATION", "value": "1"}, {"description": "Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision.", "enum": "SpaceParameter", "name": "SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION", "value": "2"}, {"description": "Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.", "enum": "SpaceParameter", "name": "SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD", "value": "3"}, {"description": "Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.", "enum": "SpaceParameter", "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD", "value": "4"}, {"description": "Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time.", "enum": "SpaceParameter", "name": "SPACE_PARAM_BODY_TIME_TO_SLEEP", "value": "5"}, {"description": "", "enum": "SpaceParameter", "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_DAMP_RATIO", "value": "6"}, {"description": "Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects \"rebound\", after violating a constraint, to avoid leaving them in that state because of numerical imprecision.", "enum": "SpaceParameter", "name": "SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS", "value": "7"}, {"description": "", "enum": "BodyAxis", "name": "BODY_AXIS_LINEAR_X", "value": "1"}, {"description": "", "enum": "BodyAxis", "name": "BODY_AXIS_LINEAR_Y", "value": "2"}, {"description": "", "enum": "BodyAxis", "name": "BODY_AXIS_LINEAR_Z", "value": "4"}, {"description": "", "enum": "BodyAxis", "name": "BODY_AXIS_ANGULAR_X", "value": "8"}, {"description": "", "enum": "BodyAxis", "name": "BODY_AXIS_ANGULAR_Y", "value": "16"}, {"description": "", "enum": "BodyAxis", "name": "BODY_AXIS_ANGULAR_Z", "value": "32"}], "demos": {"links": []}, "description": "Everything related to physics in 3D.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape", "type": "RID"}, {"default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )", "description": "", "index": "2", "name": "transform", "type": "Transform"}], "description": "Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.", "name": "area_add_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree.", "name": "area_attach_object_instance_id", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.", "name": "area_clear_shapes", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates an [Area].", "name": "area_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Gets the instance ID of the object the area is assigned to.", "name": "area_get_object_instance_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.", "name": "area_get_param", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Returns the [RID] of the nth shape of an area.", "name": "area_get_shape", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Returns the number of shapes assigned to an area.", "name": "area_get_shape_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Returns the transform matrix of a shape within an area.", "name": "area_get_shape_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Returns the space assigned to the area.", "name": "area_get_space", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Returns the space override mode for the area.", "name": "area_get_space_override_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "Returns the transform matrix for an area.", "name": "area_get_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}], "description": "If [code]true[/code] area collides with rays.", "name": "area_is_ray_pickable", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Removes a shape from an area. It does not delete the shape, so it can be reassigned later.", "name": "area_remove_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "receiver", "type": "Object"}, {"description": "", "index": "2", "name": "method", "type": "String"}], "description": "", "name": "area_set_area_monitor_callback", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "layer", "type": "int"}], "description": "Assigns the area to one or many physics layers.", "name": "area_set_collision_layer", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "mask", "type": "int"}], "description": "Sets which physics layers the area will monitor.", "name": "area_set_collision_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "receiver", "type": "Object"}, {"description": "", "index": "2", "name": "method", "type": "String"}], "description": "Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:\n\t\t\t\t1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.\n\t\t\t\t2: [RID] of the object that entered/exited the area.\n\t\t\t\t3: Instance ID of the object that entered/exited the area.\n\t\t\t\t4: The shape index of the object that entered/exited the area.\n\t\t\t\t5: The shape index of the area where the object entered/exited.", "name": "area_set_monitor_callback", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "monitorable", "type": "bool"}], "description": "", "name": "area_set_monitorable", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.", "name": "area_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "Sets object pickable with rays.", "name": "area_set_ray_pickable", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "shape", "type": "RID"}], "description": "Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].", "name": "area_set_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "transform", "type": "Transform"}], "description": "Sets the transform matrix for an area shape.", "name": "area_set_shape_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "space", "type": "RID"}], "description": "Assigns a space to the area.", "name": "area_set_space", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.", "name": "area_set_space_override_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "area", "type": "RID"}, {"description": "", "index": "1", "name": "transform", "type": "Transform"}], "description": "Sets the transform matrix for an area.", "name": "area_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "force", "type": "Vector3"}], "description": "", "name": "body_add_central_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "excepted_body", "type": "RID"}], "description": "Adds a body to the list of bodies exempt from collisions.", "name": "body_add_collision_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "force", "type": "Vector3"}, {"description": "", "index": "2", "name": "position", "type": "Vector3"}], "description": "", "name": "body_add_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape", "type": "RID"}, {"default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )", "description": "", "index": "2", "name": "transform", "type": "Transform"}], "description": "Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.", "name": "body_add_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "torque", "type": "Vector3"}], "description": "", "name": "body_add_torque", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "impulse", "type": "Vector3"}], "description": "", "name": "body_apply_central_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "position", "type": "Vector3"}, {"description": "", "index": "2", "name": "impulse", "type": "Vector3"}], "description": "Gives the body a push at a [code]position[/code] in the direction of the [code]impulse[/code].", "name": "body_apply_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "impulse", "type": "Vector3"}], "description": "Gives the body a push to rotate it.", "name": "body_apply_torque_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree.", "name": "body_attach_object_instance_id", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Removes all shapes from a body.", "name": "body_clear_shapes", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "2", "description": "", "index": "0", "name": "mode", "type": "int"}, {"default": "false", "description": "", "index": "1", "name": "init_sleeping", "type": "bool"}], "description": "Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.", "name": "body_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the physics layer or layers a body belongs to.", "name": "body_get_collision_layer", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the physics layer or layers a body can collide with.\n-", "name": "body_get_collision_mask", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the [PhysicsDirectBodyState] of the body.", "name": "body_get_direct_state", "return_": {"description": "", "type": "PhysicsDirectBodyState"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "", "name": "body_get_kinematic_safe_margin", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].", "name": "body_get_max_contacts_reported", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the body mode.", "name": "body_get_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Gets the instance ID of the object the area is assigned to.", "name": "body_get_object_instance_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.", "name": "body_get_param", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Returns the [RID] of the nth shape of a body.", "name": "body_get_shape", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the number of shapes assigned to a body.", "name": "body_get_shape_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Returns the transform matrix of a body shape.", "name": "body_get_shape_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns the [RID] of the space assigned to a body.", "name": "body_get_space", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "state", "type": "int"}], "description": "Returns a body state.", "name": "body_get_state", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "axis", "type": "int"}], "description": "", "name": "body_is_axis_locked", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "If [code]true[/code] the continuous collision detection mode is enabled.", "name": "body_is_continuous_collision_detection_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).", "name": "body_is_omitting_force_integration", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}], "description": "If [code]true[/code] the body can be detected by rays", "name": "body_is_ray_pickable", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "excepted_body", "type": "RID"}], "description": "Removes a body from the list of bodies exempt from collisions.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.", "name": "body_remove_collision_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}], "description": "Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.", "name": "body_remove_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "axis", "type": "int"}, {"description": "", "index": "2", "name": "lock", "type": "bool"}], "description": "", "name": "body_set_axis_lock", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "axis_velocity", "type": "Vector3"}], "description": "Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.", "name": "body_set_axis_velocity", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "layer", "type": "int"}], "description": "Sets the physics layer or layers a body belongs to.", "name": "body_set_collision_layer", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "mask", "type": "int"}], "description": "Sets the physics layer or layers a body can collide with.", "name": "body_set_collision_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "If [code]true[/code] the continuous collision detection mode is enabled.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.", "name": "body_set_enable_continuous_collision_detection", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "receiver", "type": "Object"}, {"description": "", "index": "2", "name": "method", "type": "String"}, {"default": "null", "description": "", "index": "3", "name": "userdata", "type": "Variant"}], "description": "Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force_integration]).", "name": "body_set_force_integration_callback", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "margin", "type": "float"}], "description": "", "name": "body_set_kinematic_safe_margin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "amount", "type": "int"}], "description": "Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.", "name": "body_set_max_contacts_reported", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Sets the body mode, from one of the constants BODY_MODE*.", "name": "body_set_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).", "name": "body_set_omit_force_integration", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.", "name": "body_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "Sets the body pickable with rays if [code]enabled[/code] is set.", "name": "body_set_ray_pickable", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "shape", "type": "RID"}], "description": "Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].", "name": "body_set_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "shape_idx", "type": "int"}, {"description": "", "index": "2", "name": "transform", "type": "Transform"}], "description": "Sets the transform matrix for a body shape.", "name": "body_set_shape_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "space", "type": "RID"}], "description": "Assigns a space to the body (see [method create_space]).", "name": "body_set_space", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "RID"}, {"description": "", "index": "1", "name": "state", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Sets a body state (see BODY_STATE* constants).", "name": "body_set_state", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Gets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).", "name": "cone_twist_joint_get_param", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "Sets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).", "name": "cone_twist_joint_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rid", "type": "RID"}], "description": "Destroys any of the objects created by PhysicsServer. If the [RID] passed is not one of the objects that can be created by PhysicsServer, an error will be sent to the console.", "name": "free_rid", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "axis", "type": "int"}, {"description": "", "index": "2", "name": "flag", "type": "int"}], "description": "Gets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).", "name": "generic_6dof_joint_get_flag", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "axis", "type": "int"}, {"description": "", "index": "2", "name": "param", "type": "int"}], "description": "Gets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).", "name": "generic_6dof_joint_get_param", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "axis", "type": "int"}, {"description": "", "index": "2", "name": "flag", "type": "int"}, {"description": "", "index": "3", "name": "enable", "type": "bool"}], "description": "Sets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).", "name": "generic_6dof_joint_set_flag", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "axis", "type": "int"}, {"description": "", "index": "2", "name": "param", "type": "int"}, {"description": "", "index": "3", "name": "value", "type": "float"}], "description": "Sets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).", "name": "generic_6dof_joint_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "process_info", "type": "int"}], "description": "Returns an Info defined by the [ProcessInfo] input given.", "name": "get_process_info", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "flag", "type": "int"}], "description": "Gets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).", "name": "hinge_joint_get_flag", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Gets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).", "name": "hinge_joint_get_param", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "flag", "type": "int"}, {"description": "", "index": "2", "name": "enabled", "type": "bool"}], "description": "Sets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).", "name": "hinge_joint_set_flag", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "Sets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).", "name": "hinge_joint_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "body_A", "type": "RID"}, {"description": "", "index": "1", "name": "local_ref_A", "type": "Transform"}, {"description": "", "index": "2", "name": "body_B", "type": "RID"}, {"description": "", "index": "3", "name": "local_ref_B", "type": "Transform"}], "description": "Creates a [ConeTwistJoint].", "name": "joint_create_cone_twist", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "body_A", "type": "RID"}, {"description": "", "index": "1", "name": "local_ref_A", "type": "Transform"}, {"description": "", "index": "2", "name": "body_B", "type": "RID"}, {"description": "", "index": "3", "name": "local_ref_B", "type": "Transform"}], "description": "Creates a [Generic6DOFJoint].", "name": "joint_create_generic_6dof", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "body_A", "type": "RID"}, {"description": "", "index": "1", "name": "hinge_A", "type": "Transform"}, {"description": "", "index": "2", "name": "body_B", "type": "RID"}, {"description": "", "index": "3", "name": "hinge_B", "type": "Transform"}], "description": "Creates a [HingeJoint].", "name": "joint_create_hinge", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "body_A", "type": "RID"}, {"description": "", "index": "1", "name": "local_A", "type": "Vector3"}, {"description": "", "index": "2", "name": "body_B", "type": "RID"}, {"description": "", "index": "3", "name": "local_B", "type": "Vector3"}], "description": "Creates a [PinJoint].", "name": "joint_create_pin", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "body_A", "type": "RID"}, {"description": "", "index": "1", "name": "local_ref_A", "type": "Transform"}, {"description": "", "index": "2", "name": "body_B", "type": "RID"}, {"description": "", "index": "3", "name": "local_ref_B", "type": "Transform"}], "description": "Creates a [SliderJoint].", "name": "joint_create_slider", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}], "description": "Gets the priority value of the Joint.", "name": "joint_get_solver_priority", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}], "description": "Returns the type of the Joint.", "name": "joint_get_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "priority", "type": "int"}], "description": "Sets the priority value of the Joint.", "name": "joint_set_solver_priority", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}], "description": "Returns position of the joint in the local space of body a of the joint.", "name": "pin_joint_get_local_a", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}], "description": "Returns position of the joint in the local space of body b of the joint.", "name": "pin_joint_get_local_b", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Gets a pin_joint parameter (see PIN_JOINT* constants).", "name": "pin_joint_get_param", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "local_A", "type": "Vector3"}], "description": "Sets position of the joint in the local space of body a of the joint.", "name": "pin_joint_set_local_a", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "local_B", "type": "Vector3"}], "description": "Sets position of the joint in the local space of body b of the joint.", "name": "pin_joint_set_local_b", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "Sets a pin_joint parameter (see PIN_JOINT* constants).", "name": "pin_joint_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "active", "type": "bool"}], "description": "Activates or deactivates the 3D physics engine.", "name": "set_active", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}], "description": "Creates a shape of type SHAPE_*. Does not assign it to a body or an area. To do so, you must use [method area_set_shape] or [method body_set_shape].", "name": "shape_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "RID"}], "description": "Returns the shape data.", "name": "shape_get_data", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "RID"}], "description": "Returns the type of shape (see SHAPE_* constants).", "name": "shape_get_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "shape", "type": "RID"}, {"description": "", "index": "1", "name": "data", "type": "Variant"}], "description": "Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].", "name": "shape_set_data", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Gets a slider_joint parameter (see SLIDER_JOINT* constants).", "name": "slider_joint_get_param", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "joint", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "Gets a slider_joint parameter (see SLIDER_JOINT* constants).", "name": "slider_joint_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].", "name": "space_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "space", "type": "RID"}], "description": "Returns the state of a space, a [PhysicsDirectSpaceState]. This object can be used to make collision/intersection queries.", "name": "space_get_direct_state", "return_": {"description": "", "type": "PhysicsDirectSpaceState"}}, {"arguments": [{"description": "", "index": "0", "name": "space", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}], "description": "Returns the value of a space parameter.", "name": "space_get_param", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "space", "type": "RID"}], "description": "Returns whether the space is active.", "name": "space_is_active", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "space", "type": "RID"}, {"description": "", "index": "1", "name": "active", "type": "bool"}], "description": "Marks a space as active. It will not have an effect, unless it is assigned to an area or body.", "name": "space_set_active", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "space", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.", "name": "space_set_param", "return_": {"description": "", "type": "void"}}], "name": "PhysicsServer", "signals": [], "tutorials": {"links": []}}, "PhysicsShapeQueryParameters": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [{"description": "", "getter": "is_collide_with_areas_enabled", "name": "collide_with_areas", "setter": "set_collide_with_areas", "type": "bool"}, {"description": "", "getter": "is_collide_with_bodies_enabled", "name": "collide_with_bodies", "setter": "set_collide_with_bodies", "type": "bool"}, {"description": "", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}, {"description": "", "getter": "get_exclude", "name": "exclude", "setter": "set_exclude", "type": "Array"}, {"description": "", "getter": "get_margin", "name": "margin", "setter": "set_margin", "type": "float"}, {"description": "", "getter": "get_shape_rid", "name": "shape_rid", "setter": "set_shape_rid", "type": "RID"}, {"description": "", "getter": "get_transform", "name": "transform", "setter": "set_transform", "type": "Transform"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "shape", "type": "Resource"}], "description": "", "name": "set_shape", "return_": {"description": "", "type": "void"}}], "name": "PhysicsShapeQueryParameters", "signals": [], "tutorials": {"links": []}}, "PhysicsShapeQueryResult": {"brief_description": "Result of a shape query in Physics2DServer.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "", "name": "get_result_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_result_object", "qualifiers": "const", "return_": {"description": "", "type": "Object"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_result_object_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_result_object_shape", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_result_rid", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}], "name": "PhysicsShapeQueryResult", "signals": [], "tutorials": {"links": []}}, "PinJoint": {"brief_description": "Pin Joint for 3D Shapes.", "category": "Core", "constants": [{"description": "The force with which the pinned objects stay in positional relation to each other.\n\t\t\tThe higher, the stronger.", "enum": "Param", "name": "PARAM_BIAS", "value": "0"}, {"description": "The force with which the pinned objects stay in velocity relation to each other.\n\t\t\tThe higher, the stronger.", "enum": "Param", "name": "PARAM_DAMPING", "value": "1"}, {"description": "If above 0, this value is the maximum value for an impulse that this Joint produces.", "enum": "Param", "name": "PARAM_IMPULSE_CLAMP", "value": "2"}], "demos": {"links": []}, "description": "Pin Joint for 3D Rigid Bodies. It pins 2 bodies (rigid or static) together.", "inherits": "Joint", "members": [{"description": "The force with which the pinned objects stay in positional relation to each other.\n\t\t\tThe higher, the stronger.", "getter": "get_param", "name": "params/bias", "setter": "set_param", "type": "float"}, {"description": "The force with which the pinned objects stay in velocity relation to each other.\n\t\t\tThe higher, the stronger.", "getter": "get_param", "name": "params/damping", "setter": "set_param", "type": "float"}, {"description": "If above 0, this value is the maximum value for an impulse that this Joint produces.", "getter": "get_param", "name": "params/impulse_clamp", "setter": "set_param", "type": "float"}], "methods": [], "name": "PinJoint", "signals": [], "tutorials": {"links": []}}, "PinJoint2D": {"brief_description": "Pin Joint for 2D Shapes.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Pin Joint for 2D Rigid Bodies. It pins two bodies (rigid or static) together.", "inherits": "Joint2D", "members": [{"description": "The higher this value, the more the bond to the pinned partner can flex.", "getter": "get_softness", "name": "softness", "setter": "set_softness", "type": "float"}], "methods": [], "name": "PinJoint2D", "signals": [], "tutorials": {"links": []}}, "Plane": {"brief_description": "Plane in hessian form.", "category": "Built-In Types", "constants": [{"description": "", "name": "PLANE_YZ", "value": "Plane( 1, 0, 0, 0 )"}, {"description": "", "name": "PLANE_XZ", "value": "Plane( 0, 1, 0, 0 )"}, {"description": "", "name": "PLANE_XY", "value": "Plane( 0, 0, 1, 0 )"}], "demos": {"links": []}, "description": "Plane represents a normalized plane equation. Basically, \"normal\" is the normal of the plane (a,b,c normalized), and \"d\" is the distance from the origin to the plane (in the direction of \"normal\"). \"Over\" or \"Above\" the plane is considered the side of the plane towards where the normal is pointing.", "members": [{"description": "", "getter": "", "name": "d", "setter": "", "type": "float"}, {"description": "", "getter": "", "name": "normal", "setter": "", "type": "Vector3"}, {"description": "", "getter": "", "name": "x", "setter": "", "type": "float"}, {"description": "", "getter": "", "name": "y", "setter": "", "type": "float"}, {"description": "", "getter": "", "name": "z", "setter": "", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "a", "type": "float"}, {"description": "", "index": "1", "name": "b", "type": "float"}, {"description": "", "index": "2", "name": "c", "type": "float"}, {"description": "", "index": "3", "name": "d", "type": "float"}], "description": "Creates a plane from the four parameters \"a\", \"b\", \"c\" and \"d\".", "name": "Plane", "return_": {"description": "", "type": "Plane"}}, {"arguments": [{"description": "", "index": "0", "name": "v1", "type": "Vector3"}, {"description": "", "index": "1", "name": "v2", "type": "Vector3"}, {"description": "", "index": "2", "name": "v3", "type": "Vector3"}], "description": "Creates a plane from three points.", "name": "Plane", "return_": {"description": "", "type": "Plane"}}, {"arguments": [{"description": "", "index": "0", "name": "normal", "type": "Vector3"}, {"description": "", "index": "1", "name": "d", "type": "float"}], "description": "Creates a plane from the normal and the plane's distance to the origin.", "name": "Plane", "return_": {"description": "", "type": "Plane"}}, {"arguments": [], "description": "Returns the center of the plane.", "name": "center", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector3"}], "description": "Returns the shortest distance from the plane to the position \"point\".", "name": "distance_to", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns a point on the plane.", "name": "get_any_point", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector3"}, {"default": "0.00001", "description": "", "index": "1", "name": "epsilon", "type": "float"}], "description": "Returns true if \"point\" is inside the plane (by a very minimum threshold).", "name": "has_point", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Plane"}, {"description": "", "index": "1", "name": "c", "type": "Plane"}], "description": "Returns the intersection point of the three planes \"b\", \"c\" and this plane. If no intersection is found null is returned.", "name": "intersect_3", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}, {"description": "", "index": "1", "name": "dir", "type": "Vector3"}], "description": "Returns the intersection point of a ray consisting of the position \"from\" and the direction normal \"dir\" with this plane. If no intersection is found null is returned.", "name": "intersects_ray", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "begin", "type": "Vector3"}, {"description": "", "index": "1", "name": "end", "type": "Vector3"}], "description": "Returns the intersection point of a segment from position \"begin\" to position \"end\" with this plane. If no intersection is found null is returned.", "name": "intersects_segment", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector3"}], "description": "Returns true if \"point\" is located above the plane.", "name": "is_point_over", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns a copy of the plane, normalized.", "name": "normalized", "return_": {"description": "", "type": "Plane"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector3"}], "description": "Returns the orthogonal projection of point \"p\" into a point in the plane.", "name": "project", "return_": {"description": "", "type": "Vector3"}}], "name": "Plane", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/math/index.html"}]}}, "PlaneMesh": {"brief_description": "Class representing a planar [PrimitiveMesh].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Class representing a planar [PrimitiveMesh]. This flat mesh does not have a thickness.", "inherits": "PrimitiveMesh", "members": [{"description": "Size of the generated plane. Defaults to (2.0, 2.0).", "getter": "get_size", "name": "size", "setter": "set_size", "type": "Vector2"}, {"description": "Number of subdivision along the z-axis. Defaults to 0.", "getter": "get_subdivide_depth", "name": "subdivide_depth", "setter": "set_subdivide_depth", "type": "int"}, {"description": "Number of subdivision along the x-axis. Defaults to 0.", "getter": "get_subdivide_width", "name": "subdivide_width", "setter": "set_subdivide_width", "type": "int"}], "methods": [], "name": "PlaneMesh", "signals": [], "tutorials": {"links": []}}, "PlaneShape": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Shape", "members": [{"description": "", "getter": "get_plane", "name": "plane", "setter": "set_plane", "type": "Plane"}], "methods": [], "name": "PlaneShape", "signals": [], "tutorials": {"links": []}}, "Polygon2D": {"brief_description": "A 2D polygon.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.", "inherits": "Node2D", "members": [{"description": "If [code]true[/code] polygon edges will be anti-aliased. Default value: [code]false[/code].", "getter": "get_antialiased", "name": "antialiased", "setter": "set_antialiased", "type": "bool"}, {"description": "", "getter": "_get_bones", "name": "bones", "setter": "_set_bones", "type": "Array"}, {"description": "The polygon's fill color. If [code]texture[/code] is defined, it will be multiplied by this color. It will also be the default color for vertices not set in [code]vertex_colors[/code].", "getter": "get_color", "name": "color", "setter": "set_color", "type": "Color"}, {"description": "Added padding applied to the bounding box when using [code]invert[/code]. Setting this value too small may result in a \"Bad Polygon\" error. Default value: [code]100[/code].", "getter": "get_invert_border", "name": "invert_border", "setter": "set_invert_border", "type": "float"}, {"description": "If [code]true[/code] polygon will be inverted, containing the area outside the defined points and extending to the [code]invert_border[/code]. Default value: [code]false[/code].", "getter": "get_invert", "name": "invert_enable", "setter": "set_invert", "type": "bool"}, {"description": "The offset applied to each vertex.", "getter": "get_offset", "name": "offset", "setter": "set_offset", "type": "Vector2"}, {"description": "The polygon's list of vertices. The final point will be connected to the first.", "getter": "get_polygon", "name": "polygon", "setter": "set_polygon", "type": "PoolVector2Array"}, {"description": "", "getter": "get_skeleton", "name": "skeleton", "setter": "set_skeleton", "type": "NodePath"}, {"description": "", "getter": "get_splits", "name": "splits", "setter": "set_splits", "type": "PoolIntArray"}, {"description": "The polygon's fill texture. Use [code]uv[/code] to set texture coordinates.", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}, {"description": "Amount to offset the polygon's [code]texture[/code]. If [code](0, 0)[/code] the texture's origin (its top-left corner) will be placed at the polygon's [code]position[/code].", "getter": "get_texture_offset", "name": "texture_offset", "setter": "set_texture_offset", "type": "Vector2"}, {"description": "The texture's rotation in radians.", "getter": "get_texture_rotation_degrees", "name": "texture_rotation", "setter": "set_texture_rotation_degrees", "type": "float"}, {"description": "The texture's rotation in degrees.", "getter": "get_texture_rotation_degrees", "name": "texture_rotation_degrees", "setter": "set_texture_rotation_degrees", "type": "float"}, {"description": "Amount to multiply the [code]uv[/code] coordinates when using a [code]texture[/code]. Larger values make the texture smaller, and vice versa.", "getter": "get_texture_scale", "name": "texture_scale", "setter": "set_texture_scale", "type": "Vector2"}, {"description": "Texture coordinates for each vertex of the polygon. There should be one [code]uv[/code] per polygon vertex. If there are fewer, undefined vertices will use [code](0, 0)[/code].", "getter": "get_uv", "name": "uv", "setter": "set_uv", "type": "PoolVector2Array"}, {"description": "Color for each vertex. Colors are interpolated between vertices, resulting in smooth gradients. There should be one per polygon vertex. If there are fewer, undefined vertices will use [code]color[/code].", "getter": "get_vertex_colors", "name": "vertex_colors", "setter": "set_vertex_colors", "type": "PoolColorArray"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "path", "type": "NodePath"}, {"description": "", "index": "1", "name": "weights", "type": "PoolRealArray"}], "description": "", "name": "add_bone", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "clear_bones", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "", "name": "erase_bone", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_bone_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "", "name": "get_bone_path", "qualifiers": "const", "return_": {"description": "", "type": "NodePath"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "", "name": "get_bone_weights", "qualifiers": "const", "return_": {"description": "", "type": "PoolRealArray"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "path", "type": "NodePath"}], "description": "", "name": "set_bone_path", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}, {"description": "", "index": "1", "name": "weights", "type": "PoolRealArray"}], "description": "", "name": "set_bone_weights", "return_": {"description": "", "type": "void"}}], "name": "Polygon2D", "signals": [], "tutorials": {"links": []}}, "PolygonPathFinder": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector2"}, {"description": "", "index": "1", "name": "to", "type": "Vector2"}], "description": "", "name": "find_path", "return_": {"description": "", "type": "PoolVector2Array"}}, {"arguments": [], "description": "", "name": "get_bounds", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}], "description": "", "name": "get_closest_point", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector2"}, {"description": "", "index": "1", "name": "to", "type": "Vector2"}], "description": "", "name": "get_intersections", "qualifiers": "const", "return_": {"description": "", "type": "PoolVector2Array"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_point_penalty", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}], "description": "", "name": "is_point_inside", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "penalty", "type": "float"}], "description": "", "name": "set_point_penalty", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "1", "name": "connections", "type": "PoolIntArray"}], "description": "", "name": "setup", "return_": {"description": "", "type": "void"}}], "name": "PolygonPathFinder", "signals": [], "tutorials": {"links": []}}, "PoolByteArray": {"brief_description": "Raw byte array.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "Raw byte array. Contains bytes. Optimized for memory usage, can't fragment the memory. Note that this type is passed by value and not by reference.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Array"}], "description": "Create from a generic array.", "name": "PoolByteArray", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [{"description": "", "index": "0", "name": "byte", "type": "int"}], "description": "Append an element at the end of the array (alias of [method push_back]).", "name": "append", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "array", "type": "PoolByteArray"}], "description": "Append a [code]PoolByteArray[/code] at the end of this array.", "name": "append_array", "return_": {}}, {"arguments": [{"default": "0", "description": "", "index": "0", "name": "compression_mode", "type": "int"}], "description": "Returns a new [code]PoolByteArray[/code] with the data compressed. Set the compression mode using one of [File]'s COMPRESS_* constants.", "name": "compress", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [{"description": "", "index": "0", "name": "buffer_size", "type": "int"}, {"default": "0", "description": "", "index": "1", "name": "compression_mode", "type": "int"}], "description": "Returns a new [code]PoolByteArray[/code] with the data decompressed. Set buffer_size to the size of the uncompressed data. Set the compression mode using one of [File]'s COMPRESS_* constants.", "name": "decompress", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [], "description": "Returns a copy of the array's contents as [String]. Fast alternative to [method PoolByteArray.get_string_from_utf8] if the content is ASCII-only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use [method PoolByteArray.get_string_from_utf8].", "name": "get_string_from_ascii", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns a copy of the array's contents as [String]. Slower than [method PoolByteArray.get_string_from_ascii] but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred.", "name": "get_string_from_utf8", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "byte", "type": "int"}], "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).", "name": "insert", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Reverse the order of the elements in the array (so first element will now be the last).", "name": "invert", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "byte", "type": "int"}], "description": "Append an element at the end of the array.", "name": "push_back", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Remove an element from the array by index.", "name": "remove", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.", "name": "resize", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "byte", "type": "int"}], "description": "Change the byte at the given index.", "name": "set", "return_": {}}, {"arguments": [], "description": "Return the size of the array.", "name": "size", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "int"}, {"description": "", "index": "1", "name": "to", "type": "int"}], "description": "Returns the slice of the [code]PoolByteArray[/code] between indices (inclusive) as a new [code]PoolByteArray[/code].  Any negative index is considered to be from the end of the array.", "name": "subarray", "return_": {"description": "", "type": "PoolByteArray"}}], "name": "PoolByteArray", "signals": [], "tutorials": {"links": []}}, "PoolColorArray": {"brief_description": "Array of Colors", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "Array of Color, Contains colors. Optimized for memory usage, can't fragment the memory. Note that this type is passed by value and not by reference.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Array"}], "description": "Create from a generic array.", "name": "PoolColorArray", "return_": {"description": "", "type": "PoolColorArray"}}, {"arguments": [{"description": "", "index": "0", "name": "color", "type": "Color"}], "description": "Append an element at the end of the array (alias of [method push_back]).", "name": "append", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "array", "type": "PoolColorArray"}], "description": "Append a [code]PoolColorArray[/code] at the end of this array.", "name": "append_array", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).", "name": "insert", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Reverse the order of the elements in the array (so first element will now be the last).", "name": "invert", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "color", "type": "Color"}], "description": "Append a value to the array.", "name": "push_back", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Remove an element from the array by index.", "name": "remove", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.", "name": "resize", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Change the [Color] at the given index.", "name": "set", "return_": {}}, {"arguments": [], "description": "Return the size of the array.", "name": "size", "return_": {"description": "", "type": "int"}}], "name": "PoolColorArray", "signals": [], "tutorials": {"links": []}}, "PoolIntArray": {"brief_description": "Integer Array.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "Integer Array. Contains integers. Optimized for memory usage, can't fragment the memory. Note that this type is passed by value and not by reference.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Array"}], "description": "Create from a generic array.", "name": "PoolIntArray", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "integer", "type": "int"}], "description": "Append an element at the end of the array (alias of [method push_back]).", "name": "append", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "array", "type": "PoolIntArray"}], "description": "Append an [code]PoolIntArray[/code] at the end of this array.", "name": "append_array", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "integer", "type": "int"}], "description": "Insert a new int at a given position in the array. The position must be valid, or at the end of the array (pos==size()).", "name": "insert", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Reverse the order of the elements in the array (so first element will now be the last).", "name": "invert", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "integer", "type": "int"}], "description": "Append a value to the array.", "name": "push_back", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Remove an element from the array by index.", "name": "remove", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.", "name": "resize", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "integer", "type": "int"}], "description": "Change the int at the given index.", "name": "set", "return_": {}}, {"arguments": [], "description": "Return the array size.", "name": "size", "return_": {"description": "", "type": "int"}}], "name": "PoolIntArray", "signals": [], "tutorials": {"links": []}}, "PoolRealArray": {"brief_description": "Real Array.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "Real Array. Array of floating point values. Can only contain floats. Optimized for memory usage, can't fragment the memory. Note that this type is passed by value and not by reference.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Array"}], "description": "Create from a generic array.", "name": "PoolRealArray", "return_": {"description": "", "type": "PoolRealArray"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}], "description": "Append an element at the end of the array (alias of [method push_back]).", "name": "append", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "array", "type": "PoolRealArray"}], "description": "Append an [RealArray] at the end of this array.", "name": "append_array", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "float"}], "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).", "name": "insert", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Reverse the order of the elements in the array (so first element will now be the last).", "name": "invert", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}], "description": "Append an element at the end of the array.", "name": "push_back", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Remove an element from the array by index.", "name": "remove", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.", "name": "resize", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "float"}], "description": "Change the float at the given index.", "name": "set", "return_": {}}, {"arguments": [], "description": "Return the size of the array.", "name": "size", "return_": {"description": "", "type": "int"}}], "name": "PoolRealArray", "signals": [], "tutorials": {"links": []}}, "PoolStringArray": {"brief_description": "String Array.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "String Array. Array of strings. Can only contain strings. Optimized for memory usage, can't fragment the memory. Note that this type is passed by value and not by reference.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Array"}], "description": "Create from a generic array.", "name": "PoolStringArray", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "string", "type": "String"}], "description": "Append an element at the end of the array (alias of [method push_back]).", "name": "append", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "array", "type": "PoolStringArray"}], "description": "Append an [StringArray] at the end of this array.", "name": "append_array", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "string", "type": "String"}], "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).", "name": "insert", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Reverse the order of the elements in the array (so first element will now be the last).", "name": "invert", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "delimiter", "type": "String"}], "description": "Returns a [String] with each element of the array joined with the delimiter.", "name": "join", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "string", "type": "String"}], "description": "Append a string element at end of the array.", "name": "push_back", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Remove an element from the array by index.", "name": "remove", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.", "name": "resize", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "string", "type": "String"}], "description": "Change the [String] at the given index.", "name": "set", "return_": {}}, {"arguments": [], "description": "Return the size of the array.", "name": "size", "return_": {"description": "", "type": "int"}}], "name": "PoolStringArray", "signals": [], "tutorials": {"links": []}}, "PoolVector2Array": {"brief_description": "An Array of Vector2.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "An Array specifically designed to hold Vector2. Note that this type is passed by value and not by reference.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Array"}], "description": "Construct a new [code]PoolVector2Array[/code]. Optionally, you can pass in an Array that will be converted.", "name": "PoolVector2Array", "return_": {"description": "", "type": "PoolVector2Array"}}, {"arguments": [{"description": "", "index": "0", "name": "vector2", "type": "Vector2"}], "description": "Append an element at the end of the array (alias of [method push_back]).", "name": "append", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "array", "type": "PoolVector2Array"}], "description": "Append an [code]PoolVector2Array[/code] at the end of this array.", "name": "append_array", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "vector2", "type": "Vector2"}], "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).", "name": "insert", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Reverse the order of the elements in the array (so first element will now be the last).", "name": "invert", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "vector2", "type": "Vector2"}], "description": "Insert a [Vector2] at the end.", "name": "push_back", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Remove an element from the array by index.", "name": "remove", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.", "name": "resize", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "vector2", "type": "Vector2"}], "description": "Change the [Vector2] at the given index.", "name": "set", "return_": {}}, {"arguments": [], "description": "Return the size of the array.", "name": "size", "return_": {"description": "", "type": "int"}}], "name": "PoolVector2Array", "signals": [], "tutorials": {"links": []}}, "PoolVector3Array": {"brief_description": "An Array of Vector3.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "An Array specifically designed to hold Vector3. Note that this type is passed by value and not by reference.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Array"}], "description": "Construct a new PoolVector3Array. Optionally, you can pass in an Array that will be converted.", "name": "PoolVector3Array", "return_": {"description": "", "type": "PoolVector3Array"}}, {"arguments": [{"description": "", "index": "0", "name": "vector3", "type": "Vector3"}], "description": "Append an element at the end of the array (alias of [method push_back]).", "name": "append", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "array", "type": "PoolVector3Array"}], "description": "Append an [code]PoolVector3Array[/code] at the end of this array.", "name": "append_array", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "vector3", "type": "Vector3"}], "description": "Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).", "name": "insert", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Reverse the order of the elements in the array (so first element will now be the last).", "name": "invert", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "vector3", "type": "Vector3"}], "description": "Insert a [Vector3] at the end.", "name": "push_back", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Remove an element from the array by index.", "name": "remove", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Set the size of the array. If the array is grown reserve elements at the end of the array. If the array is shrunk truncate the array to the new size.", "name": "resize", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "vector3", "type": "Vector3"}], "description": "Change the [Vector3] at the given index.", "name": "set", "return_": {}}, {"arguments": [], "description": "Return the size of the array.", "name": "size", "return_": {"description": "", "type": "int"}}], "name": "PoolVector3Array", "signals": [], "tutorials": {"links": []}}, "Popup": {"brief_description": "Base container control for popups and dialogs.", "category": "Core", "constants": [{"description": "Notification sent right after the popup is shown.", "name": "NOTIFICATION_POST_POPUP", "value": "80"}, {"description": "Notification sent right after the popup is hidden.", "name": "NOTIFICATION_POPUP_HIDE", "value": "81"}], "demos": {"links": []}, "description": "Popup is a base [Control] used to show dialogs and popups. It's a subwindow and modal by default (see [Control]) and has helpers for custom popup behavior.", "inherits": "Control", "members": [{"description": "If [code]true[/code] the popup will not be hidden when a click event occurs outside of it, or when it receives the [code]ui_cancel[/code] action event.", "getter": "is_exclusive", "name": "popup_exclusive", "setter": "set_exclusive", "type": "bool"}], "methods": [{"arguments": [{"default": "Rect2( 0, 0, 0, 0 )", "description": "", "index": "0", "name": "bounds", "type": "Rect2"}], "description": "Popup (show the control in modal form).", "name": "popup", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "Vector2( 0, 0 )", "description": "", "index": "0", "name": "size", "type": "Vector2"}], "description": "Popup (show the control in modal form) in the center of the screen, at the current size, or at a size determined by \"size\".", "name": "popup_centered", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "Vector2( 0, 0 )", "description": "", "index": "0", "name": "minsize", "type": "Vector2"}], "description": "Popup (show the control in modal form) in the center of the screen, ensuring the size is never smaller than [code]minsize[/code].", "name": "popup_centered_minsize", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "0.75", "description": "", "index": "0", "name": "ratio", "type": "float"}], "description": "Popup (show the control in modal form) in the center of the screen, scaled at a ratio of size of the screen.", "name": "popup_centered_ratio", "return_": {"description": "", "type": "void"}}], "name": "Popup", "signals": [{"arguments": [], "description": "This signal is emitted when a popup is about to be shown. (often used in [PopupMenu] for clearing the list of options and creating a new one according to the current context).", "name": "about_to_show"}, {"arguments": [], "description": "This signal is emitted when a popup is hidden.", "name": "popup_hide"}], "tutorials": {"links": []}}, "PopupDialog": {"brief_description": "Base class for Popup Dialogs.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "PopupDialog is a base class for popup dialogs, along with [WindowDialog].", "inherits": "Popup", "members": [], "methods": [], "name": "PopupDialog", "signals": [], "tutorials": {"links": []}}, "PopupMenu": {"brief_description": "PopupMenu displays a list of options.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "PopupMenu is the typical Control that displays a list of options. They are popular in toolbars or context menus.", "inherits": "Popup", "members": [{"description": "", "getter": "is_hide_on_checkable_item_selection", "name": "hide_on_checkable_item_selection", "setter": "set_hide_on_checkable_item_selection", "type": "bool"}, {"description": "", "getter": "is_hide_on_item_selection", "name": "hide_on_item_selection", "setter": "set_hide_on_item_selection", "type": "bool"}, {"description": "", "getter": "is_hide_on_state_item_selection", "name": "hide_on_state_item_selection", "setter": "set_hide_on_state_item_selection", "type": "bool"}, {"description": "Sets the delay time for the submenu item to popup on mouse hovering. If the popup menu is added as a child of another (acting as a submenu), it will inherit the delay time of the parent menu item. Default value: [code]0.3[/code] seconds.", "getter": "get_submenu_popup_delay", "name": "submenu_popup_delay", "setter": "set_submenu_popup_delay", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "label", "type": "String"}, {"default": "-1", "description": "", "index": "1", "name": "id", "type": "int"}, {"default": "0", "description": "", "index": "2", "name": "accel", "type": "int"}], "description": "Add a new checkable item with text \"label\". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.", "name": "add_check_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "shortcut", "type": "ShortCut"}, {"default": "-1", "description": "", "index": "1", "name": "id", "type": "int"}, {"default": "false", "description": "", "index": "2", "name": "global", "type": "bool"}], "description": "", "name": "add_check_shortcut", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "Texture"}, {"description": "", "index": "1", "name": "label", "type": "String"}, {"default": "-1", "description": "", "index": "2", "name": "id", "type": "int"}, {"default": "0", "description": "", "index": "3", "name": "accel", "type": "int"}], "description": "Add a new checkable item with text \"label\" and icon \"texture\". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be\n\t\t\t\tcreated from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.", "name": "add_icon_check_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "Texture"}, {"description": "", "index": "1", "name": "shortcut", "type": "ShortCut"}, {"default": "-1", "description": "", "index": "2", "name": "id", "type": "int"}, {"default": "false", "description": "", "index": "3", "name": "global", "type": "bool"}], "description": "", "name": "add_icon_check_shortcut", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "Texture"}, {"description": "", "index": "1", "name": "label", "type": "String"}, {"default": "-1", "description": "", "index": "2", "name": "id", "type": "int"}, {"default": "0", "description": "", "index": "3", "name": "accel", "type": "int"}], "description": "Add a new item with text \"label\" and icon \"texture\". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.", "name": "add_icon_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "Texture"}, {"description": "", "index": "1", "name": "shortcut", "type": "ShortCut"}, {"default": "-1", "description": "", "index": "2", "name": "id", "type": "int"}, {"default": "false", "description": "", "index": "3", "name": "global", "type": "bool"}], "description": "", "name": "add_icon_shortcut", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "label", "type": "String"}, {"default": "-1", "description": "", "index": "1", "name": "id", "type": "int"}, {"default": "0", "description": "", "index": "2", "name": "accel", "type": "int"}], "description": "Add a new item with text \"label\". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.", "name": "add_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "label", "type": "String"}, {"default": "-1", "description": "", "index": "1", "name": "id", "type": "int"}, {"default": "0", "description": "", "index": "2", "name": "accel", "type": "int"}], "description": "The same as [method add_check_item] but the inserted item will look as a radio button. Remember this is just cosmetic and you have to add the logic for checking/unchecking items in radio groups.", "name": "add_radio_check_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "shortcut", "type": "ShortCut"}, {"default": "-1", "description": "", "index": "1", "name": "id", "type": "int"}, {"default": "false", "description": "", "index": "2", "name": "global", "type": "bool"}], "description": "", "name": "add_radio_check_shortcut", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "\"\"", "description": "", "index": "0", "name": "label", "type": "String"}], "description": "Add a separator between items. Separators also occupy an index.", "name": "add_separator", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "shortcut", "type": "ShortCut"}, {"default": "-1", "description": "", "index": "1", "name": "id", "type": "int"}, {"default": "false", "description": "", "index": "2", "name": "global", "type": "bool"}], "description": "", "name": "add_shortcut", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "label", "type": "String"}, {"description": "", "index": "1", "name": "submenu", "type": "String"}, {"default": "-1", "description": "", "index": "2", "name": "id", "type": "int"}], "description": "Adds an item with a submenu. The submenu is the name of a child PopupMenu node that would be shown when the item is clicked. An id can optionally be provided, but if is isn't provided, one will be created from the index.", "name": "add_submenu_item", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clear the popup menu, in effect removing all items.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the accelerator of the item at index \"idx\". Accelerators are special combinations of keys that activate the item, no matter which control is focused.", "name": "get_item_accelerator", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the amount of items.", "name": "get_item_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the icon of the item at index \"idx\".", "name": "get_item_icon", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the id of the item at index \"idx\".", "name": "get_item_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Find and return the index of the item containing a given id.", "name": "get_item_index", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the metadata of an item, which might be of any type. You can set it with [method set_item_metadata], which provides a simple way of assigning context data to items.", "name": "get_item_metadata", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_item_shortcut", "qualifiers": "const", "return_": {"description": "", "type": "ShortCut"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the submenu name of the item at index \"idx\".", "name": "get_item_submenu", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return the text of the item at index \"idx\".", "name": "get_item_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_item_tooltip", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "is_hide_on_window_lose_focus", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return whether the item at index \"idx\" is checkable in some way, i.e., whether has a checkbox or radio button. Note that checkable items just display a checkmark or radio button, but don't have any built-in checking behavior and must be checked/unchecked manually.", "name": "is_item_checkable", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return whether the item at index \"idx\" is checked.", "name": "is_item_checked", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return whether the item at index \"idx\" is disabled. When it is disabled it can't be selected, or its action invoked.", "name": "is_item_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return whether the item at index \"idx\" has radio-button-style checkability. Remember this is just cosmetic and you have to add the logic for checking/unchecking items in radio groups.", "name": "is_item_radio_checkable", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Return whether the item is a separator. If it is, it would be displayed as a line.", "name": "is_item_separator", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "is_item_shortcut_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Removes the item at index \"idx\" from the menu. Note that the indexes of items after the removed item are going to be shifted by one.", "name": "remove_item", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "", "name": "set_hide_on_window_lose_focus", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "accel", "type": "int"}], "description": "Set the accelerator of the item at index \"idx\". Accelerators are special combinations of keys that activate the item, no matter which control is focused.", "name": "set_item_accelerator", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "Set whether the item at index \"idx\" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.", "name": "set_item_as_checkable", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "The same as [method set_item_as_checkable] but placing a radio button in case of enabling. If used for disabling, it's the same.\n\t\t\t\tRemember this is just cosmetic and you have to add the logic for checking/unchecking items in radio groups.", "name": "set_item_as_radio_checkable", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "Mark the item at index \"idx\" as a separator, which means that it would be displayed as a mere line.", "name": "set_item_as_separator", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "checked", "type": "bool"}], "description": "Set the checkstate status of the item at index \"idx\".", "name": "set_item_checked", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "disabled", "type": "bool"}], "description": "Sets whether the item at index \"idx\" is disabled or not. When it is disabled it can't be selected, or its action invoked.", "name": "set_item_disabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "icon", "type": "Texture"}], "description": "", "name": "set_item_icon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "Set the id of the item at index \"idx\".", "name": "set_item_id", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "metadata", "type": "Variant"}], "description": "Sets the metadata of an item, which might be of any type. You can later get it with [method get_item_metadata], which provides a simple way of assigning context data to items.", "name": "set_item_metadata", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "state", "type": "int"}], "description": "", "name": "set_item_multistate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "shortcut", "type": "ShortCut"}, {"default": "false", "description": "", "index": "2", "name": "global", "type": "bool"}], "description": "", "name": "set_item_shortcut", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "disabled", "type": "bool"}], "description": "", "name": "set_item_shortcut_disabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "submenu", "type": "String"}], "description": "Sets the submenu of the item at index \"idx\". The submenu is the name of a child PopupMenu node that would be shown when the item is clicked.", "name": "set_item_submenu", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "text", "type": "String"}], "description": "Set the text of the item at index \"idx\".", "name": "set_item_text", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "tooltip", "type": "String"}], "description": "", "name": "set_item_tooltip", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "toggle_item_checked", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "toggle_item_multistate", "return_": {"description": "", "type": "void"}}], "name": "PopupMenu", "signals": [{"arguments": [{"description": "", "index": "0", "name": "ID", "type": "int"}], "description": "This event is emitted when user navigated to an item of some id using [code]ui_up[/code] or [code]ui_down[/code] action.", "name": "id_focused"}, {"arguments": [{"description": "", "index": "0", "name": "ID", "type": "int"}], "description": "This event is emitted when an item of some id is pressed or its accelerator is activated.", "name": "id_pressed"}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "This event is emitted when an item of some index is pressed or its accelerator is activated.", "name": "index_pressed"}], "tutorials": {"links": []}}, "PopupPanel": {"brief_description": "Class for displaying popups with a panel background.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Class for displaying popups with a panel background. In some cases it might be simpler to use than [Popup], since it provides a configurable background. If you are making windows, better check [WindowDialog].", "inherits": "Popup", "members": [], "methods": [], "name": "PopupPanel", "signals": [], "tutorials": {"links": []}}, "Position2D": {"brief_description": "Generic 2D Position hint for editing.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Generic 2D Position hint for editing. It's just like a plain [Node2D] but displays as a cross in the 2D-Editor at all times.", "inherits": "Node2D", "members": [], "methods": [], "name": "Position2D", "signals": [], "tutorials": {"links": []}}, "Position3D": {"brief_description": "Generic 3D Position hint for editing.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Generic 3D Position hint for editing. It's just like a plain [Spatial] but displays as a cross in the 3D-Editor at all times.", "inherits": "Spatial", "members": [], "methods": [], "name": "Position3D", "signals": [], "tutorials": {"links": []}}, "PrimitiveMesh": {"brief_description": "Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.", "inherits": "Mesh", "members": [{"description": "", "getter": "get_custom_aabb", "name": "custom_aabb", "setter": "set_custom_aabb", "type": "AABB"}, {"description": "", "getter": "get_flip_faces", "name": "flip_faces", "setter": "set_flip_faces", "type": "bool"}, {"description": "The current [Material] of the primitive mesh.", "getter": "get_material", "name": "material", "setter": "set_material", "type": "Material"}], "methods": [{"arguments": [], "description": "", "name": "get_mesh_arrays", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}], "name": "PrimitiveMesh", "signals": [], "tutorials": {"links": []}}, "PrismMesh": {"brief_description": "Class representing a prism-shaped [PrimitiveMesh].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Class representing a prism-shaped [PrimitiveMesh].", "inherits": "PrimitiveMesh", "members": [{"description": "Displacement of the upper edge along the x-axis. 0.0 positions edge straight above the bottome left edge. Defaults to 0.5 (positioned on the midpoint).", "getter": "get_left_to_right", "name": "left_to_right", "setter": "set_left_to_right", "type": "float"}, {"description": "Size of the prism. Defaults to (2.0, 2.0, 2.0).", "getter": "get_size", "name": "size", "setter": "set_size", "type": "Vector3"}, {"description": "Number of added edge loops along the z-axis. Defaults to 0.", "getter": "get_subdivide_depth", "name": "subdivide_depth", "setter": "set_subdivide_depth", "type": "int"}, {"description": "Number of added edge loops along the y-axis. Defaults to 0.", "getter": "get_subdivide_height", "name": "subdivide_height", "setter": "set_subdivide_height", "type": "int"}, {"description": "Number of added edge loops along the x-axis. Defaults to 0.", "getter": "get_subdivide_width", "name": "subdivide_width", "setter": "set_subdivide_width", "type": "int"}], "methods": [], "name": "PrismMesh", "signals": [], "tutorials": {"links": []}}, "ProceduralSky": {"brief_description": "Type of [Sky] that is generated procedurally based on user input parameters.", "category": "Core", "constants": [{"description": "", "enum": "TextureSize", "name": "TEXTURE_SIZE_256", "value": "0"}, {"description": "", "enum": "TextureSize", "name": "TEXTURE_SIZE_512", "value": "1"}, {"description": "", "enum": "TextureSize", "name": "TEXTURE_SIZE_1024", "value": "2"}, {"description": "", "enum": "TextureSize", "name": "TEXTURE_SIZE_2048", "value": "3"}, {"description": "", "enum": "TextureSize", "name": "TEXTURE_SIZE_4096", "value": "4"}, {"description": "", "enum": "TextureSize", "name": "TEXTURE_SIZE_MAX", "value": "5"}], "demos": {"links": []}, "description": "ProceduralSky provides a way to create an effective background quickly by defining procedural parameters for the sun, the sky and the ground. The sky and ground are very similar, they are defined by a color at the horizon, another color, and finally an easing curve to interpolate between these two colors. Similarly the sun is described by a position in the sky, a color, and an easing curve. However, the sun also defines a minimum and maximum angle, these two values define at what distance the easing curve begins and ends from the sun, and thus end up defining the size of the sun in the sky.\n\t\tThe ProceduralSky is updated on the CPU after the parameters change and stored in a texture and then displayed as a background in the scene. This makes it relatively unsuitable for realtime updates during gameplay. But with a small texture size it is still feasible to update relatively frequently becuase it is updated on a background thread when multi-threading is available.", "inherits": "Sky", "members": [{"description": "Color of the ground at the bottom.", "getter": "get_ground_bottom_color", "name": "ground_bottom_color", "setter": "set_ground_bottom_color", "type": "Color"}, {"description": "How quickly the [member ground_horizon_color] fades into the [member ground_bottom_color].", "getter": "get_ground_curve", "name": "ground_curve", "setter": "set_ground_curve", "type": "float"}, {"description": "Amount of energy contribution from the ground.", "getter": "get_ground_energy", "name": "ground_energy", "setter": "set_ground_energy", "type": "float"}, {"description": "Color of the ground at the horizon.", "getter": "get_ground_horizon_color", "name": "ground_horizon_color", "setter": "set_ground_horizon_color", "type": "Color"}, {"description": "How quickly the [member sky_horizon_color] fades into the [member sky_top_color].", "getter": "get_sky_curve", "name": "sky_curve", "setter": "set_sky_curve", "type": "float"}, {"description": "Amount of energy contribution from the sky.", "getter": "get_sky_energy", "name": "sky_energy", "setter": "set_sky_energy", "type": "float"}, {"description": "Color of the sky at the horizon.", "getter": "get_sky_horizon_color", "name": "sky_horizon_color", "setter": "set_sky_horizon_color", "type": "Color"}, {"description": "Color of the sky at the top.", "getter": "get_sky_top_color", "name": "sky_top_color", "setter": "set_sky_top_color", "type": "Color"}, {"description": "Distance from center of sun where it fades out completely.", "getter": "get_sun_angle_max", "name": "sun_angle_max", "setter": "set_sun_angle_max", "type": "float"}, {"description": "Distance from sun where it goes from solid to starting to fade.", "getter": "get_sun_angle_min", "name": "sun_angle_min", "setter": "set_sun_angle_min", "type": "float"}, {"description": "Color of the sun.", "getter": "get_sun_color", "name": "sun_color", "setter": "set_sun_color", "type": "Color"}, {"description": "How quickly the sun fades away between [member sun_angle_min] and [member sun_angle_max]", "getter": "get_sun_curve", "name": "sun_curve", "setter": "set_sun_curve", "type": "float"}, {"description": "Amount of energy contribution from the sun.", "getter": "get_sun_energy", "name": "sun_energy", "setter": "set_sun_energy", "type": "float"}, {"description": "The suns height using polar coordinates.", "getter": "get_sun_latitude", "name": "sun_latitude", "setter": "set_sun_latitude", "type": "float"}, {"description": "The direction of the sun using polar coordinates.", "getter": "get_sun_longitude", "name": "sun_longitude", "setter": "set_sun_longitude", "type": "float"}, {"description": "Size of [Texture] that the ProceduralSky will generate.", "getter": "get_texture_size", "name": "texture_size", "setter": "set_texture_size", "type": "int"}], "methods": [], "name": "ProceduralSky", "signals": [], "tutorials": {"links": []}}, "ProgressBar": {"brief_description": "General purpose progress bar.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "General purpose progress bar. Shows fill percentage from right to left.", "inherits": "Range", "members": [{"description": "If [code]true[/code] the fill percentage is displayed on the bar. Default value: [code]true[/code].", "getter": "is_percent_visible", "name": "percent_visible", "setter": "set_percent_visible", "type": "bool"}], "methods": [], "name": "ProgressBar", "signals": [], "tutorials": {"links": []}}, "ProjectSettings": {"brief_description": "Contains global variables accessible from everywhere.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Contains global variables accessible from everywhere. Use \"ProjectSettings.get_setting(variable)\", \"ProjectSettings.set_setting(variable,value)\" or \"ProjectSettings.has_setting(variable)\" to access them. Variables stored in project.godot are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.", "inherits": "Object", "members": [{"description": "Scale the boot splash image to the full window length when engine starts (will leave it as default pixel size otherwise).", "getter": "", "name": "application/boot_splash/fullsize", "setter": "", "type": "bool"}, {"description": "Path to an image used for boot splash.", "getter": "", "name": "application/boot_splash/image", "setter": "", "type": "String"}, {"description": "This directory is used for storing persistent data (user:// filesystem). If a custom name is set, then system paths will be used to store this on Desktop (AppData on Windows, user ~/.config on Unixes, etc), else the Godot config folder is used. This name needs to be unique, and it's recommended to set it to something before publishing.\n\t\tthe \"use_custom_user_dir\" setting must be enabled for this to take effect.", "getter": "", "name": "application/config/custom_user_dir_name", "setter": "", "type": "String"}, {"description": "Icon used for the project, set when project loads. Exporters will use this icon when possible to.", "getter": "", "name": "application/config/icon", "setter": "", "type": "String"}, {"description": "Name of the project. It is used from both project manager and by the exporters. Overriding this as name.locale allows setting it in multiple languages.", "getter": "", "name": "application/config/name", "setter": "", "type": "String"}, {"description": "Allow the project to save to it's own custom user dir (in AppData on windows or ~/.config on unixes). This setting only works for desktop exporters. A name must be set in the \"custom_user_dir_name\" setting for this to take effect.", "getter": "", "name": "application/config/use_custom_user_dir", "setter": "", "type": "bool"}, {"description": "Disable printing to stderr on exported build.", "getter": "", "name": "application/run/disable_stderr", "setter": "", "type": "bool"}, {"description": "Disable printing to stdout on exported build.", "getter": "", "name": "application/run/disable_stdout", "setter": "", "type": "bool"}, {"description": "Force a delay between frames in the main loop. This may be useful if you plan to disable vsync.", "getter": "", "name": "application/run/frame_delay_msec", "setter": "", "type": "int"}, {"description": "Turn on low processor mode. This setting only works on desktops. The screen is not redrawn if nothing changes visually. This is meant for writing applications and editors, but is pretty useless (and can hurt performance) on games.", "getter": "", "name": "application/run/low_processor_mode", "setter": "", "type": "bool"}, {"description": "Amount of sleeping between frames when the low_processor_mode is enabled. This effectively reduces CPU usage when this mode is enabled.", "getter": "", "name": "application/run/low_processor_mode_sleep_usec", "setter": "", "type": "int"}, {"description": "Path to the main scene file that will be loaded when the project runs.", "getter": "", "name": "application/run/main_scene", "setter": "", "type": "String"}, {"description": "Audio buses will disable automatically when sound goes below a given DB threshold for a given time. This saves CPU as effects assigned to that bus will no longer do any processing.", "getter": "", "name": "audio/channel_disable_threshold_db", "setter": "", "type": "float"}, {"description": "Audio buses will disable automatically when sound goes below a given DB threshold for a given time. This saves CPU as effects assigned to that bus will no longer do any processing.", "getter": "", "name": "audio/channel_disable_time", "setter": "", "type": "float"}, {"description": "", "getter": "", "name": "audio/driver", "setter": "", "type": "String"}, {"description": "Mix rate used for audio. In general, it's better to not touch this and leave it to the host operating system.", "getter": "", "name": "audio/mix_rate", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "audio/output_latency", "setter": "", "type": "int"}, {"description": "Setting to harcode audio delay when playing video. Best to leave this untouched unless you know what you are doing.", "getter": "", "name": "audio/video_delay_compensation_ms", "setter": "", "type": "int"}, {"description": "Default compression level for gzip. Affects compressed scenes and resources.", "getter": "", "name": "compression/formats/gzip/compression_level", "setter": "", "type": "int"}, {"description": "Default compression level for zlib. Affects compressed scenes and resources.", "getter": "", "name": "compression/formats/zlib/compression_level", "setter": "", "type": "int"}, {"description": "Default compression level for zstd. Affects compressed scenes and resources.", "getter": "", "name": "compression/formats/zstd/compression_level", "setter": "", "type": "int"}, {"description": "Enable long distance matching in zstd.", "getter": "", "name": "compression/formats/zstd/long_distance_matching", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "compression/formats/zstd/window_log_size", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/constant_used_as_function", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/enable", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/function_conflicts_constant", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/function_conflicts_variable", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/function_may_yield", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/function_used_as_property", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/incompatible_ternary", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/integer_division", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/narrowing_conversion", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/property_used_as_function", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/return_value_discarded", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/standalone_expression", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/treat_warnings_as_errors", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unassigned_variable", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unassigned_variable_op_assign", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unreachable_code", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unsafe_call_argument", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unsafe_cast", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unsafe_method_access", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unsafe_property_access", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unused_argument", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unused_class_variable", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unused_signal", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/unused_variable", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/variable_conflicts_function", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/gdscript/warnings/void_assignment", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "debug/settings/crash_handler/message", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "debug/settings/fps/force_fps", "setter": "", "type": "int"}, {"description": "Maximum call stack allowed for debugging GDScript.", "getter": "", "name": "debug/settings/gdscript/max_call_stack", "setter": "", "type": "int"}, {"description": "Maximum amount of functions per frame allowed when profiling.", "getter": "", "name": "debug/settings/profiler/max_functions", "setter": "", "type": "int"}, {"description": "Print frames per second to stdout. Not very useful in general.", "getter": "", "name": "debug/settings/stdout/print_fps", "setter": "", "type": "bool"}, {"description": "Print more information to stdout when running. It shows info such as memory leaks, which scenes and resources are being loaded, etc.", "getter": "", "name": "debug/settings/stdout/verbose_stdout", "setter": "", "type": "bool"}, {"description": "Maximum call stack in visual scripting, to avoid infinite recursion.", "getter": "", "name": "debug/settings/visual_script/max_call_stack", "setter": "", "type": "int"}, {"description": "Custom image for the mouse cursor.", "getter": "", "name": "display/mouse_cursor/custom_image", "setter": "", "type": "String"}, {"description": "Hotspot for the custom mouse cursor image.", "getter": "", "name": "display/mouse_cursor/custom_image_hotspot", "setter": "", "type": "Vector2"}, {"description": "Allow per pixel transparency in a Desktop window. This affects performance if not needed, so leave it off.", "getter": "", "name": "display/window/allow_per_pixel_transparency", "setter": "", "type": "bool"}, {"description": "Allow HiDPI display on Windows and OSX. On Desktop Linux, this can't be enabled or disabled.", "getter": "", "name": "display/window/dpi/allow_hidpi", "setter": "", "type": "bool"}, {"description": "Force keep the screen on, so the screensaver does not take over. Works on Desktop and Mobile.", "getter": "", "name": "display/window/energy_saving/keep_screen_on", "setter": "", "type": "bool"}, {"description": "Default orientation for cell phone or tablet.", "getter": "", "name": "display/window/handheld/orientation", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "display/window/per_pixel_transparency", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "display/window/per_pixel_transparency_splash", "setter": "", "type": "bool"}, {"description": "Force the window to be always on top.", "getter": "", "name": "display/window/size/always_on_top", "setter": "", "type": "bool"}, {"description": "Force the window to be borderless.", "getter": "", "name": "display/window/size/borderless", "setter": "", "type": "bool"}, {"description": "Set the window to full screen when it starts.", "getter": "", "name": "display/window/size/fullscreen", "setter": "", "type": "bool"}, {"description": "Set the main window height. On desktop, this is the default window size. Stretch mode settings use this also as a reference when enabled.", "getter": "", "name": "display/window/size/height", "setter": "", "type": "int"}, {"description": "Allow the window to be resizable by default.", "getter": "", "name": "display/window/size/resizable", "setter": "", "type": "bool"}, {"description": "Test a different height for the window. The main use for this is to test with stretch modes.", "getter": "", "name": "display/window/size/test_height", "setter": "", "type": "int"}, {"description": "Test a different width for the window. The main use for this is to test with stretch modes.", "getter": "", "name": "display/window/size/test_width", "setter": "", "type": "int"}, {"description": "Set the main window width. On desktop, this is the default window size. Stretch mode settings use this also as a reference when enabled.", "getter": "", "name": "display/window/size/width", "setter": "", "type": "int"}, {"description": "Use VSync. Don't be stupid, don't turn this off.", "getter": "", "name": "display/window/vsync/use_vsync", "setter": "", "type": "bool"}, {"description": "Internal editor setting, don't touch.", "getter": "", "name": "editor/active", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "gui/common/default_scroll_deadzone", "setter": "", "type": "int"}, {"description": "Enable swap OK and Cancel buttons on dialogs. This is because Windows/MacOS/Desktop Linux may use them in different order, so the GUI swaps them depending on the host OS. Disable this behavior by turning this setting off.", "getter": "", "name": "gui/common/swap_ok_cancel", "setter": "", "type": "bool"}, {"description": "Use a custom theme resource, set a path to it here.", "getter": "", "name": "gui/theme/custom", "setter": "", "type": "String"}, {"description": "USe a custom default font resource, set a path to it here.", "getter": "", "name": "gui/theme/custom_font", "setter": "", "type": "String"}, {"description": "Make sure the theme used works with hidpi.", "getter": "", "name": "gui/theme/use_hidpi", "setter": "", "type": "bool"}, {"description": "Timer setting for incremental search in Tree, IntemList, etc. controls.", "getter": "", "name": "gui/timers/incremental_search_max_interval_msec", "setter": "", "type": "int"}, {"description": "Timer for detecting idle in the editor.", "getter": "", "name": "gui/timers/text_edit_idle_detect_sec", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "input/ui_accept", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_cancel", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_down", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_end", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_focus_next", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_focus_prev", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_home", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_left", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_page_down", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_page_up", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_right", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_select", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input/ui_up", "setter": "", "type": "Dictionary"}, {"description": "", "getter": "", "name": "input_devices/pointing/emulate_mouse_from_touch", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "input_devices/pointing/emulate_touch_from_mouse", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_1", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_10", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_11", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_12", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_13", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_14", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_15", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_16", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_17", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_18", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_19", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_2", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_20", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_3", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_4", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_5", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_6", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_7", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_8", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_physics/layer_9", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_1", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_10", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_11", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_12", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_13", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_14", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_15", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_16", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_17", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_18", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_19", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_2", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_20", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_3", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_4", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_5", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_6", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_7", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_8", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/2d_render/layer_9", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_1", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_10", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_11", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_12", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_13", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_14", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_15", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_16", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_17", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_18", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_19", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_2", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_20", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_3", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_4", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_5", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_6", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_7", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_8", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_physics/layer_9", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_1", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_10", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_11", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_12", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_13", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_14", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_15", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_16", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_17", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_18", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_19", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_2", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_20", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_3", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_4", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_5", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_6", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_7", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_8", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "layer_names/3d_render/layer_9", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "locale/fallback", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "locale/test", "setter": "", "type": "String"}, {"description": "Log all output to a file.", "getter": "", "name": "logging/file_logging/enable_file_logging", "setter": "", "type": "bool"}, {"description": "Path to logs withint he project. Using an user:// based path is recommended.", "getter": "", "name": "logging/file_logging/log_path", "setter": "", "type": "String"}, {"description": "Amount of log files (used for rotation)/", "getter": "", "name": "logging/file_logging/max_log_files", "setter": "", "type": "int"}, {"description": "Godot uses a message queue to defer some function calls. If you run out of space on it (you will see an error), you can increase the size here.", "getter": "", "name": "memory/limits/message_queue/max_size_kb", "setter": "", "type": "int"}, {"description": "This is used by servers when used in multi threading mode (servers and visual). RIDs are preallocated to avoid stalling the server requesting them on threads. If servers get stalled too often when loading resources in a thread, increase this number.", "getter": "", "name": "memory/limits/multithreaded_server/rid_pool_prealloc", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "mono/debugger_agent/port", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "mono/debugger_agent/wait_for_debugger", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "mono/debugger_agent/wait_timeout", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "mono/export/include_scripts_content", "setter": "", "type": "bool"}, {"description": "Maximum amount of characters allowed to send as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection.", "getter": "", "name": "network/limits/debugger_stdout/max_chars_per_second", "setter": "", "type": "int"}, {"description": "Maximum amount of errors allowed to send as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection.", "getter": "", "name": "network/limits/debugger_stdout/max_errors_per_frame", "setter": "", "type": "int"}, {"description": "Maximum amount of messages allowed to send as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection.", "getter": "", "name": "network/limits/debugger_stdout/max_messages_per_frame", "setter": "", "type": "int"}, {"description": "Default size of packet peer stream for deserializing godot data. Over this size, data is dropped.", "getter": "", "name": "network/limits/packet_peer_stream/max_buffer_po2", "setter": "", "type": "int"}, {"description": "Maximum amount of pages used for remote filesystem (used by debugging).", "getter": "", "name": "network/remote_fs/max_pages", "setter": "", "type": "int"}, {"description": "Amount of read ahead used by remote filesystem. Improves latency.", "getter": "", "name": "network/remote_fs/page_read_ahead", "setter": "", "type": "int"}, {"description": "Page size used by remote filesystem.", "getter": "", "name": "network/remote_fs/page_size", "setter": "", "type": "int"}, {"description": "If your game or application uses HTTPS, a certificates file is needed. It must be set here.", "getter": "", "name": "network/ssl/certificates", "setter": "", "type": "String"}, {"description": "When creating nodes names automatically, set the type of casing in this project. This is mostly an editor setting.", "getter": "", "name": "node/name_casing", "setter": "", "type": "int"}, {"description": "What to use to separate node name from number. This is mostly an editor setting.", "getter": "", "name": "node/name_num_separator", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "physics/2d/physics_engine", "setter": "", "type": "String"}, {"description": "Set whether physics is run on the main thread or a separate one. Running the server on a thread increases performance, but restricts API Access to only physics process.", "getter": "", "name": "physics/2d/thread_model", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "physics/3d/active_soft_world", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "physics/3d/physics_engine", "setter": "", "type": "String"}, {"description": "Frames per second used in the physics. Physics always needs a fixed amount of frames per second.", "getter": "", "name": "physics/common/physics_fps", "setter": "", "type": "int"}, {"description": "Fix to improve physics jitter, specially on monitors where refresh rate is different than physics FPS.", "getter": "", "name": "physics/common/physics_jitter_fix", "setter": "", "type": "float"}, {"description": "Default background clear color.", "getter": "", "name": "rendering/environment/default_clear_color", "setter": "", "type": "Color"}, {"description": "Max buffer size for blend shapes. Any blend shape bigger than this will not work.", "getter": "", "name": "rendering/limits/buffers/blend_shape_max_buffer_size_kb", "setter": "", "type": "int"}, {"description": "Max buffer size for drawing polygons. Any polygon bigger than this will not work.", "getter": "", "name": "rendering/limits/buffers/canvas_polygon_buffer_size_kb", "setter": "", "type": "int"}, {"description": "Max index buffer size for drawing polygons. Any polygon bigger than this will not work.", "getter": "", "name": "rendering/limits/buffers/canvas_polygon_index_buffer_size_kb", "setter": "", "type": "int"}, {"description": "Max buffer size for drawing immediate objects (ImmediateGeometry nodes). Nodes using more than this size will not work.", "getter": "", "name": "rendering/limits/buffers/immediate_buffer_size_kb", "setter": "", "type": "int"}, {"description": "Max amount of elements renderable in a frame. If more than this are visible per frame, they will be dropped. Keep in mind elements refer to mesh surfaces and not mesh themselves.", "getter": "", "name": "rendering/limits/rendering/max_renderable_elements", "setter": "", "type": "int"}, {"description": "Shaders have a time variable that constantly increases. At some point it needs to be rolled back to zero to avoid numerical errors on shader animations. This setting specifies when.", "getter": "", "name": "rendering/limits/time/time_rollover_secs", "setter": "", "type": "int"}, {"description": "Force snapping of polygons to pixels in 2D rendering. May help in some pixel art styles.", "getter": "", "name": "rendering/quality/2d/use_pixel_snap", "setter": "", "type": "bool"}, {"description": "Disable depth pre-pass for some GPU vendors (usually mobile), as their architecture already does this.", "getter": "", "name": "rendering/quality/depth_prepass/disable_for_vendors", "setter": "", "type": "String"}, {"description": "Do a previous depth pass before rendering materials. This increases performance in scenes with high overdraw, when complex materials and lighting are used.", "getter": "", "name": "rendering/quality/depth_prepass/enable", "setter": "", "type": "bool"}, {"description": "Size in pixels of the directional shadow.", "getter": "", "name": "rendering/quality/directional_shadow/size", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "rendering/quality/directional_shadow/size.mobile", "setter": "", "type": "int"}, {"description": "Whether to allow falling back to other graphics drivers if the preferred driver is not available. Best means use the best working driver (this is the default). Never means never fall back to another driver even if it does not work. This means the project will not run if the preferred driver does not function.", "getter": "", "name": "rendering/quality/driver/driver_fallback", "setter": "", "type": "String"}, {"description": "", "getter": "", "name": "rendering/quality/driver/driver_name", "setter": "", "type": "String"}, {"description": "Maximum Anisotropic filter level used for textures when anisotropy enabled.", "getter": "", "name": "rendering/quality/filters/anisotropic_filter_level", "setter": "", "type": "int"}, {"description": "Force to use nearest mipmap filtering when using mipmaps. This may increase performance in mobile as less memory bandwidth is used.", "getter": "", "name": "rendering/quality/filters/use_nearest_mipmap_filter", "setter": "", "type": "bool"}, {"description": "Strategy used for framebuffer allocation. The simpler it is, the less memory it uses (but the least features it supports).", "getter": "", "name": "rendering/quality/intended_usage/framebuffer_allocation", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "rendering/quality/intended_usage/framebuffer_allocation.mobile", "setter": "", "type": "int"}, {"description": "For reflection probes and panorama backgrounds (sky), use a high amount of samples to create ggx blurred versions (used for roughness).", "getter": "", "name": "rendering/quality/reflections/high_quality_ggx", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "rendering/quality/reflections/high_quality_ggx.mobile", "setter": "", "type": "bool"}, {"description": "For reflection probes and panorama backgrounds (sky), use a texure array instead of mipmaps. This reduces jitter noise on reflections, but costs more performance and memory.", "getter": "", "name": "rendering/quality/reflections/texture_array_reflections", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "rendering/quality/reflections/texture_array_reflections.mobile", "setter": "", "type": "bool"}, {"description": "Force vertex shading for all rendering. This can increase performance a lot, but also reduces quality inmensely. Can work to optimize on very low end mobile.", "getter": "", "name": "rendering/quality/shading/force_vertex_shading", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "rendering/quality/shading/force_vertex_shading.mobile", "setter": "", "type": "bool"}, {"description": "Subdivision quadrant size for shadow mapping. See shadow mapping documentation.", "getter": "", "name": "rendering/quality/shadow_atlas/quadrant_0_subdiv", "setter": "", "type": "int"}, {"description": "Subdivision quadrant size for shadow mapping. See shadow mapping documentation.", "getter": "", "name": "rendering/quality/shadow_atlas/quadrant_1_subdiv", "setter": "", "type": "int"}, {"description": "Subdivision quadrant size for shadow mapping. See shadow mapping documentation.", "getter": "", "name": "rendering/quality/shadow_atlas/quadrant_2_subdiv", "setter": "", "type": "int"}, {"description": "Subdivision quadrant size for shadow mapping. See shadow mapping documentation.", "getter": "", "name": "rendering/quality/shadow_atlas/quadrant_3_subdiv", "setter": "", "type": "int"}, {"description": "Size for shadow atlas (used for point and omni lights). See documentation.", "getter": "", "name": "rendering/quality/shadow_atlas/size", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "rendering/quality/shadow_atlas/size.mobile", "setter": "", "type": "int"}, {"description": "Shadow filter mode. The more complex the filter, the more memory bandwidth required.", "getter": "", "name": "rendering/quality/shadows/filter_mode", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "rendering/quality/shadows/filter_mode.mobile", "setter": "", "type": "int"}, {"description": "Improves quality of subsurface scattering, but cost significantly increases.", "getter": "", "name": "rendering/quality/subsurface_scattering/follow_surface", "setter": "", "type": "bool"}, {"description": "Quality setting for subsurface scaterring (samples taken).", "getter": "", "name": "rendering/quality/subsurface_scattering/quality", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "rendering/quality/subsurface_scattering/scale", "setter": "", "type": "int"}, {"description": "Weight subsurface scattering samples. Helps to avoid reading samples from unrelated parts of the screen.", "getter": "", "name": "rendering/quality/subsurface_scattering/weight_samples", "setter": "", "type": "bool"}, {"description": "Use high quality voxel cone tracing (looks better, but requires a higher end GPU).", "getter": "", "name": "rendering/quality/voxel_cone_tracing/high_quality", "setter": "", "type": "bool"}, {"description": "Thread model for rendering. Rendering on a thread can vastly improve performance, but syncinc to the main thread can cause a bit more jitter.", "getter": "", "name": "rendering/threads/thread_model", "setter": "", "type": "int"}, {"description": "", "getter": "", "name": "rendering/vram_compression/import_bptc", "setter": "", "type": "bool"}, {"description": "If the project uses this compression (usually low end mobile), texture importer will import these.", "getter": "", "name": "rendering/vram_compression/import_etc", "setter": "", "type": "bool"}, {"description": "If the project uses this compression (usually high end mobile), texture importer will import these.", "getter": "", "name": "rendering/vram_compression/import_etc2", "setter": "", "type": "bool"}, {"description": "If the project uses this compression (usually iOS), texture importer will import these.", "getter": "", "name": "rendering/vram_compression/import_pvrtc", "setter": "", "type": "bool"}, {"description": "If the project uses this compression (usually Desktop and Consoles), texture importer will import these.", "getter": "", "name": "rendering/vram_compression/import_s3tc", "setter": "", "type": "bool"}, {"description": "", "getter": "", "name": "script", "setter": "", "type": "Script"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "hint", "type": "Dictionary"}], "description": "Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@GlobalScope]), and optionally hint:[int](see PROPERTY_HINT_* in [@GlobalScope]), hint_string:[String].\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tProjectSettings.set(\"category/property_name\", 0)\n\n\t\t\t\tvar property_info = {\n\t\t\t\t    \"name\": \"category/property_name\",\n\t\t\t\t    \"type\": TYPE_INT,\n\t\t\t\t    \"hint\": PROPERTY_HINT_ENUM,\n\t\t\t\t    \"hint_string\": \"one,two,three\"\n\t\t\t\t}\n\n\t\t\t\tProjectSettings.add_property_info(property_info)\n\t\t\t\t[/codeblock]", "name": "add_property_info", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Clear the whole configuration (not recommended, may break things).", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Return the order of a configuration value (influences when saved to the config file).", "name": "get_order", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "get_setting", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Convert a localized path (res://) to a full native OS path.", "name": "globalize_path", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Return true if a configuration value is present.", "name": "has_setting", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "pack", "type": "String"}], "description": "", "name": "load_resource_pack", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Convert a path to a localized path (res:// path).", "name": "localize_path", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "property_can_revert", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "property_get_revert", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "", "name": "save", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "file", "type": "String"}], "description": "", "name": "save_custom", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "", "name": "set_initial_value", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "position", "type": "int"}], "description": "Set the order of a configuration value (influences when saved to the config file).", "name": "set_order", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "", "name": "set_setting", "return_": {"description": "", "type": "void"}}], "name": "ProjectSettings", "signals": [], "tutorials": {"links": []}}, "ProximityGroup": {"brief_description": "General purpose proximity-detection node.", "category": "Core", "constants": [{"description": "", "enum": "DispatchMode", "name": "MODE_PROXY", "value": "0"}, {"description": "", "enum": "DispatchMode", "name": "MODE_SIGNAL", "value": "1"}], "demos": {"links": []}, "description": "General purpose proximity-detection node.", "inherits": "Spatial", "members": [{"description": "", "getter": "get_dispatch_mode", "name": "dispatch_mode", "setter": "set_dispatch_mode", "type": "int"}, {"description": "", "getter": "get_grid_radius", "name": "grid_radius", "setter": "set_grid_radius", "type": "Vector3"}, {"description": "", "getter": "get_group_name", "name": "group_name", "setter": "set_group_name", "type": "String"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "parameters", "type": "Variant"}], "description": "", "name": "broadcast", "return_": {"description": "", "type": "void"}}], "name": "ProximityGroup", "signals": [{"arguments": [{"description": "", "index": "0", "name": "group_name", "type": "String"}, {"description": "", "index": "1", "name": "parameters", "type": "Array"}], "description": "", "name": "broadcast"}], "tutorials": {"links": []}}, "ProxyTexture": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Texture", "members": [{"description": "", "getter": "get_base", "name": "base", "setter": "set_base", "type": "Texture"}], "methods": [], "name": "ProxyTexture", "signals": [], "tutorials": {"links": []}}, "QuadMesh": {"brief_description": "Class representing a square mesh.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Class representing a square mesh with size (2,2,0). Consider using a [PlaneMesh] if you require a differently sized plane.", "inherits": "PrimitiveMesh", "members": [{"description": "", "getter": "get_size", "name": "size", "setter": "set_size", "type": "Vector2"}], "methods": [], "name": "QuadMesh", "signals": [], "tutorials": {"links": []}}, "Quat": {"brief_description": "Quaternion.", "category": "Built-In Types", "constants": [{"description": "", "name": "IDENTITY", "value": "Quat( 0, 0, 0, 1 )"}], "demos": {"links": []}, "description": "A unit quaternion used for representing 3D rotations.\n\t\tIt is similar to [Basis], which implements matrix representation of rotations, and can be parametrized using both an axis-angle pair or Euler angles. But due to its compactness and the way it is stored in memory, certain operations (obtaining axis-angle and performing SLERP, in particular) are more efficient and robust against floating point errors.\n\t\tQuaternions need to be (re)normalized.", "members": [{"description": "W component of the quaternion. Default value: [code]1[/code]", "getter": "", "name": "w", "setter": "", "type": "float"}, {"description": "X component of the quaternion. Default value: [code]0[/code]", "getter": "", "name": "x", "setter": "", "type": "float"}, {"description": "Y component of the quaternion. Default value: [code]0[/code]", "getter": "", "name": "y", "setter": "", "type": "float"}, {"description": "Z component of the quaternion. Default value: [code]0[/code]", "getter": "", "name": "z", "setter": "", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Basis"}], "description": "Returns the rotation matrix corresponding to the given quaternion.", "name": "Quat", "return_": {"description": "", "type": "Quat"}}, {"arguments": [{"description": "", "index": "0", "name": "euler", "type": "Vector3"}], "description": "Returns a quaternion that will perform a rotation specified by Euler angles (in the YXZ convention: first Z, then X, and Y last), given in the vector format as (X-angle, Y-angle, Z-angle).", "name": "Quat", "return_": {"description": "", "type": "Quat"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "angle", "type": "float"}], "description": "Returns a quaternion that will rotate around the given axis by the specified angle. The axis must be a normalized vector.", "name": "Quat", "return_": {"description": "", "type": "Quat"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "float"}, {"description": "", "index": "1", "name": "y", "type": "float"}, {"description": "", "index": "2", "name": "z", "type": "float"}, {"description": "", "index": "3", "name": "w", "type": "float"}], "description": "Returns a quaternion defined by these values.", "name": "Quat", "return_": {"description": "", "type": "Quat"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Quat"}, {"description": "", "index": "1", "name": "pre_a", "type": "Quat"}, {"description": "", "index": "2", "name": "post_b", "type": "Quat"}, {"description": "", "index": "3", "name": "t", "type": "float"}], "description": "Performs a cubic spherical-linear interpolation with another quaternion.", "name": "cubic_slerp", "return_": {"description": "", "type": "Quat"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Quat"}], "description": "Returns the dot product of two quaternions.", "name": "dot", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Return Euler angles (in the YXZ convention: first Z, then X, and Y last) corresponding to the rotation represented by the unit quaternion. Returned vector contains the rotation angles in the format (X-angle, Y-angle, Z-angle).", "name": "get_euler", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns the inverse of the quaternion.", "name": "inverse", "return_": {"description": "", "type": "Quat"}}, {"arguments": [], "description": "Returns whether the quaternion is normalized or not.", "name": "is_normalized", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the length of the quaternion.", "name": "length", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the length of the quaternion, squared.", "name": "length_squared", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns a copy of the quaternion, normalized to unit length.", "name": "normalized", "return_": {"description": "", "type": "Quat"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "angle", "type": "float"}], "description": "Set the quaternion to a rotation which rotates around axis by the specified angle, in radians. The axis must be a normalized vector.", "name": "set_axis_angle", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "euler", "type": "Vector3"}], "description": "Set the quaternion to a rotation specified by Euler angles (in the YXZ convention: first Z, then X, and Y last), given in the vector format as (X-angle, Y-angle, Z-angle).", "name": "set_euler", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Quat"}, {"description": "", "index": "1", "name": "t", "type": "float"}], "description": "Performs a spherical-linear interpolation with another quaternion.", "name": "slerp", "return_": {"description": "", "type": "Quat"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Quat"}, {"description": "", "index": "1", "name": "t", "type": "float"}], "description": "Performs a spherical-linear interpolation with another quaterion without checking if the rotation path is not bigger than 90\u00b0.", "name": "slerpni", "return_": {"description": "", "type": "Quat"}}, {"arguments": [{"description": "", "index": "0", "name": "v", "type": "Vector3"}], "description": "Transforms the vector [code]v[/code] by this quaternion.", "name": "xform", "return_": {"description": "", "type": "Vector3"}}], "name": "Quat", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/latest/tutorials/3d/using_transforms.html#interpolating-with-quaternions"}, {"description": "http://docs.godotengine.org/en/latest/tutorials/math/rotations.html"}]}}, "RID": {"brief_description": "Handle for a [Resource]'s unique ID.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "The RID type is used to access the unique integer ID of a resource.  They are opaque, so they do not grant access to the associated resource by themselves. They are used by and with the low-level Server classes such as [VisualServer].", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Object"}], "description": "Creates a new RID instance with the ID of a given resource. When not handed a valid resource, silently stores the unused ID 0.", "name": "RID", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "Returns the ID of the referenced resource.", "name": "get_id", "return_": {"description": "", "type": "int"}}], "name": "RID", "signals": [], "tutorials": {"links": []}}, "Range": {"brief_description": "Abstract base class for range-based controls.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Range is a base class for [Control] nodes that change a floating point [i]value[/i] between a [i]minimum[/i] and a [i]maximum[/i], using [i]step[/i] and [i]page[/i], for example a [ScrollBar].", "inherits": "Control", "members": [{"description": "If [code]true[/code] [member value] may be greater than [member max_value]. Default value: [code]false[/code].", "getter": "is_greater_allowed", "name": "allow_greater", "setter": "set_allow_greater", "type": "bool"}, {"description": "If [code]true[/code] [member value] may be less than [member min_value]. Default value: [code]false[/code].", "getter": "is_lesser_allowed", "name": "allow_lesser", "setter": "set_allow_lesser", "type": "bool"}, {"description": "If [code]true[/code] and [code]min_value[/code] is greater than 0, [code]value[/code] will be represented exponentially rather than linearly.", "getter": "is_ratio_exp", "name": "exp_edit", "setter": "set_exp_ratio", "type": "bool"}, {"description": "Maximum value. Range is clamped if [code]value[/code] is greater than [code]max_value[/code]. Default value: [code]100[/code].", "getter": "get_max", "name": "max_value", "setter": "set_max", "type": "float"}, {"description": "Minimum value. Range is clamped if [code]value[/code] is less than [code]min_value[/code]. Default value: [code]0[/code].", "getter": "get_min", "name": "min_value", "setter": "set_min", "type": "float"}, {"description": "Page size. Used mainly for [ScrollBar]. ScrollBar's length is its size multiplied by [code]page[/code] over the difference between [code]min_value[/code] and [code]max_value[/code].", "getter": "get_page", "name": "page", "setter": "set_page", "type": "float"}, {"description": "The value mapped between 0 and 1.", "getter": "get_as_ratio", "name": "ratio", "setter": "set_as_ratio", "type": "float"}, {"description": "If [code]true[/code] [code]value[/code] will always be rounded to the nearest integer. Default value: [code]false[/code].", "getter": "is_using_rounded_values", "name": "rounded", "setter": "set_use_rounded_values", "type": "bool"}, {"description": "If greater than 0, [code]value[/code] will always be rounded to a multiple of [code]step[/code]. If [code]rounded[/code] is also [code]true[/code], [code]value[/code] will first be rounded to a multiple of [code]step[/code] then rounded to the nearest integer.", "getter": "get_step", "name": "step", "setter": "set_step", "type": "float"}, {"description": "Range's current value.", "getter": "get_value", "name": "value", "setter": "set_value", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "with", "type": "Node"}], "description": "Binds two ranges together along with any ranges previously grouped with either of them. When any of range's member variables change, it will share the new value with all other ranges in its group.", "name": "share", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Stop range from sharing its member variables with any other.", "name": "unshare", "return_": {"description": "", "type": "void"}}], "name": "Range", "signals": [{"arguments": [], "description": "Emitted when [member min_value], [member max_value], [member page], or [member step] change.", "name": "changed"}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}], "description": "Emitted when [member value] changes.", "name": "value_changed"}], "tutorials": {"links": []}}, "RayCast": {"brief_description": "Query the closest object intersecting a ray.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 3D space in order to find the closest object along the path of the ray.\n\t\tRayCast can ignore some objects by adding them to the exception list via [code]add_exception[/code], by setting proper filtering with collision layers, or by filtering object types with type masks.\n\t\tRayCast can be configured to report collisions with [Area]s ([member collide_with_areas]) and/or [PhysicsBody]s ([member collide_with_bodies]).\n\t\tOnly enabled raycasts will be able to query the space and report collisions.\n\t\tRayCast calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.", "inherits": "Spatial", "members": [{"description": "The ray's destination point, relative to the RayCast's [code]position[/code].", "getter": "get_cast_to", "name": "cast_to", "setter": "set_cast_to", "type": "Vector3"}, {"description": "If [code]true[/code], collision with [Area]s will be reported. Default value: [code]false[/code].", "getter": "is_collide_with_areas_enabled", "name": "collide_with_areas", "setter": "set_collide_with_areas", "type": "bool"}, {"description": "If [code]true[/code], collision with [PhysicsBody]s will be reported. Default value: [code]true[/code].", "getter": "is_collide_with_bodies_enabled", "name": "collide_with_bodies", "setter": "set_collide_with_bodies", "type": "bool"}, {"description": "The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected.", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}, {"description": "If [code]true[/code] collisions will be reported. Default value: [code]false[/code].", "getter": "is_enabled", "name": "enabled", "setter": "set_enabled", "type": "bool"}, {"description": "If [code]true[/code] collisions will be ignored for this RayCast's immediate parent. Default value: [code]true[/code].", "getter": "get_exclude_parent_body", "name": "exclude_parent", "setter": "set_exclude_parent_body", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "node", "type": "Object"}], "description": "Adds a collision exception so the ray does not report collisions with the specified node.", "name": "add_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rid", "type": "RID"}], "description": "Adds a collision exception so the ray does not report collisions with the specified [RID].", "name": "add_exception_rid", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes all collision exceptions for this ray.", "name": "clear_exceptions", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Updates the collision information for the ray.\n\t\t\t\tUse this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state. Note: [code]enabled == true[/code] is not required for this to work.", "name": "force_raycast_update", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the first object that the ray intersects, or [code]null[/code] if no object is intersecting the ray (i.e. [method is_colliding] returns [code]false[/code]).", "name": "get_collider", "qualifiers": "const", "return_": {"description": "", "type": "Object"}}, {"arguments": [], "description": "Returns the shape ID of the first object that the ray intersects, or [code]0[/code] if no object is intersecting the ray (i.e. [method is_colliding] returns [code]false[/code]).", "name": "get_collider_shape", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "Returns [code]true[/code] if the bit index passed is turned on. Note that bit indexes range from 0-19.", "name": "get_collision_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the normal of the intersecting object's shape at the collision point.", "name": "get_collision_normal", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns the collision point at which the ray intersects the closest object. Note: this point is in the [b]global[/b] coordinate system.", "name": "get_collision_point", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Return whether any object is intersecting with the ray's vector (considering the vector length).", "name": "is_colliding", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Object"}], "description": "Removes a collision exception so the ray does report collisions with the specified node.", "name": "remove_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rid", "type": "RID"}], "description": "Removes a collision exception so the ray does report collisions with the specified [RID].", "name": "remove_exception_rid", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "Sets the bit index passed to the [code]value[/code] passed. Note that bit indexes range from 0-19.", "name": "set_collision_mask_bit", "return_": {"description": "", "type": "void"}}], "name": "RayCast", "signals": [], "tutorials": {"links": []}}, "RayCast2D": {"brief_description": "Query the closest object intersecting a ray.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 2D space in order to find the closest object along the path of the ray.\n\t\tRayCast2D can ignore some objects by adding them to the exception list via [code]add_exception[/code], by setting proper filtering with collision layers, or by filtering object types with type masks.\n\t\tRayCast2D can be configured to report collisions with [Area2D]s ([member collide_with_areas]) and/or [PhysicsBody2D]s ([member collide_with_bodies]).\n\t\tOnly enabled raycasts will be able to query the space and report collisions.\n\t\tRayCast2D calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.", "inherits": "Node2D", "members": [{"description": "The ray's destination point, relative to the RayCast's [code]position[/code].", "getter": "get_cast_to", "name": "cast_to", "setter": "set_cast_to", "type": "Vector2"}, {"description": "If [code]true[/code], collision with [Area2D]s will be reported. Default value: [code]false[/code].", "getter": "is_collide_with_areas_enabled", "name": "collide_with_areas", "setter": "set_collide_with_areas", "type": "bool"}, {"description": "If [code]true[/code], collision with [PhysicsBody2D]s will be reported. Default value: [code]true[/code].", "getter": "is_collide_with_bodies_enabled", "name": "collide_with_bodies", "setter": "set_collide_with_bodies", "type": "bool"}, {"description": "The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected.", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}, {"description": "If [code]true[/code], collisions will be reported. Default value: [code]false[/code].", "getter": "is_enabled", "name": "enabled", "setter": "set_enabled", "type": "bool"}, {"description": "If [code]true[/code], the parent node will be excluded from collision detection. Default value: [code]true[/code].", "getter": "get_exclude_parent_body", "name": "exclude_parent", "setter": "set_exclude_parent_body", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "node", "type": "Object"}], "description": "Adds a collision exception so the ray does not report collisions with the specified node.", "name": "add_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rid", "type": "RID"}], "description": "Adds a collision exception so the ray does not report collisions with the specified [RID].", "name": "add_exception_rid", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes all collision exceptions for this ray.", "name": "clear_exceptions", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Updates the collision information for the ray.  Use this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state. Note: [code]enabled == true[/code] is not required for this to work.", "name": "force_raycast_update", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the first object that the ray intersects, or [code]null[/code] if no object is intersecting the ray (i.e. [method is_colliding] returns [code]false[/code]).", "name": "get_collider", "qualifiers": "const", "return_": {"description": "", "type": "Object"}}, {"arguments": [], "description": "Returns the shape ID of the first object that the ray intersects, or [code]0[/code] if no object is intersecting the ray (i.e. [method is_colliding] returns [code]false[/code]).", "name": "get_collider_shape", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "Return an individual bit on the collision mask.", "name": "get_collision_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the normal of the intersecting object's shape at the collision point.", "name": "get_collision_normal", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the collision point at which the ray intersects the closest object. Note: this point is in the [b]global[/b] coordinate system.", "name": "get_collision_point", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Return whether any object is intersecting with the ray's vector (considering the vector length).", "name": "is_colliding", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Object"}], "description": "Removes a collision exception so the ray does report collisions with the specified node.", "name": "remove_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rid", "type": "RID"}], "description": "Removes a collision exception so the ray does report collisions with the specified [RID].", "name": "remove_exception_rid", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.", "name": "set_collision_mask_bit", "return_": {"description": "", "type": "void"}}], "name": "RayCast2D", "signals": [], "tutorials": {"links": []}}, "RayShape": {"brief_description": "Ray shape for 3D collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Ray shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.", "inherits": "Shape", "members": [{"description": "The ray's length.", "getter": "get_length", "name": "length", "setter": "set_length", "type": "float"}, {"description": "If [code]true[/code] allow the shape to return the correct normal. Default value: [code]false[/code].", "getter": "get_slips_on_slope", "name": "slips_on_slope", "setter": "set_slips_on_slope", "type": "bool"}], "methods": [], "name": "RayShape", "signals": [], "tutorials": {"links": []}}, "RayShape2D": {"brief_description": "Ray shape for 2D collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Ray shape for 2D collisions. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.", "inherits": "Shape2D", "members": [{"description": "The ray's length.", "getter": "get_length", "name": "length", "setter": "set_length", "type": "float"}, {"description": "If [code]true[/code] allow the shape to return the correct normal. Default value: [code]false[/code].", "getter": "get_slips_on_slope", "name": "slips_on_slope", "setter": "set_slips_on_slope", "type": "bool"}], "methods": [], "name": "RayShape2D", "signals": [], "tutorials": {"links": []}}, "Rect2": {"brief_description": "2D Axis-aligned bounding box.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "Rect2 consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.", "members": [{"description": "Ending corner.", "getter": "", "name": "end", "setter": "", "type": "Vector2"}, {"description": "Position (starting corner).", "getter": "", "name": "position", "setter": "", "type": "Vector2"}, {"description": "Size from position to end.", "getter": "", "name": "size", "setter": "", "type": "Vector2"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}, {"description": "", "index": "1", "name": "size", "type": "Vector2"}], "description": "Constructs a [code]Rect2[/code] by position and size.", "name": "Rect2", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "float"}, {"description": "", "index": "1", "name": "y", "type": "float"}, {"description": "", "index": "2", "name": "width", "type": "float"}, {"description": "", "index": "3", "name": "height", "type": "float"}], "description": "Constructs a [code]Rect2[/code] by x, y, width, and height.", "name": "Rect2", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [], "description": "Returns a [code]Rect2[/code] with equivalent position and area, modified so that the top-left corner is the origin and [code]width[/code] and [code]height[/code] are positive.", "name": "abs", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Rect2"}], "description": "Returns the intersection of this [code]Rect2[/code] and b.", "name": "clip", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Rect2"}], "description": "Returns [code]true[/code] if this [code]Rect2[/code] completely encloses another one.", "name": "encloses", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "to", "type": "Vector2"}], "description": "Returns this [code]Rect2[/code] expanded to include a given point.", "name": "expand", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [], "description": "Returns the area of the [code]Rect2[/code].", "name": "get_area", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "by", "type": "float"}], "description": "Returns a copy of the [code]Rect2[/code] grown a given amount of units towards all the sides.", "name": "grow", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "left", "type": "float"}, {"description": "", "index": "1", "name": "top", "type": "float"}, {"description": "", "index": "2", "name": "right", "type": "float"}, {"description": "", "index": "3", "name": " bottom", "type": "float"}], "description": "Returns a copy of the [code]Rect2[/code] grown a given amount of units towards each direction individually.", "name": "grow_individual", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "margin", "type": "int"}, {"description": "", "index": "1", "name": "by", "type": "float"}], "description": "Returns a copy of the [code]Rect2[/code] grown a given amount of units towards the [Margin] direction.", "name": "grow_margin", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [], "description": "Returns [code]true[/code] if the [code]Rect2[/code] is flat or empty.", "name": "has_no_area", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}], "description": "Returns [code]true[/code] if the [code]Rect2[/code] contains a point.", "name": "has_point", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Rect2"}], "description": "Returns [code]true[/code] if the [code]Rect2[/code] overlaps with another.", "name": "intersects", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Rect2"}], "description": "Returns a larger Rect2 that contains this Rect2 and [code]with[/code].", "name": "merge", "return_": {"description": "", "type": "Rect2"}}], "name": "Rect2", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/math/index.html"}]}}, "RectangleShape2D": {"brief_description": "Rectangle shape for 2D collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Rectangle shape for 2D collisions. This shape is useful for modeling box-like 2D objects.", "inherits": "Shape2D", "members": [{"description": "The rectangle's half extents. The width and height of this shape is twice the half extents.", "getter": "get_extents", "name": "extents", "setter": "set_extents", "type": "Vector2"}], "methods": [], "name": "RectangleShape2D", "signals": [], "tutorials": {"links": []}}, "Reference": {"brief_description": "Base class for anything that keeps a reference count.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Base class for anything that keeps a reference count. Resource and many other helper objects inherit this. References keep an internal reference counter so they are only released when no longer in use.", "inherits": "Object", "members": [], "methods": [{"arguments": [], "description": "", "name": "init_ref", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Increase the internal reference counter. Use this only if you really know what you are doing.", "name": "reference", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Decrease the internal reference counter. Use this only if you really know what you are doing.", "name": "unreference", "return_": {"description": "", "type": "bool"}}], "name": "Reference", "signals": [], "tutorials": {"links": []}}, "ReferenceRect": {"brief_description": "Reference frame for GUI.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Reference frame for GUI. It's just like an empty control, except a red box is displayed while editing around its size at all times.", "inherits": "Control", "members": [{"description": "", "getter": "get_border_color", "name": "border_color", "setter": "set_border_color", "type": "Color"}], "methods": [], "name": "ReferenceRect", "signals": [], "tutorials": {"links": []}}, "ReflectionProbe": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "UpdateMode", "name": "UPDATE_ONCE", "value": "0"}, {"description": "", "enum": "UpdateMode", "name": "UPDATE_ALWAYS", "value": "1"}], "demos": {"links": []}, "description": "", "inherits": "VisualInstance", "members": [{"description": "", "getter": "is_box_projection_enabled", "name": "box_projection", "setter": "set_enable_box_projection", "type": "bool"}, {"description": "", "getter": "get_cull_mask", "name": "cull_mask", "setter": "set_cull_mask", "type": "int"}, {"description": "", "getter": "are_shadows_enabled", "name": "enable_shadows", "setter": "set_enable_shadows", "type": "bool"}, {"description": "", "getter": "get_extents", "name": "extents", "setter": "set_extents", "type": "Vector3"}, {"description": "", "getter": "get_intensity", "name": "intensity", "setter": "set_intensity", "type": "float"}, {"description": "", "getter": "get_interior_ambient", "name": "interior_ambient_color", "setter": "set_interior_ambient", "type": "Color"}, {"description": "", "getter": "get_interior_ambient_probe_contribution", "name": "interior_ambient_contrib", "setter": "set_interior_ambient_probe_contribution", "type": "float"}, {"description": "", "getter": "get_interior_ambient_energy", "name": "interior_ambient_energy", "setter": "set_interior_ambient_energy", "type": "float"}, {"description": "", "getter": "is_set_as_interior", "name": "interior_enable", "setter": "set_as_interior", "type": "bool"}, {"description": "", "getter": "get_max_distance", "name": "max_distance", "setter": "set_max_distance", "type": "float"}, {"description": "", "getter": "get_origin_offset", "name": "origin_offset", "setter": "set_origin_offset", "type": "Vector3"}, {"description": "", "getter": "get_update_mode", "name": "update_mode", "setter": "set_update_mode", "type": "int"}], "methods": [], "name": "ReflectionProbe", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/reflection_probes.html"}]}}, "RemoteTransform": {"brief_description": "RemoteTransform leads the [Transform] of another [Spatial] derived Node in the scene.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "RemoteTransform leads the [Transform] of another [Spatial] derived Node (called the remote node) in the scene.\n\t\tIt can be set to track another Node's position, rotation and/or scale. It can update using either global or local coordinates.", "inherits": "Spatial", "members": [{"description": "The [NodePath] to the remote node, relative to the RemoteTransform's position in the scene.", "getter": "get_remote_node", "name": "remote_path", "setter": "set_remote_node", "type": "NodePath"}, {"description": "If [code]true[/code] the remote node's position is tracked. Default value: [code]true[/code].", "getter": "get_update_position", "name": "update_position", "setter": "set_update_position", "type": "bool"}, {"description": "If [code]true[/code] the remote node's rotation is tracked. Default value: [code]true[/code].", "getter": "get_update_rotation", "name": "update_rotation", "setter": "set_update_rotation", "type": "bool"}, {"description": "If [code]true[/code] the remote node's scale is tracked. Default value: [code]true[/code].", "getter": "get_update_scale", "name": "update_scale", "setter": "set_update_scale", "type": "bool"}, {"description": "If [code]true[/code] global coordinates are used. If [code]false[/code] local coordinates are used. Default value: [code]true[/code].", "getter": "get_use_global_coordinates", "name": "use_global_coordinates", "setter": "set_use_global_coordinates", "type": "bool"}], "methods": [], "name": "RemoteTransform", "signals": [], "tutorials": {"links": []}}, "RemoteTransform2D": {"brief_description": "RemoteTransform2D leads the [Transform2D] of another [CanvasItem] derived Node in the scene.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "RemoteTransform2D leads the [Transform2D] of another [CanvasItem] derived Node (called the remote node) in the scene.\n\t\tIt can be set to track another Node's position, rotation and/or scale. It can update using either global or local coordinates.", "inherits": "Node2D", "members": [{"description": "The [NodePath] to the remote node, relative to the RemoteTransform2D's position in the scene.", "getter": "get_remote_node", "name": "remote_path", "setter": "set_remote_node", "type": "NodePath"}, {"description": "If [code]true[/code] the remote node's position is tracked. Default value: [code]true[/code].", "getter": "get_update_position", "name": "update_position", "setter": "set_update_position", "type": "bool"}, {"description": "If [code]true[/code] the remote node's rotation is tracked. Default value: [code]true[/code].", "getter": "get_update_rotation", "name": "update_rotation", "setter": "set_update_rotation", "type": "bool"}, {"description": "If [code]true[/code] the remote node's scale is tracked. Default value: [code]true[/code].", "getter": "get_update_scale", "name": "update_scale", "setter": "set_update_scale", "type": "bool"}, {"description": "If [code]true[/code] global coordinates are used. If [code]false[/code] local coordinates are used. Default value: [code]true[/code].", "getter": "get_use_global_coordinates", "name": "use_global_coordinates", "setter": "set_use_global_coordinates", "type": "bool"}], "methods": [], "name": "RemoteTransform2D", "signals": [], "tutorials": {"links": []}}, "Resource": {"brief_description": "Base class for all resources.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Resource is the base class for all resource types. Resources are primarily data containers. They are reference counted and freed when no longer in use. They are also loaded only once from disk, and further attempts to load the resource will return the same reference (all this in contrast to a [Node], which is not reference counted and can be instanced from disk as many times as desired). Resources can be saved externally on disk or bundled into another object, such as a [Node] or another resource.", "inherits": "Reference", "members": [{"description": "", "getter": "is_local_to_scene", "name": "resource_local_to_scene", "setter": "set_local_to_scene", "type": "bool"}, {"description": "", "getter": "get_name", "name": "resource_name", "setter": "set_name", "type": "String"}, {"description": "", "getter": "get_path", "name": "resource_path", "setter": "set_path", "type": "String"}], "methods": [{"arguments": [], "description": "", "name": "_setup_local_to_scene", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "subresources", "type": "bool"}], "description": "", "name": "duplicate", "qualifiers": "const", "return_": {"description": "", "type": "Resource"}}, {"arguments": [], "description": "", "name": "get_local_scene", "qualifiers": "const", "return_": {"description": "", "type": "Node"}}, {"arguments": [], "description": "Return the RID of the resource (or an empty RID). Many resources (such as [Texture], [Mesh], etc) are high level abstractions of resources stored in a server, so this function will return the original RID.", "name": "get_rid", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "", "name": "setup_local_to_scene", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Set the path of the resource. Differs from set_path(), if another [code]Resource[/code] exists with \"path\" it over-takes it, instead of failing.", "name": "take_over_path", "return_": {"description": "", "type": "void"}}], "name": "Resource", "signals": [{"arguments": [], "description": "", "name": "changed"}], "tutorials": {"links": []}}, "ResourceImporter": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [], "name": "ResourceImporter", "signals": [], "tutorials": {"links": []}}, "ResourceInteractiveLoader": {"brief_description": "Interactive Resource Loader.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Interactive Resource Loader. This object is returned by ResourceLoader when performing an interactive load. It allows to load with high granularity, so this is mainly useful for displaying load bars/percentages.", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "Return the loaded resource (only if loaded). Otherwise, returns null.", "name": "get_resource", "return_": {"description": "", "type": "Resource"}}, {"arguments": [], "description": "Return the load stage. The total amount of stages can be queried with [method get_stage_count]", "name": "get_stage", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the total amount of stages (calls to [method poll]) needed to completely load this resource.", "name": "get_stage_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Poll the load. If OK is returned, this means poll will have to be called again. If ERR_FILE_EOF is returned, them the load has finished and the resource can be obtained by calling [method get_resource].", "name": "poll", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "wait", "return_": {"description": "", "type": "int"}}], "name": "ResourceInteractiveLoader", "signals": [], "tutorials": {"links": []}}, "ResourceLoader": {"brief_description": "Resource Loader.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Resource Loader. This is a static object accessible as [code]ResourceLoader[/code]. GDScript has a simplified load() function, though.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type_hint", "type": "String"}], "description": "", "name": "exists", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "", "name": "get_dependencies", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Return the list of recognized extensions for a resource type.", "name": "get_recognized_extensions_for_type", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "", "name": "has", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "", "name": "has_cached", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type_hint", "type": "String"}, {"default": "false", "description": "", "index": "2", "name": "p_no_cache", "type": "bool"}], "description": "", "name": "load", "return_": {"description": "", "type": "Resource"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"default": "\"\"", "description": "", "index": "1", "name": "type_hint", "type": "String"}], "description": "Load a resource interactively, the returned object allows to load with high granularity.", "name": "load_interactive", "return_": {"description": "", "type": "ResourceInteractiveLoader"}}, {"arguments": [{"description": "", "index": "0", "name": "abort", "type": "bool"}], "description": "Change the behavior on missing sub-resources. Default is to abort load.", "name": "set_abort_on_missing_resources", "return_": {"description": "", "type": "void"}}], "name": "ResourceLoader", "signals": [], "tutorials": {"links": []}}, "ResourcePreloader": {"brief_description": "Resource Preloader Node.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Resource Preloader Node. This node is used to preload sub-resources inside a scene, so when the scene is loaded all the resources are ready to use and be retrieved from here.", "inherits": "Node", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "resource", "type": "Resource"}], "description": "", "name": "add_resource", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Return the resource given a text-id.", "name": "get_resource", "qualifiers": "const", "return_": {"description": "", "type": "Resource"}}, {"arguments": [], "description": "Return the list of resources inside the preloader.", "name": "get_resource_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Return true if the preloader has a given resource.", "name": "has_resource", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Remove a resource from the preloader by text id.", "name": "remove_resource", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "newname", "type": "String"}], "description": "Rename a resource inside the preloader, from a text-id to a new text-id.", "name": "rename_resource", "return_": {"description": "", "type": "void"}}], "name": "ResourcePreloader", "signals": [], "tutorials": {"links": []}}, "ResourceSaver": {"brief_description": "Resource saving interface.", "category": "Core", "constants": [{"description": "", "enum": "SaverFlags", "name": "FLAG_RELATIVE_PATHS", "value": "1"}, {"description": "", "enum": "SaverFlags", "name": "FLAG_BUNDLE_RESOURCES", "value": "2"}, {"description": "", "enum": "SaverFlags", "name": "FLAG_CHANGE_PATH", "value": "4"}, {"description": "", "enum": "SaverFlags", "name": "FLAG_OMIT_EDITOR_PROPERTIES", "value": "8"}, {"description": "", "enum": "SaverFlags", "name": "FLAG_SAVE_BIG_ENDIAN", "value": "16"}, {"description": "", "enum": "SaverFlags", "name": "FLAG_COMPRESS", "value": "32"}], "demos": {"links": []}, "description": "Resource saving interface, used for saving resources to disk.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "type", "type": "Resource"}], "description": "Returns the list of extensions available for saving a resource of a given type.", "name": "get_recognized_extensions", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}, {"description": "", "index": "1", "name": "resource", "type": "Resource"}, {"default": "0", "description": "", "index": "2", "name": "flags", "type": "int"}], "description": "Saves a resource to disk.", "name": "save", "return_": {"description": "", "type": "int"}}], "name": "ResourceSaver", "signals": [], "tutorials": {"links": []}}, "RichTextLabel": {"brief_description": "Label that displays rich text.", "category": "Core", "constants": [{"description": "", "enum": "Align", "name": "ALIGN_LEFT", "value": "0"}, {"description": "", "enum": "Align", "name": "ALIGN_CENTER", "value": "1"}, {"description": "", "enum": "Align", "name": "ALIGN_RIGHT", "value": "2"}, {"description": "", "enum": "Align", "name": "ALIGN_FILL", "value": "3"}, {"description": "", "enum": "ListType", "name": "LIST_NUMBERS", "value": "0"}, {"description": "", "enum": "ListType", "name": "LIST_LETTERS", "value": "1"}, {"description": "", "enum": "ListType", "name": "LIST_DOTS", "value": "2"}, {"description": "", "enum": "ItemType", "name": "ITEM_FRAME", "value": "0"}, {"description": "", "enum": "ItemType", "name": "ITEM_TEXT", "value": "1"}, {"description": "", "enum": "ItemType", "name": "ITEM_IMAGE", "value": "2"}, {"description": "", "enum": "ItemType", "name": "ITEM_NEWLINE", "value": "3"}, {"description": "", "enum": "ItemType", "name": "ITEM_FONT", "value": "4"}, {"description": "", "enum": "ItemType", "name": "ITEM_COLOR", "value": "5"}, {"description": "", "enum": "ItemType", "name": "ITEM_UNDERLINE", "value": "6"}, {"description": "", "enum": "ItemType", "name": "ITEM_ALIGN", "value": "7"}, {"description": "", "enum": "ItemType", "name": "ITEM_INDENT", "value": "8"}, {"description": "", "enum": "ItemType", "name": "ITEM_LIST", "value": "9"}, {"description": "", "enum": "ItemType", "name": "ITEM_TABLE", "value": "10"}, {"description": "", "enum": "ItemType", "name": "ITEM_META", "value": "11"}], "demos": {"links": []}, "description": "Rich text can contain custom text, fonts, images and some basic formatting. The label manages these as an internal tag stack. It also adapts itself to given width/heights.\n\t\tNote that assignments to [member bbcode_text] clear the tag stack and reconstruct it from the property's contents. Any edits made to [member bbcode_text] will erase previous edits made from other manual sources such as [method append_bbcode] and the [code]push_*[/code] / [method pop] methods.", "inherits": "Control", "members": [{"description": "If [code]true[/code] the label uses BBCode formatting. Default value: [code]false[/code].", "getter": "is_using_bbcode", "name": "bbcode_enabled", "setter": "set_use_bbcode", "type": "bool"}, {"description": "The label's text in BBCode format. Is not representative of manual modifications to the internal tag stack. Erases changes made by other methods when edited.", "getter": "get_bbcode", "name": "bbcode_text", "setter": "set_bbcode", "type": "String"}, {"description": "If [code]true[/code], the label underlines meta tags such as [url]{text}[/url]. Default value: [code]true[/code].", "getter": "is_meta_underlined", "name": "meta_underlined", "setter": "set_meta_underline", "type": "bool"}, {"description": "If [code]true[/code] the label uses the custom font color. Default value: [code]false[/code].", "getter": "is_overriding_selected_font_color", "name": "override_selected_font_color", "setter": "set_override_selected_font_color", "type": "bool"}, {"description": "The text's visibility, as a [float] between 0.0 and 1.0.", "getter": "get_percent_visible", "name": "percent_visible", "setter": "set_percent_visible", "type": "float"}, {"description": "If [code]true[/code], the scrollbar is visible. Does not block scrolling completely. See [method scroll_to_line]. Default value: [code]true[/code].", "getter": "is_scroll_active", "name": "scroll_active", "setter": "set_scroll_active", "type": "bool"}, {"description": "If [code]true[/code], the window scrolls down to display new content automatically. Default value: [code]false[/code].", "getter": "is_scroll_following", "name": "scroll_following", "setter": "set_scroll_follow", "type": "bool"}, {"description": "If [code]true[/code], the label allows text selection.", "getter": "is_selection_enabled", "name": "selection_enabled", "setter": "set_selection_enabled", "type": "bool"}, {"description": "The number of spaces associated with a single tab length. Does not affect \"\\t\" in text tags, only indent tags.", "getter": "get_tab_size", "name": "tab_size", "setter": "set_tab_size", "type": "int"}, {"description": "The raw text of the label.\n\t\t\tWhen set, clears the tag stack and adds a raw text tag to the top of it. Does not parse bbcodes. Does not modify [member bbcode_text].", "getter": "get_text", "name": "text", "setter": "set_text", "type": "String"}, {"description": "The restricted number of characters to display in the label.", "getter": "get_visible_characters", "name": "visible_characters", "setter": "set_visible_characters", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "image", "type": "Texture"}], "description": "Adds an image's opening and closing tags to the tag stack.", "name": "add_image", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}], "description": "Adds raw non-bbcode-parsed text to the tag stack.", "name": "add_text", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bbcode", "type": "String"}], "description": "Parses [code]bbcode[/code] and adds tags to the tag stack as needed. Returns the result of the parsing, [code]OK[/code] if successful.", "name": "append_bbcode", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Clears the tag stack and sets [member bbcode_text] to an empty string.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns the height of the content.", "name": "get_content_height", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the total number of newlines in the tag stack's text tags. Considers wrapped text as one line.", "name": "get_line_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the total number of characters from text tags. Does not include bbcodes.", "name": "get_total_character_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the vertical scrollbar.", "name": "get_v_scroll", "return_": {"description": "", "type": "VScrollBar"}}, {"arguments": [], "description": "Returns the number of visible lines.", "name": "get_visible_line_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Adds a newline tag to the tag stack.", "name": "newline", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bbcode", "type": "String"}], "description": "The assignment version of [method append_bbcode]. Clears the tag stack and inserts the new content. Returns [code]OK[/code] if parses [code]bbcode[/code] successfully.", "name": "parse_bbcode", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Terminates the current tag. Use after [code]push_*[/code] methods to close bbcodes manually. Does not need to follow [code]add_*[/code] methods.", "name": "pop", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "align", "type": "int"}], "description": "Adds a [code][right][/code] tag to the tag stack.", "name": "push_align", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Adds a [code][cell][/code] tag to the tag stack. Must be inside a [table] tag. See [method push_table] for details.", "name": "push_cell", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "color", "type": "Color"}], "description": "Adds a [code][color][/code] tag to the tag stack.", "name": "push_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "font", "type": "Font"}], "description": "Adds a [code][font][/code] tag to the tag stack. Overrides default fonts for its duration.", "name": "push_font", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "level", "type": "int"}], "description": "Adds an [code][indent][/code] tag to the tag stack. Multiplies \"level\" by current tab_size to determine new margin length.", "name": "push_indent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}], "description": "Adds a list tag to the tag stack. Similar to the bbcodes [code][ol][/code] or [code][ul][/code], but supports more list types. Not fully implemented!", "name": "push_list", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "data", "type": "Variant"}], "description": "Adds a meta tag to the tag stack. Similar to the bbcode [code][url=something]{text}[/url][/code], but supports non-[String] metadata types.", "name": "push_meta", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "columns", "type": "int"}], "description": "Adds a [code][table=columns][/code] tag to the tag stack.", "name": "push_table", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Adds a [code][u][/code] tag to the tag stack.", "name": "push_underline", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}], "description": "Removes a line of content from the label. Returns [code]true[/code] if the line exists.", "name": "remove_line", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}], "description": "Scrolls the window's top line to match [code]line[/code].", "name": "scroll_to_line", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "expand", "type": "bool"}, {"description": "", "index": "2", "name": "ratio", "type": "int"}], "description": "Edits the selected columns expansion options. If [code]expand[/code] is [code]true[/code], the column expands in proportion to its expansion ratio versus the other columns' ratios.\n\t\t\t\tFor example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively.\n\t\t\t\tColumns with a [code]false[/code] expand will not contribute to the total ratio.", "name": "set_table_column_expand", "return_": {"description": "", "type": "void"}}], "name": "RichTextLabel", "signals": [{"arguments": [{"description": "", "index": "0", "name": "meta", "type": "Nil"}], "description": "Triggered when the user clicks on content between [url] tags. If the meta is defined in text, e.g. [code][url={\"data\"=\"hi\"}]hi[/url][/code], then the parameter for this signal will be a [String] type. If a particular type or an object is desired, the [method push_meta] method must be used to manually insert the data into the tag stack.", "name": "meta_clicked"}, {"arguments": [{"description": "", "index": "0", "name": "meta", "type": "Nil"}], "description": "Triggers when the mouse exits a meta tag.", "name": "meta_hover_ended"}, {"arguments": [{"description": "", "index": "0", "name": "meta", "type": "Nil"}], "description": "Triggers when the mouse enters a meta tag.", "name": "meta_hover_started"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/gui/bbcode_in_richtextlabel.html"}]}}, "RigidBody": {"brief_description": "Physics Body whose position is determined through physics simulation in 3D space.", "category": "Core", "constants": [{"description": "Rigid body. This is the \"natural\" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code.", "enum": "Mode", "name": "MODE_RIGID", "value": "0"}, {"description": "Static mode. The body behaves like a [StaticBody], and can only move by user code.", "enum": "Mode", "name": "MODE_STATIC", "value": "1"}, {"description": "Character body. This behaves like a rigid body, but can not rotate.", "enum": "Mode", "name": "MODE_CHARACTER", "value": "2"}, {"description": "Kinematic body. The body behaves like a [KinematicBody], and can only move by user code.", "enum": "Mode", "name": "MODE_KINEMATIC", "value": "3"}], "demos": {"links": []}, "description": "This is the node that implements full 3D physics. This means that you do not control a RigidBody directly. Instead you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.\n\t\tA RigidBody has 4 behavior [member mode]s: Rigid, Static, Character, and Kinematic.\n\t\t[b]Note:[/b] Don't change a RigidBody's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop will yield strange behavior. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state.\n\t\tIf you need to override the default physics behavior, you can write a custom force integration. See [member custom_integrator].", "inherits": "PhysicsBody", "members": [{"description": "Damps RigidBody's rotational forces.", "getter": "get_angular_damp", "name": "angular_damp", "setter": "set_angular_damp", "type": "float"}, {"description": "RigidBody's rotational velocity.", "getter": "get_angular_velocity", "name": "angular_velocity", "setter": "set_angular_velocity", "type": "Vector3"}, {"description": "", "getter": "get_axis_lock", "name": "axis_lock_angular_x", "setter": "set_axis_lock", "type": "bool"}, {"description": "", "getter": "get_axis_lock", "name": "axis_lock_angular_y", "setter": "set_axis_lock", "type": "bool"}, {"description": "", "getter": "get_axis_lock", "name": "axis_lock_angular_z", "setter": "set_axis_lock", "type": "bool"}, {"description": "", "getter": "get_axis_lock", "name": "axis_lock_linear_x", "setter": "set_axis_lock", "type": "bool"}, {"description": "", "getter": "get_axis_lock", "name": "axis_lock_linear_y", "setter": "set_axis_lock", "type": "bool"}, {"description": "", "getter": "get_axis_lock", "name": "axis_lock_linear_z", "setter": "set_axis_lock", "type": "bool"}, {"description": "RigidBody's bounciness.", "getter": "get_bounce", "name": "bounce", "setter": "set_bounce", "type": "float"}, {"description": "If [code]true[/code] the RigidBody will not calculate forces and will act as a static body while there is no movement. It will wake up when forces are applied through other collisions or when the [code]apply_impulse[/code] method is used.", "getter": "is_able_to_sleep", "name": "can_sleep", "setter": "set_can_sleep", "type": "bool"}, {"description": "If true, the RigidBody will emit signals when it collides with another RigidBody.", "getter": "is_contact_monitor_enabled", "name": "contact_monitor", "setter": "set_contact_monitor", "type": "bool"}, {"description": "The maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.", "getter": "get_max_contacts_reported", "name": "contacts_reported", "setter": "set_max_contacts_reported", "type": "int"}, {"description": "If [code]true[/code] continuous collision detection is used.\n\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses less impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects.", "getter": "is_using_continuous_collision_detection", "name": "continuous_cd", "setter": "set_use_continuous_collision_detection", "type": "bool"}, {"description": "If [code]true[/code] internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.", "getter": "is_using_custom_integrator", "name": "custom_integrator", "setter": "set_use_custom_integrator", "type": "bool"}, {"description": "The body friction, from 0 (frictionless) to 1 (max friction).", "getter": "get_friction", "name": "friction", "setter": "set_friction", "type": "float"}, {"description": "This is multiplied by the global 3D gravity setting found in \"Project > Project Settings > Physics > 3d\" to produce RigidBody's gravity. E.g. a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object.", "getter": "get_gravity_scale", "name": "gravity_scale", "setter": "set_gravity_scale", "type": "float"}, {"description": "RigidBody's linear damp. Default value: -1, cannot be less than -1. If this value is different from -1, any linear damp derived from the world or areas will be overridden.", "getter": "get_linear_damp", "name": "linear_damp", "setter": "set_linear_damp", "type": "float"}, {"description": "RigidBody's linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may run in another thread and runs at a different granularity. Use [method _integrate_forces] as your process loop for precise control of the body state.", "getter": "get_linear_velocity", "name": "linear_velocity", "setter": "set_linear_velocity", "type": "Vector3"}, {"description": "RigidBody's mass.", "getter": "get_mass", "name": "mass", "setter": "set_mass", "type": "float"}, {"description": "The body mode from the MODE_* enum. Modes include: MODE_STATIC, MODE_KINEMATIC, MODE_RIGID, and MODE_CHARACTER.", "getter": "get_mode", "name": "mode", "setter": "set_mode", "type": "int"}, {"description": "", "getter": "get_physics_material_override", "name": "physics_material_override", "setter": "set_physics_material_override", "type": "PhysicsMaterial"}, {"description": "If [code]true[/code] RigidBody is sleeping and will not calculate forces until woken up by a collision or the [code]apply_impulse[/code] method.", "getter": "is_sleeping", "name": "sleeping", "setter": "set_sleeping", "type": "bool"}, {"description": "RigidBody's weight based on its mass and the global 3D gravity. Global values are set in \"Project > Project Settings > Physics > 3d\".", "getter": "get_weight", "name": "weight", "setter": "set_weight", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "state", "type": "PhysicsDirectBodyState"}], "description": "Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default it works in addition to the usual physics behavior, but [method set_use_custom_integrator] allows you to disable the default behavior and do fully custom force integration for a body.", "name": "_integrate_forces", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "force", "type": "Vector3"}], "description": "Adds a constant directional force without affecting rotation.\n\t\t\t\tThis is equivalent to [code]add_force(force, Vector3(0,0,0))[/code].", "name": "add_central_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "force", "type": "Vector3"}, {"description": "", "index": "1", "name": "position", "type": "Vector3"}], "description": "Adds a constant force (i.e. acceleration).", "name": "add_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "torque", "type": "Vector3"}], "description": "Adds a constant rotational force (i.e. a motor) without affecting position.", "name": "add_torque", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "impulse", "type": "Vector3"}], "description": "Applies a single directional impulse without affecting rotation.\n\t\t\t\tThis is equivalent to ``apply_impulse(Vector3(0,0,0), impulse)``.", "name": "apply_central_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector3"}, {"description": "", "index": "1", "name": "impulse", "type": "Vector3"}], "description": "Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the position are in global coordinates, and the position is relative to the object's origin.", "name": "apply_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "impulse", "type": "Vector3"}], "description": "Apply a torque impulse (which will be affected by the body mass and shape). This will rotate the body around the passed in vector.", "name": "apply_torque_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0 , see [method set_max_contacts_reported] to increase it.  Note that the result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.", "name": "get_colliding_bodies", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "axis_velocity", "type": "Vector3"}], "description": "Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.", "name": "set_axis_velocity", "return_": {"description": "", "type": "void"}}], "name": "RigidBody", "signals": [{"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.", "name": "body_entered"}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.", "name": "body_exited"}, {"arguments": [{"description": "", "index": "0", "name": "body_id", "type": "int"}, {"description": "", "index": "1", "name": "body", "type": "Node"}, {"description": "", "index": "2", "name": "body_shape", "type": "int"}, {"description": "", "index": "3", "name": "local_shape", "type": "int"}], "description": "Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that collided with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body collided with.", "name": "body_shape_entered"}, {"arguments": [{"description": "", "index": "0", "name": "body_id", "type": "int"}, {"description": "", "index": "1", "name": "body", "type": "Node"}, {"description": "", "index": "2", "name": "body_shape", "type": "int"}, {"description": "", "index": "3", "name": "local_shape", "type": "int"}], "description": "Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.\n\t\t\t\tThis signal not only receives the body that stopped colliding with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body stopped colliding with.", "name": "body_shape_exited"}, {"arguments": [], "description": "Emitted when the body changes its sleeping state. Either by sleeping or waking up.", "name": "sleeping_state_changed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/physics_introduction.html"}]}}, "RigidBody2D": {"brief_description": "A body that is controlled by the 2D physics engine.", "category": "Core", "constants": [{"description": "Rigid mode. The body behaves as a physical object. It collides with other bodies and responds to forces applied to it. This is the default mode.", "enum": "Mode", "name": "MODE_RIGID", "value": "0"}, {"description": "Static mode. The body behaves like a [StaticBody2D] and does not move.", "enum": "Mode", "name": "MODE_STATIC", "value": "1"}, {"description": "Character mode. Similar to [code]MODE_RIGID[/code], but the body can not rotate.", "enum": "Mode", "name": "MODE_CHARACTER", "value": "2"}, {"description": "Kinematic mode. The body behaves like a [KinematicBody2D], and must be moved by code.", "enum": "Mode", "name": "MODE_KINEMATIC", "value": "3"}, {"description": "Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.", "enum": "CCDMode", "name": "CCD_MODE_DISABLED", "value": "0"}, {"description": "Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise.", "enum": "CCDMode", "name": "CCD_MODE_CAST_RAY", "value": "1"}, {"description": "Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise.", "enum": "CCDMode", "name": "CCD_MODE_CAST_SHAPE", "value": "2"}], "demos": {"links": []}, "description": "This node implements simulated 2D physics. You do not control a RigidBody2D directly. Instead you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.\n\t\tA RigidBody2D has 4 behavior [member mode]s: Rigid, Static, Character, and Kinematic.\n\t\t[b]Note:[/b] You should not change a RigidBody2D's [code]position[/code] or [code]linear_velocity[/code] every frame or even very often. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state.\n\t\tIf you need to override the default physics behavior, you can write a custom force integration. See [member custom_integrator].", "inherits": "PhysicsBody2D", "members": [{"description": "Damps the body's [member angular_velocity]. If [code]-1[/code] the body will use the \"Default Angular Damp\" in \"Project > Project Settings > Physics > 2d\". Default value: [code]-1[/code].", "getter": "get_angular_damp", "name": "angular_damp", "setter": "set_angular_damp", "type": "float"}, {"description": "The body's rotational velocity.", "getter": "get_angular_velocity", "name": "angular_velocity", "setter": "set_angular_velocity", "type": "float"}, {"description": "The body's total applied force.", "getter": "get_applied_force", "name": "applied_force", "setter": "set_applied_force", "type": "Vector2"}, {"description": "The body's total applied torque.", "getter": "get_applied_torque", "name": "applied_torque", "setter": "set_applied_torque", "type": "float"}, {"description": "The body's bounciness. Default value: [code]0[/code].", "getter": "get_bounce", "name": "bounce", "setter": "set_bounce", "type": "float"}, {"description": "If [code]true[/code] the body will not calculate forces and will act as a static body if there is no movement. The body will wake up when other forces are applied via collisions or by using [method apply_impulse] or [method add_force]. Default value: [code]true[/code].", "getter": "is_able_to_sleep", "name": "can_sleep", "setter": "set_can_sleep", "type": "bool"}, {"description": "If [code]true[/code] the body will emit signals when it collides with another RigidBody2D. See also [member contacts_reported]. Default value: [code]false[/code].", "getter": "is_contact_monitor_enabled", "name": "contact_monitor", "setter": "set_contact_monitor", "type": "bool"}, {"description": "The maximum number of contacts to report. Default value: [code]0[/code].", "getter": "get_max_contacts_reported", "name": "contacts_reported", "setter": "set_max_contacts_reported", "type": "int"}, {"description": "Continuous collision detection mode. Default value: [code]CCD_MODE_DISABLED[/code].\n\t\t\tContinuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See [code]CCD_MODE_[/code] constants for details.", "getter": "get_continuous_collision_detection_mode", "name": "continuous_cd", "setter": "set_continuous_collision_detection_mode", "type": "int"}, {"description": "If [code]true[/code] internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the [method _integrate_forces] function.", "getter": "is_using_custom_integrator", "name": "custom_integrator", "setter": "set_use_custom_integrator", "type": "bool"}, {"description": "The body's friction. Values range from [code]0[/code] (frictionless) to [code]1[/code] (maximum friction). Default value: [code]1[/code].", "getter": "get_friction", "name": "friction", "setter": "set_friction", "type": "float"}, {"description": "Multiplies the gravity applied to the body. The body's gravity is calculated from the \"Default Gravity\" value in \"Project > Project Settings > Physics > 2d\" and/or any additional gravity vector applied by [Area2D]s. Default value: [code]1[/code].", "getter": "get_gravity_scale", "name": "gravity_scale", "setter": "set_gravity_scale", "type": "float"}, {"description": "The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 (or negative) inertia to return to automatically computing it.", "getter": "get_inertia", "name": "inertia", "setter": "set_inertia", "type": "float"}, {"description": "Damps the body's [member linear_velocity]. If [code]-1[/code] the body will use the \"Default Linear Damp\" in \"Project > Project Settings > Physics > 2d\". Default value: [code]-1[/code].", "getter": "get_linear_damp", "name": "linear_damp", "setter": "set_linear_damp", "type": "float"}, {"description": "The body's linear velocity.", "getter": "get_linear_velocity", "name": "linear_velocity", "setter": "set_linear_velocity", "type": "Vector2"}, {"description": "The body's mass. Default value: [code]1[/code].", "getter": "get_mass", "name": "mass", "setter": "set_mass", "type": "float"}, {"description": "The body's mode. See [code]MODE_*[/code] constants. Default value: [code]MODE_RIGID[/code].", "getter": "get_mode", "name": "mode", "setter": "set_mode", "type": "int"}, {"description": "", "getter": "get_physics_material_override", "name": "physics_material_override", "setter": "set_physics_material_override", "type": "PhysicsMaterial"}, {"description": "If [code]true[/code] the body is sleeping and will not calculate forces until woken up by a collision or by using [method apply_impulse] or [method add_force].", "getter": "is_sleeping", "name": "sleeping", "setter": "set_sleeping", "type": "bool"}, {"description": "The body's weight based on its mass and the \"Default Gravity\" value in \"Project > Project Settings > Physics > 2d\".", "getter": "get_weight", "name": "weight", "setter": "set_weight", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "state", "type": "Physics2DDirectBodyState"}], "description": "Allows you to read and safely modify the simulation state for the object. Use this instead of [Node._physics_process] if you need to directly change the body's [code]position[/code] or other physics properties. By default it works in addition to the usual physics behavior, but [member custom_integrator] allows you to disable the default behavior and write custom force integration for a body.", "name": "_integrate_forces", "qualifiers": "virtual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "force", "type": "Vector2"}], "description": "", "name": "add_central_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "Vector2"}, {"description": "", "index": "1", "name": "force", "type": "Vector2"}], "description": "Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.", "name": "add_force", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "torque", "type": "float"}], "description": "", "name": "add_torque", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "impulse", "type": "Vector2"}], "description": "", "name": "apply_central_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "Vector2"}, {"description": "", "index": "1", "name": "impulse", "type": "Vector2"}], "description": "Applies a positioned impulse to the body (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied instantaneously. Both the impulse and the offset from the body origin are in global coordinates.", "name": "apply_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "torque", "type": "float"}], "description": "", "name": "apply_torque_impulse", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns a list of the bodies colliding with this one. Use [member contacts_reported] to set the maximum number reported. You must also set [member contact_monitor] to [code]true[/code]. Note that the result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.", "name": "get_colliding_bodies", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "axis_velocity", "type": "Vector2"}], "description": "Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.", "name": "set_axis_velocity", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "motion", "type": "Vector2"}, {"default": "true", "description": "", "index": "1", "name": "infinite_inertia", "type": "bool"}, {"default": "0.08", "description": "", "index": "2", "name": "margin", "type": "float"}, {"default": "null", "description": "", "index": "3", "name": "result", "type": "Physics2DTestMotionResult"}], "description": "Returns [code]true[/code] if a collision would result from moving in the given vector. [code]margin[/code] increases the size of the shapes involved in the collision detection, and [code]result[/code] is an object of type [Physics2DTestMotionResult], which contains additional information about the collision (should there be one).", "name": "test_motion", "return_": {"description": "", "type": "bool"}}], "name": "RigidBody2D", "signals": [{"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "Emitted when a body enters into contact with this one. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].", "name": "body_entered"}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "Emitted when a body exits contact with this one. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].", "name": "body_exited"}, {"arguments": [{"description": "", "index": "0", "name": "body_id", "type": "int"}, {"description": "", "index": "1", "name": "body", "type": "Node"}, {"description": "", "index": "2", "name": "body_shape", "type": "int"}, {"description": "", "index": "3", "name": "local_shape", "type": "int"}], "description": "Emitted when a body enters into contact with this one. Reports colliding shape information. See [CollisionObject2D] for shape index information. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].", "name": "body_shape_entered"}, {"arguments": [{"description": "", "index": "0", "name": "body_id", "type": "int"}, {"description": "", "index": "1", "name": "body", "type": "Node"}, {"description": "", "index": "2", "name": "body_shape", "type": "int"}, {"description": "", "index": "3", "name": "local_shape", "type": "int"}], "description": "Emitted when a body shape exits contact with this one. Reports colliding shape information. See [CollisionObject2D] for shape index information. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].", "name": "body_shape_exited"}, {"arguments": [], "description": "Emitted when [member sleeping] changes.", "name": "sleeping_state_changed"}], "tutorials": {"links": []}}, "RootMotionView": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualInstance", "members": [{"description": "", "getter": "get_animation_path", "name": "animation_path", "setter": "set_animation_path", "type": "NodePath"}, {"description": "", "getter": "get_cell_size", "name": "cell_size", "setter": "set_cell_size", "type": "float"}, {"description": "", "getter": "get_color", "name": "color", "setter": "set_color", "type": "Color"}, {"description": "", "getter": "get_radius", "name": "radius", "setter": "set_radius", "type": "float"}, {"description": "", "getter": "get_zero_y", "name": "zero_y", "setter": "set_zero_y", "type": "bool"}], "methods": [], "name": "RootMotionView", "signals": [], "tutorials": {"links": []}}, "SceneState": {"brief_description": "A script interface to a scene file's data.", "category": "Core", "constants": [{"description": "If passed to [method PackedScene.instance], blocks edits to the scene state.", "enum": "GenEditState", "name": "GEN_EDIT_STATE_DISABLED", "value": "0"}, {"description": "If passed to [method PackedScene.instance], provides inherited scene resources to the local scene. Requires tools compiled.", "enum": "GenEditState", "name": "GEN_EDIT_STATE_INSTANCE", "value": "1"}, {"description": "If passed to [method PackedScene.instance], provides local scene resources to the local scene. Only the main scene should receive the main edit state. Requires tools compiled.", "enum": "GenEditState", "name": "GEN_EDIT_STATE_MAIN", "value": "2"}], "demos": {"links": []}, "description": "Maintains a list of resources, nodes, exported and overridden properties, and built-in scripts associated with a scene.", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the list of bound parameters for the signal at [code]idx[/code].", "name": "get_connection_binds", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns the number of signal connections in the scene.", "name": "get_connection_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the flags for the signal at [code]idx[/code]. See [Object]'s [code]CONNECT_*[/code] flags.", "name": "get_connection_flags", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the method connected to the signal at [code]idx[/code].", "name": "get_connection_method", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the name of the signal at [code]idx[/code].", "name": "get_connection_signal", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the path to the node that owns the signal at [code]idx[/code], relative to the root node.", "name": "get_connection_source", "qualifiers": "const", "return_": {"description": "", "type": "NodePath"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the path to the node that owns the method connected to the signal at [code]idx[/code], relative to the root node.", "name": "get_connection_target", "qualifiers": "const", "return_": {"description": "", "type": "NodePath"}}, {"arguments": [], "description": "Returns the number of nodes in the scene.", "name": "get_node_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the list of group names associated with the node at [code]idx[/code].", "name": "get_node_groups", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_node_index", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the scene for the node at [code]idx[/code] or [code]null[/code] if the node is not an instance.", "name": "get_node_instance", "qualifiers": "const", "return_": {"description": "", "type": "PackedScene"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the path to the represented scene file if the node at [code]idx[/code] is an [InstancePlaceholder].", "name": "get_node_instance_placeholder", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the name of the node at [code]idx[/code].", "name": "get_node_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the path to the owner of the node at [code]idx[/code], relative to the root node.", "name": "get_node_owner_path", "qualifiers": "const", "return_": {"description": "", "type": "NodePath"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"default": "false", "description": "", "index": "1", "name": "for_parent", "type": "bool"}], "description": "Returns the path to the node at [code]idx[/code].", "name": "get_node_path", "qualifiers": "const", "return_": {"description": "", "type": "NodePath"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the number of exported or overridden properties for the node at [code]idx[/code].", "name": "get_node_property_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "prop_idx", "type": "int"}], "description": "Returns the name of the property at [code]prop_idx[/code] for the node at [code]idx[/code].", "name": "get_node_property_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}, {"description": "", "index": "1", "name": "prop_idx", "type": "int"}], "description": "Returns the value of the property at [code]prop_idx[/code] for the node at [code]idx[/code].", "name": "get_node_property_value", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the type of the node at [code]idx[/code].", "name": "get_node_type", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns [code]true[/code] if the node at [code]idx[/code] is an [InstancePlaceholder].", "name": "is_node_instance_placeholder", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "SceneState", "signals": [], "tutorials": {"links": []}}, "SceneTree": {"brief_description": "SceneTree manages a hierarchy of nodes.", "category": "Core", "constants": [{"description": "Call a group with no flags (default).", "enum": "GroupCallFlags", "name": "GROUP_CALL_DEFAULT", "value": "0"}, {"description": "Call a group in reverse scene order.", "enum": "GroupCallFlags", "name": "GROUP_CALL_REVERSE", "value": "1"}, {"description": "Call a group immediately (calls are normally made on idle).", "enum": "GroupCallFlags", "name": "GROUP_CALL_REALTIME", "value": "2"}, {"description": "Call a group only once even if the call is executed many times.", "enum": "GroupCallFlags", "name": "GROUP_CALL_UNIQUE", "value": "4"}, {"description": "No stretching.", "enum": "StretchMode", "name": "STRETCH_MODE_DISABLED", "value": "0"}, {"description": "Render stretching in higher resolution (interpolated).", "enum": "StretchMode", "name": "STRETCH_MODE_2D", "value": "1"}, {"description": "Keep the specified display resolution. No interpolation. Content may appear pixelated.", "enum": "StretchMode", "name": "STRETCH_MODE_VIEWPORT", "value": "2"}, {"description": "Fill the window with the content stretched to cover excessive space. Content may appear elongated.", "enum": "StretchAspect", "name": "STRETCH_ASPECT_IGNORE", "value": "0"}, {"description": "Retain the same aspect ratio by padding with black bars in either axes. No expansion of content.", "enum": "StretchAspect", "name": "STRETCH_ASPECT_KEEP", "value": "1"}, {"description": "Expand vertically. Left/right black bars may appear if the window is too wide.", "enum": "StretchAspect", "name": "STRETCH_ASPECT_KEEP_WIDTH", "value": "2"}, {"description": "Expand horizontally. Top/bottom black bars may appear if the window is too tall.", "enum": "StretchAspect", "name": "STRETCH_ASPECT_KEEP_HEIGHT", "value": "3"}, {"description": "Expand in both directions, retaining the same aspect ratio. No black bars.", "enum": "StretchAspect", "name": "STRETCH_ASPECT_EXPAND", "value": "4"}], "demos": {"links": []}, "description": "As one of the most important classes, the [code]SceneTree[/code] manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded. You can also use the SceneTree to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. a \"enemy\" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.", "inherits": "MainLoop", "members": [{"description": "The current scene.", "getter": "get_current_scene", "name": "current_scene", "setter": "set_current_scene", "type": "Node"}, {"description": "", "getter": "is_debugging_collisions_hint", "name": "debug_collisions_hint", "setter": "set_debug_collisions_hint", "type": "bool"}, {"description": "", "getter": "is_debugging_navigation_hint", "name": "debug_navigation_hint", "setter": "set_debug_navigation_hint", "type": "bool"}, {"description": "The root of the edited scene.", "getter": "get_edited_scene_root", "name": "edited_scene_root", "setter": "set_edited_scene_root", "type": "Node"}, {"description": "The default [MultiplayerAPI] instance for this SceneTree.", "getter": "get_multiplayer", "name": "multiplayer", "setter": "set_multiplayer", "type": "MultiplayerAPI"}, {"description": "If [code]true[/code] (default) enable the automatic polling of the [MultiplayerAPI] for this SceneTree during [signal idle_frame].\n\t\t\tWhen [code]false[/code] you need to manually call [method MultiplayerAPI.poll] for processing network packets and delivering RPCs/RSETs. This allows to run RPCs/RSETs in a different loop (e.g. physics, thread, specific time step) and for manual [Mutex] protecion when accessing the [MultiplayerAPI] from threads.", "getter": "is_multiplayer_poll_enabled", "name": "multiplayer_poll", "setter": "set_multiplayer_poll_enabled", "type": "bool"}, {"description": "The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the SceneTree will become a network server (check with [method is_network_server()]) and will set root node's network mode to master (see NETWORK_MODE_* constants in [Node]), or it will become a regular peer with root node set to slave. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to SceneTree's signals.", "getter": "get_network_peer", "name": "network_peer", "setter": "set_network_peer", "type": "NetworkedMultiplayerPeer"}, {"description": "If [code]true[/code] the SceneTree is paused.", "getter": "is_paused", "name": "paused", "setter": "set_pause", "type": "bool"}, {"description": "If [code]true[/code] the SceneTree's [member network_peer] refuses new incoming connections.", "getter": "is_refusing_new_network_connections", "name": "refuse_new_network_connections", "setter": "set_refuse_new_network_connections", "type": "bool"}, {"description": "The SceneTree's [Viewport].", "getter": "get_root", "name": "root", "setter": "", "type": "Viewport"}, {"description": "If [code]true[/code] font oversampling is used.", "getter": "is_using_font_oversampling", "name": "use_font_oversampling", "setter": "set_use_font_oversampling", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "group", "type": "String"}, {"description": "", "index": "1", "name": "method", "type": "String"}], "description": "Calls [code]method[/code] on each member of the given group.", "name": "call_group", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "flags", "type": "int"}, {"description": "", "index": "1", "name": "group", "type": "String"}, {"description": "", "index": "2", "name": "method", "type": "String"}], "description": "Calls [code]method[/code] on each member of the given group, respecting the given [enum GroupCallFlags].", "name": "call_group_flags", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "path", "type": "String"}], "description": "Changes to the scene at the given [code]path[/code].", "name": "change_scene", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "packed_scene", "type": "PackedScene"}], "description": "Changes to the given [PackedScene].", "name": "change_scene_to", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "time_sec", "type": "float"}, {"default": "true", "description": "", "index": "1", "name": "pause_mode_process", "type": "bool"}], "description": "Returns a [SceneTreeTimer] which will [signal SceneTreeTimer.timeout] after the given time in seconds elapsed in this SceneTree. If [code]pause_mode_process[/code] is set to false, pausing the SceneTree will also pause the timer.", "name": "create_timer", "return_": {"description": "", "type": "SceneTreeTimer"}}, {"arguments": [], "description": "", "name": "get_frame", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the peer IDs of all connected peers of this SceneTree's [member network_peer].", "name": "get_network_connected_peers", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [], "description": "Returns the unique peer ID of this SceneTree's [member network_peer].", "name": "get_network_unique_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the number of nodes in this SceneTree.", "name": "get_node_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "group", "type": "String"}], "description": "Returns all nodes assigned to the given group.", "name": "get_nodes_in_group", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns the sender's peer ID for the most recently received RPC call.", "name": "get_rpc_sender_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Returns [code]true[/code] if the given group exists.", "name": "has_group", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if there is a [member network_peer] set.", "name": "has_network_peer", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the most recent InputEvent was marked as handled with [method set_input_as_handled].", "name": "is_input_handled", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this SceneTree's [member network_peer] is in server mode (listening for connections).", "name": "is_network_server", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "group", "type": "String"}, {"description": "", "index": "1", "name": "notification", "type": "int"}], "description": "Sends the given notification to all members of the [code]group[/code].", "name": "notify_group", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "call_flags", "type": "int"}, {"description": "", "index": "1", "name": "group", "type": "String"}, {"description": "", "index": "2", "name": "notification", "type": "int"}], "description": "Sends the given notification to all members of the [code]group[/code], respecting the given [enum GroupCallFlags].", "name": "notify_group_flags", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "obj", "type": "Object"}], "description": "Queues the given object for deletion, delaying the call to [method Object.free] to after the current frame.", "name": "queue_delete", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Quits the application.", "name": "quit", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Reloads the currently active scene.", "name": "reload_current_scene", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "enabled", "type": "bool"}], "description": "If [code]true[/code] the application automatically accepts quitting.", "name": "set_auto_accept_quit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "group", "type": "String"}, {"description": "", "index": "1", "name": "property", "type": "String"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Sets the given [code]property[/code] to [code]value[/code] on all members of the given group.", "name": "set_group", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "call_flags", "type": "int"}, {"description": "", "index": "1", "name": "group", "type": "String"}, {"description": "", "index": "2", "name": "property", "type": "String"}, {"description": "", "index": "3", "name": "value", "type": "Variant"}], "description": "Sets the given [code]property[/code] to [code]value[/code] on all members of the given group, respecting the given [enum GroupCallFlags].", "name": "set_group_flags", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Marks the most recent input event as handled.", "name": "set_input_as_handled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enabled", "type": "bool"}], "description": "If [code]true[/code] the application quits automatically on going back (e.g. on Android).", "name": "set_quit_on_go_back", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mode", "type": "int"}, {"description": "", "index": "1", "name": "aspect", "type": "int"}, {"description": "", "index": "2", "name": "minsize", "type": "Vector2"}, {"default": "1", "description": "", "index": "3", "name": "shrink", "type": "float"}], "description": "Configures screen stretching to the given [enum StretchMode], [enum StretchAspect], minimum size and [code]shrink[/code].", "name": "set_screen_stretch", "return_": {"description": "", "type": "void"}}], "name": "SceneTree", "signals": [{"arguments": [], "description": "Emitted whenever this SceneTree's [member network_peer] successfully connected to a server. Only emitted on clients.", "name": "connected_to_server"}, {"arguments": [], "description": "Emitted whenever this SceneTree's [member network_peer] fails to establish a connection to a server. Only emitted on clients.", "name": "connection_failed"}, {"arguments": [{"description": "", "index": "0", "name": "files", "type": "PoolStringArray"}, {"description": "", "index": "1", "name": "screen", "type": "int"}], "description": "Emitted whenever files are drag-and-dropped onto the window.", "name": "files_dropped"}, {"arguments": [], "description": "Emitted immediately before [method Node._process] is called on every node in the SceneTree.", "name": "idle_frame"}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Emitted whenever this SceneTree's [member network_peer] connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1).", "name": "network_peer_connected"}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Emitted whenever this SceneTree's [member network_peer] disconnects from a peer. Clients get notified when other clients disconnect from the same server.", "name": "network_peer_disconnected"}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Emitted whenever a node is added to the SceneTree.", "name": "node_added"}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Emitted when a node's configuration changed. Only emitted in tool mode.", "name": "node_configuration_warning_changed"}, {"arguments": [{"description": "", "index": "0", "name": "node", "type": "Node"}], "description": "Emitted whenever a node is removed from the SceneTree.", "name": "node_removed"}, {"arguments": [], "description": "Emitted immediately before [method Node._physics_process] is called on every node in the SceneTree.", "name": "physics_frame"}, {"arguments": [], "description": "Emitted whenever the screen resolution (fullscreen) or window size (windowed) changes.", "name": "screen_resized"}, {"arguments": [], "description": "Emitted whenever this SceneTree's [member network_peer] disconnected from server. Only emitted on clients.", "name": "server_disconnected"}, {"arguments": [], "description": "Emitted whenever the SceneTree hierarchy changed (children being moved or renamed, etc.).", "name": "tree_changed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/getting_started/step_by_step/scene_tree.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/viewports/multiple_resolutions.html"}]}}, "SceneTreeTimer": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [{"description": "", "getter": "get_time_left", "name": "time_left", "setter": "set_time_left", "type": "float"}], "methods": [], "name": "SceneTreeTimer", "signals": [{"arguments": [], "description": "", "name": "timeout"}], "tutorials": {"links": []}}, "Script": {"brief_description": "A class stored as a resource.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A class stored as a resource. A script exends the functionality of all objects that instance it.\n\t\tThe [code]new[/code] method of a script subclass creates a new instance. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.", "inherits": "Resource", "members": [{"description": "The script source code or an empty string if source code is not available. When set, does not reload the class implementation automatically.", "getter": "get_source_code", "name": "source_code", "setter": "set_source_code", "type": "String"}], "methods": [{"arguments": [], "description": "Returns [code]true[/code] if the script can be instanced.", "name": "can_instance", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the script directly inherited by this script.", "name": "get_base_script", "qualifiers": "const", "return_": {"description": "", "type": "Script"}}, {"arguments": [], "description": "Returns the script's base type.", "name": "get_instance_base_type", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "signal_name", "type": "String"}], "description": "Returns [code]true[/code] if the script, or a base class, defines a signal with the given name.", "name": "has_script_signal", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the script contains non-empty source code.", "name": "has_source_code", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "base_object", "type": "Object"}], "description": "Returns [code]true[/code] if [code]base_object[/code] is an instance of this script.", "name": "instance_has", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the script is a tool script. A tool script can run in the editor.", "name": "is_tool", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "keep_state", "type": "bool"}], "description": "Reloads the script's class implementation. Returns an error code.", "name": "reload", "return_": {"description": "", "type": "int"}}], "name": "Script", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/getting_started/step_by_step/scripting.html"}]}}, "ScriptCreateDialog": {"brief_description": "The Editor's popup dialog for creating new [Script] files.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "The ScriptCreateDialog creates script files according to a given template for a given scripting language. The standard use is to configure its fields prior to calling a [method popup]() method.\n\t\t[codeblock]\n\t\tfunc _ready():\n\t\t\tdialog.config(\"Node\", \"res://new_node.gd\") # for in-engine types\n\t\t\tdialog.config(\"\\\"res://base_node.gd\\\"\", \"res://derived_node.gd\") # for script types\n\t\t\tdialog.popup_centered()\n\t\t[/codeblock]", "inherits": "ConfirmationDialog", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "inherits", "type": "String"}, {"description": "", "index": "1", "name": "path", "type": "String"}], "description": "Prefills required fields to configure the ScriptCreateDialog for use.", "name": "config", "return_": {"description": "", "type": "void"}}], "name": "ScriptCreateDialog", "signals": [{"arguments": [{"description": "", "index": "0", "name": "script", "type": "Script"}], "description": "Emitted when the user clicks the OK button.", "name": "script_created"}], "tutorials": {"links": []}}, "ScriptEditor": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "PanelContainer", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}, {"description": "", "index": "1", "name": "data", "type": "Variant"}, {"description": "", "index": "2", "name": "from", "type": "Control"}], "description": "", "name": "can_drop_data_fw", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}, {"description": "", "index": "1", "name": "data", "type": "Variant"}, {"description": "", "index": "2", "name": "from", "type": "Control"}], "description": "", "name": "drop_data_fw", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns a [Script] that is currently active in editor.", "name": "get_current_script", "return_": {"description": "", "type": "Script"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}, {"description": "", "index": "1", "name": "from", "type": "Control"}], "description": "", "name": "get_drag_data_fw", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Returns an array with all [Script] objects which are currently open in editor.", "name": "get_open_scripts", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "base_name", "type": "String"}, {"description": "", "index": "1", "name": "base_path", "type": "String"}], "description": "", "name": "open_script_create_dialog", "return_": {"description": "", "type": "void"}}], "name": "ScriptEditor", "signals": [{"arguments": [{"description": "", "index": "0", "name": "script", "type": "Script"}], "description": "Emitted when user changed active script. Argument is a freshly activated [Script].", "name": "editor_script_changed"}, {"arguments": [{"description": "", "index": "0", "name": "script", "type": "Script"}], "description": "Emitted when editor is about to close the active script. Argument is a [Script] that is going to be closed.", "name": "script_close"}], "tutorials": {"links": []}}, "ScrollBar": {"brief_description": "Base class for scroll bars.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Scrollbars are a [Range] based [Control], that display a draggable area (the size of the page). Horizontal ([HScrollBar]) and Vertical ([VScrollBar]) versions are available.", "inherits": "Range", "members": [{"description": "", "getter": "get_custom_step", "name": "custom_step", "setter": "set_custom_step", "type": "float"}], "methods": [], "name": "ScrollBar", "signals": [{"arguments": [], "description": "Emitted whenever the scrollbar is being scrolled.", "name": "scrolling"}], "tutorials": {"links": []}}, "ScrollContainer": {"brief_description": "A helper node for displaying scrollable elements (e.g. lists).", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A ScrollContainer node with a [Control] child and scrollbar child ([HScrollbar], [VScrollBar], or both) will only draw the Control within the ScrollContainer area.  Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer.  Scrollbars will also automatically resize the grabber based on the minimum_size of the Control relative to the ScrollContainer.  Works great with a [Panel] control.  You can set EXPAND on children size flags, so they will upscale to ScrollContainer size if ScrollContainer size is bigger (scroll is invisible for chosen dimension).", "inherits": "Container", "members": [{"description": "", "getter": "get_deadzone", "name": "scroll_deadzone", "setter": "set_deadzone", "type": "int"}, {"description": "The current horizontal scroll value.", "getter": "get_h_scroll", "name": "scroll_horizontal", "setter": "set_h_scroll", "type": "int"}, {"description": "If [code]true[/code], enables horizontal scrolling.", "getter": "is_h_scroll_enabled", "name": "scroll_horizontal_enabled", "setter": "set_enable_h_scroll", "type": "bool"}, {"description": "The current vertical scroll value.", "getter": "get_v_scroll", "name": "scroll_vertical", "setter": "set_v_scroll", "type": "int"}, {"description": "If [code]true[/code], enables vertical scrolling.", "getter": "is_v_scroll_enabled", "name": "scroll_vertical_enabled", "setter": "set_enable_v_scroll", "type": "bool"}], "methods": [{"arguments": [], "description": "", "name": "get_h_scrollbar", "return_": {"description": "", "type": "HScrollBar"}}, {"arguments": [], "description": "", "name": "get_v_scrollbar", "return_": {"description": "", "type": "VScrollBar"}}], "name": "ScrollContainer", "signals": [{"arguments": [], "description": "Emitted whenever scrolling stops.", "name": "scroll_ended"}, {"arguments": [], "description": "Emitted whenever scrolling is started.", "name": "scroll_started"}], "tutorials": {"links": []}}, "SegmentShape2D": {"brief_description": "Segment shape for 2D collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Segment shape for 2D collisions. Consists of two points, [code]a[/code] and [code]b[/code].", "inherits": "Shape2D", "members": [{"description": "The segment's first point position.", "getter": "get_a", "name": "a", "setter": "set_a", "type": "Vector2"}, {"description": "The segment's second point position.", "getter": "get_b", "name": "b", "setter": "set_b", "type": "Vector2"}], "methods": [], "name": "SegmentShape2D", "signals": [], "tutorials": {"links": []}}, "Semaphore": {"brief_description": "A synchronization Semaphore.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A synchronization Semaphore. Element used to synchronize multiple [Thread]s. Initialized to zero on creation. Be careful to avoid deadlocks. For a binary version, see [Mutex].", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "Lowers the [code]Semaphore[/code], allowing one more thread in. Returns [OK] on success, [ERR_BUSY] otherwise.", "name": "post", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Tries to wait for the [code]Semaphore[/code], if its value is zero, blocks until non-zero. Returns [OK] on success, [ERR_BUSY] otherwise.", "name": "wait", "return_": {"description": "", "type": "int"}}], "name": "Semaphore", "signals": [], "tutorials": {"links": []}}, "Separator": {"brief_description": "Base class for separators.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Separator is a [Control] used for separating other controls. It's purely a visual decoration. Horizontal ([HSeparator]) and Vertical ([VSeparator]) versions are available.", "inherits": "Control", "members": [], "methods": [], "name": "Separator", "signals": [], "tutorials": {"links": []}}, "Shader": {"brief_description": "A custom shader program.", "category": "Core", "constants": [{"description": "", "enum": "Mode", "name": "MODE_SPATIAL", "value": "0"}, {"description": "", "enum": "Mode", "name": "MODE_CANVAS_ITEM", "value": "1"}, {"description": "", "enum": "Mode", "name": "MODE_PARTICLES", "value": "2"}], "demos": {"links": []}, "description": "This class allows you to define a custom shader program that can be used for various materials to render objects.", "inherits": "Resource", "members": [{"description": "", "getter": "get_code", "name": "code", "setter": "set_code", "type": "String"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "param", "type": "String"}], "description": "", "name": "get_default_texture_param", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [], "description": "Returns the shader mode for the shader, eiter [code]MODE_CANVAS_ITEM[/code], [code]MODE_SPATIAL[/code] or [code]MODE_PARTICLES[/code]", "name": "get_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "", "name": "has_param", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "param", "type": "String"}, {"description": "", "index": "1", "name": "texture", "type": "Texture"}], "description": "", "name": "set_default_texture_param", "return_": {"description": "", "type": "void"}}], "name": "Shader", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/shading/index.html"}]}}, "ShaderMaterial": {"brief_description": "A material that uses a custom [Shader] program.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A material that uses a custom [Shader] program to render either items to screen or process particles. You can create multiple materials for the same shader but configure different values for the uniforms defined in the shader.", "inherits": "Material", "members": [{"description": "The [Shader] program used to render this material.", "getter": "get_shader", "name": "shader", "setter": "set_shader", "type": "Shader"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "param", "type": "String"}], "description": "Returns the current value set for this material of a uniform in the shader.", "name": "get_shader_param", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "param", "type": "String"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "Changes the value set for this material of a uniform in the shader.", "name": "set_shader_param", "return_": {"description": "", "type": "void"}}], "name": "ShaderMaterial", "signals": [], "tutorials": {"links": []}}, "Shape": {"brief_description": "Base class for all 3D shape resources.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Base class for all 3D shape resources. Nodes that inherit from this can be used as shapes for a [PhysicsBody] or [Area] objects.", "inherits": "Resource", "members": [{"description": "", "getter": "get_margin", "name": "margin", "setter": "set_margin", "type": "float"}], "methods": [], "name": "Shape", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/physics_introduction.html"}]}}, "Shape2D": {"brief_description": "Base class for all 2D Shapes.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Base class for all 2D Shapes. All 2D shape types inherit from this.", "inherits": "Resource", "members": [{"description": "", "getter": "get_custom_solver_bias", "name": "custom_solver_bias", "setter": "set_custom_solver_bias", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "local_xform", "type": "Transform2D"}, {"description": "", "index": "1", "name": "with_shape", "type": "Shape2D"}, {"description": "", "index": "2", "name": "shape_xform", "type": "Transform2D"}], "description": "Return whether this shape is colliding with another.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).", "name": "collide", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "local_xform", "type": "Transform2D"}, {"description": "", "index": "1", "name": "with_shape", "type": "Shape2D"}, {"description": "", "index": "2", "name": "shape_xform", "type": "Transform2D"}], "description": "Return a list of the points where this shape touches another. If there are no collisions, the list is empty.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).", "name": "collide_and_get_contacts", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "local_xform", "type": "Transform2D"}, {"description": "", "index": "1", "name": "local_motion", "type": "Vector2"}, {"description": "", "index": "2", "name": "with_shape", "type": "Shape2D"}, {"description": "", "index": "3", "name": "shape_xform", "type": "Transform2D"}, {"description": "", "index": "4", "name": "shape_motion", "type": "Vector2"}], "description": "Return whether this shape would collide with another, if a given movement was applied.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).", "name": "collide_with_motion", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "local_xform", "type": "Transform2D"}, {"description": "", "index": "1", "name": "local_motion", "type": "Vector2"}, {"description": "", "index": "2", "name": "with_shape", "type": "Shape2D"}, {"description": "", "index": "3", "name": "shape_xform", "type": "Transform2D"}, {"description": "", "index": "4", "name": "shape_motion", "type": "Vector2"}], "description": "Return a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions, the list is empty.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).", "name": "collide_with_motion_and_get_contacts", "return_": {"description": "", "type": "Variant"}}], "name": "Shape2D", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/physics_introduction.html"}]}}, "ShortCut": {"brief_description": "A shortcut for binding input.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A shortcut for binding input.\n\t\tShortcuts are commonly used for interacting with a [Control] element from a [InputEvent].", "inherits": "Resource", "members": [{"description": "The Shortcut's [InputEvent].\n\t\t\tGenerally the [InputEvent] is a keyboard key, though it can be any [InputEvent].", "getter": "get_shortcut", "name": "shortcut", "setter": "set_shortcut", "type": "InputEvent"}], "methods": [{"arguments": [], "description": "Returns the Shortcut's [InputEvent] as a [String].", "name": "get_as_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "event", "type": "InputEvent"}], "description": "Returns [code]true[/code] if the Shortcut's [InputEvent] equals [code]event[/code].", "name": "is_shortcut", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "If [code]true[/code] this Shortcut is valid.", "name": "is_valid", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "ShortCut", "signals": [], "tutorials": {"links": []}}, "Skeleton": {"brief_description": "Skeleton for characters and animated objects.", "category": "Core", "constants": [{"description": "", "name": "NOTIFICATION_UPDATE_SKELETON", "value": "50"}], "demos": {"links": []}, "description": "Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see [Animation]). Skeleton will support rag doll dynamics in the future.\n\t\tThe overall transform of a bone with respect to the skeleton is determined by the following hierarchical order: rest pose, custom pose and pose.\n\t\tNote that \"global pose\" below refers to the overall transform of the bone with respect to skeleton, so it not the actual global/world transform of the bone.", "inherits": "Spatial", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Add a bone, with name \"name\". [method get_bone_count] will become the bone index.", "name": "add_bone", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}, {"description": "", "index": "1", "name": "node", "type": "Node"}], "description": "Deprecated soon.", "name": "bind_child_node_to_bone", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clear all the bones in this skeleton.", "name": "clear_bones", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Return the bone index that matches \"name\" as its name.", "name": "find_bone", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the amount of bones in the skeleton.", "name": "get_bone_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}], "description": "Return the custom pose of the specified bone. Custom pose is applied on top of the rest pose.", "name": "get_bone_custom_pose", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}], "description": "Return the overall transform of the specified bone, with respect to the skeleton. Being relative to the skeleton frame, this is not the actual \"global\" transform of the bone.", "name": "get_bone_global_pose", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}], "description": "Return the name of the bone at index \"index\".", "name": "get_bone_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}], "description": "Return the bone index which is the parent of the bone at \"bone_idx\". If -1, then bone has no parent. Note that the parent bone returned will always be less than \"bone_idx\".", "name": "get_bone_parent", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}], "description": "Return the pose transform of the specified bone. Pose is applied on top of the custom pose, which is applied on top the rest pose.", "name": "get_bone_pose", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}], "description": "Return the rest transform for a bone \"bone_idx\".", "name": "get_bone_rest", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}], "description": "Return the combination of custom pose and pose. The returned transform is in skeleton's reference frame.", "name": "get_bone_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}], "description": "Deprecated soon.", "name": "get_bound_child_nodes_to_bone", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}], "description": "", "name": "is_bone_rest_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "exception", "type": "RID"}], "description": "", "name": "physical_bones_add_collision_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "exception", "type": "RID"}], "description": "", "name": "physical_bones_remove_collision_exception", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "[  ]", "description": "", "index": "0", "name": "bones", "type": "Array"}], "description": "", "name": "physical_bones_start_simulation", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "physical_bones_stop_simulation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}, {"description": "", "index": "1", "name": "custom_pose", "type": "Transform"}], "description": "", "name": "set_bone_custom_pose", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}, {"description": "", "index": "1", "name": "disable", "type": "bool"}], "description": "", "name": "set_bone_disable_rest", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}, {"description": "", "index": "1", "name": "pose", "type": "Transform"}], "description": "", "name": "set_bone_global_pose", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bone", "type": "int"}, {"description": "", "index": "1", "name": "ignore", "type": "bool"}], "description": "", "name": "set_bone_ignore_animation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}, {"description": "", "index": "1", "name": "parent_idx", "type": "int"}], "description": "Set the bone index \"parent_idx\" as the parent of the bone at \"bone_idx\". If -1, then bone has no parent. Note: \"parent_idx\" must be less than \"bone_idx\".", "name": "set_bone_parent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}, {"description": "", "index": "1", "name": "pose", "type": "Transform"}], "description": "Return the pose transform for bone \"bone_idx\".", "name": "set_bone_pose", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}, {"description": "", "index": "1", "name": "rest", "type": "Transform"}], "description": "Set the rest transform for bone \"bone_idx\"", "name": "set_bone_rest", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}, {"description": "", "index": "1", "name": "node", "type": "Node"}], "description": "Deprecated soon.", "name": "unbind_child_node_from_bone", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bone_idx", "type": "int"}], "description": "", "name": "unparent_bone_and_rest", "return_": {"description": "", "type": "void"}}], "name": "Skeleton", "signals": [], "tutorials": {"links": []}}, "Skeleton2D": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Node2D", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "get_bone", "return_": {"description": "", "type": "Bone2D"}}, {"arguments": [], "description": "", "name": "get_bone_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_skeleton", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}], "name": "Skeleton2D", "signals": [], "tutorials": {"links": []}}, "SkeletonIK": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Node", "members": [{"description": "", "getter": "get_interpolation", "name": "interpolation", "setter": "set_interpolation", "type": "float"}, {"description": "", "getter": "get_magnet_position", "name": "magnet", "setter": "set_magnet_position", "type": "Vector3"}, {"description": "", "getter": "get_max_iterations", "name": "max_iterations", "setter": "set_max_iterations", "type": "int"}, {"description": "", "getter": "get_min_distance", "name": "min_distance", "setter": "set_min_distance", "type": "float"}, {"description": "", "getter": "get_root_bone", "name": "root_bone", "setter": "set_root_bone", "type": "String"}, {"description": "", "getter": "get_target_transform", "name": "target", "setter": "set_target_transform", "type": "Transform"}, {"description": "", "getter": "get_target_node", "name": "target_node", "setter": "set_target_node", "type": "NodePath"}, {"description": "", "getter": "get_tip_bone", "name": "tip_bone", "setter": "set_tip_bone", "type": "String"}, {"description": "", "getter": "is_using_magnet", "name": "use_magnet", "setter": "set_use_magnet", "type": "bool"}], "methods": [{"arguments": [], "description": "", "name": "get_parent_skeleton", "qualifiers": "const", "return_": {"description": "", "type": "Skeleton"}}, {"arguments": [], "description": "", "name": "is_running", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "one_time", "type": "bool"}], "description": "", "name": "start", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "stop", "return_": {"description": "", "type": "void"}}], "name": "SkeletonIK", "signals": [], "tutorials": {"links": []}}, "Sky": {"brief_description": "The base class for [PanoramaSky] and [ProceduralSky].", "category": "Core", "constants": [{"description": "Radiance texture size is 32x32 pixels.", "enum": "RadianceSize", "name": "RADIANCE_SIZE_32", "value": "0"}, {"description": "Radiance texture size is 64x64 pixels.", "enum": "RadianceSize", "name": "RADIANCE_SIZE_64", "value": "1"}, {"description": "Radiance texture size is 128x128 pixels.", "enum": "RadianceSize", "name": "RADIANCE_SIZE_128", "value": "2"}, {"description": "Radiance texture size is 256x256 pixels.", "enum": "RadianceSize", "name": "RADIANCE_SIZE_256", "value": "3"}, {"description": "Radiance texture size is 512x512 pixels.", "enum": "RadianceSize", "name": "RADIANCE_SIZE_512", "value": "4"}, {"description": "Radiance texture size is 1024x1024 pixels.", "enum": "RadianceSize", "name": "RADIANCE_SIZE_1024", "value": "5"}, {"description": "Radiance texture size is 2048x2048 pixels.", "enum": "RadianceSize", "name": "RADIANCE_SIZE_2048", "value": "6"}, {"description": "Radiance texture size is the largest size it can be.", "enum": "RadianceSize", "name": "RADIANCE_SIZE_MAX", "value": "7"}], "demos": {"links": []}, "description": "The base class for [PanoramaSky] and [ProceduralSky].", "inherits": "Resource", "members": [{"description": "The Sky's radiance map size.\n\t\t\tThe higher the radiance map size, the more detailed the lighting from the Sky will be.\n\t\t\tSee RADIANCE_SIZE_* constants for values. Default size is RADIANCE_SIZE_512.", "getter": "get_radiance_size", "name": "radiance_size", "setter": "set_radiance_size", "type": "int"}], "methods": [], "name": "Sky", "signals": [], "tutorials": {"links": []}}, "Slider": {"brief_description": "Base class for GUI Sliders.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Base class for GUI Sliders.", "inherits": "Range", "members": [{"description": "", "getter": "is_editable", "name": "editable", "setter": "set_editable", "type": "bool"}, {"description": "", "getter": "get_focus_mode", "name": "focus_mode", "setter": "set_focus_mode", "type": "int"}, {"description": "", "getter": "is_scrollable", "name": "scrollable", "setter": "set_scrollable", "type": "bool"}, {"description": "", "getter": "get_ticks", "name": "tick_count", "setter": "set_ticks", "type": "int"}, {"description": "", "getter": "get_ticks_on_borders", "name": "ticks_on_borders", "setter": "set_ticks_on_borders", "type": "bool"}], "methods": [], "name": "Slider", "signals": [], "tutorials": {"links": []}}, "SliderJoint": {"brief_description": "Piston kind of slider between two bodies in 3D.", "category": "Core", "constants": [{"description": "The maximum difference between the pivot points on their x-axis before damping happens.", "enum": "Param", "name": "PARAM_LINEAR_LIMIT_UPPER", "value": "0"}, {"description": "The minimum difference between the pivot points on their x-axis before damping happens.", "enum": "Param", "name": "PARAM_LINEAR_LIMIT_LOWER", "value": "1"}, {"description": "A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.", "enum": "Param", "name": "PARAM_LINEAR_LIMIT_SOFTNESS", "value": "2"}, {"description": "The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost.", "enum": "Param", "name": "PARAM_LINEAR_LIMIT_RESTITUTION", "value": "3"}, {"description": "The amount of damping once the slider limits are surpassed.", "enum": "Param", "name": "PARAM_LINEAR_LIMIT_DAMPING", "value": "4"}, {"description": "A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.", "enum": "Param", "name": "PARAM_LINEAR_MOTION_SOFTNESS", "value": "5"}, {"description": "The amount of restitution inside the slider limits.", "enum": "Param", "name": "PARAM_LINEAR_MOTION_RESTITUTION", "value": "6"}, {"description": "The amount of damping inside the slider limits.", "enum": "Param", "name": "PARAM_LINEAR_MOTION_DAMPING", "value": "7"}, {"description": "A factor applied to the movement across axes orthogonal to the slider.", "enum": "Param", "name": "PARAM_LINEAR_ORTHOGONAL_SOFTNESS", "value": "8"}, {"description": "The amount of restitution when movement is across axes orthogonal to the slider.", "enum": "Param", "name": "PARAM_LINEAR_ORTHOGONAL_RESTITUTION", "value": "9"}, {"description": "The amount of damping when movement is across axes orthogonal to the slider.", "enum": "Param", "name": "PARAM_LINEAR_ORTHOGONAL_DAMPING", "value": "10"}, {"description": "The upper limit of rotation in the slider.", "enum": "Param", "name": "PARAM_ANGULAR_LIMIT_UPPER", "value": "11"}, {"description": "The lower limit of rotation in the slider.", "enum": "Param", "name": "PARAM_ANGULAR_LIMIT_LOWER", "value": "12"}, {"description": "A factor applied to the all rotation once the limit is surpassed.", "enum": "Param", "name": "PARAM_ANGULAR_LIMIT_SOFTNESS", "value": "13"}, {"description": "The amount of restitution of the rotation when the limit is surpassed.", "enum": "Param", "name": "PARAM_ANGULAR_LIMIT_RESTITUTION", "value": "14"}, {"description": "The amount of damping of the rotation when the limit is surpassed.", "enum": "Param", "name": "PARAM_ANGULAR_LIMIT_DAMPING", "value": "15"}, {"description": "A factor applied to the all rotation in the limits.", "enum": "Param", "name": "PARAM_ANGULAR_MOTION_SOFTNESS", "value": "16"}, {"description": "The amount of restitution of the rotation in the limits.", "enum": "Param", "name": "PARAM_ANGULAR_MOTION_RESTITUTION", "value": "17"}, {"description": "The amount of damping of the rotation in the limits.", "enum": "Param", "name": "PARAM_ANGULAR_MOTION_DAMPING", "value": "18"}, {"description": "A factor applied to the all rotation across axes orthogonal to the slider.", "enum": "Param", "name": "PARAM_ANGULAR_ORTHOGONAL_SOFTNESS", "value": "19"}, {"description": "The amount of restitution of the rotation across axes orthogonal to the slider.", "enum": "Param", "name": "PARAM_ANGULAR_ORTHOGONAL_RESTITUTION", "value": "20"}, {"description": "The amount of damping of the rotation across axes orthogonal to the slider.", "enum": "Param", "name": "PARAM_ANGULAR_ORTHOGONAL_DAMPING", "value": "21"}, {"description": "End flag of PARAM_* constants, used internally.", "enum": "Param", "name": "PARAM_MAX", "value": "22"}], "demos": {"links": []}, "description": "Slides across the x-axis of the [Pivot] object.", "inherits": "Joint", "members": [{"description": "The amount of damping of the rotation when the limit is surpassed.\n\t\t\tA lower damping value allows a rotation initiated by body A to travel to body B slower.", "getter": "get_param", "name": "angular_limit/damping", "setter": "set_param", "type": "float"}, {"description": "The lower limit of rotation in the slider.", "getter": "_get_lower_limit_angular", "name": "angular_limit/lower_angle", "setter": "_set_lower_limit_angular", "type": "float"}, {"description": "The amount of restitution of the rotation when the limit is surpassed.\n\t\t\tDoes not affect damping.", "getter": "get_param", "name": "angular_limit/restitution", "setter": "set_param", "type": "float"}, {"description": "A factor applied to the all rotation once the limit is surpassed.\n\t\t\tMakes all rotation slower when between 0 and 1.", "getter": "get_param", "name": "angular_limit/softness", "setter": "set_param", "type": "float"}, {"description": "The upper limit of rotation in the slider.", "getter": "_get_upper_limit_angular", "name": "angular_limit/upper_angle", "setter": "_set_upper_limit_angular", "type": "float"}, {"description": "The amount of damping of the rotation in the limits.", "getter": "get_param", "name": "angular_motion/damping", "setter": "set_param", "type": "float"}, {"description": "The amount of restitution of the rotation in the limits.", "getter": "get_param", "name": "angular_motion/restitution", "setter": "set_param", "type": "float"}, {"description": "A factor applied to the all rotation in the limits.", "getter": "get_param", "name": "angular_motion/softness", "setter": "set_param", "type": "float"}, {"description": "The amount of damping of the rotation across axes orthogonal to the slider.", "getter": "get_param", "name": "angular_ortho/damping", "setter": "set_param", "type": "float"}, {"description": "The amount of restitution of the rotation across axes orthogonal to the slider.", "getter": "get_param", "name": "angular_ortho/restitution", "setter": "set_param", "type": "float"}, {"description": "A factor applied to the all rotation across axes orthogonal to the slider.", "getter": "get_param", "name": "angular_ortho/softness", "setter": "set_param", "type": "float"}, {"description": "The amount of damping that happens once the limit defined by [member linear_limit/lower_distance] and [member linear_limit/upper_distance] is surpassed.", "getter": "get_param", "name": "linear_limit/damping", "setter": "set_param", "type": "float"}, {"description": "The minimum difference between the pivot points on their x-axis before damping happens.", "getter": "get_param", "name": "linear_limit/lower_distance", "setter": "set_param", "type": "float"}, {"description": "The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost.", "getter": "get_param", "name": "linear_limit/restitution", "setter": "set_param", "type": "float"}, {"description": "A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.", "getter": "get_param", "name": "linear_limit/softness", "setter": "set_param", "type": "float"}, {"description": "The maximum difference between the pivot points on their x-axis before damping happens.", "getter": "get_param", "name": "linear_limit/upper_distance", "setter": "set_param", "type": "float"}, {"description": "The amount of damping inside the slider limits.", "getter": "get_param", "name": "linear_motion/damping", "setter": "set_param", "type": "float"}, {"description": "The amount of restitution inside the slider limits.", "getter": "get_param", "name": "linear_motion/restitution", "setter": "set_param", "type": "float"}, {"description": "A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.", "getter": "get_param", "name": "linear_motion/softness", "setter": "set_param", "type": "float"}, {"description": "The amount of damping when movement is across axes orthogonal to the slider.", "getter": "get_param", "name": "linear_ortho/damping", "setter": "set_param", "type": "float"}, {"description": "The amount of restitution when movement is across axes orthogonal to the slider.", "getter": "get_param", "name": "linear_ortho/restitution", "setter": "set_param", "type": "float"}, {"description": "A factor applied to the movement across axes orthogonal to the slider.", "getter": "get_param", "name": "linear_ortho/softness", "setter": "set_param", "type": "float"}], "methods": [], "name": "SliderJoint", "signals": [], "tutorials": {"links": []}}, "SoftBody": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "MeshInstance", "members": [{"description": "", "getter": "get_areaAngular_stiffness", "name": "areaAngular_stiffness", "setter": "set_areaAngular_stiffness", "type": "float"}, {"description": "", "getter": "get_collision_layer", "name": "collision_layer", "setter": "set_collision_layer", "type": "int"}, {"description": "", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}, {"description": "", "getter": "get_damping_coefficient", "name": "damping_coefficient", "setter": "set_damping_coefficient", "type": "float"}, {"description": "", "getter": "get_drag_coefficient", "name": "drag_coefficient", "setter": "set_drag_coefficient", "type": "float"}, {"description": "", "getter": "get_linear_stiffness", "name": "linear_stiffness", "setter": "set_linear_stiffness", "type": "float"}, {"description": "", "getter": "get_parent_collision_ignore", "name": "parent_collision_ignore", "setter": "set_parent_collision_ignore", "type": "NodePath"}, {"description": "", "getter": "get_pose_matching_coefficient", "name": "pose_matching_coefficient", "setter": "set_pose_matching_coefficient", "type": "float"}, {"description": "", "getter": "get_pressure_coefficient", "name": "pressure_coefficient", "setter": "set_pressure_coefficient", "type": "float"}, {"description": "", "getter": "get_simulation_precision", "name": "simulation_precision", "setter": "set_simulation_precision", "type": "int"}, {"description": "", "getter": "get_total_mass", "name": "total_mass", "setter": "set_total_mass", "type": "float"}, {"description": "", "getter": "get_volume_stiffness", "name": "volume_stiffness", "setter": "set_volume_stiffness", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "", "name": "add_collision_exception_with", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "", "name": "get_collision_layer_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "", "name": "get_collision_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "is_ray_pickable", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "body", "type": "Node"}], "description": "", "name": "remove_collision_exception_with", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "", "name": "set_collision_layer_bit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "", "name": "set_collision_mask_bit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "ray_pickable", "type": "bool"}], "description": "", "name": "set_ray_pickable", "return_": {"description": "", "type": "void"}}], "name": "SoftBody", "signals": [], "tutorials": {"links": []}}, "Spatial": {"brief_description": "Most basic 3D game object, parent of all 3D related nodes.", "category": "Core", "constants": [{"description": "Spatial nodes receives this notification when their global transform changes. This means that either the current or a parent node changed its transform.\n\t\t\tIn order for NOTIFICATION_TRANSFORM_CHANGED to work user first needs to ask for it, with set_notify_transform(true).", "name": "NOTIFICATION_TRANSFORM_CHANGED", "value": "29"}, {"description": "Spatial nodes receives this notification when they are registered to new [World] resource.", "name": "NOTIFICATION_ENTER_WORLD", "value": "41"}, {"description": "Spatial nodes receives this notification when they are unregistered from current [World] resource.", "name": "NOTIFICATION_EXIT_WORLD", "value": "42"}, {"description": "Spatial nodes receives this notification when their visibility changes.", "name": "NOTIFICATION_VISIBILITY_CHANGED", "value": "43"}], "demos": {"links": []}, "description": "Most basic 3D game object, with a 3D [Transform] and visibility settings. All other 3D game objects inherit from Spatial. Use Spatial as a parent node to move, scale, rotate and show/hide children in a 3D project.\n\t\tAffine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the Spatial object is set as top level. Affine operations in this coordinate system correspond to direct affine operations on the Spatial's transform. The word local below refers to this coordinate system. The coordinate system that is attached to the Spatial object itself is referred to as object-local coordinate system.", "inherits": "Node", "members": [{"description": "The SpatialGizmo for this node. Used for example in [EditorSpatialGizmo] as custom visualization and editing handles in Editor.", "getter": "get_gizmo", "name": "gizmo", "setter": "set_gizmo", "type": "SpatialGizmo"}, {"description": "World space (global) [Transform] of this node.", "getter": "get_global_transform", "name": "global_transform", "setter": "set_global_transform", "type": "Transform"}, {"description": "Rotation part of the local transformation in radians, specified in terms of YXZ-Euler angles in the format (X-angle, Y-angle, Z-angle).\n\t\t\tNote that in the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a [Vector3] data structure not because the rotation is a vector, but only because [Vector3] exists as a convenient data-structure to store 3 floating point numbers. Therefore, applying affine operations on the rotation \"vector\" is not meaningful.", "getter": "get_rotation", "name": "rotation", "setter": "set_rotation", "type": "Vector3"}, {"description": "Rotation part of the local transformation in degrees, specified in terms of YXZ-Euler angles in the format (X-angle, Y-angle, Z-angle).", "getter": "get_rotation_degrees", "name": "rotation_degrees", "setter": "set_rotation_degrees", "type": "Vector3"}, {"description": "Scale part of the local transformation.", "getter": "get_scale", "name": "scale", "setter": "set_scale", "type": "Vector3"}, {"description": "Local space [Transform] of this node, with respect to the parent node.", "getter": "get_transform", "name": "transform", "setter": "set_transform", "type": "Transform"}, {"description": "Local translation of this node.", "getter": "get_translation", "name": "translation", "setter": "set_translation", "type": "Vector3"}, {"description": "If [code]true[/code] this node is drawn. Default value: [code]true[/code].", "getter": "is_visible", "name": "visible", "setter": "set_visible", "type": "bool"}], "methods": [{"arguments": [], "description": "Returns the parent [code]Spatial[/code], or an empty [Object] if no parent exists or parent is not of type [code]Spatial[/code].", "name": "get_parent_spatial", "qualifiers": "const", "return_": {"description": "", "type": "Spatial"}}, {"arguments": [], "description": "Returns the current [World] resource this Spatial node is registered to.", "name": "get_world", "qualifiers": "const", "return_": {"description": "", "type": "World"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "angle", "type": "float"}], "description": "Rotates the global (world) transformation around axis, a unit [Vector3], by specified angle in radians. The rotation axis is in global coordinate system.", "name": "global_rotate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "scale", "type": "Vector3"}], "description": "", "name": "global_scale", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "Vector3"}], "description": "Moves the global (world) transformation by [Vector3] offset. The offset is in global coordinate system.", "name": "global_translate", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Disables rendering of this node. Change Spatial Visible property to false.", "name": "hide", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns whether node notifies about its local transformation changes. Spatial will not propagate this by default.", "name": "is_local_transform_notification_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "is_scale_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns whether this node is set as Toplevel, that is whether it ignores its parent nodes transformations.", "name": "is_set_as_toplevel", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns whether the node notifies about its global and local transformation changes. Spatial will not propagate this by default.", "name": "is_transform_notification_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns whether the node is visible, taking into consideration that its parents visibility.", "name": "is_visible_in_tree", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "target", "type": "Vector3"}, {"description": "", "index": "1", "name": "up", "type": "Vector3"}], "description": "Rotates itself so that the local -Z axis points towards the [code]target[/code] position.\n\t\t\t\tThe transform will first be rotated around the given [code]up[/code] vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the [code]target[/code] and [code]up[/code] vectors.\n\t\t\t\tOperations take place in global space.", "name": "look_at", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector3"}, {"description": "", "index": "1", "name": "target", "type": "Vector3"}, {"description": "", "index": "2", "name": "up", "type": "Vector3"}], "description": "Moves the node to the specified [code]position[/code], and then rotates itself to point toward the [code]target[/code] as per [method look_at]. Operations take place in global space.", "name": "look_at_from_position", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's [Transform3D].", "name": "orthonormalize", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "angle", "type": "float"}], "description": "Rotates the local transformation around axis, a unit [Vector3], by specified angle in radians.", "name": "rotate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "angle", "type": "float"}], "description": "Rotates the local transformation around axis, a unit [Vector3], by specified angle in radians. The rotation axis is in object-local coordinate system.", "name": "rotate_object_local", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "angle", "type": "float"}], "description": "Rotates the local transformation around the X axis by angle in radians", "name": "rotate_x", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "angle", "type": "float"}], "description": "Rotates the local transformation around the Y axis by angle in radians.", "name": "rotate_y", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "angle", "type": "float"}], "description": "Rotates the local transformation around the Z axis by angle in radians.", "name": "rotate_z", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "scale", "type": "Vector3"}], "description": "Scales the local transformation by given 3D scale factors in object-local coordinate system.", "name": "scale_object_local", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Makes the node ignore its parents transformations. Node transformations are only in global space.", "name": "set_as_toplevel", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "disable", "type": "bool"}], "description": "", "name": "set_disable_scale", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Reset all transformations for this node. Set its [Transform3D] to identity matrix.", "name": "set_identity", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enabled", "type": "bool"}], "description": "Set whether the node ignores notification that its transformation (global or local) changed.", "name": "set_ignore_transform_notification", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Set whether the node notifies about its local transformation changes. Spatial will not propagate this by default.", "name": "set_notify_local_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "Set whether the node notifies about its global and local transformation changes. Spatial will not propagate this by default.", "name": "set_notify_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Enables rendering of this node. Change Spatial Visible property to \"True\".", "name": "show", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "local_point", "type": "Vector3"}], "description": "Transforms [Vector3] \"local_point\" from this node's local space to world space.", "name": "to_global", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "global_point", "type": "Vector3"}], "description": "Transforms [Vector3] \"global_point\" from world space to this node's local space.", "name": "to_local", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "Vector3"}], "description": "Changes the node's position by given offset [Vector3].", "name": "translate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "Vector3"}], "description": "", "name": "translate_object_local", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Updates the [SpatialGizmo] of this node.", "name": "update_gizmo", "return_": {"description": "", "type": "void"}}], "name": "Spatial", "signals": [{"arguments": [], "description": "Emitted when node visibility changes.", "name": "visibility_changed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/introduction_to_3d.html"}]}}, "SpatialGizmo": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [], "name": "SpatialGizmo", "signals": [], "tutorials": {"links": []}}, "SpatialMaterial": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "TextureParam", "name": "TEXTURE_ALBEDO", "value": "0"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_METALLIC", "value": "1"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_ROUGHNESS", "value": "2"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_EMISSION", "value": "3"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_NORMAL", "value": "4"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_RIM", "value": "5"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_CLEARCOAT", "value": "6"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_FLOWMAP", "value": "7"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_AMBIENT_OCCLUSION", "value": "8"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_DEPTH", "value": "9"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_SUBSURFACE_SCATTERING", "value": "10"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_TRANSMISSION", "value": "11"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_REFRACTION", "value": "12"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_DETAIL_MASK", "value": "13"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_DETAIL_ALBEDO", "value": "14"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_DETAIL_NORMAL", "value": "15"}, {"description": "", "enum": "TextureParam", "name": "TEXTURE_MAX", "value": "16"}, {"description": "", "enum": "DetailUV", "name": "DETAIL_UV_1", "value": "0"}, {"description": "", "enum": "DetailUV", "name": "DETAIL_UV_2", "value": "1"}, {"description": "", "enum": "Feature", "name": "FEATURE_TRANSPARENT", "value": "0"}, {"description": "", "enum": "Feature", "name": "FEATURE_EMISSION", "value": "1"}, {"description": "", "enum": "Feature", "name": "FEATURE_NORMAL_MAPPING", "value": "2"}, {"description": "", "enum": "Feature", "name": "FEATURE_RIM", "value": "3"}, {"description": "", "enum": "Feature", "name": "FEATURE_CLEARCOAT", "value": "4"}, {"description": "", "enum": "Feature", "name": "FEATURE_ANISOTROPY", "value": "5"}, {"description": "", "enum": "Feature", "name": "FEATURE_AMBIENT_OCCLUSION", "value": "6"}, {"description": "", "enum": "Feature", "name": "FEATURE_DEPTH_MAPPING", "value": "7"}, {"description": "", "enum": "Feature", "name": "FEATURE_SUBSURACE_SCATTERING", "value": "8"}, {"description": "", "enum": "Feature", "name": "FEATURE_TRANSMISSION", "value": "9"}, {"description": "", "enum": "Feature", "name": "FEATURE_REFRACTION", "value": "10"}, {"description": "", "enum": "Feature", "name": "FEATURE_DETAIL", "value": "11"}, {"description": "", "enum": "Feature", "name": "FEATURE_MAX", "value": "12"}, {"description": "", "enum": "BlendMode", "name": "BLEND_MODE_MIX", "value": "0"}, {"description": "", "enum": "BlendMode", "name": "BLEND_MODE_ADD", "value": "1"}, {"description": "", "enum": "BlendMode", "name": "BLEND_MODE_SUB", "value": "2"}, {"description": "", "enum": "BlendMode", "name": "BLEND_MODE_MUL", "value": "3"}, {"description": "", "enum": "DepthDrawMode", "name": "DEPTH_DRAW_OPAQUE_ONLY", "value": "0"}, {"description": "", "enum": "DepthDrawMode", "name": "DEPTH_DRAW_ALWAYS", "value": "1"}, {"description": "", "enum": "DepthDrawMode", "name": "DEPTH_DRAW_DISABLED", "value": "2"}, {"description": "", "enum": "DepthDrawMode", "name": "DEPTH_DRAW_ALPHA_OPAQUE_PREPASS", "value": "3"}, {"description": "", "enum": "CullMode", "name": "CULL_BACK", "value": "0"}, {"description": "", "enum": "CullMode", "name": "CULL_FRONT", "value": "1"}, {"description": "", "enum": "CullMode", "name": "CULL_DISABLED", "value": "2"}, {"description": "", "enum": "Flags", "name": "FLAG_UNSHADED", "value": "0"}, {"description": "", "enum": "Flags", "name": "FLAG_USE_VERTEX_LIGHTING", "value": "1"}, {"description": "", "enum": "Flags", "name": "FLAG_DISABLE_DEPTH_TEST", "value": "2"}, {"description": "", "enum": "Flags", "name": "FLAG_ALBEDO_FROM_VERTEX_COLOR", "value": "3"}, {"description": "", "enum": "Flags", "name": "FLAG_SRGB_VERTEX_COLOR", "value": "4"}, {"description": "", "enum": "Flags", "name": "FLAG_USE_POINT_SIZE", "value": "5"}, {"description": "", "enum": "Flags", "name": "FLAG_FIXED_SIZE", "value": "6"}, {"description": "", "enum": "Flags", "name": "FLAG_BILLBOARD_KEEP_SCALE", "value": "7"}, {"description": "", "enum": "Flags", "name": "FLAG_UV1_USE_TRIPLANAR", "value": "8"}, {"description": "", "enum": "Flags", "name": "FLAG_UV2_USE_TRIPLANAR", "value": "9"}, {"description": "", "enum": "Flags", "name": "FLAG_AO_ON_UV2", "value": "11"}, {"description": "", "enum": "Flags", "name": "FLAG_EMISSION_ON_UV2", "value": "12"}, {"description": "", "enum": "Flags", "name": "FLAG_USE_ALPHA_SCISSOR", "value": "13"}, {"description": "", "enum": "Flags", "name": "FLAG_TRIPLANAR_USE_WORLD", "value": "10"}, {"description": "", "enum": "Flags", "name": "FLAG_ALBEDO_TEXTURE_FORCE_SRGB", "value": "14"}, {"description": "", "enum": "Flags", "name": "FLAG_DONT_RECEIVE_SHADOWS", "value": "15"}, {"description": "", "enum": "Flags", "name": "FLAG_DISABLE_AMBIENT_LIGHT", "value": "17"}, {"description": "", "enum": "Flags", "name": "FLAG_ENSURE_CORRECT_NORMALS", "value": "16"}, {"description": "", "enum": "Flags", "name": "FLAG_MAX", "value": "18"}, {"description": "", "enum": "DiffuseMode", "name": "DIFFUSE_BURLEY", "value": "0"}, {"description": "", "enum": "DiffuseMode", "name": "DIFFUSE_LAMBERT", "value": "1"}, {"description": "", "enum": "DiffuseMode", "name": "DIFFUSE_LAMBERT_WRAP", "value": "2"}, {"description": "", "enum": "DiffuseMode", "name": "DIFFUSE_OREN_NAYAR", "value": "3"}, {"description": "", "enum": "DiffuseMode", "name": "DIFFUSE_TOON", "value": "4"}, {"description": "", "enum": "SpecularMode", "name": "SPECULAR_SCHLICK_GGX", "value": "0"}, {"description": "", "enum": "SpecularMode", "name": "SPECULAR_BLINN", "value": "1"}, {"description": "", "enum": "SpecularMode", "name": "SPECULAR_PHONG", "value": "2"}, {"description": "", "enum": "SpecularMode", "name": "SPECULAR_TOON", "value": "3"}, {"description": "", "enum": "SpecularMode", "name": "SPECULAR_DISABLED", "value": "4"}, {"description": "", "enum": "BillboardMode", "name": "BILLBOARD_DISABLED", "value": "0"}, {"description": "", "enum": "BillboardMode", "name": "BILLBOARD_ENABLED", "value": "1"}, {"description": "", "enum": "BillboardMode", "name": "BILLBOARD_FIXED_Y", "value": "2"}, {"description": "", "enum": "BillboardMode", "name": "BILLBOARD_PARTICLES", "value": "3"}, {"description": "", "enum": "TextureChannel", "name": "TEXTURE_CHANNEL_RED", "value": "0"}, {"description": "", "enum": "TextureChannel", "name": "TEXTURE_CHANNEL_GREEN", "value": "1"}, {"description": "", "enum": "TextureChannel", "name": "TEXTURE_CHANNEL_BLUE", "value": "2"}, {"description": "", "enum": "TextureChannel", "name": "TEXTURE_CHANNEL_ALPHA", "value": "3"}, {"description": "", "enum": "TextureChannel", "name": "TEXTURE_CHANNEL_GRAYSCALE", "value": "4"}, {"description": "", "enum": "EmissionOperator", "name": "EMISSION_OP_ADD", "value": "0"}, {"description": "", "enum": "EmissionOperator", "name": "EMISSION_OP_MULTIPLY", "value": "1"}, {"description": "", "enum": "DistanceFadeMode", "name": "DISTANCE_FADE_DISABLED", "value": "0"}, {"description": "", "enum": "DistanceFadeMode", "name": "DISTANCE_FADE_PIXEL_ALPHA", "value": "1"}, {"description": "", "enum": "DistanceFadeMode", "name": "DISTANCE_FADE_PIXEL_DITHER", "value": "2"}, {"description": "", "enum": "DistanceFadeMode", "name": "DISTANCE_FADE_OBJECT_DITHER", "value": "3"}], "demos": {"links": []}, "description": "", "inherits": "Material", "members": [{"description": "", "getter": "get_albedo", "name": "albedo_color", "setter": "set_albedo", "type": "Color"}, {"description": "", "getter": "get_texture", "name": "albedo_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_anisotropy", "name": "anisotropy", "setter": "set_anisotropy", "type": "float"}, {"description": "", "getter": "get_feature", "name": "anisotropy_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_texture", "name": "anisotropy_flowmap", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_feature", "name": "ao_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_ao_light_affect", "name": "ao_light_affect", "setter": "set_ao_light_affect", "type": "float"}, {"description": "", "getter": "get_flag", "name": "ao_on_uv2", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_texture", "name": "ao_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_ao_texture_channel", "name": "ao_texture_channel", "setter": "set_ao_texture_channel", "type": "int"}, {"description": "", "getter": "get_clearcoat", "name": "clearcoat", "setter": "set_clearcoat", "type": "float"}, {"description": "", "getter": "get_feature", "name": "clearcoat_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_clearcoat_gloss", "name": "clearcoat_gloss", "setter": "set_clearcoat_gloss", "type": "float"}, {"description": "", "getter": "get_texture", "name": "clearcoat_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "is_depth_deep_parallax_enabled", "name": "depth_deep_parallax", "setter": "set_depth_deep_parallax", "type": "bool"}, {"description": "", "getter": "get_feature", "name": "depth_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_depth_deep_parallax_max_layers", "name": "depth_max_layers", "setter": "set_depth_deep_parallax_max_layers", "type": "int"}, {"description": "", "getter": "get_depth_deep_parallax_min_layers", "name": "depth_min_layers", "setter": "set_depth_deep_parallax_min_layers", "type": "int"}, {"description": "", "getter": "get_depth_scale", "name": "depth_scale", "setter": "set_depth_scale", "type": "float"}, {"description": "", "getter": "get_texture", "name": "depth_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_texture", "name": "detail_albedo", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_detail_blend_mode", "name": "detail_blend_mode", "setter": "set_detail_blend_mode", "type": "int"}, {"description": "", "getter": "get_feature", "name": "detail_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_texture", "name": "detail_mask", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_texture", "name": "detail_normal", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_detail_uv", "name": "detail_uv_layer", "setter": "set_detail_uv", "type": "int"}, {"description": "", "getter": "get_distance_fade_max_distance", "name": "distance_fade_max_distance", "setter": "set_distance_fade_max_distance", "type": "float"}, {"description": "", "getter": "get_distance_fade_min_distance", "name": "distance_fade_min_distance", "setter": "set_distance_fade_min_distance", "type": "float"}, {"description": "", "getter": "get_distance_fade", "name": "distance_fade_mode", "setter": "set_distance_fade", "type": "int"}, {"description": "", "getter": "get_emission", "name": "emission", "setter": "set_emission", "type": "Color"}, {"description": "", "getter": "get_feature", "name": "emission_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_emission_energy", "name": "emission_energy", "setter": "set_emission_energy", "type": "float"}, {"description": "", "getter": "get_flag", "name": "emission_on_uv2", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_emission_operator", "name": "emission_operator", "setter": "set_emission_operator", "type": "int"}, {"description": "", "getter": "get_texture", "name": "emission_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_flag", "name": "flags_albedo_tex_force_srgb", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "flags_disable_ambient_light", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "flags_do_not_receive_shadows", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "flags_ensure_correct_normals", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "flags_fixed_size", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "flags_no_depth_test", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_feature", "name": "flags_transparent", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "flags_unshaded", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "flags_use_point_size", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "flags_vertex_lighting", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "flags_world_triplanar", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_metallic", "name": "metallic", "setter": "set_metallic", "type": "float"}, {"description": "", "getter": "get_specular", "name": "metallic_specular", "setter": "set_specular", "type": "float"}, {"description": "", "getter": "get_texture", "name": "metallic_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_metallic_texture_channel", "name": "metallic_texture_channel", "setter": "set_metallic_texture_channel", "type": "int"}, {"description": "", "getter": "get_feature", "name": "normal_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_normal_scale", "name": "normal_scale", "setter": "set_normal_scale", "type": "float"}, {"description": "", "getter": "get_texture", "name": "normal_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_alpha_scissor_threshold", "name": "params_alpha_scissor_threshold", "setter": "set_alpha_scissor_threshold", "type": "float"}, {"description": "", "getter": "get_flag", "name": "params_billboard_keep_scale", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_billboard_mode", "name": "params_billboard_mode", "setter": "set_billboard_mode", "type": "int"}, {"description": "", "getter": "get_blend_mode", "name": "params_blend_mode", "setter": "set_blend_mode", "type": "int"}, {"description": "", "getter": "get_cull_mode", "name": "params_cull_mode", "setter": "set_cull_mode", "type": "int"}, {"description": "", "getter": "get_depth_draw_mode", "name": "params_depth_draw_mode", "setter": "set_depth_draw_mode", "type": "int"}, {"description": "", "getter": "get_diffuse_mode", "name": "params_diffuse_mode", "setter": "set_diffuse_mode", "type": "int"}, {"description": "", "getter": "is_grow_enabled", "name": "params_grow", "setter": "set_grow_enabled", "type": "bool"}, {"description": "", "getter": "get_grow", "name": "params_grow_amount", "setter": "set_grow", "type": "float"}, {"description": "", "getter": "get_line_width", "name": "params_line_width", "setter": "set_line_width", "type": "float"}, {"description": "", "getter": "get_point_size", "name": "params_point_size", "setter": "set_point_size", "type": "float"}, {"description": "", "getter": "get_specular_mode", "name": "params_specular_mode", "setter": "set_specular_mode", "type": "int"}, {"description": "", "getter": "get_flag", "name": "params_use_alpha_scissor", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_particles_anim_h_frames", "name": "particles_anim_h_frames", "setter": "set_particles_anim_h_frames", "type": "int"}, {"description": "", "getter": "get_particles_anim_loop", "name": "particles_anim_loop", "setter": "set_particles_anim_loop", "type": "int"}, {"description": "", "getter": "get_particles_anim_v_frames", "name": "particles_anim_v_frames", "setter": "set_particles_anim_v_frames", "type": "int"}, {"description": "", "getter": "get_proximity_fade_distance", "name": "proximity_fade_distance", "setter": "set_proximity_fade_distance", "type": "float"}, {"description": "", "getter": "is_proximity_fade_enabled", "name": "proximity_fade_enable", "setter": "set_proximity_fade", "type": "bool"}, {"description": "", "getter": "get_feature", "name": "refraction_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_refraction", "name": "refraction_scale", "setter": "set_refraction", "type": "float"}, {"description": "", "getter": "get_texture", "name": "refraction_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_refraction_texture_channel", "name": "refraction_texture_channel", "setter": "set_refraction_texture_channel", "type": "int"}, {"description": "", "getter": "get_rim", "name": "rim", "setter": "set_rim", "type": "float"}, {"description": "", "getter": "get_feature", "name": "rim_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_texture", "name": "rim_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_rim_tint", "name": "rim_tint", "setter": "set_rim_tint", "type": "float"}, {"description": "", "getter": "get_roughness", "name": "roughness", "setter": "set_roughness", "type": "float"}, {"description": "", "getter": "get_texture", "name": "roughness_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_roughness_texture_channel", "name": "roughness_texture_channel", "setter": "set_roughness_texture_channel", "type": "int"}, {"description": "", "getter": "get_feature", "name": "subsurf_scatter_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_subsurface_scattering_strength", "name": "subsurf_scatter_strength", "setter": "set_subsurface_scattering_strength", "type": "float"}, {"description": "", "getter": "get_texture", "name": "subsurf_scatter_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_transmission", "name": "transmission", "setter": "set_transmission", "type": "Color"}, {"description": "", "getter": "get_feature", "name": "transmission_enabled", "setter": "set_feature", "type": "bool"}, {"description": "", "getter": "get_texture", "name": "transmission_texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_uv1_offset", "name": "uv1_offset", "setter": "set_uv1_offset", "type": "Vector3"}, {"description": "", "getter": "get_uv1_scale", "name": "uv1_scale", "setter": "set_uv1_scale", "type": "Vector3"}, {"description": "", "getter": "get_flag", "name": "uv1_triplanar", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_uv1_triplanar_blend_sharpness", "name": "uv1_triplanar_sharpness", "setter": "set_uv1_triplanar_blend_sharpness", "type": "float"}, {"description": "", "getter": "get_uv2_offset", "name": "uv2_offset", "setter": "set_uv2_offset", "type": "Vector3"}, {"description": "", "getter": "get_uv2_scale", "name": "uv2_scale", "setter": "set_uv2_scale", "type": "Vector3"}, {"description": "", "getter": "get_flag", "name": "uv2_triplanar", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_uv2_triplanar_blend_sharpness", "name": "uv2_triplanar_sharpness", "setter": "set_uv2_triplanar_blend_sharpness", "type": "float"}, {"description": "", "getter": "get_flag", "name": "vertex_color_is_srgb", "setter": "set_flag", "type": "bool"}, {"description": "", "getter": "get_flag", "name": "vertex_color_use_as_albedo", "setter": "set_flag", "type": "bool"}], "methods": [], "name": "SpatialMaterial", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/spatial_material.html"}]}}, "SpatialVelocityTracker": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [{"description": "", "getter": "is_tracking_physics_step", "name": "track_physics_step", "setter": "set_track_physics_step", "type": "bool"}], "methods": [{"arguments": [], "description": "", "name": "get_tracked_linear_velocity", "qualifiers": "const", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector3"}], "description": "", "name": "reset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector3"}], "description": "", "name": "update_position", "return_": {"description": "", "type": "void"}}], "name": "SpatialVelocityTracker", "signals": [], "tutorials": {"links": []}}, "SphereMesh": {"brief_description": "Class representing a spherical [PrimitiveMesh].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Class representing a spherical [PrimitiveMesh].", "inherits": "PrimitiveMesh", "members": [{"description": "Full height of the sphere. Defaults to 2.0.", "getter": "get_height", "name": "height", "setter": "set_height", "type": "float"}, {"description": "Determines whether a full sphere or a hemisphere is created. Attention: To get a regular hemisphere the height and radius of the sphere have to equal. Defaults to false.", "getter": "get_is_hemisphere", "name": "is_hemisphere", "setter": "set_is_hemisphere", "type": "bool"}, {"description": "Number of radial segments on the sphere. Defaults to 64.", "getter": "get_radial_segments", "name": "radial_segments", "setter": "set_radial_segments", "type": "int"}, {"description": "Radius of sphere. Defaults to 1.0.", "getter": "get_radius", "name": "radius", "setter": "set_radius", "type": "float"}, {"description": "Number of segments along the height of the sphere. Defaults to 32.", "getter": "get_rings", "name": "rings", "setter": "set_rings", "type": "int"}], "methods": [], "name": "SphereMesh", "signals": [], "tutorials": {"links": []}}, "SphereShape": {"brief_description": "Sphere shape for 3D collisions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Sphere shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. This shape is useful for modeling sphere-like 3D objects.", "inherits": "Shape", "members": [{"description": "The sphere's radius. The shape's diameter is double the radius.", "getter": "get_radius", "name": "radius", "setter": "set_radius", "type": "float"}], "methods": [], "name": "SphereShape", "signals": [], "tutorials": {"links": []}}, "SpinBox": {"brief_description": "Numerical input text field.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "SpinBox is a numerical input text field. It allows entering integers and floats.", "inherits": "Range", "members": [{"description": "", "getter": "is_editable", "name": "editable", "setter": "set_editable", "type": "bool"}, {"description": "", "getter": "get_prefix", "name": "prefix", "setter": "set_prefix", "type": "String"}, {"description": "", "getter": "get_suffix", "name": "suffix", "setter": "set_suffix", "type": "String"}], "methods": [{"arguments": [], "description": "", "name": "get_line_edit", "return_": {"description": "", "type": "LineEdit"}}], "name": "SpinBox", "signals": [], "tutorials": {"links": []}}, "SplitContainer": {"brief_description": "Container for splitting and adjusting.", "category": "Core", "constants": [{"description": "The split dragger is visible.", "enum": "DraggerVisibility", "name": "DRAGGER_VISIBLE", "value": "0"}, {"description": "The split dragger is invisible.", "enum": "DraggerVisibility", "name": "DRAGGER_HIDDEN", "value": "1"}, {"description": "The split dragger is invisible and collapsed.", "enum": "DraggerVisibility", "name": "DRAGGER_HIDDEN_COLLAPSED", "value": "2"}], "demos": {"links": []}, "description": "Container for splitting two controls vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.", "inherits": "Container", "members": [{"description": "", "getter": "is_collapsed", "name": "collapsed", "setter": "set_collapsed", "type": "bool"}, {"description": "Determines whether the dragger is visible.", "getter": "get_dragger_visibility", "name": "dragger_visibility", "setter": "set_dragger_visibility", "type": "int"}, {"description": "", "getter": "get_split_offset", "name": "split_offset", "setter": "set_split_offset", "type": "int"}], "methods": [], "name": "SplitContainer", "signals": [{"arguments": [{"description": "", "index": "0", "name": "offset", "type": "int"}], "description": "Emitted when the dragger is dragged by user.", "name": "dragged"}], "tutorials": {"links": []}}, "SpotLight": {"brief_description": "Spotlight [Light], such as a reflector spotlight or a lantern.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A SpotLight light is a type of [Light] node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light]. TODO: Image of a spotlight.", "inherits": "Light", "members": [{"description": "", "getter": "get_param", "name": "spot_angle", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param", "name": "spot_angle_attenuation", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param", "name": "spot_attenuation", "setter": "set_param", "type": "float"}, {"description": "", "getter": "get_param", "name": "spot_range", "setter": "set_param", "type": "float"}], "methods": [], "name": "SpotLight", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/lights_and_shadows.html"}]}}, "SpringArm": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Spatial", "members": [{"description": "", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}, {"description": "", "getter": "get_margin", "name": "margin", "setter": "set_margin", "type": "float"}, {"description": "", "getter": "get_shape", "name": "shape", "setter": "set_shape", "type": "Shape"}, {"description": "", "getter": "get_length", "name": "spring_length", "setter": "set_length", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "RID", "type": "RID"}], "description": "", "name": "add_excluded_object", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "clear_excluded_objects", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_hit_length", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "RID", "type": "RID"}], "description": "", "name": "remove_excluded_object", "return_": {"description": "", "type": "bool"}}], "name": "SpringArm", "signals": [], "tutorials": {"links": []}}, "Sprite": {"brief_description": "General purpose Sprite node.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.", "inherits": "Node2D", "members": [{"description": "If [code]true[/code] texture is centered. Default value: [code]true[/code].", "getter": "is_centered", "name": "centered", "setter": "set_centered", "type": "bool"}, {"description": "If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code].", "getter": "is_flipped_h", "name": "flip_h", "setter": "set_flip_h", "type": "bool"}, {"description": "If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code].", "getter": "is_flipped_v", "name": "flip_v", "setter": "set_flip_v", "type": "bool"}, {"description": "Current frame to display from sprite sheet. [member vframes] or [member hframes] must be greater than 1.", "getter": "get_frame", "name": "frame", "setter": "set_frame", "type": "int"}, {"description": "The number of columns in the sprite sheet.", "getter": "get_hframes", "name": "hframes", "setter": "set_hframes", "type": "int"}, {"description": "The normal map gives depth to the Sprite.", "getter": "get_normal_map", "name": "normal_map", "setter": "set_normal_map", "type": "Texture"}, {"description": "The texture's drawing offset.", "getter": "get_offset", "name": "offset", "setter": "set_offset", "type": "Vector2"}, {"description": "If [code]true[/code] texture is cut from a larger atlas texture. See [code]region_rect[/code]. Default value: [code]false[/code].", "getter": "is_region", "name": "region_enabled", "setter": "set_region", "type": "bool"}, {"description": "If [code]true[/code] the outermost pixels get blurred out.", "getter": "is_region_filter_clip_enabled", "name": "region_filter_clip", "setter": "set_region_filter_clip", "type": "bool"}, {"description": "The region of the atlas texture to display. [member region_enabled] must be [code]true[/code].", "getter": "get_region_rect", "name": "region_rect", "setter": "set_region_rect", "type": "Rect2"}, {"description": "[Texture] object to draw.", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}, {"description": "The number of rows in the sprite sheet.", "getter": "get_vframes", "name": "vframes", "setter": "set_vframes", "type": "int"}], "methods": [{"arguments": [], "description": "Returns a Rect2 representing the Sprite's boundary relative to its local coordinates.", "name": "get_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "pos", "type": "Vector2"}], "description": "", "name": "is_pixel_opaque", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "Sprite", "signals": [{"arguments": [], "description": "Emitted when the [member frame] changes.", "name": "frame_changed"}, {"arguments": [], "description": "Emitted when the [member texture] changes.", "name": "texture_changed"}], "tutorials": {"links": []}}, "Sprite3D": {"brief_description": "2D Sprite node in 3D world.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.", "inherits": "SpriteBase3D", "members": [{"description": "Current frame to display from sprite sheet. [member vframes] or [member hframes] must be greater than 1.", "getter": "get_frame", "name": "frame", "setter": "set_frame", "type": "int"}, {"description": "The number of columns in the sprite sheet.", "getter": "get_hframes", "name": "hframes", "setter": "set_hframes", "type": "int"}, {"description": "If [code]true[/code] texture will be cut from a larger atlas texture. See [member region_rect]. Default value: [code]false[/code].", "getter": "is_region", "name": "region_enabled", "setter": "set_region", "type": "bool"}, {"description": "The region of the atlas texture to display. [member region_enabled] must be [code]true[/code].", "getter": "get_region_rect", "name": "region_rect", "setter": "set_region_rect", "type": "Rect2"}, {"description": "[Texture] object to draw.", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}, {"description": "The number of rows in the sprite sheet.", "getter": "get_vframes", "name": "vframes", "setter": "set_vframes", "type": "int"}], "methods": [], "name": "Sprite3D", "signals": [{"arguments": [], "description": "Emitted when the [member frame] changes.", "name": "frame_changed"}], "tutorials": {"links": []}}, "SpriteBase3D": {"brief_description": "2D Sprite node in 3D environment.", "category": "Core", "constants": [{"description": "If set, the texture's transparency and the opacity are used to make those parts of the Sprite invisible.", "enum": "DrawFlags", "name": "FLAG_TRANSPARENT", "value": "0"}, {"description": "If set, the Light in the Environment has effects on the Sprite.", "enum": "DrawFlags", "name": "FLAG_SHADED", "value": "1"}, {"description": "If set, texture can be seen from the back as well, if not, it is invisible when looking at it from behind.", "enum": "DrawFlags", "name": "FLAG_DOUBLE_SIDED", "value": "2"}, {"description": "Used internally to mark the end of the Flags section.", "enum": "DrawFlags", "name": "FLAG_MAX", "value": "3"}, {"description": "", "enum": "AlphaCutMode", "name": "ALPHA_CUT_DISABLED", "value": "0"}, {"description": "", "enum": "AlphaCutMode", "name": "ALPHA_CUT_DISCARD", "value": "1"}, {"description": "", "enum": "AlphaCutMode", "name": "ALPHA_CUT_OPAQUE_PREPASS", "value": "2"}], "demos": {"links": []}, "description": "A node that displays 2D texture information in a 3D environment.", "inherits": "GeometryInstance", "members": [{"description": "", "getter": "get_alpha_cut_mode", "name": "alpha_cut", "setter": "set_alpha_cut_mode", "type": "int"}, {"description": "The direction in which the front of the texture faces.", "getter": "get_axis", "name": "axis", "setter": "set_axis", "type": "int"}, {"description": "If [code]true[/code] texture will be centered. Default value: [code]true[/code].", "getter": "is_centered", "name": "centered", "setter": "set_centered", "type": "bool"}, {"description": "If [code]true[/code] texture can be seen from the back as well, if [code]false[/code], it is invisible when looking at it from behind. Default value: [code]true[/code].", "getter": "get_draw_flag", "name": "double_sided", "setter": "set_draw_flag", "type": "bool"}, {"description": "If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code].", "getter": "is_flipped_h", "name": "flip_h", "setter": "set_flip_h", "type": "bool"}, {"description": "If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code].", "getter": "is_flipped_v", "name": "flip_v", "setter": "set_flip_v", "type": "bool"}, {"description": "A color value that gets multiplied on, could be used for mood-coloring or to simulate the color of light.", "getter": "get_modulate", "name": "modulate", "setter": "set_modulate", "type": "Color"}, {"description": "The texture's drawing offset.", "getter": "get_offset", "name": "offset", "setter": "set_offset", "type": "Vector2"}, {"description": "The objects visibility on a scale from [code]0[/code] fully invisible to [code]1[/code] fully visible.", "getter": "get_opacity", "name": "opacity", "setter": "set_opacity", "type": "float"}, {"description": "The size of one pixel's width on the Sprite to scale it in 3D.", "getter": "get_pixel_size", "name": "pixel_size", "setter": "set_pixel_size", "type": "float"}, {"description": "If [code]true[/code] the [Light] in the [Environment] has effects on the Sprite. Default value: [code]false[/code].", "getter": "get_draw_flag", "name": "shaded", "setter": "set_draw_flag", "type": "bool"}, {"description": "If [code]true[/code] the texture's transparency and the opacity are used to make those parts of the Sprite invisible. Default value: [code]true[/code].", "getter": "get_draw_flag", "name": "transparent", "setter": "set_draw_flag", "type": "bool"}], "methods": [{"arguments": [], "description": "", "name": "generate_triangle_mesh", "qualifiers": "const", "return_": {"description": "", "type": "TriangleMesh"}}, {"arguments": [], "description": "", "name": "get_item_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}], "name": "SpriteBase3D", "signals": [], "tutorials": {"links": []}}, "SpriteFrames": {"brief_description": "Sprite frame library for AnimatedSprite.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Sprite frame library for [AnimatedSprite]. Contains frames and animation data for playback.", "inherits": "Resource", "members": [{"description": "", "getter": "_get_frames", "name": "frames", "setter": "_set_frames", "type": "Array"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}], "description": "Adds a new animation to the library.", "name": "add_animation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}, {"description": "", "index": "1", "name": "frame", "type": "Texture"}, {"default": "-1", "description": "", "index": "2", "name": "at_position", "type": "int"}], "description": "Adds a frame to the given animation.", "name": "add_frame", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}], "description": "Removes all frames from the given animation.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes all animations. A \"default\" animation will be created.", "name": "clear_all", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}], "description": "If [code]true[/code] the given animation will loop.", "name": "get_animation_loop", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns an array containing the names associated to each animation. Values are placed in alphabetical order.", "name": "get_animation_names", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}], "description": "The animation's speed in frames per second.", "name": "get_animation_speed", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}, {"description": "", "index": "1", "name": "idx", "type": "int"}], "description": "Returns the animation's selected frame.", "name": "get_frame", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}], "description": "Returns the number of frames in the animation.", "name": "get_frame_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}], "description": "If [code]true[/code] the named animation exists.", "name": "has_animation", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}], "description": "Removes the given animation.", "name": "remove_animation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}, {"description": "", "index": "1", "name": "idx", "type": "int"}], "description": "Removes the animation's selected frame.", "name": "remove_frame", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}, {"description": "", "index": "1", "name": "newname", "type": "String"}], "description": "Changes the animation's name to [code]newname[/code].", "name": "rename_animation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}, {"description": "", "index": "1", "name": "loop", "type": "bool"}], "description": "If [code]true[/code] the animation will loop.", "name": "set_animation_loop", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}, {"description": "", "index": "1", "name": "speed", "type": "float"}], "description": "The animation's speed in frames per second.", "name": "set_animation_speed", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "anim", "type": "String"}, {"description": "", "index": "1", "name": "idx", "type": "int"}, {"description": "", "index": "2", "name": "txt", "type": "Texture"}], "description": "Sets the texture of the given frame.", "name": "set_frame", "return_": {"description": "", "type": "void"}}], "name": "SpriteFrames", "signals": [], "tutorials": {"links": []}}, "StaticBody": {"brief_description": "Static body for 3D Physics.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Static body for 3D Physics. A static body is a simple body that is not intended to move. They don't consume any CPU resources in contrast to a [RigidBody3D] so they are great for scenario collision.\n\t\tA static body can also be animated by using simulated motion mode. This is useful for implementing functionalities such as moving platforms. When this mode is active the body can be animated and automatically computes linear and angular velocity to apply in that frame and to influence other bodies.\n\t\tAlternatively, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).", "inherits": "PhysicsBody", "members": [{"description": "The body bounciness.", "getter": "get_bounce", "name": "bounce", "setter": "set_bounce", "type": "float"}, {"description": "The constant angular velocity for the body. This does not rotate the body, but affects other bodies that touch it, as if it was in a state of rotation.", "getter": "get_constant_angular_velocity", "name": "constant_angular_velocity", "setter": "set_constant_angular_velocity", "type": "Vector3"}, {"description": "The constant linear velocity for the body. This does not move the body, but affects other bodies that touch it, as if it was in a state of movement.", "getter": "get_constant_linear_velocity", "name": "constant_linear_velocity", "setter": "set_constant_linear_velocity", "type": "Vector3"}, {"description": "The body friction, from 0 (frictionless) to 1 (full friction).", "getter": "get_friction", "name": "friction", "setter": "set_friction", "type": "float"}, {"description": "", "getter": "get_physics_material_override", "name": "physics_material_override", "setter": "set_physics_material_override", "type": "PhysicsMaterial"}], "methods": [], "name": "StaticBody", "signals": [], "tutorials": {"links": []}}, "StaticBody2D": {"brief_description": "Static body for 2D Physics.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Static body for 2D Physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms.\n\t\tAdditionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt).", "inherits": "PhysicsBody2D", "members": [{"description": "The body's bounciness. Values range from [code]0[/code] (no bounce) to [code]1[/code] (full bounciness).", "getter": "get_bounce", "name": "bounce", "setter": "set_bounce", "type": "float"}, {"description": "Constant angular velocity for the body. This does not rotate the body, but affects colliding bodies, as if it were rotating.", "getter": "get_constant_angular_velocity", "name": "constant_angular_velocity", "setter": "set_constant_angular_velocity", "type": "float"}, {"description": "Constant linear velocity for the body. This does not move the body, but affects colliding bodies, as if it were moving.", "getter": "get_constant_linear_velocity", "name": "constant_linear_velocity", "setter": "set_constant_linear_velocity", "type": "Vector2"}, {"description": "The body's friction. Values range from [code]0[/code] (no friction) to [code]1[/code] (full friction).", "getter": "get_friction", "name": "friction", "setter": "set_friction", "type": "float"}, {"description": "", "getter": "get_physics_material_override", "name": "physics_material_override", "setter": "set_physics_material_override", "type": "PhysicsMaterial"}], "methods": [], "name": "StaticBody2D", "signals": [], "tutorials": {"links": []}}, "StreamPeer": {"brief_description": "Abstraction and base class for stream-based protocols.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or Unix Sockets). It provides an API for sending and receiving data through streams as raw data or strings.", "inherits": "Reference", "members": [{"description": "If [code]true[/code], this [code]StreamPeer[/code] will using big-endian format for encoding and decoding.", "getter": "is_big_endian_enabled", "name": "big_endian", "setter": "set_big_endian", "type": "bool"}], "methods": [{"arguments": [], "description": "Get a signed 16 bit value from the stream.", "name": "get_16", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Get a signed 32 bit value from the stream.", "name": "get_32", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Get a signed 64 bit value from the stream.", "name": "get_64", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Get a signed byte from the stream.", "name": "get_8", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the amount of bytes this [code]StreamPeer[/code] has available.", "name": "get_available_bytes", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bytes", "type": "int"}], "description": "Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an Error code and a data array.", "name": "get_data", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Get a double-precision float from the stream.", "name": "get_double", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Get a single-precision float from the stream.", "name": "get_float", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "bytes", "type": "int"}], "description": "Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an Error code, and a data array.", "name": "get_partial_data", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "bytes", "type": "int"}], "description": "Get a string with byte-length \"bytes\" from the stream.", "name": "get_string", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get an unsigned 16 bit value from the stream.", "name": "get_u16", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Get an unsigned 32 bit value from the stream.", "name": "get_u32", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Get an unsigned 64 bit value from the stream.", "name": "get_u64", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Get an unsigned byte from the stream.", "name": "get_u8", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bytes", "type": "int"}], "description": "Get a utf8 string with byte-length \"bytes\" from the stream (this decodes the string sent as utf8).", "name": "get_utf8_string", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get a Variant from the stream.", "name": "get_var", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Put a signed 16 bit value into the stream.", "name": "put_16", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Put a signed 32 bit value into the stream.", "name": "put_32", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Put a signed 64 bit value into the stream.", "name": "put_64", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Put a signed byte into the stream.", "name": "put_8", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "data", "type": "PoolByteArray"}], "description": "Send a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an Error code.", "name": "put_data", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}], "description": "Put a double-precision float into the stream.", "name": "put_double", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "float"}], "description": "Put a single-precision float into the stream.", "name": "put_float", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "data", "type": "PoolByteArray"}], "description": "Send a chunk of data through the connection, if all the data could not be sent at once, only part of it will. This function returns two values, an Error code and an integer, describing how much data was actually sent.", "name": "put_partial_data", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Put an unsigned 16 bit value into the stream.", "name": "put_u16", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Put an unsigned 32 bit value into the stream.", "name": "put_u32", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Put an unsigned 64 bit value into the stream.", "name": "put_u64", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "int"}], "description": "Put an unsigned byte into the stream.", "name": "put_u8", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "String"}], "description": "Put a zero-terminated utf8 string into the stream.", "name": "put_utf8_string", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "value", "type": "Variant"}], "description": "Put a Variant into the stream.", "name": "put_var", "return_": {"description": "", "type": "void"}}], "name": "StreamPeer", "signals": [], "tutorials": {"links": []}}, "StreamPeerBuffer": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "StreamPeer", "members": [{"description": "", "getter": "get_data_array", "name": "data_array", "setter": "set_data_array", "type": "PoolByteArray"}], "methods": [{"arguments": [], "description": "", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "duplicate", "qualifiers": "const", "return_": {"description": "", "type": "StreamPeerBuffer"}}, {"arguments": [], "description": "", "name": "get_position", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_size", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "size", "type": "int"}], "description": "", "name": "resize", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "int"}], "description": "", "name": "seek", "return_": {"description": "", "type": "void"}}], "name": "StreamPeerBuffer", "signals": [], "tutorials": {"links": []}}, "StreamPeerSSL": {"brief_description": "SSL Stream peer.", "category": "Core", "constants": [{"description": "A status representing a [code]StreamPeerSSL[/code] that is disconnected.", "enum": "Status", "name": "STATUS_DISCONNECTED", "value": "0"}, {"description": "A status representing a [code]StreamPeerSSL[/code] that is connected to a host.", "enum": "Status", "name": "STATUS_CONNECTED", "value": "2"}, {"description": "", "enum": "Status", "name": "STATUS_ERROR", "value": "3"}, {"description": "An error status that shows a mismatch in the SSL certificate domain presented by the host and the domain requested for validation.", "enum": "Status", "name": "STATUS_ERROR_HOSTNAME_MISMATCH", "value": "4"}], "demos": {"links": []}, "description": "SSL Stream peer. This object can be used to connect to SSL servers.", "inherits": "StreamPeer", "members": [{"description": "", "getter": "is_blocking_handshake_enabled", "name": "blocking_handshake", "setter": "set_blocking_handshake_enabled", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "base", "type": "StreamPeer"}], "description": "", "name": "accept_stream", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "stream", "type": "StreamPeer"}, {"default": "false", "description": "", "index": "1", "name": "validate_certs", "type": "bool"}, {"default": "\"\"", "description": "", "index": "2", "name": "for_hostname", "type": "String"}], "description": "Connect to a peer using an underlying [StreamPeer] \"stream\", when \"validate_certs\" is true, [code]StreamPeerSSL[/code] will validate that the certificate presented by the peer matches the \"for_hostname\".", "name": "connect_to_stream", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Disconnect from host.", "name": "disconnect_from_stream", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the status of the connection, one of STATUS_* enum.", "name": "get_status", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Poll the connection to check for incoming bytes. Call this right before \"get_available_bytes()\" for it to work properly.", "name": "poll", "return_": {"description": "", "type": "void"}}], "name": "StreamPeerSSL", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/networking/ssl_certificates.html"}]}}, "StreamPeerTCP": {"brief_description": "TCP Stream peer.", "category": "Core", "constants": [{"description": "The initial status of the [code]StreamPeerTCP[/code], also the status after a disconnect.", "enum": "Status", "name": "STATUS_NONE", "value": "0"}, {"description": "A status representing a [code]StreamPeerTCP[/code] that is connecting to a host.", "enum": "Status", "name": "STATUS_CONNECTING", "value": "1"}, {"description": "A status representing a [code]StreamPeerTCP[/code] that is connected to a host.", "enum": "Status", "name": "STATUS_CONNECTED", "value": "2"}, {"description": "A staus representing a [code]StreamPeerTCP[/code] in error state.", "enum": "Status", "name": "STATUS_ERROR", "value": "3"}], "demos": {"links": []}, "description": "TCP Stream peer. This object can be used to connect to TCP servers, or also is returned by a tcp server.", "inherits": "StreamPeer", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "host", "type": "String"}, {"description": "", "index": "1", "name": "port", "type": "int"}], "description": "Connect to the specified host:port pair. A hostname will be resolved if valid. Returns [OK] on success or [FAILED] on failure.", "name": "connect_to_host", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Disconnect from host.", "name": "disconnect_from_host", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the IP of this peer.", "name": "get_connected_host", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Return the port of this peer.", "name": "get_connected_port", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the status of the connection, one of STATUS_* enum.", "name": "get_status", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "is_connected_to_host", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "enabled", "type": "bool"}], "description": "Disable Nagle algorithm to improve latency for small packets.\n\t\t\t\tNote that for applications that send large packets, or need to transfer a lot of data, this can reduce total bandwidth.", "name": "set_no_delay", "return_": {"description": "", "type": "void"}}], "name": "StreamPeerTCP", "signals": [], "tutorials": {"links": []}}, "StreamTexture": {"brief_description": "A .stex texture.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A texture that is loaded from a .stex file.", "inherits": "Texture", "members": [{"description": "The StreamTexture's filepath to a .stex file.", "getter": "get_load_path", "name": "load_path", "setter": "load", "type": "String"}], "methods": [], "name": "StreamTexture", "signals": [], "tutorials": {"links": []}}, "String": {"brief_description": "Built-in string class.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "This is the built-in string class (and the one used by GDScript). It supports Unicode and provides all necessary means for string handling. Strings are reference counted and use a copy-on-write approach, so passing them around is cheap in resources.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "bool"}], "description": "Constructs a new String from the given [bool].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "int"}], "description": "Constructs a new String from the given [int].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "float"}], "description": "Constructs a new String from the given [float].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector2"}], "description": "Constructs a new String from the given [Vector2].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Rect2"}], "description": "Constructs a new String from the given [Rect2].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}], "description": "Constructs a new String from the given [Vector3].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Transform2D"}], "description": "Constructs a new String from the given [Transform2D].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Plane"}], "description": "Constructs a new String from the given [Plane].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Quat"}], "description": "Constructs a new String from the given [Quat].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "AABB"}], "description": "Constructs a new String from the given [AABB].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Basis"}], "description": "Constructs a new String from the given [Basis].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Transform"}], "description": "Constructs a new String from the given [Transform].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Color"}], "description": "Constructs a new String from the given [Color].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "NodePath"}], "description": "Constructs a new String from the given [NodePath].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "RID"}], "description": "Constructs a new String from the given [RID].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Dictionary"}], "description": "Constructs a new String from the given [Dictionary].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Array"}], "description": "Constructs a new String from the given [Array].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolByteArray"}], "description": "Constructs a new String from the given [PoolByteArray].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolIntArray"}], "description": "Constructs a new String from the given [PoolIntArray].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolRealArray"}], "description": "Constructs a new String from the given [PoolRealArray].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolStringArray"}], "description": "Constructs a new String from the given [PoolStringArray].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolVector2Array"}], "description": "Constructs a new String from the given [PoolVector2Array].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolVector3Array"}], "description": "Constructs a new String from the given [PoolVector3Array].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "PoolColorArray"}], "description": "Constructs a new String from the given [PoolColorArray].", "name": "String", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}], "description": "Returns [code]true[/code] if the string begins with the given string.", "name": "begins_with", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the bigrams (pairs of consecutive letters) of this string.", "name": "bigrams", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [], "description": "Returns a copy of the string with special characters escaped using the C language standard.", "name": "c_escape", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns a copy of the string with escaped characters replaced by their meanings according to the C language standard.", "name": "c_unescape", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Changes the case of some letters. Replaces underscores with spaces, converts all letters to lowercase, then capitalizes first and every letter following the space character. For [code]capitalize camelCase mixed_with_underscores[/code] it will return [code]Capitalize Camelcase Mixed With Underscores[/code].", "name": "capitalize", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "to", "type": "String"}], "description": "Performs a case-sensitive comparison to another string. Returns [code]-1[/code] if less than, [code]+1[/code] if greater than, or [code]0[/code] if equal.", "name": "casecmp_to", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Removes indentation from string.", "name": "dedent", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns [code]true[/code] if the string is empty.", "name": "empty", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}], "description": "Returns [code]true[/code] if the string ends with the given string.", "name": "ends_with", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "int"}, {"description": "", "index": "1", "name": "chars", "type": "int"}], "description": "Erases [code]chars[/code] characters from the string starting from [code]position[/code].", "name": "erase", "return_": {}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "String"}, {"default": "0", "description": "", "index": "1", "name": "from", "type": "int"}], "description": "Finds the first occurrence of a substring. Returns the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.", "name": "find", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "String"}], "description": "Finds the last occurrence of a substring. Returns the starting position of the substring or -1 if not found.", "name": "find_last", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "String"}, {"default": "0", "description": "", "index": "1", "name": "from", "type": "int"}], "description": "Finds the first occurrence of a substring, ignoring case. Returns the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.", "name": "findn", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "values", "type": "Variant"}, {"default": "{_}", "description": "", "index": "1", "name": "placeholder", "type": "String"}], "description": "Formats the string by replacing all occurrences of [code]placeholder[/code] with [code]values[/code].", "name": "format", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "If the string is a valid file path, returns the base directory name.", "name": "get_base_dir", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "If the string is a valid file path, returns the full file path without the extension.", "name": "get_basename", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "If the string is a valid file path, returns the extension.", "name": "get_extension", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "If the string is a valid file path, returns the filename.", "name": "get_file", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Hashes the string and returns a 32-bit integer.", "name": "hash", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Converts a string containing a hexadecimal number into an integer.", "name": "hex_to_int", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "int"}, {"description": "", "index": "1", "name": "what", "type": "String"}], "description": "Inserts a substring at a given position.", "name": "insert", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "If the string is a path to a file or directory, returns [code]true[/code] if the path is absolute.", "name": "is_abs_path", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "If the string is a path to a file or directory, returns [code]true[/code] if the path is relative.", "name": "is_rel_path", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}], "description": "Returns [code]true[/code] if this string is a subsequence of the given string.", "name": "is_subsequence_of", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}], "description": "Returns [code]true[/code] if this string is a subsequence of the given string, without considering case.", "name": "is_subsequence_ofi", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this string contains a valid float.", "name": "is_valid_float", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this string contains a valid color in HTML notation.", "name": "is_valid_html_color", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this string is a valid identifier. A valid identifier may contain only letters, digits and underscores (_) and the first character may not be a digit.", "name": "is_valid_identifier", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this string contains a valid integer.", "name": "is_valid_integer", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if this string contains a valid IP address.", "name": "is_valid_ip_address", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns a copy of the string with special characters escaped using the JSON standard.", "name": "json_escape", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "int"}], "description": "Returns a number of characters from the left of the string.", "name": "left", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the string's amount of characters.", "name": "length", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "chars", "type": "String"}], "description": "Returns a copy of the string with characters removed from the left.", "name": "lstrip", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "expr", "type": "String"}], "description": "Does a simple expression match, where '*' matches zero or more arbitrary characters and '?' matches any single character except '.'.", "name": "match", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "expr", "type": "String"}], "description": "Does a simple case insensitive expression match, using ? and * wildcards (see [method match]).", "name": "matchn", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the MD5 hash of the string as an array of bytes.", "name": "md5_buffer", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [], "description": "Returns the MD5 hash of the string as a string.", "name": "md5_text", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "to", "type": "String"}], "description": "Performs a case-insensitive comparison to another string. Returns [code]-1[/code] if less than, [code]+1[/code] if greater than, or [code]0[/code] if equal.", "name": "nocasecmp_to", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "at", "type": "int"}], "description": "Returns the character code at position [code]at[/code].", "name": "ord_at", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "digits", "type": "int"}], "description": "Formats a number to have an exact number of [code]digits[/code] after the decimal point.", "name": "pad_decimals", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "digits", "type": "int"}], "description": "Formats a number to have an exact number of [code]digits[/code] before the decimal point.", "name": "pad_zeros", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Decode a percent-encoded string. See [method percent_encode].", "name": "percent_decode", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Percent-encodes a string. Encodes parameters in a URL when sending a HTTP GET request (and bodies of form-urlencoded POST requests).", "name": "percent_encode", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "file", "type": "String"}], "description": "If the string is a path, this concatenates [code]file[/code] at the end of the string as a subpath. E.g. [code]\"this/is\".plus_file(\"path\") == \"this/is/path\"[/code].", "name": "plus_file", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "String"}, {"description": "", "index": "1", "name": "forwhat", "type": "String"}], "description": "Replaces occurrences of a substring with the given one inside the string.", "name": "replace", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "String"}, {"description": "", "index": "1", "name": "forwhat", "type": "String"}], "description": "Replaces occurrences of a substring with the given one inside the string. Ignores case.", "name": "replacen", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "String"}, {"default": "-1", "description": "", "index": "1", "name": "from", "type": "int"}], "description": "Performs a search for a substring, but starts from the end of the string instead of the beginning.", "name": "rfind", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "what", "type": "String"}, {"default": "-1", "description": "", "index": "1", "name": "from", "type": "int"}], "description": "Performs a search for a substring, but starts from the end of the string instead of the beginning. Ignores case.", "name": "rfindn", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "int"}], "description": "Returns the right side of the string from a given position.", "name": "right", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "divisor", "type": "String"}, {"default": "True", "description": "", "index": "1", "name": "allow_empty", "type": "bool"}, {"default": "0", "description": "", "index": "2", "name": "maxsplit", "type": "int"}], "description": "Splits the string by a [code]divisor[/code] string and returns an array of the substrings, starting from right.\n\t\t\t\t[b]Example:[/b] \"One,Two,Three\" will return [\"One\",\"Two\",\"Three\"] if split by \",\".\n\t\t\t\tIf [code]maxsplit[/code] is specified, then it is number of splits to do, default is 0 which splits all the items.", "name": "rsplit", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "chars", "type": "String"}], "description": "Returns a copy of the string with characters removed from the right.", "name": "rstrip", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "sha256_buffer", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [], "description": "Returns the SHA-256 hash of the string as a string.", "name": "sha256_text", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}], "description": "Returns the similarity index of the text compared to this string. 1 means totally similar and 0 means totally dissimilar.", "name": "similarity", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "divisor", "type": "String"}, {"default": "True", "description": "", "index": "1", "name": "allow_empty", "type": "bool"}, {"default": "0", "description": "", "index": "2", "name": "maxsplit", "type": "int"}], "description": "Splits the string by a divisor string and returns an array of the substrings.\n\t\t\t\t[b]Example:[/b] \"One,Two,Three\" will return [\"One\",\"Two\",\"Three\"] if split by \",\".\n\t\t\t\tIf [code]maxsplit[/code] is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements)", "name": "split", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "divisor", "type": "String"}, {"default": "True", "description": "", "index": "1", "name": "allow_empty", "type": "bool"}], "description": "Splits the string in floats by using a divisor string and returns an array of the substrings.\n\t\t\t\t[b]Example:[/b] \"1,2.5,3\" will return [1,2.5,3] if split by \",\".", "name": "split_floats", "return_": {"description": "", "type": "PoolRealArray"}}, {"arguments": [{"default": "True", "description": "", "index": "0", "name": "left", "type": "bool"}, {"default": "True", "description": "", "index": "1", "name": "right", "type": "bool"}], "description": "Returns a copy of the string stripped of any non-printable character at the beginning and the end. The optional arguments are used to toggle stripping on the left and right edges respectively.", "name": "strip_edges", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "int"}, {"description": "", "index": "1", "name": "len", "type": "int"}], "description": "Returns part of the string from the position [code]from[/code] with length [code]len[/code].", "name": "substr", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Converts the String (which is a character array) to [PoolByteArray] (which is an array of bytes). The conversion is sped up in comparison to to_utf8() with the assumption that all the characters the String contains are only ASCII characters.", "name": "to_ascii", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [], "description": "Converts a string containing a decimal number into a [code]float[/code].", "name": "to_float", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Converts a string containing an integer number into an [code]int[/code].", "name": "to_int", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the string converted to lowercase.", "name": "to_lower", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the string converted to uppercase.", "name": "to_upper", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Converts the String (which is an array of characters) to [PoolByteArray] (which is an array of bytes). The conversion is a bit slower than to_ascii(), but supports all UTF-8 characters. Therefore, you should prefer this function over to_ascii().", "name": "to_utf8", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [{"description": "", "index": "0", "name": "prefix", "type": "String"}], "description": "Removes a given string from the start if it starts with it or leaves the string unchanged.", "name": "trim_prefix", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "suffix", "type": "String"}], "description": "Removes a given string from the end if it ends with it or leaves the string unchanged.", "name": "trim_suffix", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns a copy of the string with special characters escaped using the XML standard.", "name": "xml_escape", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns a copy of the string with escaped characters replaced by their meanings according to the XML standard.", "name": "xml_unescape", "return_": {"description": "", "type": "String"}}], "name": "String", "signals": [], "tutorials": {"links": []}}, "StyleBox": {"brief_description": "Base class for drawing stylized boxes for the UI.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "StyleBox is [Resource] that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.", "inherits": "Resource", "members": [{"description": "", "getter": "get_default_margin", "name": "content_margin_bottom", "setter": "set_default_margin", "type": "float"}, {"description": "", "getter": "get_default_margin", "name": "content_margin_left", "setter": "set_default_margin", "type": "float"}, {"description": "", "getter": "get_default_margin", "name": "content_margin_right", "setter": "set_default_margin", "type": "float"}, {"description": "", "getter": "get_default_margin", "name": "content_margin_top", "setter": "set_default_margin", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "canvas_item", "type": "RID"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}], "description": "", "name": "draw", "qualifiers": "const", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_center_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "margin", "type": "int"}], "description": "Return the offset of margin \"margin\" (see MARGIN_* enum).", "name": "get_margin", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Return the minimum size that this stylebox can be shrunk to.", "name": "get_minimum_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Return the \"offset\" of a stylebox, this is a helper function, like writing [code]Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))[/code].", "name": "get_offset", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "point", "type": "Vector2"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}], "description": "Test a position in a rectangle, return whether it passes the mask test.", "name": "test_mask", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "StyleBox", "signals": [], "tutorials": {"links": []}}, "StyleBoxEmpty": {"brief_description": "Empty stylebox (does not display anything).", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Empty stylebox (really does not display anything).", "inherits": "StyleBox", "members": [], "methods": [], "name": "StyleBoxEmpty", "signals": [], "tutorials": {"links": []}}, "StyleBoxFlat": {"brief_description": "Customizable Stylebox with a given set of parameters. (no texture required)", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This stylebox can be used to achieve all kinds of looks without the need of a texture. Those properties are customizable:\n\t\t - Color\n\t\t - Border width (individual width for each border)\n\t\t - Rounded corners (individual radius for each corner)\n\t\t - Shadow\n\t\t About corner radius:\n\t\t \tSetting corner radius to high values is allowed. As soon as corners would overlap the stylebox will switch to a relative system. Example:\n\t\t\t[codeblock]\n\t\t\theight = 30\n\t\t\tcorner_radius_top_left = 50\n\t\t\tcorner_radius_bottom_left = 100\n\t\t\t[/codeblock]\n\t\t\tThe relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will [b]never[/b] be more than the height. Result:\n\t\t\t[codeblock]\n\t\t\tcorner_radius_top_left: 10\n\t\t\tcorner_radius_bottom_left: 20\n\t\t\t[/codeblock]", "inherits": "StyleBox", "members": [{"description": "Anti Aliasing draws a small ring around edges. This ring fades to transparent. As a result edges look much smoother. This is only noticeable when using rounded corners.", "getter": "is_anti_aliased", "name": "anti_aliasing", "setter": "set_anti_aliased", "type": "bool"}, {"description": "This changes the size of the faded ring. Higher values can be used to achieve a \"blurry\" effect.", "getter": "get_aa_size", "name": "anti_aliasing_size", "setter": "set_aa_size", "type": "int"}, {"description": "The background color of the stylebox.", "getter": "get_bg_color", "name": "bg_color", "setter": "set_bg_color", "type": "Color"}, {"description": "When set to true, the border will fade into the background color.", "getter": "get_border_blend", "name": "border_blend", "setter": "set_border_blend", "type": "bool"}, {"description": "Sets the color of the border.", "getter": "get_border_color", "name": "border_color", "setter": "set_border_color", "type": "Color"}, {"description": "Border width for the bottom border.", "getter": "get_border_width", "name": "border_width_bottom", "setter": "set_border_width", "type": "int"}, {"description": "Border width for the left border.", "getter": "get_border_width", "name": "border_width_left", "setter": "set_border_width", "type": "int"}, {"description": "Border width for the right border.", "getter": "get_border_width", "name": "border_width_right", "setter": "set_border_width", "type": "int"}, {"description": "Border width for the top border.", "getter": "get_border_width", "name": "border_width_top", "setter": "set_border_width", "type": "int"}, {"description": "This sets the amount of vertices used for each corner. Higher values result in rounder corners but take more processing power to compute. When choosing a value you should take the corner radius ([method set_corner_radius]) into account.\n\t\t\tFor corner radius smaller than 10: 4-5 should be enough\n\t\t\tFor corner radius smaller than 30: 8-12 should be enough ...", "getter": "get_corner_detail", "name": "corner_detail", "setter": "set_corner_detail", "type": "int"}, {"description": "The corner radius of the bottom left corner. When set to 0 the corner is not rounded.", "getter": "get_corner_radius", "name": "corner_radius_bottom_left", "setter": "set_corner_radius", "type": "int"}, {"description": "The corner radius of the bottom right corner. When set to 0 the corner is not rounded.", "getter": "get_corner_radius", "name": "corner_radius_bottom_right", "setter": "set_corner_radius", "type": "int"}, {"description": "The corner radius of the top left corner. When set to 0 the corner is not rounded.", "getter": "get_corner_radius", "name": "corner_radius_top_left", "setter": "set_corner_radius", "type": "int"}, {"description": "The corner radius of the top right corner. When set to 0 the corner is not rounded.", "getter": "get_corner_radius", "name": "corner_radius_top_right", "setter": "set_corner_radius", "type": "int"}, {"description": "Toggels drawing of the inner part of the stylebox.", "getter": "is_draw_center_enabled", "name": "draw_center", "setter": "set_draw_center", "type": "bool"}, {"description": "Expands the stylebox outside of the control rect on the bottom edge. Useful in combination with border_width_bottom. To draw a border outside the control rect.", "getter": "get_expand_margin", "name": "expand_margin_bottom", "setter": "set_expand_margin", "type": "float"}, {"description": "Expands the stylebox outside of the control rect on the left edge. Useful in combination with border_width_left. To draw a border outside the control rect.", "getter": "get_expand_margin", "name": "expand_margin_left", "setter": "set_expand_margin", "type": "float"}, {"description": "Expands the stylebox outside of the control rect on the right edge. Useful in combination with border_width_right. To draw a border outside the control rect.", "getter": "get_expand_margin", "name": "expand_margin_right", "setter": "set_expand_margin", "type": "float"}, {"description": "Expands the stylebox outside of the control rect on the top edge. Useful in combination with border_width_top. To draw a border outside the control rect.", "getter": "get_expand_margin", "name": "expand_margin_top", "setter": "set_expand_margin", "type": "float"}, {"description": "The color of the shadow. (This has no effect when shadow_size < 1)", "getter": "get_shadow_color", "name": "shadow_color", "setter": "set_shadow_color", "type": "Color"}, {"description": "The shadow size in pixels.", "getter": "get_shadow_size", "name": "shadow_size", "setter": "set_shadow_size", "type": "int"}], "methods": [{"arguments": [], "description": "", "name": "get_border_width_min", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "width", "type": "int"}], "description": "", "name": "set_border_width_all", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "radius", "type": "int"}], "description": "", "name": "set_corner_radius_all", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "radius_top_left", "type": "int"}, {"description": "", "index": "1", "name": "radius_top_right", "type": "int"}, {"description": "", "index": "2", "name": "radius_bottom_right", "type": "int"}, {"description": "", "index": "3", "name": "radius_bottom_left", "type": "int"}], "description": "", "name": "set_corner_radius_individual", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "size", "type": "float"}], "description": "", "name": "set_expand_margin_all", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "size_left", "type": "float"}, {"description": "", "index": "1", "name": "size_top", "type": "float"}, {"description": "", "index": "2", "name": "size_right", "type": "float"}, {"description": "", "index": "3", "name": "size_bottom", "type": "float"}], "description": "", "name": "set_expand_margin_individual", "return_": {"description": "", "type": "void"}}], "name": "StyleBoxFlat", "signals": [], "tutorials": {"links": []}}, "StyleBoxLine": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "StyleBox", "members": [{"description": "", "getter": "get_color", "name": "color", "setter": "set_color", "type": "Color"}, {"description": "", "getter": "get_grow_begin", "name": "grow_begin", "setter": "set_grow_begin", "type": "float"}, {"description": "", "getter": "get_grow_end", "name": "grow_end", "setter": "set_grow_end", "type": "float"}, {"description": "", "getter": "get_thickness", "name": "thickness", "setter": "set_thickness", "type": "int"}, {"description": "", "getter": "is_vertical", "name": "vertical", "setter": "set_vertical", "type": "bool"}], "methods": [], "name": "StyleBoxLine", "signals": [], "tutorials": {"links": []}}, "StyleBoxTexture": {"brief_description": "Texture Based 3x3 scale style.", "category": "Core", "constants": [{"description": "", "enum": "AxisStretchMode", "name": "AXIS_STRETCH_MODE_STRETCH", "value": "0"}, {"description": "", "enum": "AxisStretchMode", "name": "AXIS_STRETCH_MODE_TILE", "value": "1"}, {"description": "", "enum": "AxisStretchMode", "name": "AXIS_STRETCH_MODE_TILE_FIT", "value": "2"}], "demos": {"links": []}, "description": "Texture Based 3x3 scale style. This stylebox performs a 3x3 scaling of a texture, where only the center cell is fully stretched. This allows for the easy creation of bordered styles.", "inherits": "StyleBox", "members": [{"description": "", "getter": "get_h_axis_stretch_mode", "name": "axis_stretch_horizontal", "setter": "set_h_axis_stretch_mode", "type": "int"}, {"description": "", "getter": "get_v_axis_stretch_mode", "name": "axis_stretch_vertical", "setter": "set_v_axis_stretch_mode", "type": "int"}, {"description": "", "getter": "is_draw_center_enabled", "name": "draw_center", "setter": "set_draw_center", "type": "bool"}, {"description": "", "getter": "get_expand_margin_size", "name": "expand_margin_bottom", "setter": "set_expand_margin_size", "type": "float"}, {"description": "", "getter": "get_expand_margin_size", "name": "expand_margin_left", "setter": "set_expand_margin_size", "type": "float"}, {"description": "", "getter": "get_expand_margin_size", "name": "expand_margin_right", "setter": "set_expand_margin_size", "type": "float"}, {"description": "", "getter": "get_expand_margin_size", "name": "expand_margin_top", "setter": "set_expand_margin_size", "type": "float"}, {"description": "", "getter": "get_margin_size", "name": "margin_bottom", "setter": "set_margin_size", "type": "float"}, {"description": "", "getter": "get_margin_size", "name": "margin_left", "setter": "set_margin_size", "type": "float"}, {"description": "", "getter": "get_margin_size", "name": "margin_right", "setter": "set_margin_size", "type": "float"}, {"description": "", "getter": "get_margin_size", "name": "margin_top", "setter": "set_margin_size", "type": "float"}, {"description": "", "getter": "get_modulate", "name": "modulate_color", "setter": "set_modulate", "type": "Color"}, {"description": "", "getter": "get_normal_map", "name": "normal_map", "setter": "set_normal_map", "type": "Texture"}, {"description": "", "getter": "get_region_rect", "name": "region_rect", "setter": "set_region_rect", "type": "Rect2"}, {"description": "", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "size", "type": "float"}], "description": "", "name": "set_expand_margin_all", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "size_left", "type": "float"}, {"description": "", "index": "1", "name": "size_top", "type": "float"}, {"description": "", "index": "2", "name": "size_right", "type": "float"}, {"description": "", "index": "3", "name": "size_bottom", "type": "float"}], "description": "", "name": "set_expand_margin_individual", "return_": {"description": "", "type": "void"}}], "name": "StyleBoxTexture", "signals": [{"arguments": [], "description": "", "name": "texture_changed"}], "tutorials": {"links": []}}, "SurfaceTool": {"brief_description": "Helper tool to create geometry.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "The [code]SurfaceTool[/code] is used to construct a [Mesh] by specifying vertex attributes individually. It can be used to construct a [Mesh] from script. All properties except index need to be added before a call to [method add_vertex]. For example adding vertex colors and UVs looks like\n\t\t[codeblock]\n\t\tvar st = SurfaceTool.new()\n\t\tst.begin(Mesh.PRIMITIVE_TRIANGLES)\n\t\tst.add_color(Color(1, 0, 0))\n\t\tst.add_uv(Vector2(0, 0))\n\t\tst.add_vertex(Vector3(0, 0, 0))\n\t\t[/codeblock]\n\t\tThe [code]SurfaceTool[/code] now contains one vertex of a triangle which has a UV coordinate and a specified [Color]. If another vertex were added without calls to [method add_uv] or [method add_color] then the last values would be used.\n\t\tIt is very important that vertex attributes are passed [b]before[/b] the call to [method add_vertex], failure to do this will result in an error when committing the vertex information to a mesh.", "inherits": "Reference", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "bones", "type": "PoolIntArray"}], "description": "Add an array of bones for the next Vertex to use.", "name": "add_bones", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "color", "type": "Color"}], "description": "Specify a [Color] for the next Vertex to use.", "name": "add_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "index", "type": "int"}], "description": "Adds an index to index array if you are using indexed Vertices. Does not need to be called before adding Vertex.", "name": "add_index", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "normal", "type": "Vector3"}], "description": "Specify a normal for the next Vertex to use.", "name": "add_normal", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "smooth", "type": "bool"}], "description": "Specify whether current Vertex (if using only Vertex arrays) or current index (if also using index arrays) should utilize smooth normals for normal calculation.", "name": "add_smooth_group", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "tangent", "type": "Plane"}], "description": "Specify a Tangent for the next Vertex to use.", "name": "add_tangent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "flags", "type": "int"}], "description": "", "name": "add_to_format", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "vertexes", "type": "PoolVector3Array"}, {"default": "PoolVector2Array(  )", "description": "", "index": "1", "name": "uvs", "type": "PoolVector2Array"}, {"default": "PoolColorArray(  )", "description": "", "index": "2", "name": "colors", "type": "PoolColorArray"}, {"default": "PoolVector2Array(  )", "description": "", "index": "3", "name": "uv2s", "type": "PoolVector2Array"}, {"default": "PoolVector3Array(  )", "description": "", "index": "4", "name": "normals", "type": "PoolVector3Array"}, {"default": "[  ]", "description": "", "index": "5", "name": "tangents", "type": "Array"}], "description": "Insert a triangle fan made of array data into [Mesh] being constructed.", "name": "add_triangle_fan", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "uv", "type": "Vector2"}], "description": "Specify UV Coordinate for next Vertex to use.", "name": "add_uv", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "uv2", "type": "Vector2"}], "description": "Specify an optional second set of UV coordinates for next Vertex to use.", "name": "add_uv2", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "vertex", "type": "Vector3"}], "description": "Specify position of current Vertex. Should be called after specifying other vertex properties (e.g. Color, UV).", "name": "add_vertex", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "weights", "type": "PoolRealArray"}], "description": "Specify weight value for next Vertex to use.", "name": "add_weights", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "existing", "type": "Mesh"}, {"description": "", "index": "1", "name": "surface", "type": "int"}, {"description": "", "index": "2", "name": "transform", "type": "Transform"}], "description": "", "name": "append_from", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "primitive", "type": "int"}], "description": "Called before adding any Vertices. Takes the primitive type as an argument (e.g. Mesh.PRIMITIVE_TRIANGLES).", "name": "begin", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clear all information passed into the surface tool so far.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "null", "description": "", "index": "0", "name": "existing", "type": "ArrayMesh"}, {"default": "97280", "description": "", "index": "1", "name": "flags", "type": "int"}], "description": "Returns a constructed [ArrayMesh] from current information passed in. If an existing [ArrayMesh] is passed in as an argument, will add an extra surface to the existing [ArrayMesh].", "name": "commit", "return_": {"description": "", "type": "ArrayMesh"}}, {"arguments": [{"description": "", "index": "0", "name": "existing", "type": "Mesh"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "", "name": "create_from", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes index array by expanding Vertex array.", "name": "deindex", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "false", "description": "", "index": "0", "name": "flip", "type": "bool"}], "description": "Generates normals from Vertices so you do not have to do it manually.\n\t\t\t\tSetting \"flip\" [code]true[/code] inverts resulting normals.", "name": "generate_normals", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "generate_tangents", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Shrinks Vertex array by creating an index array. Avoids reusing Vertices.", "name": "index", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "material", "type": "Material"}], "description": "Sets [Material] to be used by the [Mesh] you are constructing.", "name": "set_material", "return_": {"description": "", "type": "void"}}], "name": "SurfaceTool", "signals": [], "tutorials": {"links": []}}, "TCP_Server": {"brief_description": "TCP Server.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "TCP Server class. Listens to connections on a port and returns a [StreamPeerTCP] when got a connection.", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "Return true if a connection is available for taking.", "name": "is_connection_available", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "port", "type": "int"}, {"default": "\"*\"", "description": "", "index": "1", "name": "bind_address", "type": "String"}], "description": "Listen on the \"port\" binding to \"bind_address\".\n\t\t\t\tIf \"bind_address\" is set as \"*\" (default), the server will listen on all available addresses (both IPv4 and IPv6).\n\t\t\t\tIf \"bind_address\" is set as \"0.0.0.0\" (for IPv4) or \"::\" (for IPv6), the server will listen on all available addresses matching that IP type.\n\t\t\t\tIf \"bind_address\" is set to any valid address (e.g. \"192.168.1.101\", \"::1\", etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists).", "name": "listen", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Stop listening.", "name": "stop", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "If a connection is available, return a StreamPeerTCP with the connection/", "name": "take_connection", "return_": {"description": "", "type": "StreamPeerTCP"}}], "name": "TCP_Server", "signals": [], "tutorials": {"links": []}}, "TabContainer": {"brief_description": "Tabbed Container.", "category": "Core", "constants": [{"description": "", "enum": "TabAlign", "name": "ALIGN_LEFT", "value": "0"}, {"description": "", "enum": "TabAlign", "name": "ALIGN_CENTER", "value": "1"}, {"description": "", "enum": "TabAlign", "name": "ALIGN_RIGHT", "value": "2"}], "demos": {"links": []}, "description": "Sets the active tab's [code]visible[/code] property to the value [code]true[/code]. Sets all other children's to [code]false[/code].\n\t\tIgnores non-[Control] children.\n\t\tIndividual tabs are always visible unless you use [method set_tab_disabled] and [method set_tab_title] to hide it.\n\t\tTo hide only a tab's content, nest the content inside a child [Control], so it receives the [code]TabContainer[/code]'s visibility setting instead.", "inherits": "Container", "members": [{"description": "The current tab index. When set, this index's [Control] node's [code]visible[/code] property is set to [code]true[/code] and all others are set to [code]false[/code].", "getter": "get_current_tab", "name": "current_tab", "setter": "set_current_tab", "type": "int"}, {"description": "", "getter": "get_drag_to_rearrange_enabled", "name": "drag_to_rearrange_enabled", "setter": "set_drag_to_rearrange_enabled", "type": "bool"}, {"description": "The alignment of all tabs in the tab container. See the [code]ALIGN_*[/code] constants for details.", "getter": "get_tab_align", "name": "tab_align", "setter": "set_tab_align", "type": "int"}, {"description": "If [code]true[/code] tabs are visible. If [code]false[/code] tabs' content and titles are hidden. Default value: [code]true[/code].", "getter": "are_tabs_visible", "name": "tabs_visible", "setter": "set_tabs_visible", "type": "bool"}], "methods": [{"arguments": [], "description": "Returns the child [Control] node located at the active tab index.", "name": "get_current_tab_control", "qualifiers": "const", "return_": {"description": "", "type": "Control"}}, {"arguments": [], "description": "Returns the [Popup] node instance if one has been set already with [method set_popup].", "name": "get_popup", "qualifiers": "const", "return_": {"description": "", "type": "Popup"}}, {"arguments": [], "description": "Returns the previously active tab index.", "name": "get_previous_tab", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Returns the currently visible tab's [Control] node.", "name": "get_tab_control", "qualifiers": "const", "return_": {"description": "", "type": "Control"}}, {"arguments": [], "description": "Returns the number of tabs.", "name": "get_tab_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}], "description": "Returns [code]true[/code] if the tab at index [code]tab_idx[/code] is disabled.", "name": "get_tab_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}], "description": "Returns the [Texture] for the tab at index [code]tab_idx[/code] or null if the tab has no [Texture].", "name": "get_tab_icon", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}], "description": "Returns the title of the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].", "name": "get_tab_title", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "get_tabs_rearrange_group", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "popup", "type": "Node"}], "description": "If set on a [Popup] node instance, a popup menu icon appears in the top-right corner of the [code]TabContainer[/code]. Clicking it will expand the [Popup] node.", "name": "set_popup", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}, {"description": "", "index": "1", "name": "disabled", "type": "bool"}], "description": "If [code]disabled[/code] is false, hides the tab at index [code]tab_idx[/code]. Note that its title text will remain, unless also removed with [method set_tab_title].", "name": "set_tab_disabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}, {"description": "", "index": "1", "name": "icon", "type": "Texture"}], "description": "Sets an icon for the tab at index [code]tab_idx[/code].", "name": "set_tab_icon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}, {"description": "", "index": "1", "name": "title", "type": "String"}], "description": "Sets a title for the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].", "name": "set_tab_title", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "group_id", "type": "int"}], "description": "", "name": "set_tabs_rearrange_group", "return_": {"description": "", "type": "void"}}], "name": "TabContainer", "signals": [{"arguments": [], "description": "Emitted when the [code]TabContainer[/code]'s [Popup] button is clicked. See [method set_popup] for details.", "name": "pre_popup_pressed"}, {"arguments": [{"description": "", "index": "0", "name": "tab", "type": "int"}], "description": "Emitted when switching to another tab.", "name": "tab_changed"}, {"arguments": [{"description": "", "index": "0", "name": "tab", "type": "int"}], "description": "Emitted when a tab is selected, even if it is the current tab.", "name": "tab_selected"}], "tutorials": {"links": []}}, "Tabs": {"brief_description": "Tabs Control.", "category": "Core", "constants": [{"description": "", "enum": "TabAlign", "name": "ALIGN_LEFT", "value": "0"}, {"description": "", "enum": "TabAlign", "name": "ALIGN_CENTER", "value": "1"}, {"description": "", "enum": "TabAlign", "name": "ALIGN_RIGHT", "value": "2"}, {"description": "", "enum": "TabAlign", "name": "ALIGN_MAX", "value": "3"}, {"description": "", "enum": "CloseButtonDisplayPolicy", "name": "CLOSE_BUTTON_SHOW_NEVER", "value": "0"}, {"description": "", "enum": "CloseButtonDisplayPolicy", "name": "CLOSE_BUTTON_SHOW_ACTIVE_ONLY", "value": "1"}, {"description": "", "enum": "CloseButtonDisplayPolicy", "name": "CLOSE_BUTTON_SHOW_ALWAYS", "value": "2"}, {"description": "", "enum": "CloseButtonDisplayPolicy", "name": "CLOSE_BUTTON_MAX", "value": "3"}], "demos": {"links": []}, "description": "Simple tabs control, similar to [TabContainer] but is only in charge of drawing tabs, not interact with children.", "inherits": "Control", "members": [{"description": "", "getter": "get_current_tab", "name": "current_tab", "setter": "set_current_tab", "type": "int"}, {"description": "", "getter": "get_drag_to_rearrange_enabled", "name": "drag_to_rearrange_enabled", "setter": "set_drag_to_rearrange_enabled", "type": "bool"}, {"description": "", "getter": "get_scrolling_enabled", "name": "scrolling_enabled", "setter": "set_scrolling_enabled", "type": "bool"}, {"description": "", "getter": "get_tab_align", "name": "tab_align", "setter": "set_tab_align", "type": "int"}, {"description": "", "getter": "get_tab_close_display_policy", "name": "tab_close_display_policy", "setter": "set_tab_close_display_policy", "type": "int"}], "methods": [{"arguments": [{"default": "\"\"", "description": "", "index": "0", "name": "title", "type": "String"}, {"default": "null", "description": "", "index": "1", "name": "icon", "type": "Texture"}], "description": "", "name": "add_tab", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "", "name": "ensure_tab_visible", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_offset_buttons_visible", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "get_select_with_rmb", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "get_tab_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}], "description": "", "name": "get_tab_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}], "description": "", "name": "get_tab_icon", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [], "description": "", "name": "get_tab_offset", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}], "description": "Returns tab [Rect2] with local position and size.", "name": "get_tab_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}], "description": "", "name": "get_tab_title", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "get_tabs_rearrange_group", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "int"}, {"description": "", "index": "1", "name": "to", "type": "int"}], "description": "Rearrange tab.", "name": "move_tab", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}], "description": "", "name": "remove_tab", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enabled", "type": "bool"}], "description": "", "name": "set_select_with_rmb", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}, {"description": "", "index": "1", "name": "disabled", "type": "bool"}], "description": "", "name": "set_tab_disabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}, {"description": "", "index": "1", "name": "icon", "type": "Texture"}], "description": "", "name": "set_tab_icon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "tab_idx", "type": "int"}, {"description": "", "index": "1", "name": "title", "type": "String"}], "description": "", "name": "set_tab_title", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "group_id", "type": "int"}], "description": "", "name": "set_tabs_rearrange_group", "return_": {"description": "", "type": "void"}}], "name": "Tabs", "signals": [{"arguments": [{"description": "", "index": "0", "name": "idx_to", "type": "int"}], "description": "", "name": "reposition_active_tab_request"}, {"arguments": [{"description": "", "index": "0", "name": "tab", "type": "int"}], "description": "", "name": "right_button_pressed"}, {"arguments": [{"description": "", "index": "0", "name": "tab", "type": "int"}], "description": "", "name": "tab_changed"}, {"arguments": [{"description": "", "index": "0", "name": "tab", "type": "int"}], "description": "", "name": "tab_clicked"}, {"arguments": [{"description": "", "index": "0", "name": "tab", "type": "int"}], "description": "", "name": "tab_close"}, {"arguments": [{"description": "", "index": "0", "name": "tab", "type": "int"}], "description": "", "name": "tab_hover"}], "tutorials": {"links": []}}, "TextEdit": {"brief_description": "Multiline text editing control.", "category": "Core", "constants": [{"description": "Match case when searching.", "enum": "SearchFlags", "name": "SEARCH_MATCH_CASE", "value": "1"}, {"description": "Match whole words when searching.", "enum": "SearchFlags", "name": "SEARCH_WHOLE_WORDS", "value": "2"}, {"description": "Search from end to beginning.", "enum": "SearchFlags", "name": "SEARCH_BACKWARDS", "value": "4"}, {"description": "Cuts (Copies and clears) the selected text.", "enum": "MenuItems", "name": "MENU_CUT", "value": "0"}, {"description": "Copies the selected text.", "enum": "MenuItems", "name": "MENU_COPY", "value": "1"}, {"description": "Pastes the clipboard text over the selected text (or at the cursor's position).", "enum": "MenuItems", "name": "MENU_PASTE", "value": "2"}, {"description": "Erases the whole [TextEdit] text.", "enum": "MenuItems", "name": "MENU_CLEAR", "value": "3"}, {"description": "Selects the whole [TextEdit] text.", "enum": "MenuItems", "name": "MENU_SELECT_ALL", "value": "4"}, {"description": "Undoes the previous action.", "enum": "MenuItems", "name": "MENU_UNDO", "value": "5"}, {"description": "", "enum": "MenuItems", "name": "MENU_MAX", "value": "6"}], "demos": {"links": []}, "description": "TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.", "inherits": "Control", "members": [{"description": "If [code]true[/code] the breakpoint gutter is visible.", "getter": "is_breakpoint_gutter_enabled", "name": "breakpoint_gutter", "setter": "set_breakpoint_gutter_enabled", "type": "bool"}, {"description": "If [code]true[/code] the caret (visual cursor) blinks.", "getter": "cursor_get_blink_enabled", "name": "caret_blink", "setter": "cursor_set_blink_enabled", "type": "bool"}, {"description": "Duration (in seconds) of a caret's blinking cycle.", "getter": "cursor_get_blink_speed", "name": "caret_blink_speed", "setter": "cursor_set_blink_speed", "type": "float"}, {"description": "If [code]true[/code] the caret displays as a rectangle.\n\t\t\tIf [code]false[/code] the caret displays as a bar.", "getter": "cursor_is_block_mode", "name": "caret_block_mode", "setter": "cursor_set_block_mode", "type": "bool"}, {"description": "If [code]true[/code] a right click moves the cursor at the mouse position before displaying the context menu.\n\t\t\tIf [code]false[/code] the context menu disregards mouse location.", "getter": "is_right_click_moving_caret", "name": "caret_moving_by_right_click", "setter": "set_right_click_moves_caret", "type": "bool"}, {"description": "If [code]true[/code] a right click displays the context menu.", "getter": "is_context_menu_enabled", "name": "context_menu_enabled", "setter": "set_context_menu_enabled", "type": "bool"}, {"description": "", "getter": "is_hiding_enabled", "name": "hiding_enabled", "setter": "set_hiding_enabled", "type": "int"}, {"description": "", "getter": "is_highlight_all_occurrences_enabled", "name": "highlight_all_occurrences", "setter": "set_highlight_all_occurrences", "type": "bool"}, {"description": "If [code]true[/code] the line containing the cursor is highlighted.", "getter": "is_highlight_current_line_enabled", "name": "highlight_current_line", "setter": "set_highlight_current_line", "type": "bool"}, {"description": "", "getter": "is_overriding_selected_font_color", "name": "override_selected_font_color", "setter": "set_override_selected_font_color", "type": "bool"}, {"description": "If [code]true[/code] read-only mode is enabled. Existing text cannot be modified and new text cannot be added.", "getter": "is_readonly", "name": "readonly", "setter": "set_readonly", "type": "bool"}, {"description": "If [code]true[/code] line numbers are displayed to the left of the text.", "getter": "is_show_line_numbers_enabled", "name": "show_line_numbers", "setter": "set_show_line_numbers", "type": "bool"}, {"description": "", "getter": "is_smooth_scroll_enabled", "name": "smooth_scrolling", "setter": "set_smooth_scroll_enable", "type": "bool"}, {"description": "", "getter": "is_syntax_coloring_enabled", "name": "syntax_highlighting", "setter": "set_syntax_coloring", "type": "bool"}, {"description": "String value of the [TextEdit].", "getter": "get_text", "name": "text", "setter": "set_text", "type": "String"}, {"description": "If [code]true[/code], enables text wrapping when it goes beyond he edge of what is visible.", "getter": "get_v_scroll_speed", "name": "v_scroll_speed", "setter": "set_v_scroll_speed", "type": "float"}, {"description": "", "getter": "is_wrap_enabled", "name": "wrap_enabled", "setter": "set_wrap_enabled", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "begin_key", "type": "String"}, {"description": "", "index": "1", "name": "end_key", "type": "String"}, {"description": "", "index": "2", "name": "color", "type": "Color"}, {"default": "false", "description": "", "index": "3", "name": "line_only", "type": "bool"}], "description": "Add color region (given the delimiters) and its colors.", "name": "add_color_region", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "keyword", "type": "String"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Add a keyword and its color.", "name": "add_keyword_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}], "description": "", "name": "can_fold", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Clear all the syntax coloring information.", "name": "clear_colors", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clear the undo history.", "name": "clear_undo_history", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Copy the current selection.", "name": "copy", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return the column the editing cursor is at.", "name": "cursor_get_column", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the line the editing cursor is at.", "name": "cursor_get_line", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"default": "true", "description": "", "index": "1", "name": "adjust_viewport", "type": "bool"}], "description": "", "name": "cursor_set_column", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}, {"default": "true", "description": "", "index": "1", "name": "adjust_viewport", "type": "bool"}, {"default": "true", "description": "", "index": "2", "name": "can_be_hidden", "type": "bool"}, {"default": "0", "description": "", "index": "3", "name": "wrap_index", "type": "int"}], "description": "", "name": "cursor_set_line", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Cut the current selection.", "name": "cut", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clears the current selection.", "name": "deselect", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "fold_all_lines", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}], "description": "", "name": "fold_line", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Return an array containing the line number of each breakpoint.", "name": "get_breakpoints", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "keyword", "type": "String"}], "description": "", "name": "get_keyword_color", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}], "description": "Return the text of a specific line.", "name": "get_line", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Return the amount of total lines in the text.", "name": "get_line_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_menu", "qualifiers": "const", "return_": {"description": "", "type": "PopupMenu"}}, {"arguments": [], "description": "Return the selection begin column.", "name": "get_selection_from_column", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the selection begin line.", "name": "get_selection_from_line", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the text inside the selection.", "name": "get_selection_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Return the selection end column.", "name": "get_selection_to_column", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the selection end line.", "name": "get_selection_to_line", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_word_under_cursor", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "keyword", "type": "String"}], "description": "", "name": "has_keyword_color", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "text", "type": "String"}], "description": "Insert a given text at the cursor position.", "name": "insert_text_at_cursor", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}], "description": "", "name": "is_folded", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}], "description": "", "name": "is_line_hidden", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Return true if the selection is active.", "name": "is_selection_active", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "option", "type": "int"}], "description": "", "name": "menu_option", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Paste the current selection.", "name": "paste", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Perform redo operation.", "name": "redo", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes all the breakpoints (without firing \"breakpoint_toggled\" signal).", "name": "remove_breakpoints", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "key", "type": "String"}, {"description": "", "index": "1", "name": "flags", "type": "int"}, {"description": "", "index": "2", "name": "from_line", "type": "int"}, {"description": "", "index": "3", "name": "from_column", "type": "int"}], "description": "Perform a search inside the text. Search flags can be specified in the SEARCH_* enum.", "name": "search", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "from_line", "type": "int"}, {"description": "", "index": "1", "name": "from_column", "type": "int"}, {"description": "", "index": "2", "name": "to_line", "type": "int"}, {"description": "", "index": "3", "name": "to_column", "type": "int"}], "description": "Perform selection, from line/column to line/column.", "name": "select", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Select all the text.", "name": "select_all", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "set_line_as_hidden", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}], "description": "Toggle the folding of the code block at the given line.", "name": "toggle_fold_line", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Perform undo operation.", "name": "undo", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "line", "type": "int"}], "description": "", "name": "unfold_line", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "unhide_all_lines", "return_": {"description": "", "type": "void"}}], "name": "TextEdit", "signals": [{"arguments": [{"description": "", "index": "0", "name": "row", "type": "int"}], "description": "Emitted when a breakpoint is placed via the breakpoint gutter.", "name": "breakpoint_toggled"}, {"arguments": [], "description": "Emitted when the cursor changes.", "name": "cursor_changed"}, {"arguments": [], "description": "", "name": "request_completion"}, {"arguments": [{"description": "", "index": "0", "name": "symbol", "type": "String"}, {"description": "", "index": "1", "name": "row", "type": "int"}, {"description": "", "index": "2", "name": "column", "type": "int"}], "description": "", "name": "symbol_lookup"}, {"arguments": [], "description": "Emitted when the text changes.", "name": "text_changed"}], "tutorials": {"links": []}}, "TextFile": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [], "methods": [], "name": "TextFile", "signals": [], "tutorials": {"links": []}}, "Texture": {"brief_description": "Texture for 2D and 3D.", "category": "Core", "constants": [{"description": "Default flags. Generate mipmaps, repeat, and filter are enabled.", "enum": "Flags", "name": "FLAGS_DEFAULT", "value": "7"}, {"description": "Generate mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio.", "enum": "Flags", "name": "FLAG_MIPMAPS", "value": "1"}, {"description": "Repeats texture (instead of clamp to edge).", "enum": "Flags", "name": "FLAG_REPEAT", "value": "2"}, {"description": "Magnifying filter, to enable smooth zooming in of the texture.", "enum": "Flags", "name": "FLAG_FILTER", "value": "4"}, {"description": "Anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.\n\t\t\tMore effective on planes often shown going to the horrizon as those textures (Walls or Ground for example) get squashed in the viewport to different aspect ratios and regular mipmaps keep the aspect ratio so they don't optimize storage that well in those cases.", "enum": "Flags", "name": "FLAG_ANISOTROPIC_FILTER", "value": "8"}, {"description": "Converts texture to SRGB color space.", "enum": "Flags", "name": "FLAG_CONVERT_TO_LINEAR", "value": "16"}, {"description": "Repeats texture with alternate sections mirrored.", "enum": "Flags", "name": "FLAG_MIRRORED_REPEAT", "value": "32"}, {"description": "Texture is a video surface.", "enum": "Flags", "name": "FLAG_VIDEO_SURFACE", "value": "2048"}], "demos": {"links": []}, "description": "A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D [Sprite] or GUI [Control].\n\t\tTextures are often created by loading them from a file. See [method @GDScript.load].", "inherits": "Resource", "members": [{"description": "The texture's flags.", "getter": "get_flags", "name": "flags", "setter": "set_flags", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "canvas_item", "type": "RID"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "2", "name": "modulate", "type": "Color"}, {"default": "false", "description": "", "index": "3", "name": "transpose", "type": "bool"}, {"default": "null", "description": "", "index": "4", "name": "normal_map", "type": "Texture"}], "description": "", "name": "draw", "qualifiers": "const", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "canvas_item", "type": "RID"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}, {"description": "", "index": "2", "name": "tile", "type": "bool"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "3", "name": "modulate", "type": "Color"}, {"default": "false", "description": "", "index": "4", "name": "transpose", "type": "bool"}, {"default": "null", "description": "", "index": "5", "name": "normal_map", "type": "Texture"}], "description": "", "name": "draw_rect", "qualifiers": "const", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "canvas_item", "type": "RID"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}, {"description": "", "index": "2", "name": "src_rect", "type": "Rect2"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "3", "name": "modulate", "type": "Color"}, {"default": "false", "description": "", "index": "4", "name": "transpose", "type": "bool"}, {"default": "null", "description": "", "index": "5", "name": "normal_map", "type": "Texture"}, {"default": "true", "description": "", "index": "6", "name": "clip_uv", "type": "bool"}], "description": "", "name": "draw_rect_region", "qualifiers": "const", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_data", "qualifiers": "const", "return_": {"description": "", "type": "Image"}}, {"arguments": [], "description": "Return the texture height.", "name": "get_height", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return the texture size.", "name": "get_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Return the texture width.", "name": "get_width", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "has_alpha", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "Texture", "signals": [], "tutorials": {"links": []}}, "Texture3D": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "TextureLayered", "members": [], "methods": [], "name": "Texture3D", "signals": [], "tutorials": {"links": []}}, "TextureArray": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "TextureLayered", "members": [], "methods": [], "name": "TextureArray", "signals": [], "tutorials": {"links": []}}, "TextureButton": {"brief_description": "Texture-based button. Supports Pressed, Hover, Disabled and Focused states.", "category": "Core", "constants": [{"description": "Scale to fit the node's bounding rectangle.", "enum": "StretchMode", "name": "STRETCH_SCALE", "value": "0"}, {"description": "Tile inside the node's bounding rectangle.", "enum": "StretchMode", "name": "STRETCH_TILE", "value": "1"}, {"description": "The texture keeps its original size and stays in the bounding rectangle's top-left corner.", "enum": "StretchMode", "name": "STRETCH_KEEP", "value": "2"}, {"description": "The texture keeps its original size and stays centered in the node's bounding rectangle.", "enum": "StretchMode", "name": "STRETCH_KEEP_CENTERED", "value": "3"}, {"description": "Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio.", "enum": "StretchMode", "name": "STRETCH_KEEP_ASPECT", "value": "4"}, {"description": "Scale the texture to fit the node's bounding rectangle, center it, and maintain its aspect ratio.", "enum": "StretchMode", "name": "STRETCH_KEEP_ASPECT_CENTERED", "value": "5"}, {"description": "Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits.", "enum": "StretchMode", "name": "STRETCH_KEEP_ASPECT_COVERED", "value": "6"}], "demos": {"links": []}, "description": "[code]TextureButton[/code] has the same functionality as [Button], except it uses sprites instead of Godot's [Theme] resource. It is faster to create, but it doesn't support localization like more complex Controls.\n\t\tThe Normal state's texture is required. Others are optional.", "inherits": "BaseButton", "members": [{"description": "If [code]true[/code] the texture stretches to the edges of the node's bounding rectangle using the [member stretch_mode]. If [code]false[/code] the texture will not scale with the node. Default value: [code]false[/code].", "getter": "get_expand", "name": "expand", "setter": "set_expand", "type": "bool"}, {"description": "Controls the texture's behavior when you resize the node's bounding rectangle, [b]only if[/b] [member expand] is [code]true[/code]. Set it to one of the [code]STRETCH_*[/code] constants. See the constants to learn more.", "getter": "get_stretch_mode", "name": "stretch_mode", "setter": "set_stretch_mode", "type": "int"}, {"description": "Pure black and white [Bitmap] image to use for click detection. On the mask, white pixels represent the button's clickable area. Use it to create buttons with curved shapes.", "getter": "get_click_mask", "name": "texture_click_mask", "setter": "set_click_mask", "type": "BitMap"}, {"description": "Texture to display when the node is disabled. See [member BaseButton.disabled].", "getter": "get_disabled_texture", "name": "texture_disabled", "setter": "set_disabled_texture", "type": "Texture"}, {"description": "Texture to display when the node has mouse or keyboard focus.", "getter": "get_focused_texture", "name": "texture_focused", "setter": "set_focused_texture", "type": "Texture"}, {"description": "Texture to display when the mouse hovers the node.", "getter": "get_hover_texture", "name": "texture_hover", "setter": "set_hover_texture", "type": "Texture"}, {"description": "Texture to display by default, when the node is [b]not[/b] in the disabled, focused, hover or pressed state.", "getter": "get_normal_texture", "name": "texture_normal", "setter": "set_normal_texture", "type": "Texture"}, {"description": "Texture to display on mouse down over the node, if the node has keyboard focus and the player presses the enter key or if the player presses the [member BaseButton.shortcut] key.", "getter": "get_pressed_texture", "name": "texture_pressed", "setter": "set_pressed_texture", "type": "Texture"}], "methods": [], "name": "TextureButton", "signals": [], "tutorials": {"links": []}}, "TextureLayered": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Flags", "name": "FLAG_MIPMAPS", "value": "1"}, {"description": "", "enum": "Flags", "name": "FLAG_REPEAT", "value": "2"}, {"description": "", "enum": "Flags", "name": "FLAG_FILTER", "value": "4"}, {"description": "", "enum": "Flags", "name": "FLAGS_DEFAULT", "value": "4"}], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [{"description": "", "getter": "_get_data", "name": "data", "setter": "_set_data", "type": "Dictionary"}, {"description": "", "getter": "get_flags", "name": "flags", "setter": "set_flags", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "width", "type": "int"}, {"description": "", "index": "1", "name": "height", "type": "int"}, {"description": "", "index": "2", "name": "depth", "type": "int"}, {"description": "", "index": "3", "name": "format", "type": "int"}, {"default": "4", "description": "", "index": "4", "name": "flags", "type": "int"}], "description": "", "name": "create", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_depth", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_format", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "", "name": "get_height", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "layer", "type": "int"}], "description": "", "name": "get_layer_data", "qualifiers": "const", "return_": {"description": "", "type": "Image"}}, {"arguments": [], "description": "", "name": "get_width", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "image", "type": "Image"}, {"description": "", "index": "1", "name": "x_offset", "type": "int"}, {"description": "", "index": "2", "name": "y_offset", "type": "int"}, {"description": "", "index": "3", "name": "layer", "type": "int"}, {"default": "0", "description": "", "index": "4", "name": "mipmap", "type": "int"}], "description": "", "name": "set_data_partial", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "image", "type": "Image"}, {"description": "", "index": "1", "name": "layer", "type": "int"}], "description": "", "name": "set_layer_data", "return_": {"description": "", "type": "void"}}], "name": "TextureLayered", "signals": [], "tutorials": {"links": []}}, "TextureProgress": {"brief_description": "Texture-based progress bar. Useful for loading screens and life or stamina bars.", "category": "Core", "constants": [{"description": "The [member texture_progress] fills from left to right.", "enum": "FillMode", "name": "FILL_LEFT_TO_RIGHT", "value": "0"}, {"description": "The [member texture_progress] fills from right to left.", "enum": "FillMode", "name": "FILL_RIGHT_TO_LEFT", "value": "1"}, {"description": "The [member texture_progress] fills from top to bototm.", "enum": "FillMode", "name": "FILL_TOP_TO_BOTTOM", "value": "2"}, {"description": "The [member texture_progress] fills from bottom to top.", "enum": "FillMode", "name": "FILL_BOTTOM_TO_TOP", "value": "3"}, {"description": "Turns the node into a radial bar. The [member texture_progress] fills clockwise. See [member radial_center_offset], [member radial_initial_angle] and [member radial_fill_degrees] to refine its behavior.", "enum": "FillMode", "name": "FILL_CLOCKWISE", "value": "4"}, {"description": "Turns the node into a radial bar. The [member texture_progress] fills counter-clockwise. See [member radial_center_offset], [member radial_initial_angle] and [member radial_fill_degrees] to refine its behavior.", "enum": "FillMode", "name": "FILL_COUNTER_CLOCKWISE", "value": "5"}, {"description": "", "enum": "FillMode", "name": "FILL_BILINEAR_LEFT_AND_RIGHT", "value": "6"}, {"description": "", "enum": "FillMode", "name": "FILL_BILINEAR_TOP_AND_BOTTOM", "value": "7"}, {"description": "", "enum": "FillMode", "name": "FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE", "value": "8"}], "demos": {"links": []}, "description": "TextureProgress works like [ProgressBar] but it uses up to 3 textures instead of Godot's [Theme] resource. Works horizontally, vertically, and radially.", "inherits": "Range", "members": [{"description": "The fill direction. Uses FILL_* constants.", "getter": "get_fill_mode", "name": "fill_mode", "setter": "set_fill_mode", "type": "int"}, {"description": "If [code]true[/code] Godot treats the bar's textures like [NinePatchRect]. Use [code]stretch_margin_*[/code], like [member stretch_margin_bottom], to set up the nine patch's 3x3 grid. Default value: [code]false[/code].", "getter": "get_nine_patch_stretch", "name": "nine_patch_stretch", "setter": "set_nine_patch_stretch", "type": "bool"}, {"description": "Offsets [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code].", "getter": "get_radial_center_offset", "name": "radial_center_offset", "setter": "set_radial_center_offset", "type": "Vector2"}, {"description": "Upper limit for the fill of [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code]. When the node's [code]value[/code] is equal to its [code]max_value[/code], the texture fills up to this angle.\n\t\t\tSee [member Range.value], [member Range.max_value].", "getter": "get_fill_degrees", "name": "radial_fill_degrees", "setter": "set_fill_degrees", "type": "float"}, {"description": "Starting angle for the fill of [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code]. When the node's [code]value[/code] is equal to its [code]min_value[/code], the texture doesn't show up at all. When the [code]value[/code] increases, the texture fills and tends towards [member radial_fill_degrees].", "getter": "get_radial_initial_angle", "name": "radial_initial_angle", "setter": "set_radial_initial_angle", "type": "float"}, {"description": "The height of the 9-patch's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.", "getter": "get_stretch_margin", "name": "stretch_margin_bottom", "setter": "set_stretch_margin", "type": "int"}, {"description": "The width of the 9-patch's left column.", "getter": "get_stretch_margin", "name": "stretch_margin_left", "setter": "set_stretch_margin", "type": "int"}, {"description": "The width of the 9-patch's right column.", "getter": "get_stretch_margin", "name": "stretch_margin_right", "setter": "set_stretch_margin", "type": "int"}, {"description": "The height of the 9-patch's top row.", "getter": "get_stretch_margin", "name": "stretch_margin_top", "setter": "set_stretch_margin", "type": "int"}, {"description": "[Texture] that draws over the progress bar. Use it to add highlights or an upper-frame that hides part of [member texture_progress].", "getter": "get_over_texture", "name": "texture_over", "setter": "set_over_texture", "type": "Texture"}, {"description": "[Texture] that clips based on the node's [code]value[/code] and [member fill_mode]. As [code]value[/code] increased, the texture fills up. It shows entirely when [code]value[/code] reaches [code]max_value[/code]. It doesn't show at all if [code]value[/code] is equal to [code]min_value[/code].\n\t\t\tThe [code]value[/code] property comes from [Range]. See [member Range.value], [member Range.min_value], [member Range.max_value].", "getter": "get_progress_texture", "name": "texture_progress", "setter": "set_progress_texture", "type": "Texture"}, {"description": "[Texture] that draws under the progress bar. The bar's background.", "getter": "get_under_texture", "name": "texture_under", "setter": "set_under_texture", "type": "Texture"}, {"description": "", "getter": "get_tint_over", "name": "tint_over", "setter": "set_tint_over", "type": "Color"}, {"description": "", "getter": "get_tint_progress", "name": "tint_progress", "setter": "set_tint_progress", "type": "Color"}, {"description": "", "getter": "get_tint_under", "name": "tint_under", "setter": "set_tint_under", "type": "Color"}], "methods": [], "name": "TextureProgress", "signals": [], "tutorials": {"links": []}}, "TextureRect": {"brief_description": "Control for drawing textures.", "category": "Core", "constants": [{"description": "Scale to fit the node's bounding rectangle, only if [code]expand[/code] is [code]true[/code]. Default [code]stretch_mode[/code], for backwards compatibility. Until you set [code]expand[/code] to [code]true[/code], the texture will behave like [code]STRETCH_KEEP[/code].", "enum": "StretchMode", "name": "STRETCH_SCALE_ON_EXPAND", "value": "0"}, {"description": "Scale to fit the node's bounding rectangle.", "enum": "StretchMode", "name": "STRETCH_SCALE", "value": "1"}, {"description": "Tile inside the node's bounding rectangle.", "enum": "StretchMode", "name": "STRETCH_TILE", "value": "2"}, {"description": "The texture keeps its original size and stays in the bounding rectangle's top-left corner.", "enum": "StretchMode", "name": "STRETCH_KEEP", "value": "3"}, {"description": "The texture keeps its original size and stays centered in the node's bounding rectangle.", "enum": "StretchMode", "name": "STRETCH_KEEP_CENTERED", "value": "4"}, {"description": "Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio.", "enum": "StretchMode", "name": "STRETCH_KEEP_ASPECT", "value": "5"}, {"description": "Scale the texture to fit the node's bounding rectangle, center it and maintain its aspect ratio.", "enum": "StretchMode", "name": "STRETCH_KEEP_ASPECT_CENTERED", "value": "6"}, {"description": "Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits.", "enum": "StretchMode", "name": "STRETCH_KEEP_ASPECT_COVERED", "value": "7"}], "demos": {"links": []}, "description": "Used to draw icons and sprites in a user interface. The texture's placement can be controlled with the [member stretch_mode] property. It can scale, tile, or stay centered inside its bounding rectangle.", "inherits": "Control", "members": [{"description": "If [code]true[/code] the texture scales to fit its bounding rectangle. Default value: [code]false[/code].", "getter": "has_expand", "name": "expand", "setter": "set_expand", "type": "bool"}, {"description": "Controls the texture's behavior when resizing the node's bounding rectangle. See [enum StretchMode].", "getter": "get_stretch_mode", "name": "stretch_mode", "setter": "set_stretch_mode", "type": "int"}, {"description": "The node's [Texture] resource.", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}], "methods": [], "name": "TextureRect", "signals": [], "tutorials": {"links": []}}, "Theme": {"brief_description": "Theme for controls.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Theme for skinning controls. Controls can be skinned individually, but for complex applications it's more efficient to just create a global theme that defines everything. This theme can be applied to any [Control], and it and its children will automatically use it.\n\t\tTheme resources can be alternatively loaded by writing them in a .theme file, see docs for more info.", "inherits": "Resource", "members": [{"description": "The theme's default font.", "getter": "get_default_font", "name": "default_font", "setter": "set_default_font", "type": "Font"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Clears theme [Color] at [code]name[/code] if Theme has [code]type[/code].", "name": "clear_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Clears theme constant at [code]name[/code] if Theme has [code]type[/code].", "name": "clear_constant", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Clears [Font] at [code]name[/code] if Theme has [code]type[/code].", "name": "clear_font", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Clears icon at [code]name[/code] if Theme has [code]type[/code].", "name": "clear_icon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Clears [StyleBox] at [code]name[/code] if Theme has [code]type[/code].", "name": "clear_stylebox", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Sets theme values to a copy of the default theme values.", "name": "copy_default_theme", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Returns the [Color] at [code]name[/code] if Theme has [code]type[/code].", "name": "get_color", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Returns all of the [Color]s as a [PoolStringArray] filled with each [Color]'s name, for use in [method get_color], if Theme has [code]type[/code].", "name": "get_color_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Returns the constant at [code]name[/code] if Theme has [code]type[/code].", "name": "get_constant", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Returns all of the constants as a [PoolStringArray] filled with each constant's name, for use in [method get_constant], if Theme has [code]type[/code].", "name": "get_constant_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Returns the [Font] at [code]name[/code] if Theme has [code]type[/code].", "name": "get_font", "qualifiers": "const", "return_": {"description": "", "type": "Font"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Returns all of the [Font]s as a [PoolStringArray] filled with each [Font]'s name, for use in [method get_font], if Theme has [code]type[/code].", "name": "get_font_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Returns the icon [Texture] at [code]name[/code] if Theme has [code]type[/code].", "name": "get_icon", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Returns all of the icons as a [PoolStringArray] filled with each [Texture]'s name, for use in [method get_icon], if Theme has [code]type[/code].", "name": "get_icon_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Returns the icon [StyleBox] at [code]name[/code] if Theme has [code]type[/code].", "name": "get_stylebox", "qualifiers": "const", "return_": {"description": "", "type": "StyleBox"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Returns all of the [StyleBox]s as a [PoolStringArray] filled with each [StyleBox]'s name, for use in [method get_stylebox], if Theme has [code]type[/code].", "name": "get_stylebox_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [], "description": "Returns all of the [StyleBox] types as a [PoolStringArray] filled with each [StyleBox]'s type, for use in [method get_stylebox] and/or [method get_stylebox_list], if Theme has [code]type[/code].", "name": "get_stylebox_types", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "String"}], "description": "Returns all of the types in [code]type[/code] as a [PoolStringArray] for use in any of the get_* functions, if Theme has [code]type[/code].", "name": "get_type_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Returns [code]true[/code] if [Color] with [code]name[/code] is in [code]type[/code].\n\t\t\t\tReturns [code]false[/code] if Theme does not have [code]type[/code].", "name": "has_color", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Returns [code]true[/code] if constant with [code]name[/code] is in [code]type[/code].\n\t\t\t\tReturns [code]false[/code] if Theme does not have [code]type[/code].", "name": "has_constant", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Returns [code]true[/code] if [Font] with [code]name[/code] is in [code]type[/code].\n\t\t\t\tReturns [code]false[/code] if Theme does not have [code]type[/code].", "name": "has_font", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Returns [code]true[/code] if icon [Texture] with [code]name[/code] is in [code]type[/code].\n\t\t\t\tReturns [code]false[/code] if Theme does not have [code]type[/code].", "name": "has_icon", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}], "description": "Returns [code]true[/code] if [StyleBox] with [code]name[/code] is in [code]type[/code].\n\t\t\t\tReturns [code]false[/code] if Theme does not have [code]type[/code].", "name": "has_stylebox", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}, {"description": "", "index": "2", "name": "color", "type": "Color"}], "description": "Sets Theme's [Color] to [code]color[/code] at [code]name[/code] in [code]type[/code].\n\t\t\t\tDoes nothing if Theme does not have [code]type[/code].", "name": "set_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}, {"description": "", "index": "2", "name": "constant", "type": "int"}], "description": "Sets Theme's constant to [code]constant[/code] at [code]name[/code] in [code]type[/code].\n\t\t\t\tDoes nothing if Theme does not have [code]type[/code].", "name": "set_constant", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}, {"description": "", "index": "2", "name": "font", "type": "Font"}], "description": "Sets Theme's [Font] to [code]font[/code] at [code]name[/code] in [code]type[/code].\n\t\t\t\tDoes nothing if Theme does not have [code]type[/code].", "name": "set_font", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}, {"description": "", "index": "2", "name": "texture", "type": "Texture"}], "description": "Sets Theme's icon [Texture] to [code]texture[/code] at [code]name[/code] in [code]type[/code].\n\t\t\t\tDoes nothing if Theme does not have [code]type[/code].", "name": "set_icon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"description": "", "index": "1", "name": "type", "type": "String"}, {"description": "", "index": "2", "name": "texture", "type": "StyleBox"}], "description": "Sets Theme's [StyleBox] to [code]stylebox[/code] at [code]name[/code] in [code]type[/code].\n\t\t\t\tDoes nothing if Theme does not have [code]type[/code].", "name": "set_stylebox", "return_": {"description": "", "type": "void"}}], "name": "Theme", "signals": [], "tutorials": {"links": []}}, "Thread": {"brief_description": "A unit of execution in a process.", "category": "Core", "constants": [{"description": "", "enum": "Priority", "name": "PRIORITY_LOW", "value": "0"}, {"description": "", "enum": "Priority", "name": "PRIORITY_NORMAL", "value": "1"}, {"description": "", "enum": "Priority", "name": "PRIORITY_HIGH", "value": "2"}], "demos": {"links": []}, "description": "A unit of execution in a process. Can run methods on [Object]s simultaneously. The use of synchronization via [Mutex], [Semaphore] is advised if working with shared objects.", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "Returns the current [code]Thread[/code]s id, uniquely identifying it among all threads.", "name": "get_id", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns true if this [code]Thread[/code] is currently active. An active [code]Thread[/code] cannot start work on a new method but can be joined with [method wait_to_finish].", "name": "is_active", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "Object"}, {"description": "", "index": "1", "name": "method", "type": "String"}, {"default": "null", "description": "", "index": "2", "name": "userdata", "type": "Variant"}, {"default": "1", "description": "", "index": "3", "name": "priority", "type": "int"}], "description": "Starts a new [code]Thread[/code] that runs \"method\" on object \"instance\" with \"userdata\" passed as an argument. The \"priority\" of the [code]Thread[/code] can be changed by passing a PRIORITY_* enum.\n\t\t\t\tReturns OK on success, or ERR_CANT_CREATE on failure.", "name": "start", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Joins the [code]Thread[/code] and waits for it to finish. Returns what the method called returned.", "name": "wait_to_finish", "return_": {"description": "", "type": "Variant"}}], "name": "Thread", "signals": [], "tutorials": {"links": []}}, "TileMap": {"brief_description": "Node for 2D tile-based maps.", "category": "Core", "constants": [{"description": "Returned when a cell doesn't exist.", "name": "INVALID_CELL", "value": "-1"}, {"description": "Orthogonal orientation mode.", "enum": "Mode", "name": "MODE_SQUARE", "value": "0"}, {"description": "Isometric orientation mode.", "enum": "Mode", "name": "MODE_ISOMETRIC", "value": "1"}, {"description": "Custom orientation mode.", "enum": "Mode", "name": "MODE_CUSTOM", "value": "2"}, {"description": "Half offset on the X coordinate.", "enum": "HalfOffset", "name": "HALF_OFFSET_X", "value": "0"}, {"description": "Half offset on the Y coordinate.", "enum": "HalfOffset", "name": "HALF_OFFSET_Y", "value": "1"}, {"description": "Half offset disabled.", "enum": "HalfOffset", "name": "HALF_OFFSET_DISABLED", "value": "2"}, {"description": "Tile origin at its top-left corner.", "enum": "TileOrigin", "name": "TILE_ORIGIN_TOP_LEFT", "value": "0"}, {"description": "Tile origin at its center.", "enum": "TileOrigin", "name": "TILE_ORIGIN_CENTER", "value": "1"}, {"description": "Tile origin at its bottom-left corner.", "enum": "TileOrigin", "name": "TILE_ORIGIN_BOTTOM_LEFT", "value": "2"}], "demos": {"links": []}, "description": "Node for 2D tile-based maps. Tilemaps use a [TileSet] which contain a list of tiles (textures plus optional collision, navigation, and/or occluder shapes) which are used to create grid-based maps.", "inherits": "Node2D", "members": [{"description": "", "getter": "get_clip_uv", "name": "cell_clip_uv", "setter": "set_clip_uv", "type": "bool"}, {"description": "The custom [Transform2D] to be applied to the TileMap's cells.", "getter": "get_custom_transform", "name": "cell_custom_transform", "setter": "set_custom_transform", "type": "Transform2D"}, {"description": "Amount to offset alternating tiles. Uses HALF_OFFSET_* constants. Default value: HALF_OFFSET_DISABLED.", "getter": "get_half_offset", "name": "cell_half_offset", "setter": "set_half_offset", "type": "int"}, {"description": "The TileMap's quadrant size.  Optimizes drawing by batching, using chunks of this size. Default value: 16.", "getter": "get_quadrant_size", "name": "cell_quadrant_size", "setter": "set_quadrant_size", "type": "int"}, {"description": "The TileMap's cell size.", "getter": "get_cell_size", "name": "cell_size", "setter": "set_cell_size", "type": "Vector2"}, {"description": "Position for tile origin. Uses TILE_ORIGIN_* constants. Default value: TILE_ORIGIN_TOP_LEFT.", "getter": "get_tile_origin", "name": "cell_tile_origin", "setter": "set_tile_origin", "type": "int"}, {"description": "If [code]true[/code] the TileMap's children will be drawn in order of their Y coordinate. Default value: [code]false[/code].", "getter": "is_y_sort_mode_enabled", "name": "cell_y_sort", "setter": "set_y_sort_mode", "type": "bool"}, {"description": "Bounce value for static body collisions (see [code]collision_use_kinematic[/code]). Default value: 0.", "getter": "get_collision_bounce", "name": "collision_bounce", "setter": "set_collision_bounce", "type": "float"}, {"description": "Friction value for static body collisions (see [code]collision_use_kinematic[/code]). Default value: 1.", "getter": "get_collision_friction", "name": "collision_friction", "setter": "set_collision_friction", "type": "float"}, {"description": "The collision layer(s) for all colliders in the TileMap.", "getter": "get_collision_layer", "name": "collision_layer", "setter": "set_collision_layer", "type": "int"}, {"description": "The collision mask(s) for all colliders in the TileMap.", "getter": "get_collision_mask", "name": "collision_mask", "setter": "set_collision_mask", "type": "int"}, {"description": "If [code]true[/code] TileMap collisions will be handled as a kinematic body. If [code]false[/code] collisions will be handled as static body. Default value: [code]false[/code].", "getter": "get_collision_use_kinematic", "name": "collision_use_kinematic", "setter": "set_collision_use_kinematic", "type": "bool"}, {"description": "The TileMap orientation mode. Uses MODE_* constants. Default value: MODE_SQUARE.", "getter": "get_mode", "name": "mode", "setter": "set_mode", "type": "int"}, {"description": "The light mask assigned to all light occluders in the TileMap.  The TileSet's light occluders will cast shadows only from Light2D(s) that have the same light mask(s).", "getter": "get_occluder_light_mask", "name": "occluder_light_mask", "setter": "set_occluder_light_mask", "type": "int"}, {"description": "The assigned [TileSet].", "getter": "get_tileset", "name": "tile_set", "setter": "set_tileset", "type": "TileSet"}], "methods": [{"arguments": [], "description": "Clears all cells.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clears cells that do not exist in the tileset.", "name": "fix_invalid_tiles", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "int"}, {"description": "", "index": "1", "name": "y", "type": "int"}], "description": "Returns the tile index of the given cell.", "name": "get_cell", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Returns the tile index of the cell given by a Vector2.", "name": "get_cellv", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "Returns [code]true[/code] if the given collision layer bit is set.", "name": "get_collision_layer_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}], "description": "Returns [code]true[/code] if the given collision mask bit is set.", "name": "get_collision_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns a [Vector2] array with the positions of all cells containing a tile from the tileset (i.e. a tile index different from [code]-1[/code]).", "name": "get_used_cells", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns an array of all cells with the given tile id.", "name": "get_used_cells_by_id", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [], "description": "Returns a rectangle enclosing the used (non-empty) tiles of the map.", "name": "get_used_rect", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "int"}, {"description": "", "index": "1", "name": "y", "type": "int"}], "description": "Returns [code]true[/code] if the given cell is transposed, i.e. the x and y axes are swapped.", "name": "is_cell_transposed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "int"}, {"description": "", "index": "1", "name": "y", "type": "int"}], "description": "Returns [code]true[/code] if the given cell is flipped in the x axis.", "name": "is_cell_x_flipped", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "int"}, {"description": "", "index": "1", "name": "y", "type": "int"}], "description": "Returns [code]true[/code] if the given cell is flipped in the y axis.", "name": "is_cell_y_flipped", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "map_position", "type": "Vector2"}, {"default": "false", "description": "", "index": "1", "name": "ignore_half_ofs", "type": "bool"}], "description": "Returns the global position corresponding to the given tilemap (grid-based) coordinates.\n\t\t\t\tOptionally, the tilemap's half offset can be ignored.", "name": "map_to_world", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "x", "type": "int"}, {"description": "", "index": "1", "name": "y", "type": "int"}, {"description": "", "index": "2", "name": "tile", "type": "int"}, {"default": "false", "description": "", "index": "3", "name": "flip_x", "type": "bool"}, {"default": "false", "description": "", "index": "4", "name": "flip_y", "type": "bool"}, {"default": "false", "description": "", "index": "5", "name": "transpose", "type": "bool"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "6", "name": "autotile_coord", "type": "Vector2"}], "description": "Sets the tile index for the cell given by a Vector2.\n\t\t\t\tAn index of [code]-1[/code] clears the cell.\n\t\t\t\tOptionally, the tile can also be flipped, transposed, or given autotile coordinates.\n\t\t\t\tNote that data such as navigation polygons and collision shapes are not immediately updated for performance reasons.\n\t\t\t\tIf you need these to be immediately updated, you can call [method update_dirty_quadrants].", "name": "set_cell", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}, {"description": "", "index": "1", "name": "tile", "type": "int"}, {"default": "false", "description": "", "index": "2", "name": "flip_x", "type": "bool"}, {"default": "false", "description": "", "index": "3", "name": "flip_y", "type": "bool"}, {"default": "false", "description": "", "index": "4", "name": "transpose", "type": "bool"}], "description": "Sets the tile index for the given cell.\n\t\t\t\tAn index of [code]-1[/code] clears the cell.\n\t\t\t\tOptionally, the tile can also be flipped or transposed.\n\t\t\t\tNote that data such as navigation polygons and collision shapes are not immediately updated for performance reasons.\n\t\t\t\tIf you need these to be immediately updated, you can call [method update_dirty_quadrants].", "name": "set_cellv", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "Sets the given collision layer bit.", "name": "set_collision_layer_bit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "bit", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "bool"}], "description": "Sets the given collision mask bit.", "name": "set_collision_mask_bit", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Applies autotiling rules to the cell (and its adjacent cells) referenced by its grid-based x and y coordinates.", "name": "update_bitmask_area", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "Vector2( 0, 0 )", "description": "", "index": "0", "name": "start", "type": "Vector2"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "1", "name": "end", "type": "Vector2"}], "description": "Applies autotiling rules to the cells in the given region (specified by grid-based x and y coordinates).\n\t\t\t\tCalling with invalid (or missing) parameters applies autotiling rules for the entire tilemap.", "name": "update_bitmask_region", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Updates the tile map's quadrants, allowing things such as navigation and collision shapes to be immediately used if modified.", "name": "update_dirty_quadrants", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "world_position", "type": "Vector2"}], "description": "Returns the tilemap (grid-based) coordinatescorresponding to the given global position.", "name": "world_to_map", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}], "name": "TileMap", "signals": [{"arguments": [], "description": "Emitted when a tilemap setting has changed.", "name": "settings_changed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/2d/using_tilemaps.html"}]}}, "TileSet": {"brief_description": "Tile library for tilemaps.", "category": "Core", "constants": [{"description": "", "enum": "BitmaskMode", "name": "BITMASK_2X2", "value": "0"}, {"description": "", "enum": "BitmaskMode", "name": "BITMASK_3X3_MINIMAL", "value": "1"}, {"description": "", "enum": "BitmaskMode", "name": "BITMASK_3X3", "value": "2"}, {"description": "", "enum": "AutotileBindings", "name": "BIND_TOPLEFT", "value": "1"}, {"description": "", "enum": "AutotileBindings", "name": "BIND_TOP", "value": "2"}, {"description": "", "enum": "AutotileBindings", "name": "BIND_TOPRIGHT", "value": "4"}, {"description": "", "enum": "AutotileBindings", "name": "BIND_LEFT", "value": "8"}, {"description": "", "enum": "AutotileBindings", "name": "BIND_RIGHT", "value": "32"}, {"description": "", "enum": "AutotileBindings", "name": "BIND_BOTTOMLEFT", "value": "64"}, {"description": "", "enum": "AutotileBindings", "name": "BIND_BOTTOM", "value": "128"}, {"description": "", "enum": "AutotileBindings", "name": "BIND_BOTTOMRIGHT", "value": "256"}, {"description": "", "enum": "TileMode", "name": "SINGLE_TILE", "value": "0"}, {"description": "", "enum": "TileMode", "name": "AUTO_TILE", "value": "1"}, {"description": "", "enum": "TileMode", "name": "ATLAS_TILE", "value": "2"}], "demos": {"links": []}, "description": "A TileSet is a library of tiles for a [TileMap]. It contains a list of tiles, each consisting of a sprite and optional collision shapes.\n\t\tTiles are referenced by a unique integer ID.", "inherits": "Resource", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "autotile_id", "type": "int"}, {"description": "", "index": "1", "name": "bitmask", "type": "int"}, {"description": "", "index": "2", "name": "tilemap", "type": "Object"}, {"description": "", "index": "3", "name": "tile_location", "type": "Vector2"}], "description": "", "name": "_forward_subtile_selection", "qualifiers": "virtual", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "drawn_id", "type": "int"}, {"description": "", "index": "1", "name": "neighbor_id", "type": "int"}], "description": "", "name": "_is_tile_bound", "qualifiers": "virtual", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "autotile_get_bitmask_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "autotile_get_size", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "", "name": "autotile_set_bitmask_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "size", "type": "Vector2"}], "description": "", "name": "autotile_set_size", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clears all tiles.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Creates a new tile which will be referenced by the given ID.", "name": "create_tile", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Returns the first tile matching the given name.", "name": "find_tile_by_name", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the ID following the last currently used ID, useful when creating a new tile.", "name": "get_last_unused_tile_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns an array of all currently used tile IDs.", "name": "get_tiles_ids", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Removes the tile referenced by the given ID.", "name": "remove_tile", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shape", "type": "Shape2D"}, {"description": "", "index": "2", "name": "shape_transform", "type": "Transform2D"}, {"default": "false", "description": "", "index": "3", "name": "one_way", "type": "bool"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "4", "name": "autotile_coord", "type": "Vector2"}], "description": "", "name": "tile_add_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the light occluder of the tile.", "name": "tile_get_light_occluder", "qualifiers": "const", "return_": {"description": "", "type": "OccluderPolygon2D"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the material of the tile.", "name": "tile_get_material", "qualifiers": "const", "return_": {"description": "", "type": "ShaderMaterial"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "tile_get_modulate", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the name of the tile.", "name": "tile_get_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the navigation polygon of the tile.", "name": "tile_get_navigation_polygon", "qualifiers": "const", "return_": {"description": "", "type": "NavigationPolygon"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the offset of the tile's navigation polygon.", "name": "tile_get_navigation_polygon_offset", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "tile_get_normal_map", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the offset of the tile's light occluder.", "name": "tile_get_occluder_offset", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the tile sub-region in the texture.", "name": "tile_get_region", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}], "description": "", "name": "tile_get_shape", "qualifiers": "const", "return_": {"description": "", "type": "Shape2D"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "tile_get_shape_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}], "description": "", "name": "tile_get_shape_offset", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}], "description": "", "name": "tile_get_shape_one_way", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}], "description": "", "name": "tile_get_shape_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the array of shapes of the tile.", "name": "tile_get_shapes", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the texture of the tile.", "name": "tile_get_texture", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "Returns the texture offset of the tile.", "name": "tile_get_texture_offset", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "tile_get_tile_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}], "description": "", "name": "tile_get_z_index", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "light_occluder", "type": "OccluderPolygon2D"}], "description": "Sets a light occluder for the tile.", "name": "tile_set_light_occluder", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "material", "type": "ShaderMaterial"}], "description": "Sets the tile's material.", "name": "tile_set_material", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Sets the tile's modulation color.", "name": "tile_set_modulate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "name", "type": "String"}], "description": "Sets the tile's name.", "name": "tile_set_name", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "navigation_polygon", "type": "NavigationPolygon"}], "description": "Sets the tile's navigation polygon.", "name": "tile_set_navigation_polygon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "navigation_polygon_offset", "type": "Vector2"}], "description": "Sets an offset for the tile's navigation polygon.", "name": "tile_set_navigation_polygon_offset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "normal_map", "type": "Texture"}], "description": "Sets the tile's normal map texture.", "name": "tile_set_normal_map", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "occluder_offset", "type": "Vector2"}], "description": "Set an offset for the tile's light occluder.", "name": "tile_set_occluder_offset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "region", "type": "Rect2"}], "description": "Set the tile's sub-region in the texture. This is common in texture atlases.", "name": "tile_set_region", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}, {"description": "", "index": "2", "name": "shape", "type": "Shape2D"}], "description": "", "name": "tile_set_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}, {"description": "", "index": "2", "name": "shape_offset", "type": "Vector2"}], "description": "", "name": "tile_set_shape_offset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}, {"description": "", "index": "2", "name": "one_way", "type": "bool"}], "description": "", "name": "tile_set_shape_one_way", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shape_id", "type": "int"}, {"description": "", "index": "2", "name": "shape_transform", "type": "Transform2D"}], "description": "", "name": "tile_set_shape_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "shapes", "type": "Array"}], "description": "Sets an array of shapes for the tile, enabling collision.", "name": "tile_set_shapes", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "texture", "type": "Texture"}], "description": "Sets the tile's texture.", "name": "tile_set_texture", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "texture_offset", "type": "Vector2"}], "description": "Sets the tile's texture offset.", "name": "tile_set_texture_offset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "tilemode", "type": "int"}], "description": "Sets the tile's [enum TileMode].", "name": "tile_set_tile_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "id", "type": "int"}, {"description": "", "index": "1", "name": "z_index", "type": "int"}], "description": "Sets the tile's drawing index.", "name": "tile_set_z_index", "return_": {"description": "", "type": "void"}}], "name": "TileSet", "signals": [], "tutorials": {"links": []}}, "Timer": {"brief_description": "A countdown timer.", "category": "Core", "constants": [{"description": "Update the Timer during the physics step at each frame (fixed framerate processing).", "enum": "TimerProcessMode", "name": "TIMER_PROCESS_PHYSICS", "value": "0"}, {"description": "Update the Timer during the idle time at each frame.", "enum": "TimerProcessMode", "name": "TIMER_PROCESS_IDLE", "value": "1"}], "demos": {"links": []}, "description": "Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or \"one shot\" mode.", "inherits": "Node", "members": [{"description": "If [code]true[/code], Timer will automatically start when entering the scene tree. Default value: [code]false[/code].", "getter": "has_autostart", "name": "autostart", "setter": "set_autostart", "type": "bool"}, {"description": "If [code]true[/code], Timer will stop when reaching 0. If [code]false[/code], it will restart. Default value: [code]false[/code].", "getter": "is_one_shot", "name": "one_shot", "setter": "set_one_shot", "type": "bool"}, {"description": "If [code]true[/code], the timer is paused and will not process until it is unpaused again, even if [method start] is called.", "getter": "is_paused", "name": "paused", "setter": "set_paused", "type": "bool"}, {"description": "Processing mode. Uses TIMER_PROCESS_* constants as value.", "getter": "get_timer_process_mode", "name": "process_mode", "setter": "set_timer_process_mode", "type": "int"}, {"description": "The timer's remaining time in seconds. Returns 0 if the timer is inactive.", "getter": "get_time_left", "name": "time_left", "setter": "", "type": "float"}, {"description": "Wait time in seconds.", "getter": "get_wait_time", "name": "wait_time", "setter": "set_wait_time", "type": "float"}], "methods": [{"arguments": [], "description": "Returns [code]true[/code] if the timer is stopped.", "name": "is_stopped", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"default": "-1", "description": "", "index": "0", "name": "time_sec", "type": "float"}], "description": "Starts the timer. Sets [code]wait_time[/code] to [code]time_sec[/code] if [code]time_sec[/code] > 0. This also resets the remaining time to [code]wait_time[/code].\n\t\t\t\tNote: this method will not resume a paused timer. See [method set_paused].", "name": "start", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Stop (cancel) the Timer.", "name": "stop", "return_": {"description": "", "type": "void"}}], "name": "Timer", "signals": [{"arguments": [], "description": "Emitted when the Timer reaches 0.", "name": "timeout"}], "tutorials": {"links": []}}, "ToolButton": {"brief_description": "Flat button helper class.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This is a helper class to generate a flat [Button] (see [method Button.set_flat]), creating a ToolButton is equivalent to:\n\t\t[codeblock]\n\t\tvar btn = Button.new()\n\t\tbtn.set_flat(true)\n\t\t[/codeblock]", "inherits": "Button", "members": [], "methods": [], "name": "ToolButton", "signals": [], "tutorials": {"links": []}}, "TouchScreenButton": {"brief_description": "Button for touch screen devices.", "category": "Core", "constants": [{"description": "Always visible.", "enum": "VisibilityMode", "name": "VISIBILITY_ALWAYS", "value": "0"}, {"description": "Visible on touch screens only.", "enum": "VisibilityMode", "name": "VISIBILITY_TOUCHSCREEN_ONLY", "value": "1"}], "demos": {"links": []}, "description": "Button for touch screen devices. You can set it to be visible on all screens, or only on touch devices.", "inherits": "Node2D", "members": [{"description": "The button's action. Actions can be handled with [InputEventAction].", "getter": "get_action", "name": "action", "setter": "set_action", "type": "String"}, {"description": "The button's bitmask.", "getter": "get_bitmask", "name": "bitmask", "setter": "set_bitmask", "type": "BitMap"}, {"description": "The button's texture for the normal state.", "getter": "get_texture", "name": "normal", "setter": "set_texture", "type": "Texture"}, {"description": "If [code]true[/code] passby presses are enabled.", "getter": "is_passby_press_enabled", "name": "passby_press", "setter": "set_passby_press", "type": "bool"}, {"description": "The button's texture for the pressed state.", "getter": "get_texture_pressed", "name": "pressed", "setter": "set_texture_pressed", "type": "Texture"}, {"description": "The button's shape.", "getter": "get_shape", "name": "shape", "setter": "set_shape", "type": "Shape2D"}, {"description": "If [code]true[/code] the button's shape is centered.", "getter": "is_shape_centered", "name": "shape_centered", "setter": "set_shape_centered", "type": "bool"}, {"description": "If [code]true[/code] the button's shape is visible.", "getter": "is_shape_visible", "name": "shape_visible", "setter": "set_shape_visible", "type": "bool"}, {"description": "The button's visibility mode. See [code]VISIBILITY_*[/code] constants.", "getter": "get_visibility_mode", "name": "visibility_mode", "setter": "set_visibility_mode", "type": "int"}], "methods": [{"arguments": [], "description": "Returns [code]true[/code] if this button is currently pressed.", "name": "is_pressed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "TouchScreenButton", "signals": [{"arguments": [], "description": "Emitted when the button is pressed (down).", "name": "pressed"}, {"arguments": [], "description": "Emitted when the button is released (up).", "name": "released"}], "tutorials": {"links": []}}, "Transform": {"brief_description": "3D Transformation. 3x4 matrix.", "category": "Built-In Types", "constants": [{"description": "", "name": "IDENTITY", "value": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )"}, {"description": "", "name": "FLIP_X", "value": "Transform( -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )"}, {"description": "", "name": "FLIP_Y", "value": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )"}, {"description": "", "name": "FLIP_Z", "value": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )"}], "demos": {"links": []}, "description": "Represents one or many transformations in 3D space such as translation, rotation, or scaling. It consists of a [Basis] \"basis\" and an [Vector3] \"origin\". It is similar to a 3x4 matrix.", "members": [{"description": "The basis is a matrix containing 3 [Vector3] as its columns: X axis, Y axis, and Z axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object.", "getter": "", "name": "basis", "setter": "", "type": "Basis"}, {"description": "The translation offset of the transform.", "getter": "", "name": "origin", "setter": "", "type": "Vector3"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "x_axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "y_axis", "type": "Vector3"}, {"description": "", "index": "2", "name": "z_axis", "type": "Vector3"}, {"description": "", "index": "3", "name": "origin", "type": "Vector3"}], "description": "Constructs the Transform from four [Vector3]. Each axis corresponds to local basis vectors (some of which may be scaled).", "name": "Transform", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "basis", "type": "Basis"}, {"description": "", "index": "1", "name": "origin", "type": "Vector3"}], "description": "Constructs the Transform from a [Basis] and [Vector3].", "name": "Transform", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Transform2D"}], "description": "Constructs the Transform from a [Transform2D].", "name": "Transform", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Quat"}], "description": "Constructs the Transform from a [Quat]. The origin will be Vector3(0, 0, 0).", "name": "Transform", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Basis"}], "description": "Constructs the Transform from a [Basis]. The origin will be Vector3(0, 0, 0).", "name": "Transform", "return_": {"description": "", "type": "Transform"}}, {"arguments": [], "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation, scaling and translation.", "name": "affine_inverse", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "transform", "type": "Transform"}, {"description": "", "index": "1", "name": "weight", "type": "float"}], "description": "Interpolates the transform to other Transform by weight amount (0-1).", "name": "interpolate_with", "return_": {"description": "", "type": "Transform"}}, {"arguments": [], "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use affine_inverse for transforms with scaling).", "name": "inverse", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "target", "type": "Vector3"}, {"description": "", "index": "1", "name": "up", "type": "Vector3"}], "description": "Returns a copy of the transform rotated such that its -Z axis points towards the [code]target[/code] position.\n\t\t\t\tThe transform will first be rotated around the given [code]up[/code] vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the [code]target[/code] and [code]up[/code] vectors.\n\t\t\t\tOperations take place in global space.", "name": "looking_at", "return_": {"description": "", "type": "Transform"}}, {"arguments": [], "description": "Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors.", "name": "orthonormalized", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "phi", "type": "float"}], "description": "Rotates the transform around given axis by phi. The axis must be a normalized vector.", "name": "rotated", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "scale", "type": "Vector3"}], "description": "Scales the transform by the specified 3D scaling factors.", "name": "scaled", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "ofs", "type": "Vector3"}], "description": "Translates the transform by the specified offset.", "name": "translated", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "v", "type": "Variant"}], "description": "Transforms the given [Vector3], [Plane], or [AABB] by this transform.", "name": "xform", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "v", "type": "Variant"}], "description": "Inverse-transforms the given [Vector3], [Plane], or [AABB] by this transform.", "name": "xform_inv", "return_": {"description": "", "type": "Variant"}}], "name": "Transform", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/math/index.html"}, {"description": "http://docs.godotengine.org/en/latest/tutorials/3d/using_transforms.html"}]}}, "Transform2D": {"brief_description": "2D Transformation. 3x2 matrix.", "category": "Built-In Types", "constants": [{"description": "", "name": "IDENTITY", "value": "Transform2D( 1, 0, 0, 1, 0, 0 )"}, {"description": "", "name": "FLIP_X", "value": "Transform2D( -1, 0, 0, 1, 0, 0 )"}, {"description": "", "name": "FLIP_Y", "value": "Transform2D( 1, 0, 0, -1, 0, 0 )"}], "demos": {"links": []}, "description": "Represents one or many transformations in 2D space such as translation, rotation, or scaling. It consists of a two [Vector2] x, y and [Vector2] \"origin\". It is similar to a 3x2 matrix.", "members": [{"description": "The transform's translation offset.", "getter": "", "name": "origin", "setter": "", "type": "Vector2"}, {"description": "The X axis of 2x2 basis matrix containing 2 [Vector2]s as its columns: X axis and Y axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object.", "getter": "", "name": "x", "setter": "", "type": "Vector2"}, {"description": "The Y axis of 2x2 basis matrix containing 2 [Vector2]s as its columns: X axis and Y axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object.", "getter": "", "name": "y", "setter": "", "type": "Vector2"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "Transform"}], "description": "Constructs the transform from a 3D [Transform].", "name": "Transform2D", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "x_axis", "type": "Vector2"}, {"description": "", "index": "1", "name": "y_axis", "type": "Vector2"}, {"description": "", "index": "2", "name": "origin", "type": "Vector2"}], "description": "Constructs the transform from 3 [Vector2]s representing x, y, and origin.", "name": "Transform2D", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "rotation", "type": "float"}, {"description": "", "index": "1", "name": "position", "type": "Vector2"}], "description": "Constructs the transform from a given angle (in radians) and position.", "name": "Transform2D", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [], "description": "Returns the inverse of the matrix.", "name": "affine_inverse", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "v", "type": "Vector2"}], "description": "Transforms the given vector by this transform's basis (no translation).", "name": "basis_xform", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "v", "type": "Vector2"}], "description": "Inverse-transforms the given vector by this transform's basis (no translation).", "name": "basis_xform_inv", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the transform's origin (translation).", "name": "get_origin", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the transform's rotation (in radians).", "name": "get_rotation", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the scale.", "name": "get_scale", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "transform", "type": "Transform2D"}, {"description": "", "index": "1", "name": "weight", "type": "float"}], "description": "Returns a transform interpolated between this transform and another by a given weight (0-1).", "name": "interpolate_with", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [], "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use affine_inverse for transforms with scaling).", "name": "inverse", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [], "description": "Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors.", "name": "orthonormalized", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "phi", "type": "float"}], "description": "Rotates the transform by the given angle (in radians).", "name": "rotated", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "scale", "type": "Vector2"}], "description": "Scales the transform by the given factor.", "name": "scaled", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "offset", "type": "Vector2"}], "description": "Translates the transform by the given offset.", "name": "translated", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "v", "type": "Variant"}], "description": "Transforms the given [Vector2] or [Rect2] by this transform.", "name": "xform", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "v", "type": "Variant"}], "description": "Inverse-transforms the given [Vector2] or [Rect2] by this transform.", "name": "xform_inv", "return_": {"description": "", "type": "Variant"}}], "name": "Transform2D", "signals": [], "tutorials": {"links": []}}, "Translation": {"brief_description": "Language Translation.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Translations are resources that can be loaded/unloaded on demand. They map a string to another string.", "inherits": "Resource", "members": [{"description": "", "getter": "get_locale", "name": "locale", "setter": "set_locale", "type": "String"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "src_message", "type": "String"}, {"description": "", "index": "1", "name": "xlated_message", "type": "String"}], "description": "Add a message for translation.", "name": "add_message", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "src_message", "type": "String"}], "description": "Erase a message.", "name": "erase_message", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "src_message", "type": "String"}], "description": "Return a message for translation.", "name": "get_message", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "", "name": "get_message_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Return all the messages (keys).", "name": "get_message_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolStringArray"}}], "name": "Translation", "signals": [], "tutorials": {"links": []}}, "TranslationServer": {"brief_description": "Server that manages all translations. Translations can be set to it and removed from it.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "translation", "type": "Translation"}], "description": "", "name": "add_translation", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "get_locale", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "locale", "type": "String"}], "description": "", "name": "get_locale_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "translation", "type": "Translation"}], "description": "", "name": "remove_translation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "locale", "type": "String"}], "description": "", "name": "set_locale", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "message", "type": "String"}], "description": "", "name": "translate", "qualifiers": "const", "return_": {"description": "", "type": "String"}}], "name": "TranslationServer", "signals": [], "tutorials": {"links": []}}, "Tree": {"brief_description": "Control to show a tree of items.", "category": "Core", "constants": [{"description": "Allow selection of a single item at a time.", "enum": "SelectMode", "name": "SELECT_SINGLE", "value": "0"}, {"description": "", "enum": "SelectMode", "name": "SELECT_ROW", "value": "1"}, {"description": "Allow selection of multiple items at the same time.", "enum": "SelectMode", "name": "SELECT_MULTI", "value": "2"}, {"description": "", "enum": "DropModeFlags", "name": "DROP_MODE_DISABLED", "value": "0"}, {"description": "", "enum": "DropModeFlags", "name": "DROP_MODE_ON_ITEM", "value": "1"}, {"description": "", "enum": "DropModeFlags", "name": "DROP_MODE_INBETWEEN", "value": "2"}], "demos": {"links": []}, "description": "This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structured displays and interactions.\n\t\tTrees are built via code, using [TreeItem] objects to create the structure. They have a single root but multiple roots can be simulated if a dummy hidden root is added.\n\t\t[codeblock]\n\t\tfunc _ready():\n\t\t    var tree = Tree.new()\n\t\t    var root = tree.create_item()\n\t\t    tree.set_hide_root(true)\n\t\t    var child1 = tree.create_item(root)\n\t\t    var child2 = tree.create_item(root)\n\t\t    var subchild1 = tree.create_item(child1)\n\t\t    subchild1.set_text(0, \"Subchild1\")\n\t\t[/codeblock]", "inherits": "Control", "members": [{"description": "If [code]true[/code] the currently selected cell may be selected again.", "getter": "get_allow_reselect", "name": "allow_reselect", "setter": "set_allow_reselect", "type": "bool"}, {"description": "If [code]true[/code] a right mouse button click can select items.", "getter": "get_allow_rmb_select", "name": "allow_rmb_select", "setter": "set_allow_rmb_select", "type": "bool"}, {"description": "The amount of columns.", "getter": "get_columns", "name": "columns", "setter": "set_columns", "type": "int"}, {"description": "The drop mode as an OR combination of flags. See [code]DROP_MODE_*[/code] constants. Once dropping is done, reverts to [code]DROP_MODE_DISABLED[/code]. Setting this during [method can_drop_data] is recommended.", "getter": "get_drop_mode_flags", "name": "drop_mode_flags", "setter": "set_drop_mode_flags", "type": "int"}, {"description": "If [code]true[/code] the folding arrow is hidden.", "getter": "is_folding_hidden", "name": "hide_folding", "setter": "set_hide_folding", "type": "bool"}, {"description": "If [code]true[/code] the tree's root is hidden.", "getter": "is_root_hidden", "name": "hide_root", "setter": "set_hide_root", "type": "bool"}, {"description": "Allow single or multiple selection. See the [code]SELECT_*[/code] constants.", "getter": "get_select_mode", "name": "select_mode", "setter": "set_select_mode", "type": "int"}], "methods": [{"arguments": [], "description": "Returns [code]true[/code] if the column titles are being shown.", "name": "are_column_titles_visible", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Clears the tree. This removes all items.", "name": "clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "null", "description": "", "index": "0", "name": "parent", "type": "Object"}, {"default": "-1", "description": "", "index": "1", "name": "idx", "type": "int"}], "description": "Create an item in the tree and add it as the last child of [code]parent[/code]. If parent is not given, it will be added as the root's last child, or it'll the be the root itself if the tree is empty.", "name": "create_item", "return_": {"description": "", "type": "Object"}}, {"arguments": [], "description": "Makes the currently selected item visible. This will scroll the tree to make sure the selected item is visible.", "name": "ensure_cursor_is_visible", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Returns the column index under the given point.", "name": "get_column_at_position", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the column's title.", "name": "get_column_title", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the column's width in pixels.", "name": "get_column_width", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See [method TreeItem.set_cell_mode].", "name": "get_custom_popup_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "If [member drop_mode_flags] includes [code]DROP_MODE_INBETWEEN[/code], returns -1 if [code]position[/code] is the upper part of a tree item at that position, 1 for the lower part, and additionally 0 for the middle part if [member drop_mode_flags] includes [code]DROP_MODE_ON_ITEM[/code]. \n\t\t\t\tOtherwise, returns 0. If there are no tree item at [code]position[/code], returns -100.", "name": "get_drop_section_at_position", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the currently edited item. This is only available for custom cell mode.", "name": "get_edited", "qualifiers": "const", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [], "description": "Returns the column for the currently edited item. This is only available for custom cell mode.", "name": "get_edited_column", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "Object"}, {"default": "-1", "description": "", "index": "1", "name": "column", "type": "int"}], "description": "Returns the rectangle area for the specified item. If column is specified, only get the position and size of that column, otherwise get the rectangle containing all columns.", "name": "get_item_area_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Returns the tree item at the specified position (relative to the tree origin position).", "name": "get_item_at_position", "qualifiers": "const", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Object"}], "description": "Returns the next selected item after the given one.", "name": "get_next_selected", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [], "description": "Returns the last pressed button's index.", "name": "get_pressed_button", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the tree's root item.", "name": "get_root", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [], "description": "Returns the current scrolling position.", "name": "get_scroll", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the currently selected item.", "name": "get_selected", "qualifiers": "const", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [], "description": "Returns the current selection's column.", "name": "get_selected_column", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "expand", "type": "bool"}], "description": "If [code]true[/code] the column will have the \"Expand\" flag of [Control].", "name": "set_column_expand", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "min_width", "type": "int"}], "description": "Set the minimum width of a column.", "name": "set_column_min_width", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "title", "type": "String"}], "description": "Set the title of a column.", "name": "set_column_title", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "visible", "type": "bool"}], "description": "If [code]true[/code] column titles are visible.", "name": "set_column_titles_visible", "return_": {"description": "", "type": "void"}}], "name": "Tree", "signals": [{"arguments": [{"description": "", "index": "0", "name": "item", "type": "TreeItem"}, {"description": "", "index": "1", "name": "column", "type": "int"}, {"description": "", "index": "2", "name": "id", "type": "int"}], "description": "Emitted when a button on the tree was pressed (see [method TreeItem.add_button]).", "name": "button_pressed"}, {"arguments": [], "description": "Emitted when a cell is selected.", "name": "cell_selected"}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Emitted when a column's title is pressed.", "name": "column_title_pressed"}, {"arguments": [{"description": "", "index": "0", "name": "arrow_clicked", "type": "bool"}], "description": "Emitted when a cell with the [code]CELL_MODE_CUSTOM[/code] is clicked to be edited.", "name": "custom_popup_edited"}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Emitted when the right mouse button is pressed if RMB selection is active and the tree is empty.", "name": "empty_tree_rmb_selected"}, {"arguments": [], "description": "Emitted when an item's label is double-clicked.", "name": "item_activated"}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "TreeItem"}], "description": "Emitted when an item is collapsed by a click on the folding arrow.", "name": "item_collapsed"}, {"arguments": [], "description": "", "name": "item_custom_button_pressed"}, {"arguments": [], "description": "Emitted when an item's icon is double-clicked.", "name": "item_double_clicked"}, {"arguments": [], "description": "Emitted when an item is edited.", "name": "item_edited"}, {"arguments": [], "description": "Emitted when an item is edited using the right mouse button.", "name": "item_rmb_edited"}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "Vector2"}], "description": "Emitted when an item is selected with right mouse button.", "name": "item_rmb_selected"}, {"arguments": [], "description": "Emitted when an item is selected with right mouse button.", "name": "item_selected"}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "TreeItem"}, {"description": "", "index": "1", "name": "column", "type": "int"}, {"description": "", "index": "2", "name": "selected", "type": "bool"}], "description": "Emitted instead of [code]item_selected[/code] when [code]select_mode[/code] is [code]SELECT_MULTI[/code].", "name": "multi_selected"}, {"arguments": [], "description": "", "name": "nothing_selected"}], "tutorials": {"links": []}}, "TreeItem": {"brief_description": "Control for a single item inside a [Tree].", "category": "Core", "constants": [{"description": "Cell contains a string.", "enum": "TreeCellMode", "name": "CELL_MODE_STRING", "value": "0"}, {"description": "Cell can be checked.", "enum": "TreeCellMode", "name": "CELL_MODE_CHECK", "value": "1"}, {"description": "Cell contains a range.", "enum": "TreeCellMode", "name": "CELL_MODE_RANGE", "value": "2"}, {"description": "Cell contains a range expression.", "enum": "TreeCellMode", "name": "CELL_MODE_RANGE_EXPRESSION", "value": "3"}, {"description": "Cell contains an icon.", "enum": "TreeCellMode", "name": "CELL_MODE_ICON", "value": "4"}, {"description": "", "enum": "TreeCellMode", "name": "CELL_MODE_CUSTOM", "value": "5"}, {"description": "Align text to the left. See [code]set_text_align()[/code].", "enum": "TextAlign", "name": "ALIGN_LEFT", "value": "0"}, {"description": "Center text. See [code]set_text_align()[/code].", "enum": "TextAlign", "name": "ALIGN_CENTER", "value": "1"}, {"description": "Align text to the right. See [code]set_text_align()[/code].", "enum": "TextAlign", "name": "ALIGN_RIGHT", "value": "2"}], "demos": {"links": []}, "description": "Control for a single item inside a [Tree]. May have child [code]TreeItem[/code]s and be styled as well as contain buttons.", "inherits": "Object", "members": [{"description": "If [code]true[/code] the TreeItem is collapsed.", "getter": "is_collapsed", "name": "collapsed", "setter": "set_collapsed", "type": "bool"}, {"description": "The custom minimum height.", "getter": "get_custom_minimum_height", "name": "custom_minimum_height", "setter": "set_custom_minimum_height", "type": "int"}, {"description": "If [code]true[/code] folding is disabled for this TreeItem.", "getter": "is_folding_disabled", "name": "disable_folding", "setter": "set_disable_folding", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "button", "type": "Texture"}, {"default": "-1", "description": "", "index": "2", "name": "button_idx", "type": "int"}, {"default": "false", "description": "", "index": "3", "name": "disabled", "type": "bool"}, {"default": "\"\"", "description": "", "index": "4", "name": "tooltip", "type": "String"}], "description": "Adds a button with [Texture] [code]button[/code] at column [code]column[/code]. The [code]button_idx[/code] index is used to identify the button when calling other methods. If not specified, the next available index is used, which may be retrieved by calling [code]get_buton_count()[/code] immediately after this method. Optionally, the button can be [code]disabled[/code] and have a [code]tooltip[/code].", "name": "add_button", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Resets the background color for the given column to default.", "name": "clear_custom_bg_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Resets the color for the given column to default.", "name": "clear_custom_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Deselects the given column.", "name": "deselect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "button_idx", "type": "int"}], "description": "Removes the button at index [code]button_idx[/code] in column [code]column[/code].", "name": "erase_button", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "button_idx", "type": "int"}], "description": "Returns the [Texture] of the button at index [code]button_idx[/code] in column [code]column[/code].", "name": "get_button", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the number of buttons in column [code]column[/code]. May be used to get the most recently added button's index, if no index was specified.", "name": "get_button_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the column's cell mode. See [code]CELL_MODE_*[/code] constants.", "name": "get_cell_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the TreeItem's child items.", "name": "get_children", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the custom background color of column [code]column[/code].", "name": "get_custom_bg_color", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns [code]true[/code] if [code]expand_right[/code] is set.", "name": "get_expand_right", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the given column's icon [Texture]. Error if no icon is set.", "name": "get_icon", "qualifiers": "const", "return_": {"description": "", "type": "Texture"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the column's icon's maximum width.", "name": "get_icon_max_width", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the icon [Texture] region as [Rect2].", "name": "get_icon_region", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "", "name": "get_metadata", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Returns the next TreeItem in the tree.", "name": "get_next", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [], "description": "Returns the next visible TreeItem in the tree.", "name": "get_next_visible", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [], "description": "Returns the parent TreeItem.", "name": "get_parent", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [], "description": "Returns the previous TreeItem in the tree.", "name": "get_prev", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [], "description": "Returns the previous visible TreeItem in the tree.", "name": "get_prev_visible", "return_": {"description": "", "type": "TreeItem"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "", "name": "get_range", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "", "name": "get_range_config", "return_": {"description": "", "type": "Dictionary"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the given column's text.", "name": "get_text", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the given column's text alignment.", "name": "get_text_align", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns the given column's tooltip.", "name": "get_tooltip", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "button_idx", "type": "int"}], "description": "Returns [code]true[/code] if the button at index [code]button_idx[/code] for the given column is disabled.", "name": "is_button_disabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns [code]true[/code] if the given column is checked.", "name": "is_checked", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "", "name": "is_custom_set_as_button", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns [code]true[/code] if column [code]column[/code] is editable.", "name": "is_editable", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns [code]true[/code] if column [code]column[/code] is selectable.", "name": "is_selectable", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Returns [code]true[/code] if column [code]column[/code] is selected.", "name": "is_selected", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Moves this TreeItem to the bottom in the [Tree] hierarchy.", "name": "move_to_bottom", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Moves this TreeItem to the top in the [Tree] hierarchy.", "name": "move_to_top", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "child", "type": "Object"}], "description": "Removes the given child TreeItem.", "name": "remove_child", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}], "description": "Selects the column [code]column[/code].", "name": "select", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "button_idx", "type": "int"}, {"description": "", "index": "2", "name": "button", "type": "Texture"}], "description": "Sets the given column's button [Texture] at index [code]button_idx[/code] to [code]button[/code].", "name": "set_button", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Sets the given column's cell mode to [code]mode[/code]. See [code]CELL_MODE_*[/code] constants.", "name": "set_cell_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "checked", "type": "bool"}], "description": "If [code]true[/code] the column [code]column[/code] is checked.", "name": "set_checked", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "set_custom_as_button", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "color", "type": "Color"}, {"default": "false", "description": "", "index": "2", "name": "just_outline", "type": "bool"}], "description": "Sets the given column's custom background color and whether to just use it as an outline.", "name": "set_custom_bg_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Sets the given column's custom color.", "name": "set_custom_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "object", "type": "Object"}, {"description": "", "index": "2", "name": "callback", "type": "String"}], "description": "Sets the given column's custom draw callback to [code]callback[/code] method on [code]object[/code].", "name": "set_custom_draw", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "If [code]true[/code] column [code]column[/code] is editable.", "name": "set_editable", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "If [code]true[/code] column [code]column[/code] is expanded to the right.", "name": "set_expand_right", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "texture", "type": "Texture"}], "description": "Sets the given column's icon [Texture].", "name": "set_icon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "width", "type": "int"}], "description": "Sets the given column's icon's maximum width.", "name": "set_icon_max_width", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "region", "type": "Rect2"}], "description": "Sets the given column's icon's texture region.", "name": "set_icon_region", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "meta", "type": "Variant"}], "description": "", "name": "set_metadata", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "float"}], "description": "", "name": "set_range", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "min", "type": "float"}, {"description": "", "index": "2", "name": "max", "type": "float"}, {"description": "", "index": "3", "name": "step", "type": "float"}, {"default": "false", "description": "", "index": "4", "name": "expr", "type": "bool"}], "description": "", "name": "set_range_config", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "selectable", "type": "bool"}], "description": "If [code]true[/code] the given column is selectable.", "name": "set_selectable", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "text", "type": "String"}], "description": "", "name": "set_text", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "text_align", "type": "int"}], "description": "Sets the given column's text alignment. See [code]ALIGN_*[/code] constants.", "name": "set_text_align", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "column", "type": "int"}, {"description": "", "index": "1", "name": "tooltip", "type": "String"}], "description": "Sets the given column's tooltip text.", "name": "set_tooltip", "return_": {"description": "", "type": "void"}}], "name": "TreeItem", "signals": [], "tutorials": {"links": []}}, "TriangleMesh": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Reference", "members": [], "methods": [], "name": "TriangleMesh", "signals": [], "tutorials": {"links": []}}, "Tween": {"brief_description": "Smoothly animates a node's properties over time.", "category": "Core", "constants": [{"description": "The tween updates with the [code]_physics_process[/code] callback.", "enum": "TweenProcessMode", "name": "TWEEN_PROCESS_PHYSICS", "value": "0"}, {"description": "The tween updates with the [code]_process[/code] callback.", "enum": "TweenProcessMode", "name": "TWEEN_PROCESS_IDLE", "value": "1"}, {"description": "The animation is interpolated linearly.", "enum": "TransitionType", "name": "TRANS_LINEAR", "value": "0"}, {"description": "The animation is interpolated using a sine function.", "enum": "TransitionType", "name": "TRANS_SINE", "value": "1"}, {"description": "The animation is interpolated with a quintic (to the power of 5) function.", "enum": "TransitionType", "name": "TRANS_QUINT", "value": "2"}, {"description": "The animation is interpolated with a quartic (to the power of 4) function.", "enum": "TransitionType", "name": "TRANS_QUART", "value": "3"}, {"description": "The animation is interpolated with a quadratic (to the power of 2) function.", "enum": "TransitionType", "name": "TRANS_QUAD", "value": "4"}, {"description": "The animation is interpolated with an exponential (to the power of x) function.", "enum": "TransitionType", "name": "TRANS_EXPO", "value": "5"}, {"description": "The animation is interpolated with elasticity, wiggling around the edges.", "enum": "TransitionType", "name": "TRANS_ELASTIC", "value": "6"}, {"description": "The animation is interpolated with a cubic (to the power of 3) function.", "enum": "TransitionType", "name": "TRANS_CUBIC", "value": "7"}, {"description": "The animation is interpolated with a function using square roots.", "enum": "TransitionType", "name": "TRANS_CIRC", "value": "8"}, {"description": "The animation is interpolated by bouncing at the end.", "enum": "TransitionType", "name": "TRANS_BOUNCE", "value": "9"}, {"description": "The animation is interpolated backing out at ends.", "enum": "TransitionType", "name": "TRANS_BACK", "value": "10"}, {"description": "The interpolation starts slowly and speeds up towards the end.", "enum": "EaseType", "name": "EASE_IN", "value": "0"}, {"description": "The interpolation starts quickly and slows down towards the end.", "enum": "EaseType", "name": "EASE_OUT", "value": "1"}, {"description": "A combination of EASE_IN and EASE_OUT. The interpolation is slowest at both ends.", "enum": "EaseType", "name": "EASE_IN_OUT", "value": "2"}, {"description": "A combination of EASE_IN and EASE_OUT. The interpolation is fastest at both ends.", "enum": "EaseType", "name": "EASE_OUT_IN", "value": "3"}], "demos": {"links": []}, "description": "Tweens are useful for animations requiring a numerical property to be interpolated over a range of values. The name *tween* comes from *in-betweening*, an animation technique where you specify *keyframes* and the computer interpolates the frames that appear between them.\n\t\tHere is a brief usage example that causes a 2D node to move smoothly between two positions:\n\t\t[codeblock]\n\t\tvar tween = get_node(\"Tween\")\n\t\ttween.interpolate_property($Node2D, \"position\",\n                Vector2(0, 0), Vector2(100, 100), 1,\n                Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)\n\t\ttween.start()\n\t\t[/codeblock]\n\t\tMany methods require a property name, such as \"position\" above. You can find the correct property name by hovering over the property in the Inspector.\n\t\tMany of the methods accept [code]trans_type[/code] and [code]ease_type[/code]. The first accepts an [enum TransitionType] constant, and refers to the way the timing of the animation is handled (see [code]http://easings.net/[/code] for some examples). The second accepts an [enum EaseType] constant, and controls the where [code]trans_type[/code] is applied to the interpolation (in the beginning, the end, or both). If you don't know which transition and easing to pick, you can try different [enum TransitionType] constants with [enum EASE_IN_OUT], and use the one that looks best.", "inherits": "Node", "members": [{"description": "The tween's animation process thread. See [enum TweenProcessMode]. Default value: [enum TWEEN_PROCESS_IDLE].", "getter": "get_tween_process_mode", "name": "playback_process_mode", "setter": "set_tween_process_mode", "type": "int"}, {"description": "The tween's speed multiplier. For example, set it to [code]1.0[/code] for normal speed, [code]2.0[/code] for two times normal speed, or [code]0.5[/code] for half of the normal speed. A value of [code]0[/code] pauses the animation, but see also [method set_active] or [method stop_all] for this.", "getter": "get_speed_scale", "name": "playback_speed", "setter": "set_speed_scale", "type": "float"}, {"description": "If [code]true[/code] the tween loops.", "getter": "is_repeat", "name": "repeat", "setter": "set_repeat", "type": "bool"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "method", "type": "String"}, {"description": "", "index": "2", "name": "initial_val", "type": "Variant"}, {"description": "", "index": "3", "name": "target", "type": "Object"}, {"description": "", "index": "4", "name": "target_method", "type": "String"}, {"description": "", "index": "5", "name": "duration", "type": "float"}, {"description": "", "index": "6", "name": "trans_type", "type": "int"}, {"description": "", "index": "7", "name": "ease_type", "type": "int"}, {"default": "0", "description": "", "index": "8", "name": "delay", "type": "float"}], "description": "Follows [code]method[/code] of [code]object[/code] and applies the returned value on [code]target_method[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] later. Methods are called with consecutive values.\n                Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information", "name": "follow_method", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "property", "type": "NodePath"}, {"description": "", "index": "2", "name": "initial_val", "type": "Variant"}, {"description": "", "index": "3", "name": "target", "type": "Object"}, {"description": "", "index": "4", "name": "target_property", "type": "NodePath"}, {"description": "", "index": "5", "name": "duration", "type": "float"}, {"description": "", "index": "6", "name": "trans_type", "type": "int"}, {"description": "", "index": "7", "name": "ease_type", "type": "int"}, {"default": "0", "description": "", "index": "8", "name": "delay", "type": "float"}], "description": "Follows [code]property[/code] of [code]object[/code] and applies it on [code]target_property[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.\n                Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information", "name": "follow_property", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the total time needed for all tweens to end. If you have two tweens, one lasting 10 seconds and the other 20 seconds, it would return 20 seconds, as by that time all tweens would have finished.", "name": "get_runtime", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "duration", "type": "float"}, {"description": "", "index": "2", "name": "callback", "type": "String"}, {"default": "null", "description": "", "index": "3", "name": "arg1", "type": "Variant"}, {"default": "null", "description": "", "index": "4", "name": "arg2", "type": "Variant"}, {"default": "null", "description": "", "index": "5", "name": "arg3", "type": "Variant"}, {"default": "null", "description": "", "index": "6", "name": "arg4", "type": "Variant"}, {"default": "null", "description": "", "index": "7", "name": "arg5", "type": "Variant"}], "description": "Calls [code]callback[/code] of [code]object[/code] after [code]duration[/code]. [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.", "name": "interpolate_callback", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "duration", "type": "float"}, {"description": "", "index": "2", "name": "callback", "type": "String"}, {"default": "null", "description": "", "index": "3", "name": "arg1", "type": "Variant"}, {"default": "null", "description": "", "index": "4", "name": "arg2", "type": "Variant"}, {"default": "null", "description": "", "index": "5", "name": "arg3", "type": "Variant"}, {"default": "null", "description": "", "index": "6", "name": "arg4", "type": "Variant"}, {"default": "null", "description": "", "index": "7", "name": "arg5", "type": "Variant"}], "description": "Calls [code]callback[/code] of [code]object[/code] after [code]duration[/code] on the main thread (similar to [method Object.call_deferred]). [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.", "name": "interpolate_deferred_callback", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "method", "type": "String"}, {"description": "", "index": "2", "name": "initial_val", "type": "Variant"}, {"description": "", "index": "3", "name": "final_val", "type": "Variant"}, {"description": "", "index": "4", "name": "duration", "type": "float"}, {"description": "", "index": "5", "name": "trans_type", "type": "int"}, {"description": "", "index": "6", "name": "ease_type", "type": "int"}, {"default": "0", "description": "", "index": "7", "name": "delay", "type": "float"}], "description": "Animates [code]method[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are called with consecutive values.\n                Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information", "name": "interpolate_method", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "property", "type": "NodePath"}, {"description": "", "index": "2", "name": "initial_val", "type": "Variant"}, {"description": "", "index": "3", "name": "final_val", "type": "Variant"}, {"description": "", "index": "4", "name": "duration", "type": "float"}, {"description": "", "index": "5", "name": "trans_type", "type": "int"}, {"description": "", "index": "6", "name": "ease_type", "type": "int"}, {"default": "0", "description": "", "index": "7", "name": "delay", "type": "float"}], "description": "Animates [code]property[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Setting the initial value to [code]null[/code] uses the current value of the property.\n                Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information", "name": "interpolate_property", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if any tweens are currently running. Note that this method doesn't consider tweens that have ended.", "name": "is_active", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"default": "\"\"", "description": "", "index": "1", "name": "key", "type": "String"}], "description": "Stops animation and removes a tween, given its object and property/method pair. By default, all tweens are removed, unless [code]key[/code] is specified.", "name": "remove", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Stops animation and removes all tweens.", "name": "remove_all", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"default": "\"\"", "description": "", "index": "1", "name": "key", "type": "String"}], "description": "Resets a tween to its initial value (the one given, not the one before the tween), given its object and property/method pair. By default, all tweens are removed, unless [code]key[/code] is specified.", "name": "reset", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Resets all tweens to their initial values (the ones given, not those before the tween).", "name": "reset_all", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"default": "\"\"", "description": "", "index": "1", "name": "key", "type": "String"}], "description": "Continues animating a stopped tween, given its object and property/method pair. By default, all tweens are resumed, unless [code]key[/code] is specified.", "name": "resume", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Continues animating all stopped tweens.", "name": "resume_all", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "time", "type": "float"}], "description": "Sets the interpolation to the given [code]time[/code] in seconds.", "name": "seek", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "active", "type": "bool"}], "description": "Activates/deactivates the tween. See also [method stop_all] and [method resume_all].", "name": "set_active", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Starts the tween. You can define animations both before and after this.", "name": "start", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"default": "\"\"", "description": "", "index": "1", "name": "key", "type": "String"}], "description": "Stops a tween, given its object and property/method pair. By default, all tweens are stopped, unless [code]key[/code] is specified.", "name": "stop", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Stops animating all tweens.", "name": "stop_all", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "method", "type": "String"}, {"description": "", "index": "2", "name": "initial", "type": "Object"}, {"description": "", "index": "3", "name": "initial_method", "type": "String"}, {"description": "", "index": "4", "name": "final_val", "type": "Variant"}, {"description": "", "index": "5", "name": "duration", "type": "float"}, {"description": "", "index": "6", "name": "trans_type", "type": "int"}, {"description": "", "index": "7", "name": "ease_type", "type": "int"}, {"default": "0", "description": "", "index": "8", "name": "delay", "type": "float"}], "description": "Animates [code]method[/code] of [code]object[/code] from the value returned by [code]initial_method[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecutive values.\n                Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information", "name": "targeting_method", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "property", "type": "NodePath"}, {"description": "", "index": "2", "name": "initial", "type": "Object"}, {"description": "", "index": "3", "name": "initial_val", "type": "NodePath"}, {"description": "", "index": "4", "name": "final_val", "type": "Variant"}, {"description": "", "index": "5", "name": "duration", "type": "float"}, {"description": "", "index": "6", "name": "trans_type", "type": "int"}, {"description": "", "index": "7", "name": "ease_type", "type": "int"}, {"default": "0", "description": "", "index": "8", "name": "delay", "type": "float"}], "description": "Animates [code]property[/code] of [code]object[/code] from the current value of the [code]initial_val[/code] property of [code]initial[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.\n                Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information", "name": "targeting_property", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the current time of the tween.", "name": "tell", "qualifiers": "const", "return_": {"description": "", "type": "float"}}], "name": "Tween", "signals": [{"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "key", "type": "NodePath"}], "description": "Emitted when a tween ends.", "name": "tween_completed"}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "key", "type": "NodePath"}], "description": "Emitted when a tween starts.", "name": "tween_started"}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "key", "type": "NodePath"}, {"description": "", "index": "2", "name": "elapsed", "type": "float"}, {"description": "", "index": "3", "name": "value", "type": "Object"}], "description": "Emitted at each step of the animation.", "name": "tween_step"}], "tutorials": {"links": []}}, "UndoRedo": {"brief_description": "Helper to manage UndoRedo in the editor or custom tools.", "category": "Core", "constants": [{"description": "", "enum": "MergeMode", "name": "MERGE_DISABLE", "value": "0"}, {"description": "", "enum": "MergeMode", "name": "MERGE_ENDS", "value": "1"}, {"description": "", "enum": "MergeMode", "name": "MERGE_ALL", "value": "2"}], "demos": {"links": []}, "description": "Helper to manage UndoRedo in the editor or custom tools. It works by registering methods and property changes inside 'actions'.\n\t\tCommon behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.\n\t\tHere's an example on how to add an action to Godot editor's own 'undoredo':\n\t\t[codeblock]\n\t\tvar undoredo = get_undo_redo() # method of EditorPlugin\n\n\t\tfunc do_something():\n\t\t    pass # put your code here\n\n\t\tfunc undo_something():\n\t\t    pass # put here the code that reverts what's done by \"do_something()\"\n\n\t\tfunc _on_MyButton_pressed():\n\t\t    var node = get_node(\"MyNode2D\")\n\t\t    undoredo.create_action(\"Move the node\")\n\t\t    undoredo.add_do_method(self, \"do_something\")\n\t\t    undoredo.add_undo_method(self, \"undo_something\")\n\t\t    undoredo.add_do_property(node, \"position\", Vector2(100,100))\n\t\t    undoredo.add_undo_property(node, \"position\", node.position)\n\t\t    undoredo.commit_action()\n\t\t[/codeblock]\n\t\t[method create_action], [method add_do_method], [method add_undo_method], [method add_do_property], [method add_undo_property], and [method commit_action] should be called one after the other, like in the example. Not doing so could lead to crashes.\n\t\tIf you don't need to register a method you can leave [method add_do_method] and [method add_undo_method] out, and so it goes for properties. You can register more than one method/property.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "method", "type": "String"}], "description": "Register a method that will be called when the action is committed.", "name": "add_do_method", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "property", "type": "String"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Register a property value change for 'do'.", "name": "add_do_property", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}], "description": "Register a reference for 'do' that will be erased if the 'do' history is lost. This is useful mostly for new nodes created for the 'do' call. Do not use for resources.", "name": "add_do_reference", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "method", "type": "String"}], "description": "Register a method that will be called when the action is undone.", "name": "add_undo_method", "qualifiers": "vararg", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}, {"description": "", "index": "1", "name": "property", "type": "String"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Register a property value change for 'undo'.", "name": "add_undo_property", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "object", "type": "Object"}], "description": "Register a reference for 'undo' that will be erased if the 'undo' history is lost. This is useful mostly for nodes removed with the 'do' call (not the 'undo' call!).", "name": "add_undo_reference", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Clear the undo/redo history and associated references.", "name": "clear_history", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Commit the action. All 'do' methods/properties are called/set when this function is called.", "name": "commit_action", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}, {"default": "0", "description": "", "index": "1", "name": "merge_mode", "type": "int"}], "description": "Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property], and [method add_undo_property], then commit the action with [method commit_action].", "name": "create_action", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Get the name of the current action.", "name": "get_current_action_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the version, each time a new action is committed, the version number of the UndoRedo is increased automatically.\n\t\t\t\tThis is useful mostly to check if something changed from a saved version.", "name": "get_version", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Redo last action.", "name": "redo", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Undo last action.", "name": "undo", "return_": {"description": "", "type": "bool"}}], "name": "UndoRedo", "signals": [], "tutorials": {"links": []}}, "VBoxContainer": {"brief_description": "Vertical box container.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Vertical box container. See [BoxContainer].", "inherits": "BoxContainer", "members": [], "methods": [], "name": "VBoxContainer", "signals": [], "tutorials": {"links": []}}, "VScrollBar": {"brief_description": "Vertical version of [ScrollBar], which goes from left (min) to right (max).", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "ScrollBar", "members": [], "methods": [], "name": "VScrollBar", "signals": [], "tutorials": {"links": []}}, "VSeparator": {"brief_description": "Vertical version of [Separator].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Vertical version of [Separator]. It is used to separate objects horizontally, though (but it looks vertical!).", "inherits": "Separator", "members": [], "methods": [], "name": "VSeparator", "signals": [], "tutorials": {"links": []}}, "VSlider": {"brief_description": "Vertical slider.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Vertical slider. See [Slider]. This one goes from left (min) to right (max).", "inherits": "Slider", "members": [], "methods": [], "name": "VSlider", "signals": [], "tutorials": {"links": []}}, "VSplitContainer": {"brief_description": "Vertical split container.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Vertical split container. See [SplitContainer]. This goes from left to right.", "inherits": "SplitContainer", "members": [], "methods": [], "name": "VSplitContainer", "signals": [], "tutorials": {"links": []}}, "Variant": {"brief_description": "The most important data type in Godot.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A Variant takes up only 20 bytes and can store almost any engine datatype inside of it. Variants are rarely used to hold information for long periods of time, instead they are used mainly for communication, editing, serialization and moving data around.", "members": [], "methods": [], "name": "Variant", "signals": [], "tutorials": {"links": []}}, "Vector2": {"brief_description": "Vector used for 2D math.", "category": "Built-In Types", "constants": [{"description": "Null vector.", "name": "ZERO", "value": "Vector2( 0, 0 )"}, {"description": "Infinite vector.", "name": "INF", "value": "Vector2( inf, inf )"}, {"description": "Left unit vector.", "name": "LEFT", "value": "Vector2( -1, 0 )"}, {"description": "Right unit vector.", "name": "RIGHT", "value": "Vector2( 1, 0 )"}, {"description": "Up unit vector.", "name": "UP", "value": "Vector2( 0, -1 )"}, {"description": "Down unit vector.", "name": "DOWN", "value": "Vector2( 0, 1 )"}], "demos": {"links": []}, "description": "2-element structure that can be used to represent positions in 2d space or any other pair of numeric values.", "members": [{"description": "The vector's x component.", "getter": "", "name": "x", "setter": "", "type": "float"}, {"description": "The vector's y component.", "getter": "", "name": "y", "setter": "", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "x", "type": "float"}, {"description": "", "index": "1", "name": "y", "type": "float"}], "description": "Constructs a new Vector2 from the given x and y.", "name": "Vector2", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns a new vector with all components in absolute values (i.e. positive).", "name": "abs", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the vector's angle in radians with respect to the x-axis, or [code](1, 0)[/code] vector.\n\t\t\t\tEquivalent to the result of atan2 when called with the vector's x and y as parameters: [code]atan2(x, y)[/code].", "name": "angle", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "to", "type": "Vector2"}], "description": "Returns the angle in radians between the two vectors.", "name": "angle_to", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "to", "type": "Vector2"}], "description": "Returns the angle in radians between the line connecting the two points and the x coordinate.", "name": "angle_to_point", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the ratio of x to y.", "name": "aspect", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "n", "type": "Vector2"}], "description": "Returns the vector \"bounced off\" from a plane defined by the given normal.", "name": "bounce", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the vector with all components rounded up.", "name": "ceil", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "length", "type": "float"}], "description": "Returns the vector with a maximum length.", "name": "clamped", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "with", "type": "Vector2"}], "description": "Returns the 2 dimensional analog of the cross product with the given vector.", "name": "cross", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector2"}, {"description": "", "index": "1", "name": "pre_a", "type": "Vector2"}, {"description": "", "index": "2", "name": "post_b", "type": "Vector2"}, {"description": "", "index": "3", "name": "t", "type": "float"}], "description": "Cubicly interpolates between this vector and [code]b[/code] using [code]pre_a[/code] and [code]post_b[/code] as handles, and returns the result at position [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation.", "name": "cubic_interpolate", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "to", "type": "Vector2"}], "description": "Returns the squared distance to vector [code]b[/code]. Prefer this function over [method distance_to] if you need to sort vectors or need the squared distance for some formula.", "name": "distance_squared_to", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "to", "type": "Vector2"}], "description": "Returns the distance to vector [code]b[/code].", "name": "distance_to", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "with", "type": "Vector2"}], "description": "Returns the dot product with vector [code]b[/code].", "name": "dot", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the vector with all components rounded down.", "name": "floor", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns [code]true[/code] if the vector is normalized.", "name": "is_normalized", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the vector's length.", "name": "length", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the vector's length squared. Prefer this function over [member length] if you need to sort vectors or need the squared length for some formula.", "name": "length_squared", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector2"}, {"description": "", "index": "1", "name": "t", "type": "float"}], "description": "Returns the result of the linear interpolation between this vector and [code]b[/code] by amount [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation.", "name": "linear_interpolate", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the vector scaled to unit length. Equivalent to [code]v / v.length()[/code].", "name": "normalized", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector2"}], "description": "Returns the vector projected onto the vector [code]b[/code].", "name": "project", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "n", "type": "Vector2"}], "description": "Returns the vector reflected from a plane defined by the given normal.", "name": "reflect", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "phi", "type": "float"}], "description": "Returns the vector rotated by [code]phi[/code] radians.", "name": "rotated", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the vector with all components rounded to the nearest integer, with halfway cases rounded away from zero.", "name": "round", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector2"}, {"description": "", "index": "1", "name": "t", "type": "float"}], "description": "Returns the result of SLERP between this vector and [code]b[/code], by amount [code]t[/code]. [code]t[/code] is in the range of  [code]0.0 - 1.0[/code], representing the amount of interpolation.\n\t\t\t\tBoth vectors need to be normalized.", "name": "slerp", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "n", "type": "Vector2"}], "description": "Returns the component of the vector along a plane defined by the given normal.", "name": "slide", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "by", "type": "Vector2"}], "description": "Returns the vector snapped to a grid with the given size.", "name": "snapped", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns a perpendicular vector.", "name": "tangent", "return_": {"description": "", "type": "Vector2"}}], "name": "Vector2", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/math/index.html"}]}}, "Vector3": {"brief_description": "Vector class, which performs basic 3D vector math operations.", "category": "Built-In Types", "constants": [{"description": "Enumerated value for the X axis. Returned by [method max_axis] and [method min_axis].", "name": "AXIS_X", "value": "0"}, {"description": "Enumerated value for the Y axis.", "name": "AXIS_Y", "value": "1"}, {"description": "Enumerated value for the Z axis.", "name": "AXIS_Z", "value": "2"}, {"description": "Null vector.", "name": "ZERO", "value": "Vector3( 0, 0, 0 )"}, {"description": "Infinite vector.", "name": "INF", "value": "Vector3( inf, inf, inf )"}, {"description": "Left unit vector.", "name": "LEFT", "value": "Vector3( -1, 0, 0 )"}, {"description": "Right unit vector.", "name": "RIGHT", "value": "Vector3( 1, 0, 0 )"}, {"description": "Up unit vector.", "name": "UP", "value": "Vector3( 0, 1, 0 )"}, {"description": "Down unit vector.", "name": "DOWN", "value": "Vector3( 0, -1, 0 )"}, {"description": "Forward unit vector.", "name": "FORWARD", "value": "Vector3( 0, 0, -1 )"}, {"description": "Back unit vector.", "name": "BACK", "value": "Vector3( 0, 0, 1 )"}], "demos": {"links": []}, "description": "Vector3 is one of the core classes of the engine, and includes several built-in helper functions to perform basic vector math operations.", "members": [{"description": "The vector's x component.", "getter": "", "name": "x", "setter": "", "type": "float"}, {"description": "The vector's y component.", "getter": "", "name": "y", "setter": "", "type": "float"}, {"description": "The vector's z component.", "getter": "", "name": "z", "setter": "", "type": "float"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "x", "type": "float"}, {"description": "", "index": "1", "name": "y", "type": "float"}, {"description": "", "index": "2", "name": "z", "type": "float"}], "description": "Returns a Vector3 with the given components.", "name": "Vector3", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns a new vector with all components in absolute values (i.e. positive).", "name": "abs", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "to", "type": "Vector3"}], "description": "Returns the minimum angle to the given vector.", "name": "angle_to", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "n", "type": "Vector3"}], "description": "Returns the vector \"bounced off\" from a plane defined by the given normal.", "name": "bounce", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns a new vector with all components rounded up.", "name": "ceil", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector3"}], "description": "Returns the cross product with [code]b[/code].", "name": "cross", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector3"}, {"description": "", "index": "1", "name": "pre_a", "type": "Vector3"}, {"description": "", "index": "2", "name": "post_b", "type": "Vector3"}, {"description": "", "index": "3", "name": "t", "type": "float"}], "description": "Performs a cubic interpolation between vectors [code]pre_a[/code], [code]a[/code], [code]b[/code], [code]post_b[/code] ([code]a[/code] is current), by the given amount [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation.", "name": "cubic_interpolate", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector3"}], "description": "Returns the squared distance to [code]b[/code]. Prefer this function over [method distance_to] if you need to sort vectors or need the squared distance for some formula.", "name": "distance_squared_to", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector3"}], "description": "Returns the distance to [code]b[/code].", "name": "distance_to", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector3"}], "description": "Returns the dot product with [code]b[/code].", "name": "dot", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns a new vector with all components rounded down.", "name": "floor", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns the inverse of the vector. This is the same as [code]Vector3( 1.0 / v.x, 1.0 / v.y, 1.0 / v.z )[/code].", "name": "inverse", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns [code]true[/code] if the vector is normalized.", "name": "is_normalized", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the vector's length.", "name": "length", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns the vector's length squared. Prefer this function over [method length] if you need to sort vectors or need the squared length for some formula.", "name": "length_squared", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector3"}, {"description": "", "index": "1", "name": "t", "type": "float"}], "description": "Returns the result of the linear interpolation between this vector and [code]b[/code] by amount [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation..", "name": "linear_interpolate", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns the axis of the vector's largest value. See [code]AXIS_*[/code] constants.", "name": "max_axis", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the axis of the vector's smallest value. See [code]AXIS_*[/code] constants.", "name": "min_axis", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the vector scaled to unit length. Equivalent to [code]v / v.length()[/code].", "name": "normalized", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector3"}], "description": "Returns the outer product with [code]b[/code].", "name": "outer", "return_": {"description": "", "type": "Basis"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector3"}], "description": "Returns the vector projected onto the vector [code]b[/code].", "name": "project", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "n", "type": "Vector3"}], "description": "Returns the vector reflected from a plane defined by the given normal.", "name": "reflect", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "axis", "type": "Vector3"}, {"description": "", "index": "1", "name": "phi", "type": "float"}], "description": "Rotates the vector around a given axis by [code]phi[/code] radians. The axis must be a normalized vector.", "name": "rotated", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns the vector with all components rounded to the nearest integer, with halfway cases rounded away from zero.", "name": "round", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "b", "type": "Vector3"}, {"description": "", "index": "1", "name": "t", "type": "float"}], "description": "Returns the result of SLERP between this vector and [code]b[/code], by amount [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation.\n\t\t\t\tBoth vectors need to be normalized.", "name": "slerp", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "n", "type": "Vector3"}], "description": "Returns the component of the vector along a plane defined by the given normal.", "name": "slide", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [{"description": "", "index": "0", "name": "by", "type": "Vector3"}], "description": "Returns a copy of the vector, snapped to the lowest neared multiple.", "name": "snapped", "return_": {"description": "", "type": "Vector3"}}, {"arguments": [], "description": "Returns a diagonal matrix with the vector as main diagonal.", "name": "to_diagonal_matrix", "return_": {"description": "", "type": "Basis"}}], "name": "Vector3", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/math/index.html"}]}}, "VehicleBody": {"brief_description": "Physics body that simulates the behaviour of a car.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This nodes implements all the physics logic needed to simulate a car. It is based on the raycast vehicle system commonly found in physics engines. You will need to add a [CollisionShape] for the main body of your vehicle and add [VehicleWheel] nodes for the wheels. You should also add a [MeshInstance] to this node for the 3D model of your car but this model should not include meshes for the wheels. You should control the vehicle by using the [member brake], [member engine_force], and [member steering] properties and not change the position or orientation of this node directly.\n\t\tNote that the origin point of your VehicleBody will determine the center of gravity of your vehicle so it is better to keep this low and move the [CollisionShape] and [MeshInstance] upwards.", "inherits": "RigidBody", "members": [{"description": "Slows down the vehicle by applying a braking force. The vehicle is only slowed down if the wheels are in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the [member RigidBody.mass] of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking.", "getter": "get_brake", "name": "brake", "setter": "set_brake", "type": "float"}, {"description": "Accelerates the vehicle by applying an engine force. The vehicle is only speed up if the wheels that have [member VehicleWheel.set_use_as_traction] set to true and are in contact with a surface. The [member RigidBody.mass] of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration. Note that the simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears.\n\t\t\tA negative value will result in the vehicle reversing.", "getter": "get_engine_force", "name": "engine_force", "setter": "set_engine_force", "type": "float"}, {"description": "The steering angle for the vehicle. Setting this to a non-zero value will result in the vehicle turning when it's moving. Wheels that have [member VehicleWheel.set_use_as_steering] set to true will automatically be rotated.", "getter": "get_steering", "name": "steering", "setter": "set_steering", "type": "float"}], "methods": [], "name": "VehicleBody", "signals": [], "tutorials": {"links": []}}, "VehicleWheel": {"brief_description": "Physics object that simulates the behaviour of a wheel.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "This node needs to be used as a child node of [VehicleBody] and simulates the behaviour of one of its wheels. This node also acts as a collider to detect if the wheel is touching a surface.", "inherits": "Spatial", "members": [{"description": "The damping applied to the spring when the spring is being compressed. This value should be between 0.0 (no damping) and 1.0. A value of 0.0 means the car will keep bouncing as the spring keeps its energy. A good value for this is around 0.3 for a normal car, 0.5 for a race car.", "getter": "get_damping_compression", "name": "damping_compression", "setter": "set_damping_compression", "type": "float"}, {"description": "The damping applied to the spring when relaxing. This value should be between 0.0 (no damping) and 1.0. This value should always be slightly higher than the [member damping_compression] property. For a [member damping_compression] value of 0.3, try a relaxation value of 0.5", "getter": "get_damping_relaxation", "name": "damping_relaxation", "setter": "set_damping_relaxation", "type": "float"}, {"description": "The maximum force the spring can resist. This value should be higher than a quarter of the [member RigidBody.mass] of the [VehicleBody] or the spring will not carry the weight of the vehicle. Good results are often obtained by a value that is about 3x to 4x this number.", "getter": "get_suspension_max_force", "name": "suspension_max_force", "setter": "set_suspension_max_force", "type": "float"}, {"description": "This value defines the stiffness of the suspension. Use a value lower than 50 for an off-road car, a value between 50 and 100 for a race car and try something around 200 for something like a Formula 1 car.", "getter": "get_suspension_stiffness", "name": "suspension_stiffness", "setter": "set_suspension_stiffness", "type": "float"}, {"description": "This is the distance the suspension can travel. As Godot measures are in meters keep this setting relatively low. Try a value between 0.1 and 0.3 depending on the type of car .", "getter": "get_suspension_travel", "name": "suspension_travel", "setter": "set_suspension_travel", "type": "float"}, {"description": "If true this wheel will be turned when the car steers.", "getter": "is_used_as_steering", "name": "use_as_steering", "setter": "set_use_as_steering", "type": "bool"}, {"description": "If true this wheel transfers engine force to the ground to propel the vehicle forward.", "getter": "is_used_as_traction", "name": "use_as_traction", "setter": "set_use_as_traction", "type": "bool"}, {"description": "This determines how much grip this wheel has. It is combined with the friction setting of the surface the wheel is in contact with. 0.0 means no grip, 1.0 is normal grip. For a drift car setup, try setting the grip of the rear wheels slightly lower than the front wheels, or use a lower value to simulate tire wear.\n\t\t\tIt's best to set this to 1.0 when starting out.", "getter": "get_friction_slip", "name": "wheel_friction_slip", "setter": "set_friction_slip", "type": "float"}, {"description": "The radius of the wheel in meters.", "getter": "get_radius", "name": "wheel_radius", "setter": "set_radius", "type": "float"}, {"description": "This is the distance in meters the wheel is lowered from its origin point. Don't set this to 0.0 and move the wheel into position, instead move the origin point of your wheel (the gizmo in Godot) to the position the wheel will take when bottoming out, then use the rest length to move the wheel down to the position it should be in when the car is in rest.", "getter": "get_suspension_rest_length", "name": "wheel_rest_length", "setter": "set_suspension_rest_length", "type": "float"}, {"description": "This value effects the roll of your vehicle. If set to 0.0 for all wheels your vehicle will be prone to rolling over while a value of 1.0 will resist body roll.", "getter": "get_roll_influence", "name": "wheel_roll_influence", "setter": "set_roll_influence", "type": "float"}], "methods": [{"arguments": [], "description": "Returns a value between 0.0 and 1.0 that indicates whether this wheel is skidding. 0.0 is not skidding, 1.0 means the wheel has lost grip.", "name": "get_skidinfo", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [], "description": "Returns true if this wheel is in contact with a surface.", "name": "is_in_contact", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "VehicleWheel", "signals": [], "tutorials": {"links": []}}, "VideoPlayer": {"brief_description": "Control for playing video streams.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Control node for playing video streams. Supported formats are WebM and OGV Theora.", "inherits": "Control", "members": [{"description": "The embedded audio track to play.", "getter": "get_audio_track", "name": "audio_track", "setter": "set_audio_track", "type": "int"}, {"description": "If [code]true[/code] playback starts when the scene loads. Default value: [code]false[/code].", "getter": "has_autoplay", "name": "autoplay", "setter": "set_autoplay", "type": "bool"}, {"description": "Amount of time in milliseconds to store in buffer while playing.", "getter": "get_buffering_msec", "name": "buffering_msec", "setter": "set_buffering_msec", "type": "int"}, {"description": "Audio bus to use for sound playback.", "getter": "get_bus", "name": "bus", "setter": "set_bus", "type": "String"}, {"description": "If [code]true[/code] the video scales to the control size. Default value: [code]true[/code].", "getter": "has_expand", "name": "expand", "setter": "set_expand", "type": "bool"}, {"description": "If [code]true[/code] the video is paused.", "getter": "is_paused", "name": "paused", "setter": "set_paused", "type": "bool"}, {"description": "", "getter": "get_stream", "name": "stream", "setter": "set_stream", "type": "VideoStream"}, {"description": "The current position of the stream, in seconds.", "getter": "get_stream_position", "name": "stream_position", "setter": "set_stream_position", "type": "float"}, {"description": "Audio volume as a linear value.", "getter": "get_volume", "name": "volume", "setter": "set_volume", "type": "float"}, {"description": "Audio volume in dB.", "getter": "get_volume_db", "name": "volume_db", "setter": "set_volume_db", "type": "float"}], "methods": [{"arguments": [], "description": "Returns the video stream's name.", "name": "get_stream_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Returns the current frame as a [Texture].", "name": "get_video_texture", "return_": {"description": "", "type": "Texture"}}, {"arguments": [], "description": "Returns [code]true[/code] if the video is playing.", "name": "is_playing", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Starts the video playback.", "name": "play", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Stops the video playback.", "name": "stop", "return_": {"description": "", "type": "void"}}], "name": "VideoPlayer", "signals": [{"arguments": [], "description": "Emitted when playback is finished.", "name": "finished"}], "tutorials": {"links": []}}, "VideoStream": {"brief_description": "Base resource for video streams.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [], "methods": [], "name": "VideoStream", "signals": [], "tutorials": {"links": []}}, "Viewport": {"brief_description": "Creates a sub-view into the screen.", "category": "Core", "constants": [{"description": "Do not update the render target.", "enum": "UpdateMode", "name": "UPDATE_DISABLED", "value": "0"}, {"description": "Update the render target once, then switch to [code]UPDATE_DISABLED[/code].", "enum": "UpdateMode", "name": "UPDATE_ONCE", "value": "1"}, {"description": "Update the render target only when it is visible. This is the default value.", "enum": "UpdateMode", "name": "UPDATE_WHEN_VISIBLE", "value": "2"}, {"description": "Always update the render target.", "enum": "UpdateMode", "name": "UPDATE_ALWAYS", "value": "3"}, {"description": "", "enum": "ShadowAtlasQuadrantSubdiv", "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED", "value": "0"}, {"description": "", "enum": "ShadowAtlasQuadrantSubdiv", "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_1", "value": "1"}, {"description": "", "enum": "ShadowAtlasQuadrantSubdiv", "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_4", "value": "2"}, {"description": "", "enum": "ShadowAtlasQuadrantSubdiv", "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_16", "value": "3"}, {"description": "", "enum": "ShadowAtlasQuadrantSubdiv", "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_64", "value": "4"}, {"description": "", "enum": "ShadowAtlasQuadrantSubdiv", "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_256", "value": "5"}, {"description": "", "enum": "ShadowAtlasQuadrantSubdiv", "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_1024", "value": "6"}, {"description": "Enum limiter. Do not use it directly.", "enum": "ShadowAtlasQuadrantSubdiv", "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_MAX", "value": "7"}, {"description": "Amount of objects in frame.", "enum": "RenderInfo", "name": "RENDER_INFO_OBJECTS_IN_FRAME", "value": "0"}, {"description": "Amount of vertices in frame.", "enum": "RenderInfo", "name": "RENDER_INFO_VERTICES_IN_FRAME", "value": "1"}, {"description": "Amount of material changes in frame.", "enum": "RenderInfo", "name": "RENDER_INFO_MATERIAL_CHANGES_IN_FRAME", "value": "2"}, {"description": "Amount of shader changes in frame.", "enum": "RenderInfo", "name": "RENDER_INFO_SHADER_CHANGES_IN_FRAME", "value": "3"}, {"description": "Amount of surface changes in frame.", "enum": "RenderInfo", "name": "RENDER_INFO_SURFACE_CHANGES_IN_FRAME", "value": "4"}, {"description": "Amount of draw calls in frame.", "enum": "RenderInfo", "name": "RENDER_INFO_DRAW_CALLS_IN_FRAME", "value": "5"}, {"description": "Enum limiter. Do not use it directly.", "enum": "RenderInfo", "name": "RENDER_INFO_MAX", "value": "6"}, {"description": "Objects are displayed normally.", "enum": "DebugDraw", "name": "DEBUG_DRAW_DISABLED", "value": "0"}, {"description": "Objects are displayed without light information.", "enum": "DebugDraw", "name": "DEBUG_DRAW_UNSHADED", "value": "1"}, {"description": "Objected are displayed semi-transparent with additive blending so you can see where they intersect.", "enum": "DebugDraw", "name": "DEBUG_DRAW_OVERDRAW", "value": "2"}, {"description": "Objects are displayed in wireframe style.", "enum": "DebugDraw", "name": "DEBUG_DRAW_WIREFRAME", "value": "3"}, {"description": "Multisample anti-aliasing mode disabled. This is the default value.", "enum": "MSAA", "name": "MSAA_DISABLED", "value": "0"}, {"description": "", "enum": "MSAA", "name": "MSAA_2X", "value": "1"}, {"description": "", "enum": "MSAA", "name": "MSAA_4X", "value": "2"}, {"description": "", "enum": "MSAA", "name": "MSAA_8X", "value": "3"}, {"description": "", "enum": "MSAA", "name": "MSAA_16X", "value": "4"}, {"description": "", "enum": "Usage", "name": "USAGE_2D", "value": "0"}, {"description": "", "enum": "Usage", "name": "USAGE_2D_NO_SAMPLING", "value": "1"}, {"description": "", "enum": "Usage", "name": "USAGE_3D", "value": "2"}, {"description": "", "enum": "Usage", "name": "USAGE_3D_NO_EFFECTS", "value": "3"}, {"description": "Always clear the render target before drawing.", "enum": "ClearMode", "name": "CLEAR_MODE_ALWAYS", "value": "0"}, {"description": "Never clear the render target.", "enum": "ClearMode", "name": "CLEAR_MODE_NEVER", "value": "1"}, {"description": "Clear the render target next frame, then switch to [code]CLEAR_MODE_NEVER[/code].", "enum": "ClearMode", "name": "CLEAR_MODE_ONLY_NEXT_FRAME", "value": "2"}], "demos": {"links": []}, "description": "A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.\n\t\tOptionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.\n\t\tIf a viewport is a child of a [ViewportContainer], it will automatically take up its size, otherwise it must be set manually.\n\t\tViewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.\n\t\tAlso, viewports can be assigned to different screens in case the devices have multiple screens.\n\t\tFinally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.", "inherits": "Node", "members": [{"description": "If [code]true[/code] the viewport will be used in AR/VR process. Default value: [code]false[/code].", "getter": "use_arvr", "name": "arvr", "setter": "set_use_arvr", "type": "bool"}, {"description": "If [code]true[/code] the viewport will process 2D audio streams. Default value: [code]false[/code].", "getter": "is_audio_listener_2d", "name": "audio_listener_enable_2d", "setter": "set_as_audio_listener_2d", "type": "bool"}, {"description": "If [code]true[/code] the viewport will process 3D audio streams. Default value: [code]false[/code].", "getter": "is_audio_listener", "name": "audio_listener_enable_3d", "setter": "set_as_audio_listener", "type": "bool"}, {"description": "The canvas transform of the viewport, useful for changing the on-screen positions of all child [CanvasItem]s. This is relative to the global canvas transform of the viewport.", "getter": "get_canvas_transform", "name": "canvas_transform", "setter": "set_canvas_transform", "type": "Transform2D"}, {"description": "The overlay mode for test rendered geometry in debug purposes. Default value: [code]DEBUG_DRAW_DISABLED[/code].", "getter": "get_debug_draw", "name": "debug_draw", "setter": "set_debug_draw", "type": "int"}, {"description": "If [code]true[/code] the viewport will disable 3D rendering. For actual disabling use [code]usage[/code]. Default value: [code]false[/code].", "getter": "is_3d_disabled", "name": "disable_3d", "setter": "set_disable_3d", "type": "bool"}, {"description": "The global canvas transform of the viewport. The canvas transform is relative to this.", "getter": "get_global_canvas_transform", "name": "global_canvas_transform", "setter": "set_global_canvas_transform", "type": "Transform2D"}, {"description": "If [code]true[/code] the viewport will not receive input event. Default value: [code]false[/code].", "getter": "is_input_disabled", "name": "gui_disable_input", "setter": "set_disable_input", "type": "bool"}, {"description": "If [code]true[/code] the GUI controls on the viewport will lay pixel perfectly. Default value: [code]true[/code].", "getter": "is_snap_controls_to_pixels_enabled", "name": "gui_snap_controls_to_pixels", "setter": "set_snap_controls_to_pixels", "type": "bool"}, {"description": "If [code]true[/code] the viewport rendering will receive benefits from High Dynamic Range algorithm. Default value: [code]true[/code].", "getter": "get_hdr", "name": "hdr", "setter": "set_hdr", "type": "bool"}, {"description": "If [code]true[/code] the result after 3D rendering will not have a linear to sRGB color conversion applied. This is important when the viewport is used as a render target where the result is used as a texture on a 3D object rendered in another viewport. It is also important if the viewport is used to create data that is not color based (noise, heightmaps, pickmaps, etc.). Do not enable this when the viewport is used as a texture on a 2D object or if the viewport is your final output.", "getter": "get_keep_3d_linear", "name": "keep_3d_linear", "setter": "set_keep_3d_linear", "type": "bool"}, {"description": "The multisample anti-aliasing mode. Default value: [code]MSAA_DISABLED[/code].", "getter": "get_msaa", "name": "msaa", "setter": "set_msaa", "type": "int"}, {"description": "If [code]true[/code] the viewport will use [World] defined in [code]world[/code] property. Default value: [code]false[/code].", "getter": "is_using_own_world", "name": "own_world", "setter": "set_use_own_world", "type": "bool"}, {"description": "If [code]true[/code] the objects rendered by viewport become subjects of mouse picking process. Default value: [code]false[/code].", "getter": "get_physics_object_picking", "name": "physics_object_picking", "setter": "set_physics_object_picking", "type": "bool"}, {"description": "The clear mode when viewport used as a render target. Default value: [code]CLEAR_MODE_ALWAYS[/code].", "getter": "get_clear_mode", "name": "render_target_clear_mode", "setter": "set_clear_mode", "type": "int"}, {"description": "The update mode when viewport used as a render target. Default value: [code]UPDATE_WHEN_VISIBLE[/code].", "getter": "get_update_mode", "name": "render_target_update_mode", "setter": "set_update_mode", "type": "int"}, {"description": "If [code]true[/code] the result of rendering will be flipped vertically. Default value: [code]false[/code].", "getter": "get_vflip", "name": "render_target_v_flip", "setter": "set_vflip", "type": "bool"}, {"description": "The subdivision amount of first quadrant on shadow atlas. Default value: [code]SHADOW_ATLAS_QUADRANT_SUBDIV_4[/code].", "getter": "get_shadow_atlas_quadrant_subdiv", "name": "shadow_atlas_quad_0", "setter": "set_shadow_atlas_quadrant_subdiv", "type": "int"}, {"description": "The subdivision amount of second quadrant on shadow atlas. Default value: [code]SHADOW_ATLAS_QUADRANT_SUBDIV_4[/code].", "getter": "get_shadow_atlas_quadrant_subdiv", "name": "shadow_atlas_quad_1", "setter": "set_shadow_atlas_quadrant_subdiv", "type": "int"}, {"description": "The subdivision amount of third quadrant on shadow atlas. Default value: [code]SHADOW_ATLAS_QUADRANT_SUBDIV_16[/code].", "getter": "get_shadow_atlas_quadrant_subdiv", "name": "shadow_atlas_quad_2", "setter": "set_shadow_atlas_quadrant_subdiv", "type": "int"}, {"description": "The subdivision amount of fourth quadrant on shadow atlas. Default value: [code]SHADOW_ATLAS_QUADRANT_SUBDIV_64[/code].", "getter": "get_shadow_atlas_quadrant_subdiv", "name": "shadow_atlas_quad_3", "setter": "set_shadow_atlas_quadrant_subdiv", "type": "int"}, {"description": "The resolution of shadow atlas. Both width and height is equal to one value.", "getter": "get_shadow_atlas_size", "name": "shadow_atlas_size", "setter": "set_shadow_atlas_size", "type": "int"}, {"description": "The width and height of viewport.", "getter": "get_size", "name": "size", "setter": "set_size", "type": "Vector2"}, {"description": "If [code]true[/code] the viewport should render its background as transparent. Default value: [code]false[/code].", "getter": "has_transparent_background", "name": "transparent_bg", "setter": "set_transparent_background", "type": "bool"}, {"description": "The rendering mode of viewport. Default value: [code]USAGE_3D[/code].", "getter": "get_usage", "name": "usage", "setter": "set_usage", "type": "int"}, {"description": "The custom [World] which can be used as 3D environment source.", "getter": "get_world", "name": "world", "setter": "set_world", "type": "World"}, {"description": "The custom [World2D] which can be used as 2D environment source.", "getter": "get_world_2d", "name": "world_2d", "setter": "set_world_2d", "type": "World2D"}], "methods": [{"arguments": [], "description": "Returns the 3D world of the viewport, or if none the world of the parent viewport.", "name": "find_world", "qualifiers": "const", "return_": {"description": "", "type": "World"}}, {"arguments": [], "description": "Returns the 2D world of the viewport.", "name": "find_world_2d", "qualifiers": "const", "return_": {"description": "", "type": "World2D"}}, {"arguments": [], "description": "Returns the active 3D camera.", "name": "get_camera", "qualifiers": "const", "return_": {"description": "", "type": "Camera"}}, {"arguments": [], "description": "Returns the total transform of the viewport.", "name": "get_final_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [], "description": "Returns the mouse position relative to the viewport.", "name": "get_mouse_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "info", "type": "int"}], "description": "Returns information about the viewport from the rendering pipeline.", "name": "get_render_info", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the size override set with [method set_size_override].", "name": "get_size_override", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [], "description": "Returns the viewport's texture.", "name": "get_texture", "qualifiers": "const", "return_": {"description": "", "type": "ViewportTexture"}}, {"arguments": [], "description": "Returns the viewport's RID from the [VisualServer].", "name": "get_viewport_rid", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "Returns the visible rectangle in global screen coordinates.", "name": "get_visible_rect", "qualifiers": "const", "return_": {"description": "", "type": "Rect2"}}, {"arguments": [], "description": "Returns the drag data from the GUI, that was previously returned by [method Control.get_drag_data].", "name": "gui_get_drag_data", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [], "description": "Returns [code]true[/code] if there are visible modals on-screen.", "name": "gui_has_modal_stack", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "", "name": "gui_is_dragging", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "local_event", "type": "InputEvent"}], "description": "", "name": "input", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns [code]true[/code] if the size override is enabled. See [method set_size_override].", "name": "is_size_override_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns [code]true[/code] if the size stretch override is enabled. See [method set_size_override_stretch].", "name": "is_size_override_stretch_enabled", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "rect", "type": "Rect2"}], "description": "", "name": "set_attach_to_screen_rect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}, {"default": "Vector2( -1, -1 )", "description": "", "index": "1", "name": "size", "type": "Vector2"}, {"default": "Vector2( 0, 0 )", "description": "", "index": "2", "name": "margin", "type": "Vector2"}], "description": "Sets the size override of the viewport. If the [code]enable[/code] parameter is [code]true[/code] the override is used, otherwise it uses the default size. If the size parameter is [code](-1, -1)[/code], it won't update the size.", "name": "set_size_override", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enabled", "type": "bool"}], "description": "If [code]true[/code] the size override affects stretch as well.", "name": "set_size_override_stretch", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "local_event", "type": "InputEvent"}], "description": "", "name": "unhandled_input", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Forces update of the 2D and 3D worlds.", "name": "update_worlds", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "to_position", "type": "Vector2"}], "description": "Warps the mouse to a position relative to the viewport.", "name": "warp_mouse", "return_": {"description": "", "type": "void"}}], "name": "Viewport", "signals": [{"arguments": [], "description": "Emitted when the size of the viewport is changed, whether by [method set_size_override], resize of window, or some other means.", "name": "size_changed"}], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/2d/2d_transforms.html"}, {"description": "http://docs.godotengine.org/en/3.0/tutorials/viewports/index.html"}]}}, "ViewportContainer": {"brief_description": "Control for holding [Viewport]s.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A [Container] node that holds a [Viewport], automatically setting its size.", "inherits": "Container", "members": [{"description": "If [code]true[/code] the viewport will be scaled to the control's size. Default value:[code]false[/code].", "getter": "is_stretch_enabled", "name": "stretch", "setter": "set_stretch", "type": "bool"}, {"description": "", "getter": "get_stretch_shrink", "name": "stretch_shrink", "setter": "set_stretch_shrink", "type": "int"}], "methods": [], "name": "ViewportContainer", "signals": [], "tutorials": {"links": []}}, "ViewportTexture": {"brief_description": "Texture which displays the content of a [Viewport].", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Displays the content of a [Viewport] node as a dynamic [Texture]. This can be used to mix controls, 2D, and 3D elements in the same scene.\n\t\tTo create a ViewportTexture in code, use the [method Viewport.get_texture] method on the target viewport.", "inherits": "Texture", "members": [{"description": "The path to the [Viewport] node to display. This is relative to the scene root, not to the node which uses the texture.", "getter": "get_viewport_path_in_scene", "name": "viewport_path", "setter": "set_viewport_path_in_scene", "type": "NodePath"}], "methods": [], "name": "ViewportTexture", "signals": [], "tutorials": {"links": []}}, "VisibilityEnabler": {"brief_description": "Enable certain nodes only when visible.", "category": "Core", "constants": [{"description": "This enabler will pause [AnimationPlayer] nodes.", "enum": "Enabler", "name": "ENABLER_PAUSE_ANIMATIONS", "value": "0"}, {"description": "This enabler will freeze [RigidBody] nodes.", "enum": "Enabler", "name": "ENABLER_FREEZE_BODIES", "value": "1"}, {"description": "", "enum": "Enabler", "name": "ENABLER_MAX", "value": "2"}], "demos": {"links": []}, "description": "The VisibilityEnabler will disable [RigidBody] and [AnimationPlayer] nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler itself.", "inherits": "VisibilityNotifier", "members": [{"description": "", "getter": "is_enabler_enabled", "name": "freeze_bodies", "setter": "set_enabler", "type": "bool"}, {"description": "", "getter": "is_enabler_enabled", "name": "pause_animations", "setter": "set_enabler", "type": "bool"}], "methods": [], "name": "VisibilityEnabler", "signals": [], "tutorials": {"links": []}}, "VisibilityEnabler2D": {"brief_description": "Enable certain nodes only when visible.", "category": "Core", "constants": [{"description": "This enabler will pause [AnimationPlayer] nodes.", "enum": "Enabler", "name": "ENABLER_PAUSE_ANIMATIONS", "value": "0"}, {"description": "This enabler will freeze [RigidBody2D] nodes.", "enum": "Enabler", "name": "ENABLER_FREEZE_BODIES", "value": "1"}, {"description": "This enabler will stop [Particles2D] nodes.", "enum": "Enabler", "name": "ENABLER_PAUSE_PARTICLES", "value": "2"}, {"description": "This enabler will stop the parent's _process function.", "enum": "Enabler", "name": "ENABLER_PARENT_PROCESS", "value": "3"}, {"description": "This enabler will stop the parent's _physics_process function.", "enum": "Enabler", "name": "ENABLER_PARENT_PHYSICS_PROCESS", "value": "4"}, {"description": "", "enum": "Enabler", "name": "ENABLER_PAUSE_ANIMATED_SPRITES", "value": "5"}, {"description": "", "enum": "Enabler", "name": "ENABLER_MAX", "value": "6"}], "demos": {"links": []}, "description": "The VisibilityEnabler2D will disable [RigidBody2D], [AnimationPlayer], and other nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler2D itself.", "inherits": "VisibilityNotifier2D", "members": [{"description": "", "getter": "is_enabler_enabled", "name": "freeze_bodies", "setter": "set_enabler", "type": "bool"}, {"description": "", "getter": "is_enabler_enabled", "name": "pause_animated_sprites", "setter": "set_enabler", "type": "bool"}, {"description": "", "getter": "is_enabler_enabled", "name": "pause_animations", "setter": "set_enabler", "type": "bool"}, {"description": "", "getter": "is_enabler_enabled", "name": "pause_particles", "setter": "set_enabler", "type": "bool"}, {"description": "", "getter": "is_enabler_enabled", "name": "physics_process_parent", "setter": "set_enabler", "type": "bool"}, {"description": "", "getter": "is_enabler_enabled", "name": "process_parent", "setter": "set_enabler", "type": "bool"}], "methods": [], "name": "VisibilityEnabler2D", "signals": [], "tutorials": {"links": []}}, "VisibilityNotifier": {"brief_description": "Detects when the node is visible on screen.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "The VisibilityNotifier detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a [Camera]'s view.", "inherits": "Spatial", "members": [{"description": "The VisibilityNotifier's bounding box.", "getter": "get_aabb", "name": "aabb", "setter": "set_aabb", "type": "AABB"}], "methods": [{"arguments": [], "description": "If [code]true[/code] the bounding box is on the screen.", "name": "is_on_screen", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "VisibilityNotifier", "signals": [{"arguments": [{"description": "", "index": "0", "name": "camera", "type": "Camera"}], "description": "Emitted when the VisibilityNotifier enters a [Camera]'s view.", "name": "camera_entered"}, {"arguments": [{"description": "", "index": "0", "name": "camera", "type": "Camera"}], "description": "Emitted when the VisibilityNotifier exits a [Camera]'s view.", "name": "camera_exited"}, {"arguments": [], "description": "Emitted when the VisibilityNotifier enters the screen.", "name": "screen_entered"}, {"arguments": [], "description": "Emitted when the VisibilityNotifier exits the screen.", "name": "screen_exited"}], "tutorials": {"links": []}}, "VisibilityNotifier2D": {"brief_description": "Detects when the node is visible on screen.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "The VisibilityNotifier2D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a viewport.", "inherits": "Node2D", "members": [{"description": "The VisibilityNotifier2D's bounding rectangle.", "getter": "get_rect", "name": "rect", "setter": "set_rect", "type": "Rect2"}], "methods": [{"arguments": [], "description": "If [code]true[/code] the bounding rectangle is on the screen.", "name": "is_on_screen", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}], "name": "VisibilityNotifier2D", "signals": [{"arguments": [], "description": "Emitted when the VisibilityNotifier2D enters the screen.", "name": "screen_entered"}, {"arguments": [], "description": "Emitted when the VisibilityNotifier2D exits the screen.", "name": "screen_exited"}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "Viewport"}], "description": "Emitted when the VisibilityNotifier2D enters a [Viewport]'s view.", "name": "viewport_entered"}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "Viewport"}], "description": "Emitted when the VisibilityNotifier2D exits a [Viewport]'s view.", "name": "viewport_exited"}], "tutorials": {"links": []}}, "VisualInstance": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Spatial", "members": [{"description": "The render layer(s) this VisualInstance is drawn on.\n\t\t\tThis object will only be visible for [Camera]s whose cull mask includes the render object this VisualInstance is set to.", "getter": "get_layer_mask", "name": "layers", "setter": "set_layer_mask", "type": "int"}], "methods": [{"arguments": [], "description": "Returns the [AABB] (also known as the bounding box) for this VisualInstance.", "name": "get_aabb", "qualifiers": "const", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "layer", "type": "int"}], "description": "", "name": "get_layer_mask_bit", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Returns the transformed [AABB] (also known as the bounding box) for this VisualInstance.\n\t\t\t\tTransformed in this case means the [AABB] plus the position, rotation, and scale of the [Spatial]s [Transform]", "name": "get_transformed_aabb", "qualifiers": "const", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "base", "type": "RID"}], "description": "Sets the base of the VisualInstance, which changes how the engine handles the VisualInstance under the hood.\n\t\t\t\tIt is recommended to only use set_base if you know what you're doing.", "name": "set_base", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "layer", "type": "int"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "", "name": "set_layer_mask_bit", "return_": {"description": "", "type": "void"}}], "name": "VisualInstance", "signals": [], "tutorials": {"links": []}}, "VisualServer": {"brief_description": "Server for anything visible.", "category": "Core", "constants": [{"description": "Marks an error that shows that the index array is empty.", "name": "NO_INDEX_ARRAY", "value": "-1"}, {"description": "", "name": "ARRAY_WEIGHTS_SIZE", "value": "4"}, {"description": "The minimum Z-layer for canvas items.", "name": "CANVAS_ITEM_Z_MIN", "value": "-4096"}, {"description": "The maximum Z-layer for canvas items.", "name": "CANVAS_ITEM_Z_MAX", "value": "4096"}, {"description": "", "name": "MAX_GLOW_LEVELS", "value": "7"}, {"description": "", "name": "MAX_CURSORS", "value": "8"}, {"description": "The minimum renderpriority of all materials.", "name": "MATERIAL_RENDER_PRIORITY_MIN", "value": "-128"}, {"description": "The maximum renderpriority of all materials.", "name": "MATERIAL_RENDER_PRIORITY_MAX", "value": "127"}, {"description": "Marks the left side of a cubemap.", "enum": "CubeMapSide", "name": "CUBEMAP_LEFT", "value": "0"}, {"description": "Marks the right side of a cubemap.", "enum": "CubeMapSide", "name": "CUBEMAP_RIGHT", "value": "1"}, {"description": "Marks the bottom side of a cubemap.", "enum": "CubeMapSide", "name": "CUBEMAP_BOTTOM", "value": "2"}, {"description": "Marks the top side of a cubemap.", "enum": "CubeMapSide", "name": "CUBEMAP_TOP", "value": "3"}, {"description": "Marks the front side of a cubemap.", "enum": "CubeMapSide", "name": "CUBEMAP_FRONT", "value": "4"}, {"description": "Marks the back side of a cubemap.", "enum": "CubeMapSide", "name": "CUBEMAP_BACK", "value": "5"}, {"description": "", "enum": "TextureType", "name": "TEXTURE_TYPE_2D", "value": "0"}, {"description": "", "enum": "TextureType", "name": "TEXTURE_TYPE_CUBEMAP", "value": "1"}, {"description": "", "enum": "TextureType", "name": "TEXTURE_TYPE_2D_ARRAY", "value": "2"}, {"description": "", "enum": "TextureType", "name": "TEXTURE_TYPE_3D", "value": "3"}, {"description": "Generate mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio.", "enum": "TextureFlags", "name": "TEXTURE_FLAG_MIPMAPS", "value": "1"}, {"description": "Repeat (instead of clamp to edge).", "enum": "TextureFlags", "name": "TEXTURE_FLAG_REPEAT", "value": "2"}, {"description": "Turn on magnifying filter, to enable smooth zooming in of the texture.", "enum": "TextureFlags", "name": "TEXTURE_FLAG_FILTER", "value": "4"}, {"description": "Anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.\n\t\t\tMore effective on planes often shown going to the horrizon as those textures (Walls or Ground for example) get squashed in the viewport to different aspect ratios and regular mipmaps keep the aspect ratio so they don't optimize storage that well in those cases.", "enum": "TextureFlags", "name": "TEXTURE_FLAG_ANISOTROPIC_FILTER", "value": "8"}, {"description": "Converts texture to SRGB color space.", "enum": "TextureFlags", "name": "TEXTURE_FLAG_CONVERT_TO_LINEAR", "value": "16"}, {"description": "Repeat texture with alternate sections mirrored.", "enum": "TextureFlags", "name": "TEXTURE_FLAG_MIRRORED_REPEAT", "value": "32"}, {"description": "Texture is a video surface.", "enum": "TextureFlags", "name": "TEXTURE_FLAG_USED_FOR_STREAMING", "value": "2048"}, {"description": "Default flags. Generate mipmaps, repeat, and filter are enabled.", "enum": "TextureFlags", "name": "TEXTURE_FLAGS_DEFAULT", "value": "7"}, {"description": "Shader is a 3D shader.", "enum": "ShaderMode", "name": "SHADER_SPATIAL", "value": "0"}, {"description": "Shader is a 2D shader.", "enum": "ShaderMode", "name": "SHADER_CANVAS_ITEM", "value": "1"}, {"description": "Shader is a particle shader.", "enum": "ShaderMode", "name": "SHADER_PARTICLES", "value": "2"}, {"description": "Marks maximum of the shader types array. used internally.", "enum": "ShaderMode", "name": "SHADER_MAX", "value": "3"}, {"description": "Array is a vertex array.", "enum": "ArrayType", "name": "ARRAY_VERTEX", "value": "0"}, {"description": "Array is a normal array.", "enum": "ArrayType", "name": "ARRAY_NORMAL", "value": "1"}, {"description": "Array is a tangent array.", "enum": "ArrayType", "name": "ARRAY_TANGENT", "value": "2"}, {"description": "Array is a color array.", "enum": "ArrayType", "name": "ARRAY_COLOR", "value": "3"}, {"description": "Array is a uv coordinates array.", "enum": "ArrayType", "name": "ARRAY_TEX_UV", "value": "4"}, {"description": "Array is a uv coordinates array for the second uv coordinates.", "enum": "ArrayType", "name": "ARRAY_TEX_UV2", "value": "5"}, {"description": "Array contains bone information.", "enum": "ArrayType", "name": "ARRAY_BONES", "value": "6"}, {"description": "Array is weight information.", "enum": "ArrayType", "name": "ARRAY_WEIGHTS", "value": "7"}, {"description": "Array is index array.", "enum": "ArrayType", "name": "ARRAY_INDEX", "value": "8"}, {"description": "Marks the maximum of the array types. Used internally.", "enum": "ArrayType", "name": "ARRAY_MAX", "value": "9"}, {"description": "Flag used to mark a vertex array.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_VERTEX", "value": "1"}, {"description": "Flag used to mark a normal array.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_NORMAL", "value": "2"}, {"description": "Flag used to mark a tangent array.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_TANGENT", "value": "4"}, {"description": "Flag used to mark a color array.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_COLOR", "value": "8"}, {"description": "Flag used to mark a uv coordinates array.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_TEX_UV", "value": "16"}, {"description": "Flag used to mark a uv coordinates array for the second uv coordinates.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_TEX_UV2", "value": "32"}, {"description": "Flag used to mark a bone information array.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_BONES", "value": "64"}, {"description": "Flag used to mark a weights array.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_WEIGHTS", "value": "128"}, {"description": "Flag used to mark a index array.", "enum": "ArrayFormat", "name": "ARRAY_FORMAT_INDEX", "value": "256"}, {"description": "Flag used to mark a compressed (half float) vertex array.", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_VERTEX", "value": "512"}, {"description": "Flag used to mark a compressed (half float) normal array.", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_NORMAL", "value": "1024"}, {"description": "Flag used to mark a compressed (half float) tangent array.", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_TANGENT", "value": "2048"}, {"description": "Flag used to mark a compressed (half float) color array.", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_COLOR", "value": "4096"}, {"description": "Flag used to mark a compressed (half float) uv coordinates array.", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_TEX_UV", "value": "8192"}, {"description": "Flag used to mark a compressed (half float) uv coordinates array for the second uv coordinates.", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_TEX_UV2", "value": "16384"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_BONES", "value": "32768"}, {"description": "Flag used to mark a compressed (half float) weight array.", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_WEIGHTS", "value": "65536"}, {"description": "", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_INDEX", "value": "131072"}, {"description": "Flag used to mark that the array contains 2D vertices.", "enum": "ArrayFormat", "name": "ARRAY_FLAG_USE_2D_VERTICES", "value": "262144"}, {"description": "Flag used to mark that the array uses 16 bit bones instead of 8 bit.", "enum": "ArrayFormat", "name": "ARRAY_FLAG_USE_16_BIT_BONES", "value": "524288"}, {"description": "Used to set flags ARRAY_COMPRESS_VERTEX, ARRAY_COMPRESS_NORMAL, ARRAY_COMPRESS_TANGENT, ARRAY_COMPRESS_COLOR, ARRAY_COMPRESS_TEX_UV, ARRAY_COMPRESS_TEX_UV2 and ARRAY_COMPRESS_WEIGHTS quickly.", "enum": "ArrayFormat", "name": "ARRAY_COMPRESS_DEFAULT", "value": "97280"}, {"description": "Primitive to draw consists of points.", "enum": "PrimitiveType", "name": "PRIMITIVE_POINTS", "value": "0"}, {"description": "Primitive to draw consists of lines.", "enum": "PrimitiveType", "name": "PRIMITIVE_LINES", "value": "1"}, {"description": "Primitive to draw consists of a line strip from start to end.", "enum": "PrimitiveType", "name": "PRIMITIVE_LINE_STRIP", "value": "2"}, {"description": "Primitive to draw consists of a line loop (a line strip with a line between the last and the first vertex).", "enum": "PrimitiveType", "name": "PRIMITIVE_LINE_LOOP", "value": "3"}, {"description": "Primitive to draw consists of triangles.", "enum": "PrimitiveType", "name": "PRIMITIVE_TRIANGLES", "value": "4"}, {"description": "Primitive to draw consists of a triangle strip (the last 3 vertices are always combined to make a triangle).", "enum": "PrimitiveType", "name": "PRIMITIVE_TRIANGLE_STRIP", "value": "5"}, {"description": "Primitive to draw consists of a triangle strip (the last 2 vertices are always combined with the first to make a triangle).", "enum": "PrimitiveType", "name": "PRIMITIVE_TRIANGLE_FAN", "value": "6"}, {"description": "Marks the primitive types endpoint. used internally.", "enum": "PrimitiveType", "name": "PRIMITIVE_MAX", "value": "7"}, {"description": "", "enum": "BlendShapeMode", "name": "BLEND_SHAPE_MODE_NORMALIZED", "value": "0"}, {"description": "", "enum": "BlendShapeMode", "name": "BLEND_SHAPE_MODE_RELATIVE", "value": "1"}, {"description": "Is a directional (sun) light.", "enum": "LightType", "name": "LIGHT_DIRECTIONAL", "value": "0"}, {"description": "is an omni light.", "enum": "LightType", "name": "LIGHT_OMNI", "value": "1"}, {"description": "is an spot light.", "enum": "LightType", "name": "LIGHT_SPOT", "value": "2"}, {"description": "The light's energy.", "enum": "LightParam", "name": "LIGHT_PARAM_ENERGY", "value": "0"}, {"description": "The light's influence on specularity.", "enum": "LightParam", "name": "LIGHT_PARAM_SPECULAR", "value": "2"}, {"description": "The light's range.", "enum": "LightParam", "name": "LIGHT_PARAM_RANGE", "value": "3"}, {"description": "The light's attenuation.", "enum": "LightParam", "name": "LIGHT_PARAM_ATTENUATION", "value": "4"}, {"description": "The spotlight's angle.", "enum": "LightParam", "name": "LIGHT_PARAM_SPOT_ANGLE", "value": "5"}, {"description": "The spotlight's attenuation.", "enum": "LightParam", "name": "LIGHT_PARAM_SPOT_ATTENUATION", "value": "6"}, {"description": "Scales the shadow color.", "enum": "LightParam", "name": "LIGHT_PARAM_CONTACT_SHADOW_SIZE", "value": "7"}, {"description": "", "enum": "LightParam", "name": "LIGHT_PARAM_SHADOW_MAX_DISTANCE", "value": "8"}, {"description": "", "enum": "LightParam", "name": "LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET", "value": "9"}, {"description": "", "enum": "LightParam", "name": "LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET", "value": "10"}, {"description": "", "enum": "LightParam", "name": "LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET", "value": "11"}, {"description": "", "enum": "LightParam", "name": "LIGHT_PARAM_SHADOW_NORMAL_BIAS", "value": "12"}, {"description": "", "enum": "LightParam", "name": "LIGHT_PARAM_SHADOW_BIAS", "value": "13"}, {"description": "", "enum": "LightParam", "name": "LIGHT_PARAM_SHADOW_BIAS_SPLIT_SCALE", "value": "14"}, {"description": "The light parameters endpoint. Used internally.", "enum": "LightParam", "name": "LIGHT_PARAM_MAX", "value": "15"}, {"description": "", "enum": "LightOmniShadowMode", "name": "LIGHT_OMNI_SHADOW_DUAL_PARABOLOID", "value": "0"}, {"description": "", "enum": "LightOmniShadowMode", "name": "LIGHT_OMNI_SHADOW_CUBE", "value": "1"}, {"description": "", "enum": "LightOmniShadowDetail", "name": "LIGHT_OMNI_SHADOW_DETAIL_VERTICAL", "value": "0"}, {"description": "", "enum": "LightOmniShadowDetail", "name": "LIGHT_OMNI_SHADOW_DETAIL_HORIZONTAL", "value": "1"}, {"description": "", "enum": "LightDirectionalShadowMode", "name": "LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL", "value": "0"}, {"description": "", "enum": "LightDirectionalShadowMode", "name": "LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS", "value": "1"}, {"description": "", "enum": "LightDirectionalShadowMode", "name": "LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS", "value": "2"}, {"description": "", "enum": "LightDirectionalShadowDepthRangeMode", "name": "LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_STABLE", "value": "0"}, {"description": "", "enum": "LightDirectionalShadowDepthRangeMode", "name": "LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_OPTIMIZED", "value": "1"}, {"description": "", "enum": "ViewportUpdateMode", "name": "VIEWPORT_UPDATE_DISABLED", "value": "0"}, {"description": "", "enum": "ViewportUpdateMode", "name": "VIEWPORT_UPDATE_ONCE", "value": "1"}, {"description": "", "enum": "ViewportUpdateMode", "name": "VIEWPORT_UPDATE_WHEN_VISIBLE", "value": "2"}, {"description": "", "enum": "ViewportUpdateMode", "name": "VIEWPORT_UPDATE_ALWAYS", "value": "3"}, {"description": "The viewport is always cleared before drawing.", "enum": "ViewportClearMode", "name": "VIEWPORT_CLEAR_ALWAYS", "value": "0"}, {"description": "The viewport is never cleared before drawing.", "enum": "ViewportClearMode", "name": "VIEWPORT_CLEAR_NEVER", "value": "1"}, {"description": "The viewport is cleared once, then the clear mode is set to [VIEWPORT_CLEAR_NEVER].", "enum": "ViewportClearMode", "name": "VIEWPORT_CLEAR_ONLY_NEXT_FRAME", "value": "2"}, {"description": "Multisample antialiasing is disabled.", "enum": "ViewportMSAA", "name": "VIEWPORT_MSAA_DISABLED", "value": "0"}, {"description": "Multisample antialiasing is set to 2X.", "enum": "ViewportMSAA", "name": "VIEWPORT_MSAA_2X", "value": "1"}, {"description": "Multisample antialiasing is set to 4X.", "enum": "ViewportMSAA", "name": "VIEWPORT_MSAA_4X", "value": "2"}, {"description": "Multisample antialiasing is set to 8X.", "enum": "ViewportMSAA", "name": "VIEWPORT_MSAA_8X", "value": "3"}, {"description": "Multisample antialiasing is set to 16X.", "enum": "ViewportMSAA", "name": "VIEWPORT_MSAA_16X", "value": "4"}, {"description": "The Viewport does not render 3D but samples.", "enum": "ViewportUsage", "name": "VIEWPORT_USAGE_2D", "value": "0"}, {"description": "The Viewport does not render 3D and does not sample.", "enum": "ViewportUsage", "name": "VIEWPORT_USAGE_2D_NO_SAMPLING", "value": "1"}, {"description": "The Viewport renders 3D with effects.", "enum": "ViewportUsage", "name": "VIEWPORT_USAGE_3D", "value": "2"}, {"description": "The Viewport renders 3D but without effects.", "enum": "ViewportUsage", "name": "VIEWPORT_USAGE_3D_NO_EFFECTS", "value": "3"}, {"description": "", "enum": "ViewportRenderInfo", "name": "VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME", "value": "0"}, {"description": "", "enum": "ViewportRenderInfo", "name": "VIEWPORT_RENDER_INFO_VERTICES_IN_FRAME", "value": "1"}, {"description": "", "enum": "ViewportRenderInfo", "name": "VIEWPORT_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME", "value": "2"}, {"description": "", "enum": "ViewportRenderInfo", "name": "VIEWPORT_RENDER_INFO_SHADER_CHANGES_IN_FRAME", "value": "3"}, {"description": "", "enum": "ViewportRenderInfo", "name": "VIEWPORT_RENDER_INFO_SURFACE_CHANGES_IN_FRAME", "value": "4"}, {"description": "", "enum": "ViewportRenderInfo", "name": "VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME", "value": "5"}, {"description": "Marks end of VIEWPORT_RENDER_INFO* constants. Used internally.", "enum": "ViewportRenderInfo", "name": "VIEWPORT_RENDER_INFO_MAX", "value": "6"}, {"description": "Debug draw is disabled. Default setting.", "enum": "ViewportDebugDraw", "name": "VIEWPORT_DEBUG_DRAW_DISABLED", "value": "0"}, {"description": "Debug draw sets objects to unshaded.", "enum": "ViewportDebugDraw", "name": "VIEWPORT_DEBUG_DRAW_UNSHADED", "value": "1"}, {"description": "Overwrites clear color to [code](0,0,0,0)[/code].", "enum": "ViewportDebugDraw", "name": "VIEWPORT_DEBUG_DRAW_OVERDRAW", "value": "2"}, {"description": "Debug draw draws objects in wireframe.", "enum": "ViewportDebugDraw", "name": "VIEWPORT_DEBUG_DRAW_WIREFRAME", "value": "3"}, {"description": "", "enum": "ScenarioDebugMode", "name": "SCENARIO_DEBUG_DISABLED", "value": "0"}, {"description": "", "enum": "ScenarioDebugMode", "name": "SCENARIO_DEBUG_WIREFRAME", "value": "1"}, {"description": "", "enum": "ScenarioDebugMode", "name": "SCENARIO_DEBUG_OVERDRAW", "value": "2"}, {"description": "", "enum": "ScenarioDebugMode", "name": "SCENARIO_DEBUG_SHADELESS", "value": "3"}, {"description": "The instance does not have a type.", "enum": "InstanceType", "name": "INSTANCE_NONE", "value": "0"}, {"description": "The instance is a mesh.", "enum": "InstanceType", "name": "INSTANCE_MESH", "value": "1"}, {"description": "The instance is a multimesh.", "enum": "InstanceType", "name": "INSTANCE_MULTIMESH", "value": "2"}, {"description": "The instance is an immediate geometry.", "enum": "InstanceType", "name": "INSTANCE_IMMEDIATE", "value": "3"}, {"description": "The instance is a particle emitter.", "enum": "InstanceType", "name": "INSTANCE_PARTICLES", "value": "4"}, {"description": "The instance is a light.", "enum": "InstanceType", "name": "INSTANCE_LIGHT", "value": "5"}, {"description": "", "enum": "InstanceType", "name": "INSTANCE_REFLECTION_PROBE", "value": "6"}, {"description": "", "enum": "InstanceType", "name": "INSTANCE_GI_PROBE", "value": "7"}, {"description": "", "enum": "InstanceType", "name": "INSTANCE_LIGHTMAP_CAPTURE", "value": "8"}, {"description": "The max value for INSTANCE_* constants, used internally.", "enum": "InstanceType", "name": "INSTANCE_MAX", "value": "9"}, {"description": "A combination of the flags of geometry instances (mesh, multimesh, immediate and particles).", "enum": "InstanceType", "name": "INSTANCE_GEOMETRY_MASK", "value": "30"}, {"description": "", "enum": "InstanceFlags", "name": "INSTANCE_FLAG_USE_BAKED_LIGHT", "value": "0"}, {"description": "", "enum": "InstanceFlags", "name": "INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE", "value": "1"}, {"description": "", "enum": "InstanceFlags", "name": "INSTANCE_FLAG_MAX", "value": "2"}, {"description": "", "enum": "ShadowCastingSetting", "name": "SHADOW_CASTING_SETTING_OFF", "value": "0"}, {"description": "", "enum": "ShadowCastingSetting", "name": "SHADOW_CASTING_SETTING_ON", "value": "1"}, {"description": "", "enum": "ShadowCastingSetting", "name": "SHADOW_CASTING_SETTING_DOUBLE_SIDED", "value": "2"}, {"description": "", "enum": "ShadowCastingSetting", "name": "SHADOW_CASTING_SETTING_SHADOWS_ONLY", "value": "3"}, {"description": "The nine patch gets stretched where needed.", "enum": "NinePatchAxisMode", "name": "NINE_PATCH_STRETCH", "value": "0"}, {"description": "The nine patch gets filled with tiles where needed.", "enum": "NinePatchAxisMode", "name": "NINE_PATCH_TILE", "value": "1"}, {"description": "The nine patch gets filled with tiles where needed and stretches them a bit if needed.", "enum": "NinePatchAxisMode", "name": "NINE_PATCH_TILE_FIT", "value": "2"}, {"description": "Adds light color additive to the canvas.", "enum": "CanvasLightMode", "name": "CANVAS_LIGHT_MODE_ADD", "value": "0"}, {"description": "Adds light color subtractive to the canvas.", "enum": "CanvasLightMode", "name": "CANVAS_LIGHT_MODE_SUB", "value": "1"}, {"description": "The light adds color depending on transparency.", "enum": "CanvasLightMode", "name": "CANVAS_LIGHT_MODE_MIX", "value": "2"}, {"description": "The light adds color depending on mask.", "enum": "CanvasLightMode", "name": "CANVAS_LIGHT_MODE_MASK", "value": "3"}, {"description": "", "enum": "CanvasLightShadowFilter", "name": "CANVAS_LIGHT_FILTER_NONE", "value": "0"}, {"description": "", "enum": "CanvasLightShadowFilter", "name": "CANVAS_LIGHT_FILTER_PCF3", "value": "1"}, {"description": "", "enum": "CanvasLightShadowFilter", "name": "CANVAS_LIGHT_FILTER_PCF5", "value": "2"}, {"description": "", "enum": "CanvasLightShadowFilter", "name": "CANVAS_LIGHT_FILTER_PCF7", "value": "3"}, {"description": "", "enum": "CanvasLightShadowFilter", "name": "CANVAS_LIGHT_FILTER_PCF9", "value": "4"}, {"description": "", "enum": "CanvasLightShadowFilter", "name": "CANVAS_LIGHT_FILTER_PCF13", "value": "5"}, {"description": "Culling of the canvas occluder is disabled.", "enum": "CanvasOccluderPolygonCullMode", "name": "CANVAS_OCCLUDER_POLYGON_CULL_DISABLED", "value": "0"}, {"description": "Culling of the canvas occluder is clockwise.", "enum": "CanvasOccluderPolygonCullMode", "name": "CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE", "value": "1"}, {"description": "Culling of the canvas occluder is counterclockwise.", "enum": "CanvasOccluderPolygonCullMode", "name": "CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE", "value": "2"}, {"description": "The amount of objects in the frame.", "enum": "RenderInfo", "name": "INFO_OBJECTS_IN_FRAME", "value": "0"}, {"description": "The amount of vertices in the frame.", "enum": "RenderInfo", "name": "INFO_VERTICES_IN_FRAME", "value": "1"}, {"description": "The amount of modified materials in the frame.", "enum": "RenderInfo", "name": "INFO_MATERIAL_CHANGES_IN_FRAME", "value": "2"}, {"description": "The amount of shader rebinds in the frame.", "enum": "RenderInfo", "name": "INFO_SHADER_CHANGES_IN_FRAME", "value": "3"}, {"description": "The amount of surface changes in the frame.", "enum": "RenderInfo", "name": "INFO_SURFACE_CHANGES_IN_FRAME", "value": "4"}, {"description": "The amount of draw calls in frame.", "enum": "RenderInfo", "name": "INFO_DRAW_CALLS_IN_FRAME", "value": "5"}, {"description": "", "enum": "RenderInfo", "name": "INFO_USAGE_VIDEO_MEM_TOTAL", "value": "6"}, {"description": "The amount of vertex memory and texture memory used.", "enum": "RenderInfo", "name": "INFO_VIDEO_MEM_USED", "value": "7"}, {"description": "The amount of texture memory used.", "enum": "RenderInfo", "name": "INFO_TEXTURE_MEM_USED", "value": "8"}, {"description": "The amount of vertex memory used.", "enum": "RenderInfo", "name": "INFO_VERTEX_MEM_USED", "value": "9"}, {"description": "", "enum": "Features", "name": "FEATURE_SHADERS", "value": "0"}, {"description": "", "enum": "Features", "name": "FEATURE_MULTITHREADED", "value": "1"}, {"description": "", "enum": "MultimeshTransformFormat", "name": "MULTIMESH_TRANSFORM_2D", "value": "0"}, {"description": "", "enum": "MultimeshTransformFormat", "name": "MULTIMESH_TRANSFORM_3D", "value": "1"}, {"description": "", "enum": "MultimeshColorFormat", "name": "MULTIMESH_COLOR_NONE", "value": "0"}, {"description": "", "enum": "MultimeshColorFormat", "name": "MULTIMESH_COLOR_8BIT", "value": "1"}, {"description": "", "enum": "MultimeshColorFormat", "name": "MULTIMESH_COLOR_FLOAT", "value": "2"}, {"description": "", "enum": "ReflectionProbeUpdateMode", "name": "REFLECTION_PROBE_UPDATE_ONCE", "value": "0"}, {"description": "", "enum": "ReflectionProbeUpdateMode", "name": "REFLECTION_PROBE_UPDATE_ALWAYS", "value": "1"}, {"description": "", "enum": "ParticlesDrawOrder", "name": "PARTICLES_DRAW_ORDER_INDEX", "value": "0"}, {"description": "", "enum": "ParticlesDrawOrder", "name": "PARTICLES_DRAW_ORDER_LIFETIME", "value": "1"}, {"description": "", "enum": "ParticlesDrawOrder", "name": "PARTICLES_DRAW_ORDER_VIEW_DEPTH", "value": "2"}, {"description": "", "enum": "EnvironmentBG", "name": "ENV_BG_CLEAR_COLOR", "value": "0"}, {"description": "", "enum": "EnvironmentBG", "name": "ENV_BG_COLOR", "value": "1"}, {"description": "", "enum": "EnvironmentBG", "name": "ENV_BG_SKY", "value": "2"}, {"description": "", "enum": "EnvironmentBG", "name": "ENV_BG_COLOR_SKY", "value": "3"}, {"description": "", "enum": "EnvironmentBG", "name": "ENV_BG_CANVAS", "value": "4"}, {"description": "", "enum": "EnvironmentBG", "name": "ENV_BG_KEEP", "value": "5"}, {"description": "", "enum": "EnvironmentBG", "name": "ENV_BG_MAX", "value": "6"}, {"description": "", "enum": "EnvironmentDOFBlurQuality", "name": "ENV_DOF_BLUR_QUALITY_LOW", "value": "0"}, {"description": "", "enum": "EnvironmentDOFBlurQuality", "name": "ENV_DOF_BLUR_QUALITY_MEDIUM", "value": "1"}, {"description": "", "enum": "EnvironmentDOFBlurQuality", "name": "ENV_DOF_BLUR_QUALITY_HIGH", "value": "2"}, {"description": "", "enum": "EnvironmentGlowBlendMode", "name": "GLOW_BLEND_MODE_ADDITIVE", "value": "0"}, {"description": "", "enum": "EnvironmentGlowBlendMode", "name": "GLOW_BLEND_MODE_SCREEN", "value": "1"}, {"description": "", "enum": "EnvironmentGlowBlendMode", "name": "GLOW_BLEND_MODE_SOFTLIGHT", "value": "2"}, {"description": "", "enum": "EnvironmentGlowBlendMode", "name": "GLOW_BLEND_MODE_REPLACE", "value": "3"}, {"description": "", "enum": "EnvironmentToneMapper", "name": "ENV_TONE_MAPPER_LINEAR", "value": "0"}, {"description": "", "enum": "EnvironmentToneMapper", "name": "ENV_TONE_MAPPER_REINHARDT", "value": "1"}, {"description": "", "enum": "EnvironmentToneMapper", "name": "ENV_TONE_MAPPER_FILMIC", "value": "2"}, {"description": "", "enum": "EnvironmentToneMapper", "name": "ENV_TONE_MAPPER_ACES", "value": "3"}, {"description": "", "enum": "EnvironmentSSAOQuality", "name": "ENV_SSAO_QUALITY_LOW", "value": "0"}, {"description": "", "enum": "EnvironmentSSAOQuality", "name": "ENV_SSAO_QUALITY_MEDIUM", "value": "1"}, {"description": "", "enum": "EnvironmentSSAOQuality", "name": "ENV_SSAO_QUALITY_HIGH", "value": "2"}, {"description": "", "enum": "EnvironmentSSAOBlur", "name": "ENV_SSAO_BLUR_DISABLED", "value": "0"}, {"description": "", "enum": "EnvironmentSSAOBlur", "name": "ENV_SSAO_BLUR_1x1", "value": "1"}, {"description": "", "enum": "EnvironmentSSAOBlur", "name": "ENV_SSAO_BLUR_2x2", "value": "2"}, {"description": "", "enum": "EnvironmentSSAOBlur", "name": "ENV_SSAO_BLUR_3x3", "value": "3"}], "demos": {"links": []}, "description": "Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display.\n\t\tThe visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.", "inherits": "Object", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "left", "type": "RID"}, {"description": "", "index": "1", "name": "top", "type": "RID"}, {"description": "", "index": "2", "name": "right", "type": "RID"}, {"description": "", "index": "3", "name": "bottom", "type": "RID"}], "description": "Sets images to be rendered in the window margin.", "name": "black_bars_set_images", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "left", "type": "int"}, {"description": "", "index": "1", "name": "top", "type": "int"}, {"description": "", "index": "2", "name": "right", "type": "int"}, {"description": "", "index": "3", "name": "bottom", "type": "int"}], "description": "Sets margin size, where black bars (or images, if [method black_bars_set_images] was used) are rendered.", "name": "black_bars_set_margins", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "camera_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "camera", "type": "RID"}, {"description": "", "index": "1", "name": "layers", "type": "int"}], "description": "", "name": "camera_set_cull_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "camera", "type": "RID"}, {"description": "", "index": "1", "name": "env", "type": "RID"}], "description": "", "name": "camera_set_environment", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "camera", "type": "RID"}, {"description": "", "index": "1", "name": "size", "type": "float"}, {"description": "", "index": "2", "name": "z_near", "type": "float"}, {"description": "", "index": "3", "name": "z_far", "type": "float"}], "description": "", "name": "camera_set_orthogonal", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "camera", "type": "RID"}, {"description": "", "index": "1", "name": "fovy_degrees", "type": "float"}, {"description": "", "index": "2", "name": "z_near", "type": "float"}, {"description": "", "index": "3", "name": "z_far", "type": "float"}], "description": "", "name": "camera_set_perspective", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "camera", "type": "RID"}, {"description": "", "index": "1", "name": "transform", "type": "Transform"}], "description": "", "name": "camera_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "camera", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "camera_set_use_vertical_aspect", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates a canvas and returns the assigned [RID].", "name": "canvas_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "pos", "type": "Vector2"}, {"description": "", "index": "2", "name": "radius", "type": "float"}, {"description": "", "index": "3", "name": "color", "type": "Color"}], "description": "Adds a circle command to the [CanvasItem]'s draw commands.", "name": "canvas_item_add_circle", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "ignore", "type": "bool"}], "description": "If ignore is [code]true[/code], the VisualServer does not perform clipping.", "name": "canvas_item_add_clip_ignore", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "from", "type": "Vector2"}, {"description": "", "index": "2", "name": "to", "type": "Vector2"}, {"description": "", "index": "3", "name": "color", "type": "Color"}, {"default": "1.0", "description": "", "index": "4", "name": "width", "type": "float"}, {"default": "false", "description": "", "index": "5", "name": "antialiased", "type": "bool"}], "description": "Adds a line command to the [CanvasItem]'s draw commands.", "name": "canvas_item_add_line", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "mesh", "type": "RID"}, {"description": "", "index": "2", "name": "texture", "type": "RID"}, {"description": "", "index": "3", "name": "normal_map", "type": "RID"}], "description": "Adds a [Mesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.", "name": "canvas_item_add_mesh", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "mesh", "type": "RID"}, {"description": "", "index": "2", "name": "texture", "type": "RID"}, {"description": "", "index": "3", "name": "normal_map", "type": "RID"}], "description": "Adds a [MultiMesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.", "name": "canvas_item_add_multimesh", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}, {"description": "", "index": "2", "name": "source", "type": "Rect2"}, {"description": "", "index": "3", "name": "texture", "type": "RID"}, {"description": "", "index": "4", "name": "topleft", "type": "Vector2"}, {"description": "", "index": "5", "name": "bottomright", "type": "Vector2"}, {"default": "0", "description": "", "index": "6", "name": "x_axis_mode", "type": "int"}, {"default": "0", "description": "", "index": "7", "name": "y_axis_mode", "type": "int"}, {"default": "true", "description": "", "index": "8", "name": "draw_center", "type": "bool"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "9", "name": "modulate", "type": "Color"}, {"description": "", "index": "10", "name": "normal_map", "type": "RID"}], "description": "Adds a nine patch image to the [CanvasItem]'s draw commands.\n\t\t\t\tSee [NinePatchRect] for more explanation.", "name": "canvas_item_add_nine_patch", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "particles", "type": "RID"}, {"description": "", "index": "2", "name": "texture", "type": "RID"}, {"description": "", "index": "3", "name": "normal_map", "type": "RID"}, {"description": "", "index": "4", "name": "h_frames", "type": "int"}, {"description": "", "index": "5", "name": "v_frames", "type": "int"}], "description": "Adds a particles system to the [CanvasItem]'s draw commands.", "name": "canvas_item_add_particles", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "2", "name": "colors", "type": "PoolColorArray"}, {"default": "PoolVector2Array(  )", "description": "", "index": "3", "name": "uvs", "type": "PoolVector2Array"}, {"description": "", "index": "4", "name": "texture", "type": "RID"}, {"description": "", "index": "5", "name": "normal_map", "type": "RID"}, {"default": "false", "description": "", "index": "6", "name": "antialiased", "type": "bool"}], "description": "Adds a polygon to the [CanvasItem]'s draw commands.", "name": "canvas_item_add_polygon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "2", "name": "colors", "type": "PoolColorArray"}, {"default": "1.0", "description": "", "index": "3", "name": "width", "type": "float"}, {"default": "false", "description": "", "index": "4", "name": "antialiased", "type": "bool"}], "description": "Adds a polyline, which is a line from multiple points with a width, to the [CanvasItem]'s draw commands.", "name": "canvas_item_add_polyline", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "2", "name": "colors", "type": "PoolColorArray"}, {"description": "", "index": "3", "name": "uvs", "type": "PoolVector2Array"}, {"description": "", "index": "4", "name": "texture", "type": "RID"}, {"default": "1.0", "description": "", "index": "5", "name": "width", "type": "float"}, {"description": "", "index": "6", "name": "normal_map", "type": "RID"}], "description": "Adds a primitive to the [CanvasItem]'s draw commands.", "name": "canvas_item_add_primitive", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}, {"description": "", "index": "2", "name": "color", "type": "Color"}], "description": "Adds a rectangle to the [CanvasItem]'s draw commands.", "name": "canvas_item_add_rect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "transform", "type": "Transform2D"}], "description": "Adds a [Transform2D] command to the [CanvasItem]'s draw commands.\n\t\t\t\tThis sets the extra_matrix uniform when executed. This affects the later commands of the canvas item.", "name": "canvas_item_add_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}, {"description": "", "index": "2", "name": "texture", "type": "RID"}, {"default": "false", "description": "", "index": "3", "name": "tile", "type": "bool"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "4", "name": "modulate", "type": "Color"}, {"default": "false", "description": "", "index": "5", "name": "transpose", "type": "bool"}, {"description": "", "index": "6", "name": "normal_map", "type": "RID"}], "description": "Adds a textured rect to the [CanvasItem]'s draw commands.", "name": "canvas_item_add_texture_rect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "rect", "type": "Rect2"}, {"description": "", "index": "2", "name": "texture", "type": "RID"}, {"description": "", "index": "3", "name": "src_rect", "type": "Rect2"}, {"default": "Color( 1, 1, 1, 1 )", "description": "", "index": "4", "name": "modulate", "type": "Color"}, {"default": "false", "description": "", "index": "5", "name": "transpose", "type": "bool"}, {"description": "", "index": "6", "name": "normal_map", "type": "RID"}, {"default": "true", "description": "", "index": "7", "name": "clip_uv", "type": "bool"}], "description": "Adds a texture rect with region setting to the [CanvasItem]'s draw commands.", "name": "canvas_item_add_texture_rect_region", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "indices", "type": "PoolIntArray"}, {"description": "", "index": "2", "name": "points", "type": "PoolVector2Array"}, {"description": "", "index": "3", "name": "colors", "type": "PoolColorArray"}, {"default": "PoolVector2Array(  )", "description": "", "index": "4", "name": "uvs", "type": "PoolVector2Array"}, {"default": "PoolIntArray(  )", "description": "", "index": "5", "name": "bones", "type": "PoolIntArray"}, {"default": "PoolRealArray(  )", "description": "", "index": "6", "name": "weights", "type": "PoolRealArray"}, {"description": "", "index": "7", "name": "texture", "type": "RID"}, {"default": "-1", "description": "", "index": "8", "name": "count", "type": "int"}, {"description": "", "index": "9", "name": "normal_map", "type": "RID"}], "description": "", "name": "canvas_item_add_triangle_array", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}], "description": "Clears the [CanvasItem] and removes all commands in it.", "name": "canvas_item_clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates a new [CanvasItem] and returns its [RID].", "name": "canvas_item_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "clip", "type": "bool"}], "description": "Sets clipping for the [CanvasItem].", "name": "canvas_item_set_clip", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}, {"description": "", "index": "2", "name": "rect", "type": "Rect2"}], "description": "Sets the [CanvasItem] to copy a rect to the backbuffer.", "name": "canvas_item_set_copy_to_backbuffer", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "use_custom_rect", "type": "bool"}, {"default": "Rect2( 0, 0, 0, 0 )", "description": "", "index": "2", "name": "rect", "type": "Rect2"}], "description": "Defines a custom drawing rectangle for the [CanvasItem].", "name": "canvas_item_set_custom_rect", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "", "name": "canvas_item_set_distance_field_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "Sets [CanvasItem] to be drawn behind its parent.", "name": "canvas_item_set_draw_behind_parent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "index", "type": "int"}], "description": "Sets the index for the [CanvasItem].", "name": "canvas_item_set_draw_index", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "mask", "type": "int"}], "description": "The light mask. See [LightOccluder2D] for more information on light masks.", "name": "canvas_item_set_light_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "material", "type": "RID"}], "description": "Sets a new material to the [CanvasItem].", "name": "canvas_item_set_material", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Sets the color that modulates the [CanvasItem] and its children.", "name": "canvas_item_set_modulate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "parent", "type": "RID"}], "description": "Sets the parent for the [CanvasItem].", "name": "canvas_item_set_parent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Sets the color that modulates the [CanvasItem] without children.", "name": "canvas_item_set_self_modulate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "Sets if [CanvasItem]'s children should be sorted by y-position.", "name": "canvas_item_set_sort_children_by_y", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "transform", "type": "Transform2D"}], "description": "Sets the [CanvasItem]'s [Transform2D].", "name": "canvas_item_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "Sets if the [CanvasItem] uses its parent's material.", "name": "canvas_item_set_use_parent_material", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "visible", "type": "bool"}], "description": "Sets if the canvas item (including its children) is visible.", "name": "canvas_item_set_visible", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "If this is enabled, the z-index of the parent will be added to the children's z-index.", "name": "canvas_item_set_z_as_relative_to_parent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "item", "type": "RID"}, {"description": "", "index": "1", "name": "z_index", "type": "int"}], "description": "Sets the [CanvasItem]'s z-index, i.e. its draw order (lower indexes are drawn first).", "name": "canvas_item_set_z_index", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "canvas", "type": "RID"}], "description": "Attaches the canvas light to the canvas. Removes it from its previous canvas.", "name": "canvas_light_attach_to_canvas", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates a canvas light.", "name": "canvas_light_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "occluder", "type": "RID"}, {"description": "", "index": "1", "name": "canvas", "type": "RID"}], "description": "Attaches a light occluder to the canvas. Removes it from its previous canvas.", "name": "canvas_light_occluder_attach_to_canvas", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates a light occluder.", "name": "canvas_light_occluder_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "occluder", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "Enables or disables light occluder.", "name": "canvas_light_occluder_set_enabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "occluder", "type": "RID"}, {"description": "", "index": "1", "name": "mask", "type": "int"}], "description": "The light mask. See [LightOccluder2D] for more information on light masks", "name": "canvas_light_occluder_set_light_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "occluder", "type": "RID"}, {"description": "", "index": "1", "name": "polygon", "type": "RID"}], "description": "Sets a light occluder's polygon.", "name": "canvas_light_occluder_set_polygon", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "occluder", "type": "RID"}, {"description": "", "index": "1", "name": "transform", "type": "Transform2D"}], "description": "Sets a light occluder's [Transform2D].", "name": "canvas_light_occluder_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Sets the color for a light.", "name": "canvas_light_set_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "Enables or disables a canvas light.", "name": "canvas_light_set_enabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "energy", "type": "float"}], "description": "Sets a canvas light's energy.", "name": "canvas_light_set_energy", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "height", "type": "float"}], "description": "Sets a canvas light's height.", "name": "canvas_light_set_height", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "mask", "type": "int"}], "description": "The light mask. See [LightOccluder2D] for more information on light masks", "name": "canvas_light_set_item_cull_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "mask", "type": "int"}], "description": "The shadow mask. binary about which layers this canvas light affects which canvas item's shadows. See [LightOccluder2D] for more information on light masks.", "name": "canvas_light_set_item_shadow_cull_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "min_layer", "type": "int"}, {"description": "", "index": "2", "name": "max_layer", "type": "int"}], "description": "The layer range that gets rendered with this light.", "name": "canvas_light_set_layer_range", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "The mode of the light, see CANVAS_LIGHT_MODE_* constants.", "name": "canvas_light_set_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "scale", "type": "float"}], "description": "", "name": "canvas_light_set_scale", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "size", "type": "int"}], "description": "Sets the width of the shadow buffer, size gets scaled to the next power of two for this.", "name": "canvas_light_set_shadow_buffer_size", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Sets the color of the canvas light's shadow.", "name": "canvas_light_set_shadow_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "Enables or disables the canvas light's shadow.", "name": "canvas_light_set_shadow_enabled", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "filter", "type": "int"}], "description": "Sets the canvas light's shadow's filter, see CANVAS_LIGHT_SHADOW_FILTER_* constants.", "name": "canvas_light_set_shadow_filter", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "length", "type": "float"}], "description": "Sets the length of the shadow's gradient.", "name": "canvas_light_set_shadow_gradient_length", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "smooth", "type": "float"}], "description": "Smoothens the shadow. The lower, the more smooth.", "name": "canvas_light_set_shadow_smooth", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "texture", "type": "RID"}], "description": "", "name": "canvas_light_set_texture", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "offset", "type": "Vector2"}], "description": "", "name": "canvas_light_set_texture_offset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "transform", "type": "Transform2D"}], "description": "Sets the canvas light's [Transform2D].", "name": "canvas_light_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "min_z", "type": "int"}, {"description": "", "index": "2", "name": "max_z", "type": "int"}], "description": "", "name": "canvas_light_set_z_range", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates a new light occluder polygon.", "name": "canvas_occluder_polygon_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "occluder_polygon", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Sets an occluder polygons cull mode. See CANVAS_OCCLUDER_POLYGON_CULL_MODE_* constants.", "name": "canvas_occluder_polygon_set_cull_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "occluder_polygon", "type": "RID"}, {"description": "", "index": "1", "name": "shape", "type": "PoolVector2Array"}, {"description": "", "index": "2", "name": "closed", "type": "bool"}], "description": "Sets the shape of the occluder polygon.", "name": "canvas_occluder_polygon_set_shape", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "occluder_polygon", "type": "RID"}, {"description": "", "index": "1", "name": "shape", "type": "PoolVector2Array"}], "description": "Sets the shape of the occluder polygon as lines.", "name": "canvas_occluder_polygon_set_shape_as_lines", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "canvas", "type": "RID"}, {"description": "", "index": "1", "name": "item", "type": "RID"}, {"description": "", "index": "2", "name": "mirroring", "type": "Vector2"}], "description": "A copy of the canvas item will be drawn with a local offset of the mirroring [Vector2].", "name": "canvas_set_item_mirroring", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "canvas", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "Modulates all colors in the given canvas.", "name": "canvas_set_modulate", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "directional_light_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"default": "true", "description": "", "index": "0", "name": "swap_buffers", "type": "bool"}, {"default": "0.0", "description": "", "index": "1", "name": "frame_step", "type": "float"}], "description": "", "name": "draw", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "environment_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}, {"description": "", "index": "2", "name": "brightness", "type": "float"}, {"description": "", "index": "3", "name": "contrast", "type": "float"}, {"description": "", "index": "4", "name": "saturation", "type": "float"}, {"description": "", "index": "5", "name": "ramp", "type": "RID"}], "description": "", "name": "environment_set_adjustment", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}, {"default": "1.0", "description": "", "index": "2", "name": "energy", "type": "float"}, {"default": "0.0", "description": "", "index": "3", "name": "sky_contibution", "type": "float"}], "description": "", "name": "environment_set_ambient_light", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "bg", "type": "int"}], "description": "", "name": "environment_set_background", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "", "name": "environment_set_bg_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "energy", "type": "float"}], "description": "", "name": "environment_set_bg_energy", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "max_layer", "type": "int"}], "description": "", "name": "environment_set_canvas_max_layer", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}, {"description": "", "index": "2", "name": "distance", "type": "float"}, {"description": "", "index": "3", "name": "transition", "type": "float"}, {"description": "", "index": "4", "name": "far_amount", "type": "float"}, {"description": "", "index": "5", "name": "quality", "type": "int"}], "description": "", "name": "environment_set_dof_blur_far", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}, {"description": "", "index": "2", "name": "distance", "type": "float"}, {"description": "", "index": "3", "name": "transition", "type": "float"}, {"description": "", "index": "4", "name": "far_amount", "type": "float"}, {"description": "", "index": "5", "name": "quality", "type": "int"}], "description": "", "name": "environment_set_dof_blur_near", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}, {"description": "", "index": "2", "name": "color", "type": "Color"}, {"description": "", "index": "3", "name": "sun_color", "type": "Color"}, {"description": "", "index": "4", "name": "sun_amount", "type": "float"}], "description": "", "name": "environment_set_fog", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}, {"description": "", "index": "2", "name": "depth_begin", "type": "float"}, {"description": "", "index": "3", "name": "depth_curve", "type": "float"}, {"description": "", "index": "4", "name": "transmit", "type": "bool"}, {"description": "", "index": "5", "name": "transmit_curve", "type": "float"}], "description": "", "name": "environment_set_fog_depth", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}, {"description": "", "index": "2", "name": "min_height", "type": "float"}, {"description": "", "index": "3", "name": "max_height", "type": "float"}, {"description": "", "index": "4", "name": "height_curve", "type": "float"}], "description": "", "name": "environment_set_fog_height", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}, {"description": "", "index": "2", "name": "level_flags", "type": "int"}, {"description": "", "index": "3", "name": "intensity", "type": "float"}, {"description": "", "index": "4", "name": "strength", "type": "float"}, {"description": "", "index": "5", "name": "bloom_threshold", "type": "float"}, {"description": "", "index": "6", "name": "blend_mode", "type": "int"}, {"description": "", "index": "7", "name": "hdr_bleed_threshold", "type": "float"}, {"description": "", "index": "8", "name": "hdr_bleed_scale", "type": "float"}, {"description": "", "index": "9", "name": "bicubic_upscale", "type": "bool"}], "description": "", "name": "environment_set_glow", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "sky", "type": "RID"}], "description": "", "name": "environment_set_sky", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "scale", "type": "float"}], "description": "", "name": "environment_set_sky_custom_fov", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}, {"description": "", "index": "2", "name": "radius", "type": "float"}, {"description": "", "index": "3", "name": "intensity", "type": "float"}, {"description": "", "index": "4", "name": "radius2", "type": "float"}, {"description": "", "index": "5", "name": "intensity2", "type": "float"}, {"description": "", "index": "6", "name": "bias", "type": "float"}, {"description": "", "index": "7", "name": "light_affect", "type": "float"}, {"description": "", "index": "8", "name": "ao_channel_affect", "type": "float"}, {"description": "", "index": "9", "name": "color", "type": "Color"}, {"description": "", "index": "10", "name": "quality", "type": "int"}, {"description": "", "index": "11", "name": "blur", "type": "int"}, {"description": "", "index": "12", "name": "bilateral_sharpness", "type": "float"}], "description": "", "name": "environment_set_ssao", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}, {"description": "", "index": "2", "name": "max_steps", "type": "int"}, {"description": "", "index": "3", "name": "fade_in", "type": "float"}, {"description": "", "index": "4", "name": "fade_out", "type": "float"}, {"description": "", "index": "5", "name": "depth_tolerance", "type": "float"}, {"description": "", "index": "6", "name": "roughness", "type": "bool"}], "description": "", "name": "environment_set_ssr", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "env", "type": "RID"}, {"description": "", "index": "1", "name": "tone_mapper", "type": "int"}, {"description": "", "index": "2", "name": "exposure", "type": "float"}, {"description": "", "index": "3", "name": "white", "type": "float"}, {"description": "", "index": "4", "name": "auto_exposure", "type": "bool"}, {"description": "", "index": "5", "name": "min_luminance", "type": "float"}, {"description": "", "index": "6", "name": "max_luminance", "type": "float"}, {"description": "", "index": "7", "name": "auto_exp_speed", "type": "float"}, {"description": "", "index": "8", "name": "auto_exp_grey", "type": "float"}], "description": "", "name": "environment_set_tonemap", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Removes buffers and clears testcubes.", "name": "finish", "return_": {"description": "", "type": "void"}}, {"arguments": [{"default": "true", "description": "", "index": "0", "name": "swap_buffers", "type": "bool"}, {"default": "0.0", "description": "", "index": "1", "name": "frame_step", "type": "float"}], "description": "", "name": "force_draw", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Synchronizes threads.", "name": "force_sync", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "rid", "type": "RID"}], "description": "Tries to free an object in the VisualServer.", "name": "free_rid", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "info", "type": "int"}], "description": "Returns a certain information, see RENDER_INFO_* for options.", "name": "get_render_info", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Returns the id of the test cube. Creates one if none exists.", "name": "get_test_cube", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "Returns the id of the test texture. Creates one if none exists.", "name": "get_test_texture", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "Returns the id of a white texture. Creates one if none exists.", "name": "get_white_texture", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "", "name": "gi_probe_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_get_bias", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_get_bounds", "qualifiers": "const", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_get_cell_size", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_get_dynamic_data", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_get_dynamic_range", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_get_energy", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_get_normal_bias", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_get_propagation", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_get_to_cell_xform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_is_compressed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}], "description": "", "name": "gi_probe_is_interior", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "bias", "type": "float"}], "description": "", "name": "gi_probe_set_bias", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "bounds", "type": "AABB"}], "description": "", "name": "gi_probe_set_bounds", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "range", "type": "float"}], "description": "", "name": "gi_probe_set_cell_size", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "gi_probe_set_compress", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "data", "type": "PoolIntArray"}], "description": "", "name": "gi_probe_set_dynamic_data", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "range", "type": "int"}], "description": "", "name": "gi_probe_set_dynamic_range", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "energy", "type": "float"}], "description": "", "name": "gi_probe_set_energy", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "gi_probe_set_interior", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "bias", "type": "float"}], "description": "", "name": "gi_probe_set_normal_bias", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "propagation", "type": "float"}], "description": "", "name": "gi_probe_set_propagation", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "xform", "type": "Transform"}], "description": "", "name": "gi_probe_set_to_cell_xform", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Returns [code]true[/code] if changes have been made to the VisualServer's data. [method draw] is usually called if this happens.", "name": "has_changed", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "feature", "type": "int"}], "description": "", "name": "has_feature", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "feature", "type": "String"}], "description": "Returns [code]true[/code] if the OS supports a certain feature. Features might be s3tc, etc, etc2 and pvrtc,", "name": "has_os_feature", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}, {"description": "", "index": "1", "name": "primitive", "type": "int"}, {"description": "", "index": "2", "name": "texture", "type": "RID"}], "description": "", "name": "immediate_begin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}], "description": "", "name": "immediate_clear", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "", "name": "immediate_color", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "immediate_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}], "description": "", "name": "immediate_end", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}], "description": "", "name": "immediate_get_material", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}, {"description": "", "index": "1", "name": "normal", "type": "Vector3"}], "description": "", "name": "immediate_normal", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}, {"description": "", "index": "1", "name": "material", "type": "RID"}], "description": "", "name": "immediate_set_material", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}, {"description": "", "index": "1", "name": "tangent", "type": "Plane"}], "description": "", "name": "immediate_tangent", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}, {"description": "", "index": "1", "name": "tex_uv", "type": "Vector2"}], "description": "", "name": "immediate_uv", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}, {"description": "", "index": "1", "name": "tex_uv", "type": "Vector2"}], "description": "", "name": "immediate_uv2", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}, {"description": "", "index": "1", "name": "vertex", "type": "Vector3"}], "description": "", "name": "immediate_vertex", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "immediate", "type": "RID"}, {"description": "", "index": "1", "name": "vertex", "type": "Vector2"}], "description": "", "name": "immediate_vertex_2d", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Initializes the visual server.", "name": "init", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "", "name": "instance_attach_object_instance_id", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "skeleton", "type": "RID"}], "description": "", "name": "instance_attach_skeleton", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "instance_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "base", "type": "RID"}, {"description": "", "index": "1", "name": "scenario", "type": "RID"}], "description": "", "name": "instance_create2", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "as_lod_of_instance", "type": "RID"}], "description": "", "name": "instance_geometry_set_as_instance_lod", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "shadow_casting_setting", "type": "int"}], "description": "", "name": "instance_geometry_set_cast_shadows_setting", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "min", "type": "float"}, {"description": "", "index": "2", "name": "max", "type": "float"}, {"description": "", "index": "3", "name": "min_margin", "type": "float"}, {"description": "", "index": "4", "name": "max_margin", "type": "float"}], "description": "", "name": "instance_geometry_set_draw_range", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "flag", "type": "int"}, {"description": "", "index": "2", "name": "enabled", "type": "bool"}], "description": "", "name": "instance_geometry_set_flag", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "material", "type": "RID"}], "description": "", "name": "instance_geometry_set_material_override", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "base", "type": "RID"}], "description": "", "name": "instance_set_base", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "shape", "type": "int"}, {"description": "", "index": "2", "name": "weight", "type": "float"}], "description": "", "name": "instance_set_blend_shape_weight", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "aabb", "type": "AABB"}], "description": "", "name": "instance_set_custom_aabb", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "", "name": "instance_set_exterior", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "margin", "type": "float"}], "description": "", "name": "instance_set_extra_visibility_margin", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "mask", "type": "int"}], "description": "", "name": "instance_set_layer_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "scenario", "type": "RID"}], "description": "", "name": "instance_set_scenario", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}, {"description": "", "index": "2", "name": "material", "type": "RID"}], "description": "", "name": "instance_set_surface_material", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "transform", "type": "Transform"}], "description": "", "name": "instance_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "lightmap_instance", "type": "RID"}, {"description": "", "index": "2", "name": "lightmap", "type": "RID"}], "description": "", "name": "instance_set_use_lightmap", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "instance", "type": "RID"}, {"description": "", "index": "1", "name": "visible", "type": "bool"}], "description": "", "name": "instance_set_visible", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "aabb", "type": "AABB"}, {"description": "", "index": "1", "name": "scenario", "type": "RID"}], "description": "", "name": "instances_cull_aabb", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "convex", "type": "Array"}, {"description": "", "index": "1", "name": "scenario", "type": "RID"}], "description": "", "name": "instances_cull_convex", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "Vector3"}, {"description": "", "index": "1", "name": "to", "type": "Vector3"}, {"description": "", "index": "2", "name": "scenario", "type": "RID"}], "description": "", "name": "instances_cull_ray", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "light_directional_set_blend_splits", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "range_mode", "type": "int"}], "description": "", "name": "light_directional_set_shadow_depth_range_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "", "name": "light_directional_set_shadow_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "detail", "type": "int"}], "description": "", "name": "light_omni_set_shadow_detail", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "", "name": "light_omni_set_shadow_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "", "name": "light_set_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "mask", "type": "int"}], "description": "", "name": "light_set_cull_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "light_set_negative", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "param", "type": "int"}, {"description": "", "index": "2", "name": "value", "type": "float"}], "description": "", "name": "light_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "texture", "type": "RID"}], "description": "", "name": "light_set_projector", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "", "name": "light_set_reverse_cull_face_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "", "name": "light_set_shadow", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "light", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "", "name": "light_set_shadow_color", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "lightmap_capture_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "capture", "type": "RID"}], "description": "", "name": "lightmap_capture_get_bounds", "qualifiers": "const", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "capture", "type": "RID"}], "description": "", "name": "lightmap_capture_get_energy", "qualifiers": "const", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "capture", "type": "RID"}], "description": "", "name": "lightmap_capture_get_octree", "qualifiers": "const", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [{"description": "", "index": "0", "name": "capture", "type": "RID"}], "description": "", "name": "lightmap_capture_get_octree_cell_subdiv", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "capture", "type": "RID"}], "description": "", "name": "lightmap_capture_get_octree_cell_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "capture", "type": "RID"}, {"description": "", "index": "1", "name": "bounds", "type": "AABB"}], "description": "", "name": "lightmap_capture_set_bounds", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "capture", "type": "RID"}, {"description": "", "index": "1", "name": "energy", "type": "float"}], "description": "", "name": "lightmap_capture_set_energy", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "capture", "type": "RID"}, {"description": "", "index": "1", "name": "octree", "type": "PoolByteArray"}], "description": "", "name": "lightmap_capture_set_octree", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "capture", "type": "RID"}, {"description": "", "index": "1", "name": "subdiv", "type": "int"}], "description": "", "name": "lightmap_capture_set_octree_cell_subdiv", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "capture", "type": "RID"}, {"description": "", "index": "1", "name": "xform", "type": "Transform"}], "description": "", "name": "lightmap_capture_set_octree_cell_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "latitudes", "type": "int"}, {"description": "", "index": "1", "name": "longitudes", "type": "int"}, {"description": "", "index": "2", "name": "radius", "type": "float"}], "description": "Returns a mesh of a sphere with the given amount of horizontal and vertical subdivisions.", "name": "make_sphere_mesh", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "Returns an empty material.", "name": "material_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "material", "type": "RID"}, {"description": "", "index": "1", "name": "parameter", "type": "String"}], "description": "Returns the value of a certain material's parameter.", "name": "material_get_param", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "shader_material", "type": "RID"}], "description": "Returns the shader of a certain material's shader. Returns an empty RID if the material doesn't have a shader.", "name": "material_get_shader", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "material", "type": "RID"}, {"description": "", "index": "1", "name": "width", "type": "float"}], "description": "Sets a materials line width.", "name": "material_set_line_width", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "material", "type": "RID"}, {"description": "", "index": "1", "name": "next_material", "type": "RID"}], "description": "Sets an objects next material.", "name": "material_set_next_pass", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "material", "type": "RID"}, {"description": "", "index": "1", "name": "parameter", "type": "String"}, {"description": "", "index": "2", "name": "value", "type": "Variant"}], "description": "Sets a materials parameter.", "name": "material_set_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "material", "type": "RID"}, {"description": "", "index": "1", "name": "priority", "type": "int"}], "description": "Sets a material's render priority.", "name": "material_set_render_priority", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "shader_material", "type": "RID"}, {"description": "", "index": "1", "name": "shader", "type": "RID"}], "description": "Sets a shader material's shader.", "name": "material_set_shader", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "primtive", "type": "int"}, {"description": "", "index": "2", "name": "arrays", "type": "Array"}, {"default": "[  ]", "description": "", "index": "3", "name": "blend_shapes", "type": "Array"}, {"default": "97280", "description": "", "index": "4", "name": "compress_format", "type": "int"}], "description": "Adds a surface generated from the Arrays to a mesh. See PRIMITIVE_TYPE_* constants for types.", "name": "mesh_add_surface_from_arrays", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}], "description": "Removes all surfaces from a mesh.", "name": "mesh_clear", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates a new mesh.", "name": "mesh_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}], "description": "Returns a mesh's blend shape count.", "name": "mesh_get_blend_shape_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}], "description": "Returns a mesh's blend shape mode.", "name": "mesh_get_blend_shape_mode", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}], "description": "Returns a mesh's custom aabb.", "name": "mesh_get_custom_aabb", "qualifiers": "const", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}], "description": "Returns a mesh's number of surfaces.", "name": "mesh_get_surface_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "index", "type": "int"}], "description": "Removes a mesh's surface.", "name": "mesh_remove_surface", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "amount", "type": "int"}], "description": "Sets a mesh's blend shape count.", "name": "mesh_set_blend_shape_count", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "Sets a mesh's blend shape mode.", "name": "mesh_set_blend_shape_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "aabb", "type": "AABB"}], "description": "Sets a mesh's custom aabb.", "name": "mesh_set_custom_aabb", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns a mesh's surface's aabb.", "name": "mesh_surface_get_aabb", "qualifiers": "const", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns a mesh's surface's vertex buffer.", "name": "mesh_surface_get_array", "qualifiers": "const", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns a mesh's surface's amount of indices.", "name": "mesh_surface_get_array_index_len", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns a mesh's surface's amount of vertices.", "name": "mesh_surface_get_array_len", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns a mesh's surface's buffer arrays.", "name": "mesh_surface_get_arrays", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns a mesh's surface's arrays for blend shapes", "name": "mesh_surface_get_blend_shape_arrays", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns the format of a mesh's surface.", "name": "mesh_surface_get_format", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "format", "type": "int"}, {"description": "", "index": "1", "name": "vertex_len", "type": "int"}, {"description": "", "index": "2", "name": "index_len", "type": "int"}, {"description": "", "index": "3", "name": "array_index", "type": "int"}], "description": "", "name": "mesh_surface_get_format_offset", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "format", "type": "int"}, {"description": "", "index": "1", "name": "vertex_len", "type": "int"}, {"description": "", "index": "2", "name": "index_len", "type": "int"}], "description": "", "name": "mesh_surface_get_format_stride", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns a mesh's surface's index buffer.", "name": "mesh_surface_get_index_array", "qualifiers": "const", "return_": {"description": "", "type": "PoolByteArray"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns a mesh's surface's material.", "name": "mesh_surface_get_material", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns the primitive type of a mesh's surface.", "name": "mesh_surface_get_primitive_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}], "description": "Returns the aabb of a mesh's surface's skeleton.", "name": "mesh_surface_get_skeleton_aabb", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}, {"description": "", "index": "2", "name": "material", "type": "RID"}], "description": "Sets a mesh's surface's material.", "name": "mesh_surface_set_material", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mesh", "type": "RID"}, {"description": "", "index": "1", "name": "surface", "type": "int"}, {"description": "", "index": "2", "name": "offset", "type": "int"}, {"description": "", "index": "3", "name": "data", "type": "PoolByteArray"}], "description": "", "name": "mesh_surface_update_region", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "instances", "type": "int"}, {"description": "", "index": "2", "name": "transform_format", "type": "int"}, {"description": "", "index": "3", "name": "color_format", "type": "int"}, {"default": "0", "description": "", "index": "4", "name": "custom_data_format", "type": "int"}], "description": "", "name": "multimesh_allocate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}], "description": "", "name": "multimesh_get_aabb", "qualifiers": "const", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}], "description": "", "name": "multimesh_get_instance_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}], "description": "", "name": "multimesh_get_mesh", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}], "description": "", "name": "multimesh_get_visible_instances", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "index", "type": "int"}], "description": "", "name": "multimesh_instance_get_color", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "index", "type": "int"}], "description": "", "name": "multimesh_instance_get_custom_data", "qualifiers": "const", "return_": {"description": "", "type": "Color"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "index", "type": "int"}], "description": "", "name": "multimesh_instance_get_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "index", "type": "int"}], "description": "", "name": "multimesh_instance_get_transform_2d", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "index", "type": "int"}, {"description": "", "index": "2", "name": "color", "type": "Color"}], "description": "", "name": "multimesh_instance_set_color", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "index", "type": "int"}, {"description": "", "index": "2", "name": "custom_data", "type": "Color"}], "description": "", "name": "multimesh_instance_set_custom_data", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "index", "type": "int"}, {"description": "", "index": "2", "name": "transform", "type": "Transform"}], "description": "", "name": "multimesh_instance_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "index", "type": "int"}, {"description": "", "index": "2", "name": "transform", "type": "Transform2D"}], "description": "", "name": "multimesh_instance_set_transform_2d", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "array", "type": "PoolRealArray"}], "description": "", "name": "multimesh_set_as_bulk_array", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "mesh", "type": "RID"}], "description": "", "name": "multimesh_set_mesh", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "multimesh", "type": "RID"}, {"description": "", "index": "1", "name": "visible", "type": "int"}], "description": "", "name": "multimesh_set_visible_instances", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "omni_light_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "", "name": "particles_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}], "description": "", "name": "particles_get_current_aabb", "return_": {"description": "", "type": "AABB"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}], "description": "", "name": "particles_get_emitting", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}], "description": "", "name": "particles_restart", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "amount", "type": "int"}], "description": "", "name": "particles_set_amount", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "aabb", "type": "AABB"}], "description": "", "name": "particles_set_custom_aabb", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "order", "type": "int"}], "description": "", "name": "particles_set_draw_order", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "pass", "type": "int"}, {"description": "", "index": "2", "name": "mesh", "type": "RID"}], "description": "", "name": "particles_set_draw_pass_mesh", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "count", "type": "int"}], "description": "", "name": "particles_set_draw_passes", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "transform", "type": "Transform"}], "description": "", "name": "particles_set_emission_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "emitting", "type": "bool"}], "description": "", "name": "particles_set_emitting", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "ratio", "type": "float"}], "description": "", "name": "particles_set_explosiveness_ratio", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "fps", "type": "int"}], "description": "", "name": "particles_set_fixed_fps", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "particles_set_fractional_delta", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "lifetime", "type": "float"}], "description": "", "name": "particles_set_lifetime", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "one_shot", "type": "bool"}], "description": "", "name": "particles_set_one_shot", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "time", "type": "float"}], "description": "", "name": "particles_set_pre_process_time", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "material", "type": "RID"}], "description": "", "name": "particles_set_process_material", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "ratio", "type": "float"}], "description": "", "name": "particles_set_randomness_ratio", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "scale", "type": "float"}], "description": "", "name": "particles_set_speed_scale", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "particles", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "particles_set_use_local_coordinates", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "reflection_probe_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "reflection_probe_set_as_interior", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "layers", "type": "int"}], "description": "", "name": "reflection_probe_set_cull_mask", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "reflection_probe_set_enable_box_projection", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "enable", "type": "bool"}], "description": "", "name": "reflection_probe_set_enable_shadows", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "extents", "type": "Vector3"}], "description": "", "name": "reflection_probe_set_extents", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "intensity", "type": "float"}], "description": "", "name": "reflection_probe_set_intensity", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "color", "type": "Color"}], "description": "", "name": "reflection_probe_set_interior_ambient", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "energy", "type": "float"}], "description": "", "name": "reflection_probe_set_interior_ambient_energy", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "contrib", "type": "float"}], "description": "", "name": "reflection_probe_set_interior_ambient_probe_contribution", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "distance", "type": "float"}], "description": "", "name": "reflection_probe_set_max_distance", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "offset", "type": "Vector3"}], "description": "", "name": "reflection_probe_set_origin_offset", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "probe", "type": "RID"}, {"description": "", "index": "1", "name": "mode", "type": "int"}], "description": "", "name": "reflection_probe_set_update_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "where", "type": "Object"}, {"description": "", "index": "1", "name": "method", "type": "String"}, {"description": "", "index": "2", "name": "userdata", "type": "Variant"}], "description": "Schedules a callback to the corresponding named 'method' on 'where' after a frame has been drawn.\n\t\t\t\tThe callback method must use only 1 argument which will be called with 'userdata'.", "name": "request_frame_drawn_callback", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "scenario_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "scenario", "type": "RID"}, {"description": "", "index": "1", "name": "debug_mode", "type": "int"}], "description": "", "name": "scenario_set_debug", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "scenario", "type": "RID"}, {"description": "", "index": "1", "name": "environment", "type": "RID"}], "description": "", "name": "scenario_set_environment", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "scenario", "type": "RID"}, {"description": "", "index": "1", "name": "environment", "type": "RID"}], "description": "", "name": "scenario_set_fallback_environment", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "scenario", "type": "RID"}, {"description": "", "index": "1", "name": "p_size", "type": "int"}, {"description": "", "index": "2", "name": "subdiv", "type": "int"}], "description": "", "name": "scenario_set_reflection_atlas_size", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "image", "type": "Image"}, {"description": "", "index": "1", "name": "color", "type": "Color"}, {"description": "", "index": "2", "name": "scale", "type": "bool"}], "description": "Sets a boot image. The color defines the background color and if scale is [code]true[/code] the image will be scaled to fit the screen size.", "name": "set_boot_image", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "generate", "type": "bool"}], "description": "", "name": "set_debug_generate_wireframes", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "color", "type": "Color"}], "description": "", "name": "set_default_clear_color", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates an empty shader.", "name": "shader_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "shader", "type": "RID"}], "description": "Returns a shader's code.", "name": "shader_get_code", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "shader", "type": "RID"}, {"description": "", "index": "1", "name": "name", "type": "String"}], "description": "Returns a default texture from a shader searched by name.", "name": "shader_get_default_texture_param", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "shader", "type": "RID"}], "description": "Returns the parameters of a shader.", "name": "shader_get_param_list", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "shader", "type": "RID"}, {"description": "", "index": "1", "name": "code", "type": "String"}], "description": "Sets a shader's code.", "name": "shader_set_code", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "shader", "type": "RID"}, {"description": "", "index": "1", "name": "name", "type": "String"}, {"description": "", "index": "2", "name": "texture", "type": "RID"}], "description": "Sets a shader's default texture. Overwrites the texture given by name.", "name": "shader_set_default_texture_param", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "skeleton", "type": "RID"}, {"description": "", "index": "1", "name": "bones", "type": "int"}, {"default": "false", "description": "", "index": "2", "name": "is_2d_skeleton", "type": "bool"}], "description": "", "name": "skeleton_allocate", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "skeleton", "type": "RID"}, {"description": "", "index": "1", "name": "bone", "type": "int"}], "description": "", "name": "skeleton_bone_get_transform", "qualifiers": "const", "return_": {"description": "", "type": "Transform"}}, {"arguments": [{"description": "", "index": "0", "name": "skeleton", "type": "RID"}, {"description": "", "index": "1", "name": "bone", "type": "int"}], "description": "", "name": "skeleton_bone_get_transform_2d", "qualifiers": "const", "return_": {"description": "", "type": "Transform2D"}}, {"arguments": [{"description": "", "index": "0", "name": "skeleton", "type": "RID"}, {"description": "", "index": "1", "name": "bone", "type": "int"}, {"description": "", "index": "2", "name": "transform", "type": "Transform"}], "description": "", "name": "skeleton_bone_set_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "skeleton", "type": "RID"}, {"description": "", "index": "1", "name": "bone", "type": "int"}, {"description": "", "index": "2", "name": "transform", "type": "Transform2D"}], "description": "", "name": "skeleton_bone_set_transform_2d", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "skeleton_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "skeleton", "type": "RID"}], "description": "", "name": "skeleton_get_bone_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Creates an empty sky.", "name": "sky_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "sky", "type": "RID"}, {"description": "", "index": "1", "name": "cube_map", "type": "RID"}, {"description": "", "index": "2", "name": "radiance_size", "type": "int"}], "description": "Sets a sky's texture.", "name": "sky_set_texture", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "", "name": "spot_light_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "", "name": "sync", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}, {"description": "", "index": "1", "name": "width", "type": "int"}, {"description": "", "index": "2", "name": "height", "type": "int"}, {"description": "", "index": "3", "name": "depth_3d", "type": "int"}, {"description": "", "index": "4", "name": "format", "type": "int"}, {"description": "", "index": "5", "name": "type", "type": "int"}, {"default": "7", "description": "", "index": "6", "name": "flags", "type": "int"}], "description": "", "name": "texture_allocate", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates an empty texture.", "name": "texture_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "image", "type": "Image"}, {"default": "7", "description": "", "index": "1", "name": "flags", "type": "int"}], "description": "Creates a texture, allocates the space for an image, and fills in the image.", "name": "texture_create_from_image", "return_": {"description": "", "type": "RID"}}, {"arguments": [], "description": "Returns a list of all the textures and their information.", "name": "texture_debug_usage", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}, {"default": "0", "description": "", "index": "1", "name": "cube_side", "type": "int"}], "description": "Returns a copy of a texture's image unless it's a CubeMap, in which case it returns the [RID] of the image at one of the cubes sides.", "name": "texture_get_data", "qualifiers": "const", "return_": {"description": "", "type": "Image"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}], "description": "", "name": "texture_get_depth", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}], "description": "Returns the flags of a texture.", "name": "texture_get_flags", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}], "description": "Returns the format of the texture's image.", "name": "texture_get_format", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}], "description": "Returns the texture's height.", "name": "texture_get_height", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}], "description": "Returns the texture's path.", "name": "texture_get_path", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}], "description": "Returns the opengl id of the texture's image.", "name": "texture_get_texid", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}], "description": "", "name": "texture_get_type", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}], "description": "Returns the texture's width.", "name": "texture_get_width", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}, {"description": "", "index": "1", "name": "image", "type": "Image"}, {"default": "0", "description": "", "index": "2", "name": "layer", "type": "int"}], "description": "Sets the texture's image data. If it's a CubeMap, it sets the image data at a cube side.", "name": "texture_set_data", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}, {"description": "", "index": "1", "name": "image", "type": "Image"}, {"description": "", "index": "2", "name": "src_x", "type": "int"}, {"description": "", "index": "3", "name": "src_y", "type": "int"}, {"description": "", "index": "4", "name": "src_w", "type": "int"}, {"description": "", "index": "5", "name": "src_h", "type": "int"}, {"description": "", "index": "6", "name": "dst_x", "type": "int"}, {"description": "", "index": "7", "name": "dst_y", "type": "int"}, {"description": "", "index": "8", "name": "dst_mip", "type": "int"}, {"default": "0", "description": "", "index": "9", "name": "layer", "type": "int"}], "description": "", "name": "texture_set_data_partial", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}, {"description": "", "index": "1", "name": "flags", "type": "int"}], "description": "Sets the texture's flags. See [enum TextureFlags] for options", "name": "texture_set_flags", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}, {"description": "", "index": "1", "name": "path", "type": "String"}], "description": "Sets the texture's path.", "name": "texture_set_path", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "shrink", "type": "bool"}], "description": "If [code]true[/code] sets internal processes to shrink all image data to half the size.", "name": "texture_set_shrink_all_x2_on_set_data", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "texture", "type": "RID"}, {"description": "", "index": "1", "name": "width", "type": "int"}, {"description": "", "index": "2", "name": "height", "type": "int"}, {"description": "", "index": "3", "name": "depth", "type": "int"}], "description": "", "name": "texture_set_size_override", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "enable", "type": "bool"}], "description": "If [code]true[/code] the image will be stored in the texture's images array if overwritten.", "name": "textures_keep_original", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "camera", "type": "RID"}], "description": "Sets a viewport's camera.", "name": "viewport_attach_camera", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "canvas", "type": "RID"}], "description": "Sets a viewport's canvas.", "name": "viewport_attach_canvas", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"default": "Rect2( 0, 0, 0, 0 )", "description": "", "index": "1", "name": "rect", "type": "Rect2"}, {"default": "0", "description": "", "index": "2", "name": "screen", "type": "int"}], "description": "Attaches a viewport to a screen.", "name": "viewport_attach_to_screen", "return_": {"description": "", "type": "void"}}, {"arguments": [], "description": "Creates an empty viewport.", "name": "viewport_create", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}], "description": "Detaches the viewport from the screen.", "name": "viewport_detach", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "info", "type": "int"}], "description": "Returns a viewport's render info. for options see VIEWPORT_RENDER_INFO* constants.", "name": "viewport_get_render_info", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}], "description": "Returns the viewport's last rendered frame.", "name": "viewport_get_texture", "qualifiers": "const", "return_": {"description": "", "type": "RID"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "canvas", "type": "RID"}], "description": "Detaches a viewport from a canvas and vice versa.", "name": "viewport_remove_canvas", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "active", "type": "bool"}], "description": "If [code]true[/code] sets the viewport active, else sets it inactive.", "name": "viewport_set_active", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "canvas", "type": "RID"}, {"description": "", "index": "2", "name": "layer", "type": "int"}], "description": "Sets the renderlayer for a viewport's canvas.", "name": "viewport_set_canvas_layer", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "canvas", "type": "RID"}, {"description": "", "index": "2", "name": "offset", "type": "Transform2D"}], "description": "Sets the transformation of a viewport's canvas.", "name": "viewport_set_canvas_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "clear_mode", "type": "int"}], "description": "Sets the clear mode of a viewport. See VIEWPORT_CLEAR_MODE_* constants for options.", "name": "viewport_set_clear_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "draw", "type": "int"}], "description": "Sets the debug draw mode of a viewport. See VIEWPORT_DEBUG_DRAW_* constants for options.", "name": "viewport_set_debug_draw", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "disabled", "type": "bool"}], "description": "If [code]true[/code] a viewport's 3D rendering is disabled.", "name": "viewport_set_disable_3d", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "disabled", "type": "bool"}], "description": "If [code]true[/code] rendering of a viewport's environment is disabled.", "name": "viewport_set_disable_environment", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "transform", "type": "Transform2D"}], "description": "Sets the viewport's global transformation matrix.", "name": "viewport_set_global_canvas_transform", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "If [code]true[/code] the viewport renders to hdr.", "name": "viewport_set_hdr", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "hidden", "type": "bool"}], "description": "If [code]true[/code] the viewport's canvas is not rendered.", "name": "viewport_set_hide_canvas", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "hidden", "type": "bool"}], "description": "", "name": "viewport_set_hide_scenario", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "msaa", "type": "int"}], "description": "Sets the anti-aliasing mode. see [enum ViewportMSAA] for options.", "name": "viewport_set_msaa", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "parent_viewport", "type": "RID"}], "description": "Sets the viewport's parent to another viewport.", "name": "viewport_set_parent_viewport", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "scenario", "type": "RID"}], "description": "Sets a viewport's scenario.\n\t\t\t\tThe scenario contains information about the [enum ScenarioDebugMode], environment information, reflection atlas etc.", "name": "viewport_set_scenario", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "quadrant", "type": "int"}, {"description": "", "index": "2", "name": "subdivision", "type": "int"}], "description": "Sets the shadow atlas quadrant's subdivision.", "name": "viewport_set_shadow_atlas_quadrant_subdivision", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "size", "type": "int"}], "description": "Sets the size of the shadow atlas's images.", "name": "viewport_set_shadow_atlas_size", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "width", "type": "int"}, {"description": "", "index": "2", "name": "height", "type": "int"}], "description": "Sets the viewport's width and height.", "name": "viewport_set_size", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "If [code]true[/code] the viewport renders its background as transparent.", "name": "viewport_set_transparent_background", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "update_mode", "type": "int"}], "description": "Sets when the viewport should be updated. See [enum ViewportUpdateMode] constants for options.", "name": "viewport_set_update_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "usage", "type": "int"}], "description": "Sets the viewport's 2D/3D mode. See [enum ViewportUsage] constants for options.", "name": "viewport_set_usage", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "use_arvr", "type": "bool"}], "description": "If [code]true[/code] the viewport uses augmented or virtual reality technologies. See [ARVRInterface].", "name": "viewport_set_use_arvr", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "viewport", "type": "RID"}, {"description": "", "index": "1", "name": "enabled", "type": "bool"}], "description": "If [code]true[/code] the viewport's rendering is flipped vertically.", "name": "viewport_set_vflip", "return_": {"description": "", "type": "void"}}], "name": "VisualServer", "signals": [{"arguments": [], "description": "", "name": "frame_post_draw"}, {"arguments": [], "description": "", "name": "frame_pre_draw"}], "tutorials": {"links": []}}, "VisualShader": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Type", "name": "TYPE_VERTEX", "value": "0"}, {"description": "", "enum": "Type", "name": "TYPE_FRAGMENT", "value": "1"}, {"description": "", "enum": "Type", "name": "TYPE_LIGHT", "value": "2"}, {"description": "", "enum": "Type", "name": "TYPE_MAX", "value": "3"}, {"description": "", "name": "NODE_ID_INVALID", "value": "-1"}, {"description": "", "name": "NODE_ID_OUTPUT", "value": "0"}], "demos": {"links": []}, "description": "", "inherits": "Shader", "members": [{"description": "", "getter": "get_graph_offset", "name": "graph_offset", "setter": "set_graph_offset", "type": "Vector2"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"description": "", "index": "1", "name": "node", "type": "VisualShaderNode"}, {"description": "", "index": "2", "name": "position", "type": "Vector2"}, {"description": "", "index": "3", "name": "id", "type": "int"}], "description": "", "name": "add_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"description": "", "index": "1", "name": "from_node", "type": "int"}, {"description": "", "index": "2", "name": "from_port", "type": "int"}, {"description": "", "index": "3", "name": "to_node", "type": "int"}, {"description": "", "index": "4", "name": "to_port", "type": "int"}], "description": "", "name": "can_connect_nodes", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"description": "", "index": "1", "name": "from_node", "type": "int"}, {"description": "", "index": "2", "name": "from_port", "type": "int"}, {"description": "", "index": "3", "name": "to_node", "type": "int"}, {"description": "", "index": "4", "name": "to_port", "type": "int"}], "description": "", "name": "connect_nodes", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"description": "", "index": "1", "name": "from_node", "type": "int"}, {"description": "", "index": "2", "name": "from_port", "type": "int"}, {"description": "", "index": "3", "name": "to_node", "type": "int"}, {"description": "", "index": "4", "name": "to_port", "type": "int"}], "description": "", "name": "disconnect_nodes", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "", "name": "get_node", "qualifiers": "const", "return_": {"description": "", "type": "VisualShaderNode"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}], "description": "", "name": "get_node_connections", "qualifiers": "const", "return_": {"description": "", "type": "Array"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}], "description": "", "name": "get_node_list", "qualifiers": "const", "return_": {"description": "", "type": "PoolIntArray"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "", "name": "get_node_position", "qualifiers": "const", "return_": {"description": "", "type": "Vector2"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}], "description": "", "name": "get_valid_node_id", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"description": "", "index": "1", "name": "from_node", "type": "int"}, {"description": "", "index": "2", "name": "from_port", "type": "int"}, {"description": "", "index": "3", "name": "to_node", "type": "int"}, {"description": "", "index": "4", "name": "to_port", "type": "int"}], "description": "", "name": "is_node_connection", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"description": "", "index": "1", "name": "id", "type": "int"}], "description": "", "name": "remove_node", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "mode", "type": "int"}], "description": "", "name": "set_mode", "return_": {"description": "", "type": "void"}}, {"arguments": [{"description": "", "index": "0", "name": "type", "type": "int"}, {"description": "", "index": "1", "name": "id", "type": "int"}, {"description": "", "index": "2", "name": "position", "type": "Vector2"}], "description": "", "name": "set_node_position", "return_": {"description": "", "type": "void"}}], "name": "VisualShader", "signals": [], "tutorials": {"links": []}}, "VisualShaderNode": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "Resource", "members": [{"description": "", "getter": "_get_default_input_values", "name": "default_input_values", "setter": "_set_default_input_values", "type": "Array"}, {"description": "", "getter": "get_output_port_for_preview", "name": "output_port_for_preview", "setter": "set_output_port_for_preview", "type": "int"}], "methods": [{"arguments": [{"description": "", "index": "0", "name": "port", "type": "int"}], "description": "", "name": "get_input_port_default_value", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}, {"arguments": [{"description": "", "index": "0", "name": "port", "type": "int"}, {"description": "", "index": "1", "name": "value", "type": "Variant"}], "description": "", "name": "set_input_port_default_value", "return_": {"description": "", "type": "void"}}], "name": "VisualShaderNode", "signals": [{"arguments": [], "description": "", "name": "editor_refresh_request"}], "tutorials": {"links": []}}, "VisualShaderNodeColorConstant": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_constant", "name": "constant", "setter": "set_constant", "type": "Color"}], "methods": [], "name": "VisualShaderNodeColorConstant", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeColorOp": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Operator", "name": "OP_SCREEN", "value": "0"}, {"description": "", "enum": "Operator", "name": "OP_DIFFERENCE", "value": "1"}, {"description": "", "enum": "Operator", "name": "OP_DARKEN", "value": "2"}, {"description": "", "enum": "Operator", "name": "OP_LIGHTEN", "value": "3"}, {"description": "", "enum": "Operator", "name": "OP_OVERLAY", "value": "4"}, {"description": "", "enum": "Operator", "name": "OP_DODGE", "value": "5"}, {"description": "", "enum": "Operator", "name": "OP_BURN", "value": "6"}, {"description": "", "enum": "Operator", "name": "OP_SOFT_LIGHT", "value": "7"}, {"description": "", "enum": "Operator", "name": "OP_HARD_LIGHT", "value": "8"}], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_operator", "name": "operator", "setter": "set_operator", "type": "int"}], "methods": [], "name": "VisualShaderNodeColorOp", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeColorUniform": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNodeUniform", "members": [], "methods": [], "name": "VisualShaderNodeColorUniform", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeCubeMap": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "TextureType", "name": "TYPE_DATA", "value": "0"}, {"description": "", "enum": "TextureType", "name": "TYPE_COLOR", "value": "1"}, {"description": "", "enum": "TextureType", "name": "TYPE_NORMALMAP", "value": "2"}], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_cube_map", "name": "cube_map", "setter": "set_cube_map", "type": "CubeMap"}, {"description": "", "getter": "get_texture_type", "name": "texture_type", "setter": "set_texture_type", "type": "int"}], "methods": [], "name": "VisualShaderNodeCubeMap", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeCubeMapUniform": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [], "methods": [], "name": "VisualShaderNodeCubeMapUniform", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeDotProduct": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [], "methods": [], "name": "VisualShaderNodeDotProduct", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeInput": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_input_name", "name": "input_name", "setter": "set_input_name", "type": "String"}], "methods": [], "name": "VisualShaderNodeInput", "signals": [{"arguments": [], "description": "", "name": "input_type_changed"}], "tutorials": {"links": []}}, "VisualShaderNodeOutput": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [], "methods": [], "name": "VisualShaderNodeOutput", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeScalarConstant": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_constant", "name": "constant", "setter": "set_constant", "type": "float"}], "methods": [], "name": "VisualShaderNodeScalarConstant", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeScalarFunc": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Function", "name": "FUNC_SIN", "value": "0"}, {"description": "", "enum": "Function", "name": "FUNC_COS", "value": "1"}, {"description": "", "enum": "Function", "name": "FUNC_TAN", "value": "2"}, {"description": "", "enum": "Function", "name": "FUNC_ASIN", "value": "3"}, {"description": "", "enum": "Function", "name": "FUNC_ACOS", "value": "4"}, {"description": "", "enum": "Function", "name": "FUNC_ATAN", "value": "5"}, {"description": "", "enum": "Function", "name": "FUNC_SINH", "value": "6"}, {"description": "", "enum": "Function", "name": "FUNC_COSH", "value": "7"}, {"description": "", "enum": "Function", "name": "FUNC_TANH", "value": "8"}, {"description": "", "enum": "Function", "name": "FUNC_LOG", "value": "9"}, {"description": "", "enum": "Function", "name": "FUNC_EXP", "value": "10"}, {"description": "", "enum": "Function", "name": "FUNC_SQRT", "value": "11"}, {"description": "", "enum": "Function", "name": "FUNC_ABS", "value": "12"}, {"description": "", "enum": "Function", "name": "FUNC_SIGN", "value": "13"}, {"description": "", "enum": "Function", "name": "FUNC_FLOOR", "value": "14"}, {"description": "", "enum": "Function", "name": "FUNC_ROUND", "value": "15"}, {"description": "", "enum": "Function", "name": "FUNC_CEIL", "value": "16"}, {"description": "", "enum": "Function", "name": "FUNC_FRAC", "value": "17"}, {"description": "", "enum": "Function", "name": "FUNC_SATURATE", "value": "18"}, {"description": "", "enum": "Function", "name": "FUNC_NEGATE", "value": "19"}], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_function", "name": "function", "setter": "set_function", "type": "int"}], "methods": [], "name": "VisualShaderNodeScalarFunc", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeScalarInterp": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [], "methods": [], "name": "VisualShaderNodeScalarInterp", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeScalarOp": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Operator", "name": "OP_ADD", "value": "0"}, {"description": "", "enum": "Operator", "name": "OP_SUB", "value": "1"}, {"description": "", "enum": "Operator", "name": "OP_MUL", "value": "2"}, {"description": "", "enum": "Operator", "name": "OP_DIV", "value": "3"}, {"description": "", "enum": "Operator", "name": "OP_MOD", "value": "4"}, {"description": "", "enum": "Operator", "name": "OP_POW", "value": "5"}, {"description": "", "enum": "Operator", "name": "OP_MAX", "value": "6"}, {"description": "", "enum": "Operator", "name": "OP_MIN", "value": "7"}, {"description": "", "enum": "Operator", "name": "OP_ATAN2", "value": "8"}], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_operator", "name": "operator", "setter": "set_operator", "type": "int"}], "methods": [], "name": "VisualShaderNodeScalarOp", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeScalarUniform": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNodeUniform", "members": [], "methods": [], "name": "VisualShaderNodeScalarUniform", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeTexture": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Source", "name": "SOURCE_TEXTURE", "value": "0"}, {"description": "", "enum": "Source", "name": "SOURCE_SCREEN", "value": "1"}, {"description": "", "enum": "Source", "name": "SOURCE_2D_TEXTURE", "value": "2"}, {"description": "", "enum": "Source", "name": "SOURCE_2D_NORMAL", "value": "3"}, {"description": "", "enum": "TextureType", "name": "TYPE_DATA", "value": "0"}, {"description": "", "enum": "TextureType", "name": "TYPE_COLOR", "value": "1"}, {"description": "", "enum": "TextureType", "name": "TYPE_NORMALMAP", "value": "2"}], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_source", "name": "source", "setter": "set_source", "type": "int"}, {"description": "", "getter": "get_texture", "name": "texture", "setter": "set_texture", "type": "Texture"}, {"description": "", "getter": "get_texture_type", "name": "texture_type", "setter": "set_texture_type", "type": "int"}], "methods": [], "name": "VisualShaderNodeTexture", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeTextureUniform": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "TextureType", "name": "TYPE_DATA", "value": "0"}, {"description": "", "enum": "TextureType", "name": "TYPE_COLOR", "value": "1"}, {"description": "", "enum": "TextureType", "name": "TYPE_NORMALMAP", "value": "2"}, {"description": "", "enum": "TextureType", "name": "TYPE_ANISO", "value": "3"}, {"description": "", "enum": "ColorDefault", "name": "COLOR_DEFAULT_WHITE", "value": "0"}, {"description": "", "enum": "ColorDefault", "name": "COLOR_DEFAULT_BLACK", "value": "1"}], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNodeUniform", "members": [{"description": "", "getter": "get_color_default", "name": "color_default", "setter": "set_color_default", "type": "int"}, {"description": "", "getter": "get_texture_type", "name": "texture_type", "setter": "set_texture_type", "type": "int"}], "methods": [], "name": "VisualShaderNodeTextureUniform", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeTransformCompose": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [], "methods": [], "name": "VisualShaderNodeTransformCompose", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeTransformConstant": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_constant", "name": "constant", "setter": "set_constant", "type": "Transform"}], "methods": [], "name": "VisualShaderNodeTransformConstant", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeTransformDecompose": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [], "methods": [], "name": "VisualShaderNodeTransformDecompose", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeTransformMult": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Operator", "name": "OP_AxB", "value": "0"}, {"description": "", "enum": "Operator", "name": "OP_BxA", "value": "1"}], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_operator", "name": "operator", "setter": "set_operator", "type": "int"}], "methods": [], "name": "VisualShaderNodeTransformMult", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeTransformUniform": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNodeUniform", "members": [], "methods": [], "name": "VisualShaderNodeTransformUniform", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeTransformVecMult": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Operator", "name": "OP_AxB", "value": "0"}, {"description": "", "enum": "Operator", "name": "OP_BxA", "value": "1"}, {"description": "", "enum": "Operator", "name": "OP_3x3_AxB", "value": "2"}, {"description": "", "enum": "Operator", "name": "OP_3x3_BxA", "value": "3"}], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_operator", "name": "operator", "setter": "set_operator", "type": "int"}], "methods": [], "name": "VisualShaderNodeTransformVecMult", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeUniform": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_uniform_name", "name": "uniform_name", "setter": "set_uniform_name", "type": "String"}], "methods": [], "name": "VisualShaderNodeUniform", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeVec3Constant": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_constant", "name": "constant", "setter": "set_constant", "type": "Vector3"}], "methods": [], "name": "VisualShaderNodeVec3Constant", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeVec3Uniform": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNodeUniform", "members": [], "methods": [], "name": "VisualShaderNodeVec3Uniform", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeVectorCompose": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [], "methods": [], "name": "VisualShaderNodeVectorCompose", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeVectorDecompose": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [], "methods": [], "name": "VisualShaderNodeVectorDecompose", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeVectorFunc": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Function", "name": "FUNC_NORMALIZE", "value": "0"}, {"description": "", "enum": "Function", "name": "FUNC_SATURATE", "value": "1"}, {"description": "", "enum": "Function", "name": "FUNC_NEGATE", "value": "2"}, {"description": "", "enum": "Function", "name": "FUNC_RECIPROCAL", "value": "3"}, {"description": "", "enum": "Function", "name": "FUNC_RGB2HSV", "value": "4"}, {"description": "", "enum": "Function", "name": "FUNC_HSV2RGB", "value": "5"}], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_function", "name": "function", "setter": "set_function", "type": "int"}], "methods": [], "name": "VisualShaderNodeVectorFunc", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeVectorInterp": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [], "methods": [], "name": "VisualShaderNodeVectorInterp", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeVectorLen": {"brief_description": "", "category": "Core", "constants": [], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [], "methods": [], "name": "VisualShaderNodeVectorLen", "signals": [], "tutorials": {"links": []}}, "VisualShaderNodeVectorOp": {"brief_description": "", "category": "Core", "constants": [{"description": "", "enum": "Operator", "name": "OP_ADD", "value": "0"}, {"description": "", "enum": "Operator", "name": "OP_SUB", "value": "1"}, {"description": "", "enum": "Operator", "name": "OP_MUL", "value": "2"}, {"description": "", "enum": "Operator", "name": "OP_DIV", "value": "3"}, {"description": "", "enum": "Operator", "name": "OP_MOD", "value": "4"}, {"description": "", "enum": "Operator", "name": "OP_POW", "value": "5"}, {"description": "", "enum": "Operator", "name": "OP_MAX", "value": "6"}, {"description": "", "enum": "Operator", "name": "OP_MIN", "value": "7"}, {"description": "", "enum": "Operator", "name": "OP_CROSS", "value": "8"}], "demos": {"links": []}, "description": "", "inherits": "VisualShaderNode", "members": [{"description": "", "getter": "get_operator", "name": "operator", "setter": "set_operator", "type": "int"}], "methods": [], "name": "VisualShaderNodeVectorOp", "signals": [], "tutorials": {"links": []}}, "WeakRef": {"brief_description": "Holds an [Object], but does not contribute to the reference count if the object is a reference.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "A weakref can hold a [Reference], without contributing to the reference counter. A weakref can be created from an [Object] using [method @GDScript.weakref]. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "Returns the [Object] this weakref is referring to.", "name": "get_ref", "qualifiers": "const", "return_": {"description": "", "type": "Variant"}}], "name": "WeakRef", "signals": [], "tutorials": {"links": []}}, "WindowDialog": {"brief_description": "Base class for window dialogs.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Windowdialog is the base class for all window-based dialogs. It's a by-default toplevel [Control] that draws a window decoration and allows motion and resizing.", "inherits": "Popup", "members": [{"description": "If [code]true[/code] the user can resize the window. Default value: [code]false[/code].", "getter": "get_resizable", "name": "resizable", "setter": "set_resizable", "type": "bool"}, {"description": "The text displayed in the window's title bar.", "getter": "get_title", "name": "window_title", "setter": "set_title", "type": "String"}], "methods": [{"arguments": [], "description": "Return the close [TextureButton].", "name": "get_close_button", "return_": {"description": "", "type": "TextureButton"}}], "name": "WindowDialog", "signals": [], "tutorials": {"links": []}}, "World": {"brief_description": "Class that has everything pertaining to a world.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world.", "inherits": "Resource", "members": [{"description": "The World's physics direct space state, used for making various queries. Might be used only during [code]_physics_process[/code].", "getter": "get_direct_space_state", "name": "direct_space_state", "setter": "", "type": "PhysicsDirectSpaceState"}, {"description": "The World's [Environment].", "getter": "get_environment", "name": "environment", "setter": "set_environment", "type": "Environment"}, {"description": "The World's fallback_environment will be used if the World's [Environment] fails or is missing.", "getter": "get_fallback_environment", "name": "fallback_environment", "setter": "set_fallback_environment", "type": "Environment"}, {"description": "The World's visual scenario.", "getter": "get_scenario", "name": "scenario", "setter": "", "type": "RID"}, {"description": "The World's physics space.", "getter": "get_space", "name": "space", "setter": "", "type": "RID"}], "methods": [], "name": "World", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/ray-casting.html"}]}}, "World2D": {"brief_description": "Class that has everything pertaining to a 2D world.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world.", "inherits": "Resource", "members": [{"description": "The [RID] of this world's canvas resource. Used by the [VisualServer] for 2D drawing.", "getter": "get_canvas", "name": "canvas", "setter": "", "type": "RID"}, {"description": "The state of this world's physics space. This allows arbitrary querying for collision.", "getter": "get_direct_space_state", "name": "direct_space_state", "setter": "", "type": "Physics2DDirectSpaceState"}, {"description": "The [RID] of this world's physics space resource. Used by the [Physics2DServer] for 2D physics, treating it as both a space and an area.", "getter": "get_space", "name": "space", "setter": "", "type": "RID"}], "methods": [], "name": "World2D", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/physics/ray-casting.html"}]}}, "WorldEnvironment": {"brief_description": "Default environment properties for the entire scene (post-processing effects, lightning and background settings).", "category": "Core", "constants": [], "demos": {"links": []}, "description": "The [code]WorldEnvironment[/code] node is used to configure the default [Environment] for the scene.\n\t\tThe parameters defined in the [code]WorldEnvironment[/code] can be overridden by an [Environment] node set on the current [Camera]. Additionally, only one [code]WorldEnvironment[/code] may be instanced in a given scene at a time.\n\t\tThe [code]WorldEnvironment[/code] allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene.", "inherits": "Node", "members": [{"description": "The [Environment] resource used by this [code]WorldEnvironment[/code], defining the default properties.", "getter": "get_environment", "name": "environment", "setter": "set_environment", "type": "Environment"}], "methods": [], "name": "WorldEnvironment", "signals": [], "tutorials": {"links": [{"description": "http://docs.godotengine.org/en/3.0/tutorials/3d/environment_and_post_processing.html"}]}}, "XMLParser": {"brief_description": "Low-level class for creating parsers for XML files.", "category": "Core", "constants": [{"description": "There's no node (no file or buffer opened)", "enum": "NodeType", "name": "NODE_NONE", "value": "0"}, {"description": "Element (tag)", "enum": "NodeType", "name": "NODE_ELEMENT", "value": "1"}, {"description": "End of element", "enum": "NodeType", "name": "NODE_ELEMENT_END", "value": "2"}, {"description": "Text node", "enum": "NodeType", "name": "NODE_TEXT", "value": "3"}, {"description": "Comment node", "enum": "NodeType", "name": "NODE_COMMENT", "value": "4"}, {"description": "CDATA content", "enum": "NodeType", "name": "NODE_CDATA", "value": "5"}, {"description": "Unknown node", "enum": "NodeType", "name": "NODE_UNKNOWN", "value": "6"}], "demos": {"links": []}, "description": "This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low level so it can be applied to any possible schema.", "inherits": "Reference", "members": [], "methods": [{"arguments": [], "description": "Get the amount of attributes in the current element.", "name": "get_attribute_count", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Get the name of the attribute specified by the index in [code]idx[/code] argument.", "name": "get_attribute_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "idx", "type": "int"}], "description": "Get the value of the attribute specified by the index in [code]idx[/code] argument.", "name": "get_attribute_value", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the current line in the parsed file (currently not implemented).", "name": "get_current_line", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Get the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute.", "name": "get_named_attribute_value", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Get the value of a certain attribute of the current element by name. This will return an empty [String] if the attribute is not found.", "name": "get_named_attribute_value_safe", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the contents of a text node. This will raise an error in any other type of node.", "name": "get_node_data", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the name of the current element node. This will raise an error if the current node type is not [code]NODE_ELEMENT[/code] nor [code]NODE_ELEMENT_END[/code]", "name": "get_node_name", "qualifiers": "const", "return_": {"description": "", "type": "String"}}, {"arguments": [], "description": "Get the byte offset of the current node since the beginning of the file or buffer.", "name": "get_node_offset", "qualifiers": "const", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Get the type of the current node. Compare with [code]NODE_*[/code] constants.", "name": "get_node_type", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "name", "type": "String"}], "description": "Check whether or not the current element has a certain attribute.", "name": "has_attribute", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [], "description": "Check whether the current element is empty (this only works for completely empty tags, e.g. <element \\>).", "name": "is_empty", "qualifiers": "const", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "file", "type": "String"}], "description": "Open a XML file for parsing. This returns an error code.", "name": "open", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "buffer", "type": "PoolByteArray"}], "description": "Open a XML raw buffer for parsing. This returns an error code.", "name": "open_buffer", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Read the next node of the file. This returns an error code.", "name": "read", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "position", "type": "int"}], "description": "Move the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code.", "name": "seek", "return_": {"description": "", "type": "int"}}, {"arguments": [], "description": "Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element.", "name": "skip_section", "return_": {"description": "", "type": "void"}}], "name": "XMLParser", "signals": [], "tutorials": {"links": []}}, "YSort": {"brief_description": "Sort all child nodes based on their Y positions.", "category": "Core", "constants": [], "demos": {"links": []}, "description": "Sort all child nodes based on their Y positions. The child node must inherit from [CanvasItem] for it to be sorted. Nodes that have a higher Y position will be drawn later, so they will appear on top of nodes that have a lower Y position.", "inherits": "Node2D", "members": [{"description": "", "getter": "is_sort_enabled", "name": "sort_enabled", "setter": "set_sort_enabled", "type": "bool"}], "methods": [], "name": "YSort", "signals": [], "tutorials": {"links": []}}, "bool": {"brief_description": "Boolean built-in type", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "Boolean built-in type.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "int"}], "description": "Cast an [int] value to a boolean value, this method will return true if called with an integer value different to 0 and false in other case.", "name": "bool", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "float"}], "description": "Cast a [float] value to a boolean value, this method will return true if called with a floating point value different to 0 and false in other case.", "name": "bool", "return_": {"description": "", "type": "bool"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}], "description": "Cast a [String] value to a boolean value, this method will return true if called with a non empty string and false in other case. Examples: [code]bool('False')[/code] returns true, [code]bool('')[/code]. returns false", "name": "bool", "return_": {"description": "", "type": "bool"}}], "name": "bool", "signals": [], "tutorials": {"links": []}}, "float": {"brief_description": "Float built-in type", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "Float built-in type.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "bool"}], "description": "Cast a [bool] value to a floating point value, [code]float(true)[/code] will be equals to 1.0 and [code]float(false)[/code] will be equals to 0.0.", "name": "float", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "int"}], "description": "Cast an [int] value to a floating point value, [code]float(1)[/code] will be equals to 1.0.", "name": "float", "return_": {"description": "", "type": "float"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}], "description": "Cast a [String] value to a floating point value. This method accepts float value strings like [code] '1.23' [/code] and exponential notation strings for its parameter so calling [code] float('1e3') [/code] will return 1000.0 and calling [code] float('1e-3') [/code] will return -0.001.", "name": "float", "return_": {"description": "", "type": "float"}}], "name": "float", "signals": [], "tutorials": {"links": []}}, "int": {"brief_description": "Integer built-in type.", "category": "Built-In Types", "constants": [], "demos": {"links": []}, "description": "Integer built-in type.", "members": [], "methods": [{"arguments": [{"description": "", "index": "0", "name": "from", "type": "bool"}], "description": "Cast a [bool] value to an integer value, [code]int(true)[/code] will be equals to 1 and [code]int(false)[/code] will be equals to 0.", "name": "int", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "float"}], "description": "Cast a float value to an integer value, this method simply removes the number fractions, so for example [code]int(2.7)[/code] will be equals to 2, [code]int(.1)[/code] will be equals to 0 and [code]int(-2.7)[/code] will be equals to -2.", "name": "int", "return_": {"description": "", "type": "int"}}, {"arguments": [{"description": "", "index": "0", "name": "from", "type": "String"}], "description": "Cast a [String] value to an integer value, this method is an integer parser from a string, so calling this method with an invalid integer string will return 0, a valid string will be something like [code]'1.7'[/code]. This method will ignore all non-number characters, so calling [code]int('1e3')[/code] will return 13.", "name": "int", "return_": {"description": "", "type": "int"}}], "name": "int", "signals": [], "tutorials": {"links": []}}}