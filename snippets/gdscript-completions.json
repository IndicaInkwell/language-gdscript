{"globals":{"e":[{"snippet":"empty()${0}","displayText":"empty","type":"function","leftLabel":"bool","description":" Return true if the string is empty. "},{"snippet":"erase(${1:value})${0}","displayText":"erase","type":"function","leftLabel":"","description":" "},{"snippet":"expand(${1:to_point})${0}","displayText":"expand","type":"function","leftLabel":"AABB","description":" Return this [AABB] expanded to include a given point. "},{"snippet":"expand(${1:to})${0}","displayText":"expand","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"encloses(${1:with})${0}","displayText":"encloses","type":"function","leftLabel":"bool","description":" Return true if this [AABB] completely encloses another one. "},{"snippet":"encloses(${1:b})${0}","displayText":"encloses","type":"function","leftLabel":"bool","description":" "},{"snippet":"extension()${0}","displayText":"extension","type":"function","leftLabel":"String","description":" If the string is a path to a file, return the extension. "}],"g":[{"snippet":"get(${1:idx})${0}","displayText":"get","type":"function","leftLabel":"int","description":" Get an index in the array. "},{"snippet":"gray()${0}","displayText":"gray","type":"function","leftLabel":"float","description":" Convert the color to gray. "},{"snippet":"grow(${1:by})${0}","displayText":"grow","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"get_id()${0}","displayText":"get_id","type":"function","leftLabel":"int","description":" "},{"snippet":"get_area()${0}","displayText":"get_area","type":"function","leftLabel":"float","description":" Get the area inside the [AABB]. "},{"snippet":"get_data()${0}","displayText":"get_data","type":"function","leftLabel":"RawArray","description":" "},{"snippet":"get_file()${0}","displayText":"get_file","type":"function","leftLabel":"String","description":" If the string is a path to a file, return the file and ignore the base directory. "},{"snippet":"get_name(${1:idx})${0}","displayText":"get_name","type":"function","leftLabel":"String","description":" Return a path level name. "},{"snippet":"get_rect(${1:area})${0}","displayText":"get_rect","type":"function","leftLabel":"Image","description":" "},{"snippet":"get_euler()${0}","displayText":"get_euler","type":"function","leftLabel":"Vector3","description":" Return euler angles from the matrix. "},{"snippet":"get_pixel(${1:x}, ${2:y}, ${3:mipmap_level})${0}","displayText":"get_pixel","type":"function","leftLabel":"Color","description":" "},{"snippet":"get_scale()${0}","displayText":"get_scale","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_width()${0}","displayText":"get_width","type":"function","leftLabel":"int","description":" "},{"snippet":"get_aspect()${0}","displayText":"get_aspect","type":"function","leftLabel":"float","description":" "},{"snippet":"get_format()${0}","displayText":"get_format","type":"function","leftLabel":"int","description":" "},{"snippet":"get_height()${0}","displayText":"get_height","type":"function","leftLabel":"int","description":" "},{"snippet":"get_origin()${0}","displayText":"get_origin","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_subname(${1:idx})${0}","displayText":"get_subname","type":"function","leftLabel":"String","description":" Return the subname level name. "},{"snippet":"get_support(${1:dir})${0}","displayText":"get_support","type":"function","leftLabel":"Vector3","description":" Return the support point in a given direction. This is useful for collision detection algorithms. "},{"snippet":"get_base_dir()${0}","displayText":"get_base_dir","type":"function","leftLabel":"String","description":" If the string is a path to a file, return the base directory. "},{"snippet":"get_endpoint(${1:idx})${0}","displayText":"get_endpoint","type":"function","leftLabel":"Vector3","description":" Get the position of the 8 endpoints of the [AABB] in space. "},{"snippet":"get_property()${0}","displayText":"get_property","type":"function","leftLabel":"String","description":" Return the property associated (empty if none). "},{"snippet":"get_rotation()${0}","displayText":"get_rotation","type":"function","leftLabel":"float","description":" "},{"snippet":"get_any_point()${0}","displayText":"get_any_point","type":"function","leftLabel":"Vector3","description":" Returns a point on the plane. "},{"snippet":"get_used_rect()${0}","displayText":"get_used_rect","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"get_name_count()${0}","displayText":"get_name_count","type":"function","leftLabel":"int","description":" Return the path level count. "},{"snippet":"get_longest_axis()${0}","displayText":"get_longest_axis","type":"function","leftLabel":"Vector3","description":" Return the normalized longest axis of the [AABB]. "},{"snippet":"get_shortest_axis()${0}","displayText":"get_shortest_axis","type":"function","leftLabel":"Vector3","description":" Return the normalized shortest axis of the [AABB]. "},{"snippet":"get_subname_count()${0}","displayText":"get_subname_count","type":"function","leftLabel":"int","description":" Return the subname count. "},{"snippet":"get_orthogonal_index()${0}","displayText":"get_orthogonal_index","type":"function","leftLabel":"int","description":" "},{"snippet":"get_string_from_utf8()${0}","displayText":"get_string_from_utf8","type":"function","leftLabel":"String","description":" "},{"snippet":"get_longest_axis_size()${0}","displayText":"get_longest_axis_size","type":"function","leftLabel":"float","description":" Return the scalar length of the longest axis of the [AABB]. "},{"snippet":"get_string_from_ascii()${0}","displayText":"get_string_from_ascii","type":"function","leftLabel":"String","description":" "},{"snippet":"get_longest_axis_index()${0}","displayText":"get_longest_axis_index","type":"function","leftLabel":"int","description":" Return the index of the longest axis of the [AABB] (according to [Vector3]::AXIS* enum). "},{"snippet":"get_shortest_axis_size()${0}","displayText":"get_shortest_axis_size","type":"function","leftLabel":"float","description":" Return the scalar length of the shortest axis of the [AABB]. "},{"snippet":"get_shortest_axis_index()${0}","displayText":"get_shortest_axis_index","type":"function","leftLabel":"int","description":" Return the index of the shortest axis of the [AABB] (according to [Vector3]::AXIS* enum). "}],"h":[{"snippet":"has(${1:value})${0}","displayText":"has","type":"function","leftLabel":"bool","description":" Return true if the dictionary has a given key. "},{"snippet":"hash()${0}","displayText":"hash","type":"function","leftLabel":"int","description":" Hash the string and return a 32 bits integer. "},{"snippet":"has_point(${1:point}, ${2:epsilon})${0}","displayText":"has_point","type":"function","leftLabel":"bool","description":" Returns true if \"point\" is inside the plane (by a very minimum treshold). "},{"snippet":"has_point(${1:point})${0}","displayText":"has_point","type":"function","leftLabel":"bool","description":" "},{"snippet":"hex_to_int()${0}","displayText":"hex_to_int","type":"function","leftLabel":"int","description":" Convert a string containing an hexadecimal number into an int. "},{"snippet":"has_no_area()${0}","displayText":"has_no_area","type":"function","leftLabel":"bool","description":" Return true if the [AABB] is flat or empty. "},{"snippet":"has_no_surface()${0}","displayText":"has_no_surface","type":"function","leftLabel":"bool","description":" Return true if the [AABB] is empty. "}],"i":[{"snippet":"int(${1:from})${0}","displayText":"int","type":"function","leftLabel":"","description":" "},{"snippet":"insert(${1:pos}, ${2:value})${0}","displayText":"insert","type":"function","leftLabel":"","description":" Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()). "},{"snippet":"insert(${1:pos}, ${2:what})${0}","displayText":"insert","type":"function","leftLabel":"String","description":" Insert a substring at a given position. "},{"snippet":"invert()${0}","displayText":"invert","type":"function","leftLabel":"","description":" "},{"snippet":"inverse()${0}","displayText":"inverse","type":"function","leftLabel":"Vector3","description":" Returns the inverse of the vector. this is the same as Vector3( 1.0 / v.x, 1.0 / v.y, 1.0 / v.z ) "},{"snippet":"is_echo()${0}","displayText":"is_echo","type":"function","leftLabel":"bool","description":" "},{"snippet":"inverted()${0}","displayText":"inverted","type":"function","leftLabel":"Color","description":" Return the inverted color (1-r, 1-g, 1-b, 1-a). "},{"snippet":"is_empty()${0}","displayText":"is_empty","type":"function","leftLabel":"bool","description":" Return true if the node path is empty. "},{"snippet":"is_action(${1:action})${0}","displayText":"is_action","type":"function","leftLabel":"bool","description":" "},{"snippet":"intersects(${1:with})${0}","displayText":"intersects","type":"function","leftLabel":"bool","description":" Return true if the [AABB] overlaps with another. "},{"snippet":"intersects(${1:b})${0}","displayText":"intersects","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_pressed()${0}","displayText":"is_pressed","type":"function","leftLabel":"bool","description":" "},{"snippet":"intersect_3(${1:b}, ${2:c})${0}","displayText":"intersect_3","type":"function","leftLabel":"Vector3","description":" Returns the intersection point of the three planes \"b\", \"c\" and this plane. If no intersection is found null is returned. "},{"snippet":"is_abs_path()${0}","displayText":"is_abs_path","type":"function","leftLabel":"bool","description":" If the string is a path to a file or directory, return true if the path is absolute. "},{"snippet":"is_absolute()${0}","displayText":"is_absolute","type":"function","leftLabel":"bool","description":" Return true if the node path is absolute (not relative). "},{"snippet":"is_rel_path()${0}","displayText":"is_rel_path","type":"function","leftLabel":"bool","description":" If the string is a path to a file or directory, return true if the path is relative. "},{"snippet":"intersection(${1:with})${0}","displayText":"intersection","type":"function","leftLabel":"AABB","description":" Return the intersection between two [AABB]s. An empty AABB (size 0,0,0) is returned on failure. "},{"snippet":"is_point_over(${1:point})${0}","displayText":"is_point_over","type":"function","leftLabel":"bool","description":" Returns true if \"point\" is located above the plane. "},{"snippet":"intersects_ray(${1:from}, ${2:dir})${0}","displayText":"intersects_ray","type":"function","leftLabel":"Vector3","description":" Returns the intersection point of a ray consisting of the position \"from\" and the direction normal \"dir\" with this plane. If no intersection is found null is returned. "},{"snippet":"is_valid_float()${0}","displayText":"is_valid_float","type":"function","leftLabel":"bool","description":" Check whether the string contains a valid float. "},{"snippet":"interpolate_with(${1:m}, ${2:c})${0}","displayText":"interpolate_with","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"intersects_plane(${1:plane})${0}","displayText":"intersects_plane","type":"function","leftLabel":"bool","description":" Return true if the AABB is at both sides of a plane. "},{"snippet":"is_valid_integer()${0}","displayText":"is_valid_integer","type":"function","leftLabel":"bool","description":" Check whether the string contains a valid integer. "},{"snippet":"intersects_segment(${1:begin}, ${2:end})${0}","displayText":"intersects_segment","type":"function","leftLabel":"Vector3","description":" Returns the intersection point of a segment from position \"begin\" to position \"end\" with this plane. If no intersection is found null is returned. "},{"snippet":"intersects_segment(${1:from}, ${2:to})${0}","displayText":"intersects_segment","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_valid_html_color()${0}","displayText":"is_valid_html_color","type":"function","leftLabel":"bool","description":" Check whether the string contains a valid color in HTML notation. "},{"snippet":"is_valid_identifier()${0}","displayText":"is_valid_identifier","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_valid_ip_address()${0}","displayText":"is_valid_ip_address","type":"function","leftLabel":"bool","description":" Check whether the string contains a valid IP address. "}],"m":[{"snippet":"match(${1:expr})${0}","displayText":"match","type":"function","leftLabel":"bool","description":" Do a simple expression matching, using ? and * wildcards. "},{"snippet":"merge(${1:with})${0}","displayText":"merge","type":"function","leftLabel":"AABB","description":" Combine this [AABB] with another one, a larger one is returned that contains both. "},{"snippet":"merge(${1:b})${0}","displayText":"merge","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"matchn(${1:expr})${0}","displayText":"matchn","type":"function","leftLabel":"bool","description":" Do a simple, case insensitive, expression matching, using ? and * wildcards. "},{"snippet":"max_axis()${0}","displayText":"max_axis","type":"function","leftLabel":"int","description":" "},{"snippet":"md5_text()${0}","displayText":"md5_text","type":"function","leftLabel":"String","description":" "},{"snippet":"min_axis()${0}","displayText":"min_axis","type":"function","leftLabel":"int","description":" "},{"snippet":"md5_buffer()${0}","displayText":"md5_buffer","type":"function","leftLabel":"RawArray","description":" "}],"A":[{"snippet":"AABB(${1:pos}, ${2:size})${0}","displayText":"AABB","type":"function","leftLabel":"","description":" Optional constructor, accepts position and size. "},{"snippet":"Array(${1:from})${0}","displayText":"Array","type":"function","leftLabel":"","description":" Construct an array from a [RawArray]. "}],"a":[{"snippet":"abs()${0}","displayText":"abs","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"atan2()${0}","displayText":"atan2","type":"function","leftLabel":"float","description":" "},{"snippet":"append(${1:value})${0}","displayText":"append","type":"function","leftLabel":"","description":" "},{"snippet":"angle_to(${1:to})${0}","displayText":"angle_to","type":"function","leftLabel":"float","description":" "},{"snippet":"affine_inverse()${0}","displayText":"affine_inverse","type":"function","leftLabel":"Transform","description":" "},{"snippet":"angle_to_point(${1:to})${0}","displayText":"angle_to_point","type":"function","leftLabel":"float","description":" "}],"c":[{"snippet":"clip(${1:b})${0}","displayText":"clip","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"clear()${0}","displayText":"clear","type":"function","leftLabel":"","description":" Clear the dictionary, removing all key/value pairs. "},{"snippet":"cross(${1:b})${0}","displayText":"cross","type":"function","leftLabel":"Vector3","description":" Return the cross product with b. "},{"snippet":"center()${0}","displayText":"center","type":"function","leftLabel":"Vector3","description":" Returns the center of the plane. "},{"snippet":"converted(${1:format})${0}","displayText":"converted","type":"function","leftLabel":"Image","description":" "},{"snippet":"capitalize()${0}","displayText":"capitalize","type":"function","leftLabel":"String","description":" Return the string in uppercase. "},{"snippet":"casecmp_to(${1:to})${0}","displayText":"casecmp_to","type":"function","leftLabel":"int","description":" Perform a case-sensitive comparison to antoher string, return -1 if less, 0 if equal and +1 if greater. "},{"snippet":"compressed(${1:format})${0}","displayText":"compressed","type":"function","leftLabel":"Image","description":" "},{"snippet":"contrasted()${0}","displayText":"contrasted","type":"function","leftLabel":"Color","description":" Return the most contrasting color with this one. "},{"snippet":"cubic_slerp(${1:b}, ${2:pre_a}, ${3:post_b}, ${4:t})${0}","displayText":"cubic_slerp","type":"function","leftLabel":"Quat","description":" "},{"snippet":"cubic_interpolate(${1:b}, ${2:pre_a}, ${3:post_b}, ${4:t})${0}","displayText":"cubic_interpolate","type":"function","leftLabel":"Vector3","description":" Perform a cubic interpolation between vectors a,b,c,d (b is current), by the given amount (i). "}],"f":[{"snippet":"find(${1:value})${0}","displayText":"find","type":"function","leftLabel":"int","description":" "},{"snippet":"find(${1:what}, ${2:from})${0}","displayText":"find","type":"function","leftLabel":"int","description":" Find the first occurence of a substring, return the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed. "},{"snippet":"findn(${1:what}, ${2:from})${0}","displayText":"findn","type":"function","leftLabel":"int","description":" Find the first occurence of a substring but search as case-insensitive, return the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed. "},{"snippet":"float(${1:from})${0}","displayText":"float","type":"function","leftLabel":"","description":" "},{"snippet":"floor()${0}","displayText":"floor","type":"function","leftLabel":"Vector2","description":" Remove the fractional part of x and y. "},{"snippet":"floorf()${0}","displayText":"floorf","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"find_last(${1:what})${0}","displayText":"find_last","type":"function","leftLabel":"int","description":" Find the last occurence of a substring, return the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed. "}],"p":[{"snippet":"project(${1:point})${0}","displayText":"project","type":"function","leftLabel":"Vector3","description":" Returns the orthogonal projection of point \"p\" into a point in the plane. "},{"snippet":"pad_zeros(${1:digits})${0}","displayText":"pad_zeros","type":"function","leftLabel":"String","description":" "},{"snippet":"plus_file(${1:file})${0}","displayText":"plus_file","type":"function","leftLabel":"String","description":" "},{"snippet":"push_back(${1:integer})${0}","displayText":"push_back","type":"function","leftLabel":"","description":" Append a value to the array. "},{"snippet":"push_back(${1:vector3})${0}","displayText":"push_back","type":"function","leftLabel":"","description":" "},{"snippet":"push_back(${1:byte})${0}","displayText":"push_back","type":"function","leftLabel":"","description":" "},{"snippet":"push_back(${1:value})${0}","displayText":"push_back","type":"function","leftLabel":"","description":" "},{"snippet":"push_back(${1:color})${0}","displayText":"push_back","type":"function","leftLabel":"","description":" Append a value to the array. "},{"snippet":"push_back(${1:vector2})${0}","displayText":"push_back","type":"function","leftLabel":"","description":" "},{"snippet":"push_back(${1:string})${0}","displayText":"push_back","type":"function","leftLabel":"","description":" "},{"snippet":"put_pixel(${1:x}, ${2:y}, ${3:color}, ${4:mipmap_level})${0}","displayText":"put_pixel","type":"function","leftLabel":"","description":" "},{"snippet":"parse_json(${1:json})${0}","displayText":"parse_json","type":"function","leftLabel":"int","description":" "},{"snippet":"pad_decimals(${1:digits})${0}","displayText":"pad_decimals","type":"function","leftLabel":"String","description":" "},{"snippet":"percent_decode()${0}","displayText":"percent_decode","type":"function","leftLabel":"String","description":" "},{"snippet":"percent_encode()${0}","displayText":"percent_encode","type":"function","leftLabel":"String","description":" "}],"r":[{"snippet":"rfind(${1:what}, ${2:from})${0}","displayText":"rfind","type":"function","leftLabel":"int","description":" Perform a search for a substring, but start from the end of the string instead of the begining. "},{"snippet":"right(${1:pos})${0}","displayText":"right","type":"function","leftLabel":"String","description":" Return the right side of the string from a given position. "},{"snippet":"remove(${1:pos})${0}","displayText":"remove","type":"function","leftLabel":"","description":" Remove an element from the array by index. "},{"snippet":"resize(${1:idx})${0}","displayText":"resize","type":"function","leftLabel":"","description":" Resize the array. "},{"snippet":"resize(${1:pos})${0}","displayText":"resize","type":"function","leftLabel":"","description":" Resize the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are Null. "},{"snippet":"rfindn(${1:what}, ${2:from})${0}","displayText":"rfindn","type":"function","leftLabel":"int","description":" Perform a search for a substring, but start from the end of the string instead of the begining. Also search case-insensitive. "},{"snippet":"reflect(${1:vec})${0}","displayText":"reflect","type":"function","leftLabel":"float","description":" "},{"snippet":"reflect(${1:by})${0}","displayText":"reflect","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"replace(${1:what}, ${2:forwhat})${0}","displayText":"replace","type":"function","leftLabel":"String","description":" Replace occurrences of a substring for different ones inside the string. "},{"snippet":"resized(${1:x}, ${2:y}, ${3:interpolation})${0}","displayText":"resized","type":"function","leftLabel":"Image","description":" "},{"snippet":"rotated(${1:phi})${0}","displayText":"rotated","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"rotated(${1:axis}, ${2:phi})${0}","displayText":"rotated","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"replacen(${1:what}, ${2:forwhat})${0}","displayText":"replacen","type":"function","leftLabel":"String","description":" Replace occurrences of a substring for different ones inside the string, but search case-insensitive. "}],"s":[{"snippet":"set(${1:idx}, ${2:vector3})${0}","displayText":"set","type":"function","leftLabel":"","description":" "},{"snippet":"set(${1:idx}, ${2:color})${0}","displayText":"set","type":"function","leftLabel":"","description":" Set an index in the array. "},{"snippet":"set(${1:idx}, ${2:integer})${0}","displayText":"set","type":"function","leftLabel":"","description":" Set an index in the array. "},{"snippet":"set(${1:idx}, ${2:vector2})${0}","displayText":"set","type":"function","leftLabel":"","description":" "},{"snippet":"set(${1:idx}, ${2:string})${0}","displayText":"set","type":"function","leftLabel":"","description":" "},{"snippet":"set(${1:idx}, ${2:value})${0}","displayText":"set","type":"function","leftLabel":"","description":" "},{"snippet":"set(${1:idx}, ${2:byte})${0}","displayText":"set","type":"function","leftLabel":"","description":" "},{"snippet":"size()${0}","displayText":"size","type":"function","leftLabel":"int","description":" "},{"snippet":"sort()${0}","displayText":"sort","type":"function","leftLabel":"","description":" "},{"snippet":"slerp(${1:b}, ${2:t})${0}","displayText":"slerp","type":"function","leftLabel":"Quat","description":" Perform a spherical-linear interpolation with another quaternion. "},{"snippet":"slide(${1:by})${0}","displayText":"slide","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"slide(${1:vec})${0}","displayText":"slide","type":"function","leftLabel":"float","description":" "},{"snippet":"split(${1:divisor}, ${2:allow_empty})${0}","displayText":"split","type":"function","leftLabel":"StringArray","description":" Split the string by a divisor string, return an array of the substrings. Example \"One,Two,Three\" will return [\"One\",\"Two\",\"Three\"] if split by \",\". "},{"snippet":"scaled(${1:scale})${0}","displayText":"scaled","type":"function","leftLabel":"Transform","description":" "},{"snippet":"substr(${1:from}, ${2:len})${0}","displayText":"substr","type":"function","leftLabel":"String","description":" Return part of the string from \"from\", with length \"len\". "},{"snippet":"slerpni(${1:b}, ${2:t})${0}","displayText":"slerpni","type":"function","leftLabel":"Quat","description":" "},{"snippet":"snapped(${1:by})${0}","displayText":"snapped","type":"function","leftLabel":"Vector3","description":" Return a copy of the vector, snapped to the lowest neared multiple. "},{"snippet":"save_png(${1:path})${0}","displayText":"save_png","type":"function","leftLabel":"int","description":" "},{"snippet":"sort_custom(${1:obj}, ${2:func})${0}","displayText":"sort_custom","type":"function","leftLabel":"","description":" "},{"snippet":"strip_edges()${0}","displayText":"strip_edges","type":"function","leftLabel":"String","description":" Return a copy of the string stripped of any non-printable character at the begining and the end. "},{"snippet":"split_floats(${1:divisor}, ${2:allow_empty})${0}","displayText":"split_floats","type":"function","leftLabel":"RealArray","description":" Split the string in floats by using a divisor string, return an array of the substrings. Example \"1,2.5,3\" will return [1,2.5,3] if split by \",\". "}],"b":[{"snippet":"bool(${1:from})${0}","displayText":"bool","type":"function","leftLabel":"","description":" "},{"snippet":"blend(${1:over})${0}","displayText":"blend","type":"function","leftLabel":"Color","description":" "},{"snippet":"brushed(${1:src}, ${2:brush}, ${3:pos})${0}","displayText":"brushed","type":"function","leftLabel":"Image","description":" "},{"snippet":"basename()${0}","displayText":"basename","type":"function","leftLabel":"String","description":" If the string is a path to a file, return the path to the file without the extension. "},{"snippet":"blit_rect(${1:src}, ${2:src_rect}, ${3:dest})${0}","displayText":"blit_rect","type":"function","leftLabel":"","description":" "},{"snippet":"basis_xform(${1:v})${0}","displayText":"basis_xform","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"begins_with(${1:text})${0}","displayText":"begins_with","type":"function","leftLabel":"bool","description":" Return true if the strings begins with the given string. "},{"snippet":"brush_transfer(${1:src}, ${2:brush}, ${3:pos})${0}","displayText":"brush_transfer","type":"function","leftLabel":"","description":" "},{"snippet":"basis_xform_inv(${1:v})${0}","displayText":"basis_xform_inv","type":"function","leftLabel":"Matrix32","description":" "}],"l":[{"snippet":"left(${1:pos})${0}","displayText":"left","type":"function","leftLabel":"String","description":" Return an amount of characters from the left of the string. "},{"snippet":"load(${1:path})${0}","displayText":"load","type":"function","leftLabel":"int","description":" "},{"snippet":"length()${0}","displayText":"length","type":"function","leftLabel":"float","description":" Return the length of the vector. "},{"snippet":"looking_at(${1:target}, ${2:up})${0}","displayText":"looking_at","type":"function","leftLabel":"Transform","description":" "},{"snippet":"length_squared()${0}","displayText":"length_squared","type":"function","leftLabel":"float","description":" Return the length of the vector, squared. "},{"snippet":"linear_interpolate(${1:b}, ${2:t})${0}","displayText":"linear_interpolate","type":"function","leftLabel":"Vector3","description":" Linearly interpolates the vector to a given one (b), by the given amount (i). "}],"t":[{"snippet":"tdotx(${1:with})${0}","displayText":"tdotx","type":"function","leftLabel":"float","description":" Transposed dot product with the x axis of the matrix. "},{"snippet":"tdoty(${1:with})${0}","displayText":"tdoty","type":"function","leftLabel":"float","description":" Transposed dot product with the y axis of the matrix. "},{"snippet":"tdotz(${1:with})${0}","displayText":"tdotz","type":"function","leftLabel":"float","description":" Transposed dot product with the z axis of the matrix. "},{"snippet":"to_32()${0}","displayText":"to_32","type":"function","leftLabel":"int","description":" Convert the color to a 32 its integer (each byte represets a RGBA). "},{"snippet":"to_int()${0}","displayText":"to_int","type":"function","leftLabel":"int","description":" Convert a string, containing an integer number, into an int. "},{"snippet":"tangent()${0}","displayText":"tangent","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"to_html(${1:with_alpha})${0}","displayText":"to_html","type":"function","leftLabel":"String","description":" Return the HTML hexadecimal color string. "},{"snippet":"to_json()${0}","displayText":"to_json","type":"function","leftLabel":"String","description":" "},{"snippet":"to_float()${0}","displayText":"to_float","type":"function","leftLabel":"float","description":" Convert a string, containing a decimal number, into a float. "},{"snippet":"to_lower()${0}","displayText":"to_lower","type":"function","leftLabel":"String","description":" Return the string converted to lowercase. "},{"snippet":"to_upper()${0}","displayText":"to_upper","type":"function","leftLabel":"String","description":" Return the string converted to uppercase. "},{"snippet":"to_ARGB32()${0}","displayText":"to_ARGB32","type":"function","leftLabel":"int","description":" Convert color to ARGB32, more compatible with DirectX. "},{"snippet":"translated(${1:offset})${0}","displayText":"translated","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"translated(${1:ofs})${0}","displayText":"translated","type":"function","leftLabel":"Transform","description":" "},{"snippet":"transposed()${0}","displayText":"transposed","type":"function","leftLabel":"Matrix3","description":" Return the transposed version of the matrix. "}],"C":[{"snippet":"Color(${1:r}, ${2:g}, ${3:b}, ${4:a})${0}","displayText":"Color","type":"function","leftLabel":"","description":" Construct the color from an RGBA profile. "},{"snippet":"Color(${1:r}, ${2:g}, ${3:b})${0}","displayText":"Color","type":"function","leftLabel":"","description":" Construct the color from an RGBA profile. "},{"snippet":"Color(${1:from})${0}","displayText":"Color","type":"function","leftLabel":"","description":" Construct the color from an RGBA profile. "},{"snippet":"ColorArray(${1:from})${0}","displayText":"ColorArray","type":"function","leftLabel":"","description":" Create from a generic array. "}],"k":[{"snippet":"keys()${0}","displayText":"keys","type":"function","leftLabel":"Array","description":" Return the list of keys in the dictionary. "}],"d":[{"snippet":"dot(${1:with})${0}","displayText":"dot","type":"function","leftLabel":"float","description":" Returns the dot product with vector \"b\". "},{"snippet":"dot(${1:b})${0}","displayText":"dot","type":"function","leftLabel":"float","description":" Return the dot product with b. "},{"snippet":"determinant()${0}","displayText":"determinant","type":"function","leftLabel":"float","description":" Return the determinant of the matrix. "},{"snippet":"distance_to(${1:point})${0}","displayText":"distance_to","type":"function","leftLabel":"float","description":" Returns the shortest distance from the plane to the position \"point\". "},{"snippet":"distance_to(${1:to})${0}","displayText":"distance_to","type":"function","leftLabel":"float","description":" Returns the distance to vector \"b\". "},{"snippet":"distance_to(${1:b})${0}","displayText":"distance_to","type":"function","leftLabel":"float","description":" Return the distance to b. "},{"snippet":"decompressed()${0}","displayText":"decompressed","type":"function","leftLabel":"Image","description":" "},{"snippet":"distance_squared_to(${1:to})${0}","displayText":"distance_squared_to","type":"function","leftLabel":"float","description":" "},{"snippet":"distance_squared_to(${1:b})${0}","displayText":"distance_squared_to","type":"function","leftLabel":"float","description":" Return the squared distance (distance minus the last square root) to b. "}],"I":[{"snippet":"IntArray(${1:from})${0}","displayText":"IntArray","type":"function","leftLabel":"","description":" Create from a generic array. "}],"o":[{"snippet":"ord_at(${1:at})${0}","displayText":"ord_at","type":"function","leftLabel":"String","description":" Return the character code at position \"at\". "},{"snippet":"orthonormalized()${0}","displayText":"orthonormalized","type":"function","leftLabel":"Transform","description":" "}],"x":[{"snippet":"xform(${1:v})${0}","displayText":"xform","type":"function","leftLabel":"var","description":" Transforms vector \"v\" by this transform. "},{"snippet":"xform_inv(${1:v})${0}","displayText":"xform_inv","type":"function","leftLabel":"var","description":" Inverse-transforms vector \"v\" by this transform. "},{"snippet":"xml_escape()${0}","displayText":"xml_escape","type":"function","leftLabel":"String","description":" Perform XML escaping on the string. "},{"snippet":"xml_unescape()${0}","displayText":"xml_unescape","type":"function","leftLabel":"String","description":" Perform XML un-escaping of the string. "}],"M":[{"snippet":"Matrix3(${1:x_axis}, ${2:y_axis}, ${3:z_axis})${0}","displayText":"Matrix3","type":"function","leftLabel":"","description":" Create a matrix from 3 axis vectors. "},{"snippet":"Matrix3(${1:axis}, ${2:phi})${0}","displayText":"Matrix3","type":"function","leftLabel":"","description":" Create a matrix from an axis vector and an angle. "},{"snippet":"Matrix3(${1:from})${0}","displayText":"Matrix3","type":"function","leftLabel":"","description":" Create a matrix from a quaternion. "},{"snippet":"Matrix32(${1:x_axis}, ${2:y_axis}, ${3:origin})${0}","displayText":"Matrix32","type":"function","leftLabel":"","description":" "}],"N":[{"snippet":"Nil(${1:from})${0}","displayText":"Nil","type":"function","leftLabel":"","description":" "},{"snippet":"NodePath(${1:from})${0}","displayText":"NodePath","type":"function","leftLabel":"","description":" "}],"n":[{"snippet":"normalized()${0}","displayText":"normalized","type":"function","leftLabel":"Vector3","description":" Return a copy of the normalized vector to unit length. This is the same as v / v.length() "},{"snippet":"nocasecmp_to(${1:to})${0}","displayText":"nocasecmp_to","type":"function","leftLabel":"int","description":" Perform a case-insensitive comparison to antoher string, return -1 if less, 0 if equal and +1 if greater. "}],"P":[{"snippet":"Plane(${1:a}, ${2:b}, ${3:c}, ${4:d})${0}","displayText":"Plane","type":"function","leftLabel":"","description":" Creates a plane from the three parameters \"a\", \"b\", \"c\" and \"d\". "},{"snippet":"Plane(${1:v1}, ${2:v2}, ${3:v3})${0}","displayText":"Plane","type":"function","leftLabel":"","description":" Creates a plane from three points. "},{"snippet":"Plane(${1:normal}, ${2:d})${0}","displayText":"Plane","type":"function","leftLabel":"","description":" Creates a plane from the normal and the plane's distance to the origin. "}],"Q":[{"snippet":"Quat(${1:x}, ${2:y}, ${3:z}, ${4:w})${0}","displayText":"Quat","type":"function","leftLabel":"","description":" "},{"snippet":"Quat(${1:from})${0}","displayText":"Quat","type":"function","leftLabel":"","description":" "}],"R":[{"snippet":"RID(${1:from})${0}","displayText":"RID","type":"function","leftLabel":"","description":" "},{"snippet":"Rect2(${1:pos}, ${2:size})${0}","displayText":"Rect2","type":"function","leftLabel":"","description":" "},{"snippet":"Rect2(${1:x}, ${2:y}, ${3:width}, ${4:height})${0}","displayText":"Rect2","type":"function","leftLabel":"","description":" "},{"snippet":"RawArray(${1:from})${0}","displayText":"RawArray","type":"function","leftLabel":"","description":" "},{"snippet":"RealArray(${1:from})${0}","displayText":"RealArray","type":"function","leftLabel":"","description":" "}],"S":[{"snippet":"StringArray(${1:from})${0}","displayText":"StringArray","type":"function","leftLabel":"","description":" "}],"T":[{"snippet":"Transform(${1:x_axis}, ${2:y_axis}, ${3:z_axis}, ${4:origin})${0}","displayText":"Transform","type":"function","leftLabel":"","description":" "},{"snippet":"Transform(${1:basis}, ${2:origin})${0}","displayText":"Transform","type":"function","leftLabel":"","description":" "},{"snippet":"Transform(${1:from})${0}","displayText":"Transform","type":"function","leftLabel":"","description":" "}],"V":[{"snippet":"Vector2(${1:x}, ${2:y})${0}","displayText":"Vector2","type":"function","leftLabel":"","description":" "},{"snippet":"Vector3(${1:x}, ${2:y}, ${3:z})${0}","displayText":"Vector3","type":"function","leftLabel":"","description":" "},{"snippet":"Vector2Array(${1:from})${0}","displayText":"Vector2Array","type":"function","leftLabel":"","description":" "},{"snippet":"Vector3Array(${1:from})${0}","displayText":"Vector3Array","type":"function","leftLabel":"","description":" "}]},"constants":{"P":[{"snippet":"PI","displayText":"PI","type":"constant","leftLabel":"3.141593","description":" Constant that represents how many times the diameter of a circumference fits around it's perimeter. "},{"snippet":"PARAM_MAX","displayText":"PARAM_MAX","type":"constant","leftLabel":"8","description":" "},{"snippet":"PARAM_BIAS","displayText":"PARAM_BIAS","type":"constant","leftLabel":"0","description":" "},{"snippet":"PARAM_GLOW","displayText":"PARAM_GLOW","type":"constant","leftLabel":"5","description":" Glow (Visible emitted scattered light). "},{"snippet":"PARAM_DETAIL","displayText":"PARAM_DETAIL","type":"constant","leftLabel":"1","description":" Detail Layer for diffuse lighting. "},{"snippet":"PARAM_ENERGY","displayText":"PARAM_ENERGY","type":"constant","leftLabel":"3","description":" "},{"snippet":"PARAM_NORMAL","displayText":"PARAM_NORMAL","type":"constant","leftLabel":"6","description":" Normal Map (irregularity map). "},{"snippet":"PARAM_RADIUS","displayText":"PARAM_RADIUS","type":"constant","leftLabel":"0","description":" "},{"snippet":"PARAM_SPREAD","displayText":"PARAM_SPREAD","type":"constant","leftLabel":"1","description":" "},{"snippet":"PRIORITY_LOW","displayText":"PRIORITY_LOW","type":"constant","leftLabel":"0","description":" "},{"snippet":"PARAM_DAMPING","displayText":"PARAM_DAMPING","type":"constant","leftLabel":"1","description":" "},{"snippet":"PARAM_DIFFUSE","displayText":"PARAM_DIFFUSE","type":"constant","leftLabel":"0","description":" Diffuse Lighting (light scattered from surface). "},{"snippet":"PRIMITIVE_MAX","displayText":"PRIMITIVE_MAX","type":"constant","leftLabel":"7","description":" "},{"snippet":"PRIORITY_HIGH","displayText":"PRIORITY_HIGH","type":"constant","leftLabel":"2","description":" "},{"snippet":"PARAM_EMISSION","displayText":"PARAM_EMISSION","type":"constant","leftLabel":"3","description":" Emission Lighting (light emitted from the surface). "},{"snippet":"PARAM_SOFTNESS","displayText":"PARAM_SOFTNESS","type":"constant","leftLabel":"3","description":" "},{"snippet":"PARAM_SPECULAR","displayText":"PARAM_SPECULAR","type":"constant","leftLabel":"2","description":" Specular Lighting (light reflected from the surface). "},{"snippet":"PARAM_STRENGTH","displayText":"PARAM_STRENGTH","type":"constant","leftLabel":"1","description":" "},{"snippet":"PIN_JOINT_BIAS","displayText":"PIN_JOINT_BIAS","type":"constant","leftLabel":"0","description":" "},{"snippet":"PARAM_DIRECTION","displayText":"PARAM_DIRECTION","type":"constant","leftLabel":"0","description":" "},{"snippet":"PARAM_VOLUME_DB","displayText":"PARAM_VOLUME_DB","type":"constant","leftLabel":"0","description":" "},{"snippet":"PARTICLE_HEIGHT","displayText":"PARTICLE_HEIGHT","type":"constant","leftLabel":"12","description":" "},{"snippet":"PARTICLE_SPREAD","displayText":"PARTICLE_SPREAD","type":"constant","leftLabel":"1","description":" "},{"snippet":"PAUSE_MODE_STOP","displayText":"PAUSE_MODE_STOP","type":"constant","leftLabel":"1","description":" "},{"snippet":"PRIMITIVE_LINES","displayText":"PRIMITIVE_LINES","type":"constant","leftLabel":"1","description":" "},{"snippet":"PRIORITY_NORMAL","displayText":"PRIORITY_NORMAL","type":"constant","leftLabel":"1","description":" "},{"snippet":"PARAM_FINAL_SIZE","displayText":"PARAM_FINAL_SIZE","type":"constant","leftLabel":"12","description":" "},{"snippet":"PARAM_LIMIT_BIAS","displayText":"PARAM_LIMIT_BIAS","type":"constant","leftLabel":"3","description":" "},{"snippet":"PARAM_RELAXATION","displayText":"PARAM_RELAXATION","type":"constant","leftLabel":"4","description":" "},{"snippet":"PARAM_SPOT_ANGLE","displayText":"PARAM_SPOT_ANGLE","type":"constant","leftLabel":"1","description":" "},{"snippet":"PARAM_SWING_SPAN","displayText":"PARAM_SWING_SPAN","type":"constant","leftLabel":"0","description":" "},{"snippet":"PARAM_TWIST_SPAN","displayText":"PARAM_TWIST_SPAN","type":"constant","leftLabel":"1","description":" "},{"snippet":"PARTICLE_GRAVITY","displayText":"PARTICLE_GRAVITY","type":"constant","leftLabel":"2","description":" "},{"snippet":"PARTICLE_VAR_MAX","displayText":"PARTICLE_VAR_MAX","type":"constant","leftLabel":"14","description":" "},{"snippet":"PRIMITIVE_POINTS","displayText":"PRIMITIVE_POINTS","type":"constant","leftLabel":"0","description":" Render array as points (one vertex equals one point). "},{"snippet":"PARAM_ANGULAR_ERP","displayText":"PARAM_ANGULAR_ERP","type":"constant","leftLabel":"11","description":" "},{"snippet":"PARAM_ATTENUATION","displayText":"PARAM_ATTENUATION","type":"constant","leftLabel":"4","description":" "},{"snippet":"PARAM_LIMIT_LOWER","displayText":"PARAM_LIMIT_LOWER","type":"constant","leftLabel":"2","description":" "},{"snippet":"PARAM_LIMIT_UPPER","displayText":"PARAM_LIMIT_UPPER","type":"constant","leftLabel":"1","description":" "},{"snippet":"PARAM_PITCH_SCALE","displayText":"PARAM_PITCH_SCALE","type":"constant","leftLabel":"1","description":" "},{"snippet":"PARAM_SHADE_PARAM","displayText":"PARAM_SHADE_PARAM","type":"constant","leftLabel":"7","description":" "},{"snippet":"PARTICLE_LIFETIME","displayText":"PARTICLE_LIFETIME","type":"constant","leftLabel":"0","description":" "},{"snippet":"PIN_JOINT_DAMPING","displayText":"PIN_JOINT_DAMPING","type":"constant","leftLabel":"1","description":" "},{"snippet":"PROPERTY_HINT_DIR","displayText":"PROPERTY_HINT_DIR","type":"constant","leftLabel":"10","description":" String property is a directory (so pop up a file dialog when edited). "},{"snippet":"PARAM_DETAIL_RATIO","displayText":"PARAM_DETAIL_RATIO","type":"constant","leftLabel":"3","description":" "},{"snippet":"PARAM_INITIAL_SIZE","displayText":"PARAM_INITIAL_SIZE","type":"constant","leftLabel":"11","description":" "},{"snippet":"PARAM_RADIAL_ACCEL","displayText":"PARAM_RADIAL_ACCEL","type":"constant","leftLabel":"7","description":" "},{"snippet":"PARAM_SPECULAR_EXP","displayText":"PARAM_SPECULAR_EXP","type":"constant","leftLabel":"4","description":" Specular Exponent (size of the specular dot). "},{"snippet":"PAUSE_MODE_INHERIT","displayText":"PAUSE_MODE_INHERIT","type":"constant","leftLabel":"0","description":" "},{"snippet":"PAUSE_MODE_PROCESS","displayText":"PAUSE_MODE_PROCESS","type":"constant","leftLabel":"2","description":" "},{"snippet":"PROPERTY_HINT_ENUM","displayText":"PROPERTY_HINT_ENUM","type":"constant","leftLabel":"3","description":" Property hint for an enumerated value, like \"Hello,Something,Else\". This is valid for integer, float and string properties. "},{"snippet":"PROPERTY_HINT_FILE","displayText":"PROPERTY_HINT_FILE","type":"constant","leftLabel":"9","description":" String property is a file (so pop up a file dialog when edited). Hint string can be a set of wildcards like \"*.doc\". "},{"snippet":"PROPERTY_HINT_NONE","displayText":"PROPERTY_HINT_NONE","type":"constant","leftLabel":"0","description":" No hint for edited property. "},{"snippet":"PARAM_HUE_VARIATION","displayText":"PARAM_HUE_VARIATION","type":"constant","leftLabel":"13","description":" "},{"snippet":"PARAM_IMPULSE_CLAMP","displayText":"PARAM_IMPULSE_CLAMP","type":"constant","leftLabel":"2","description":" "},{"snippet":"PARAM_SPIN_VELOCITY","displayText":"PARAM_SPIN_VELOCITY","type":"constant","leftLabel":"3","description":" "},{"snippet":"PARTICLE_FINAL_SIZE","displayText":"PARTICLE_FINAL_SIZE","type":"constant","leftLabel":"10","description":" "},{"snippet":"PRIMITIVE_LINE_LOOP","displayText":"PRIMITIVE_LINE_LOOP","type":"constant","leftLabel":"3","description":" "},{"snippet":"PRIMITIVE_TRIANGLES","displayText":"PRIMITIVE_TRIANGLES","type":"constant","leftLabel":"4","description":" "},{"snippet":"PROPERTY_HINT_FLAGS","displayText":"PROPERTY_HINT_FLAGS","type":"constant","leftLabel":"7","description":" Property hint for a bitmask description, for bits 0,1,2,3 and 5 the hint would be like \"Bit0,Bit1,Bit2,Bit3,,Bit5\". Valid only for integers. "},{"snippet":"PROPERTY_HINT_RANGE","displayText":"PROPERTY_HINT_RANGE","type":"constant","leftLabel":"1","description":" Hints that the string is a range, defined as \"min,max\" or \"min,max,step\". This is valid for integers and floats. "},{"snippet":"PARAM_LIMIT_SOFTNESS","displayText":"PARAM_LIMIT_SOFTNESS","type":"constant","leftLabel":"4","description":" "},{"snippet":"PARAM_LINEAR_DAMPING","displayText":"PARAM_LINEAR_DAMPING","type":"constant","leftLabel":"4","description":" "},{"snippet":"PRIMITIVE_LINE_STRIP","displayText":"PRIMITIVE_LINE_STRIP","type":"constant","leftLabel":"2","description":" Render array as line strip. "},{"snippet":"PROPERTY_HINT_LENGTH","displayText":"PROPERTY_HINT_LENGTH","type":"constant","leftLabel":"5","description":" "},{"snippet":"PARAM_ANGULAR_DAMPING","displayText":"PARAM_ANGULAR_DAMPING","type":"constant","leftLabel":"8","description":" "},{"snippet":"PARAM_LINEAR_VELOCITY","displayText":"PARAM_LINEAR_VELOCITY","type":"constant","leftLabel":"2","description":" "},{"snippet":"PARAM_SHADOW_Z_OFFSET","displayText":"PARAM_SHADOW_Z_OFFSET","type":"constant","leftLabel":"6","description":" "},{"snippet":"PARTICLE_INITIAL_SIZE","displayText":"PARTICLE_INITIAL_SIZE","type":"constant","leftLabel":"9","description":" "},{"snippet":"PROJECTION_ORTHOGONAL","displayText":"PROJECTION_ORTHOGONAL","type":"constant","leftLabel":"1","description":" Orthogonal Projection (objects remain the same size on the screen no matter how far away they are). "},{"snippet":"PROPERTY_USAGE_EDITOR","displayText":"PROPERTY_USAGE_EDITOR","type":"constant","leftLabel":"2","description":" Property will be visible in editor (default). "},{"snippet":"PARAM_GRAVITY_STRENGTH","displayText":"PARAM_GRAVITY_STRENGTH","type":"constant","leftLabel":"6","description":" "},{"snippet":"PARAM_LIMIT_RELAXATION","displayText":"PARAM_LIMIT_RELAXATION","type":"constant","leftLabel":"5","description":" "},{"snippet":"PARAM_SHADOW_DARKENING","displayText":"PARAM_SHADOW_DARKENING","type":"constant","leftLabel":"5","description":" "},{"snippet":"PARAM_SPOT_ATTENUATION","displayText":"PARAM_SPOT_ATTENUATION","type":"constant","leftLabel":"4","description":" "},{"snippet":"PARAM_TANGENTIAL_ACCEL","displayText":"PARAM_TANGENTIAL_ACCEL","type":"constant","leftLabel":"8","description":" "},{"snippet":"PARTICLE_INITIAL_ANGLE","displayText":"PARTICLE_INITIAL_ANGLE","type":"constant","leftLabel":"11","description":" "},{"snippet":"PRIMITIVE_TRIANGLE_FAN","displayText":"PRIMITIVE_TRIANGLE_FAN","type":"constant","leftLabel":"6","description":" "},{"snippet":"PROJECTION_PERSPECTIVE","displayText":"PROJECTION_PERSPECTIVE","type":"constant","leftLabel":"0","description":" Perspective Projection (object's size on the screen becomes smaller when far away). "},{"snippet":"PROPERTY_USAGE_DEFAULT","displayText":"PROPERTY_USAGE_DEFAULT","type":"constant","leftLabel":"7","description":" Default usage (storage and editor). "},{"snippet":"PROPERTY_USAGE_NETWORK","displayText":"PROPERTY_USAGE_NETWORK","type":"constant","leftLabel":"4","description":" "},{"snippet":"PROPERTY_USAGE_STORAGE","displayText":"PROPERTY_USAGE_STORAGE","type":"constant","leftLabel":"1","description":" Property will be used as storage (default). "},{"snippet":"PARAM_GRAVITY_DIRECTION","displayText":"PARAM_GRAVITY_DIRECTION","type":"constant","leftLabel":"5","description":" "},{"snippet":"PARAM_MOTOR_MAX_IMPULSE","displayText":"PARAM_MOTOR_MAX_IMPULSE","type":"constant","leftLabel":"7","description":" "},{"snippet":"PHYSICS_2D_ISLAND_COUNT","displayText":"PHYSICS_2D_ISLAND_COUNT","type":"constant","leftLabel":"23","description":" "},{"snippet":"PHYSICS_3D_ISLAND_COUNT","displayText":"PHYSICS_3D_ISLAND_COUNT","type":"constant","leftLabel":"26","description":" "},{"snippet":"PIN_JOINT_IMPULSE_CLAMP","displayText":"PIN_JOINT_IMPULSE_CLAMP","type":"constant","leftLabel":"2","description":" "},{"snippet":"PROPERTY_HINT_ALL_FLAGS","displayText":"PROPERTY_HINT_ALL_FLAGS","type":"constant","leftLabel":"8","description":" Property hint for a bitmask description that covers all 32 bits. Valid only for integers. "},{"snippet":"PROPERTY_HINT_EXP_RANGE","displayText":"PROPERTY_HINT_EXP_RANGE","type":"constant","leftLabel":"2","description":" Hints that the string is an exponential range, defined as \"min,max\" or \"min,max,step\". This is valid for integers and floats. "},{"snippet":"PROPERTY_HINT_KEY_ACCEL","displayText":"PROPERTY_HINT_KEY_ACCEL","type":"constant","leftLabel":"6","description":" "},{"snippet":"PARAM_LINEAR_LIMIT_LOWER","displayText":"PARAM_LINEAR_LIMIT_LOWER","type":"constant","leftLabel":"1","description":" "},{"snippet":"PARAM_LINEAR_LIMIT_UPPER","displayText":"PARAM_LINEAR_LIMIT_UPPER","type":"constant","leftLabel":"0","description":" "},{"snippet":"PARAM_LINEAR_LOWER_LIMIT","displayText":"PARAM_LINEAR_LOWER_LIMIT","type":"constant","leftLabel":"0","description":" "},{"snippet":"PARAM_LINEAR_RESTITUTION","displayText":"PARAM_LINEAR_RESTITUTION","type":"constant","leftLabel":"3","description":" "},{"snippet":"PARAM_LINEAR_UPPER_LIMIT","displayText":"PARAM_LINEAR_UPPER_LIMIT","type":"constant","leftLabel":"1","description":" "},{"snippet":"PARTICLE_LINEAR_VELOCITY","displayText":"PARTICLE_LINEAR_VELOCITY","type":"constant","leftLabel":"3","description":" "},{"snippet":"PRIMITIVE_TRIANGLE_STRIP","displayText":"PRIMITIVE_TRIANGLE_STRIP","type":"constant","leftLabel":"5","description":" Render array as triangle strips. "},{"snippet":"PROPERTY_HINT_EXP_EASING","displayText":"PROPERTY_HINT_EXP_EASING","type":"constant","leftLabel":"4","description":" "},{"snippet":"PROPERTY_HINT_GLOBAL_DIR","displayText":"PROPERTY_HINT_GLOBAL_DIR","type":"constant","leftLabel":"12","description":" "},{"snippet":"PARAM_ANGULAR_FORCE_LIMIT","displayText":"PARAM_ANGULAR_FORCE_LIMIT","type":"constant","leftLabel":"10","description":" "},{"snippet":"PARAM_ANGULAR_LIMIT_LOWER","displayText":"PARAM_ANGULAR_LIMIT_LOWER","type":"constant","leftLabel":"12","description":" "},{"snippet":"PARAM_ANGULAR_LIMIT_UPPER","displayText":"PARAM_ANGULAR_LIMIT_UPPER","type":"constant","leftLabel":"11","description":" "},{"snippet":"PARAM_ANGULAR_LOWER_LIMIT","displayText":"PARAM_ANGULAR_LOWER_LIMIT","type":"constant","leftLabel":"5","description":" "},{"snippet":"PARAM_ANGULAR_RESTITUTION","displayText":"PARAM_ANGULAR_RESTITUTION","type":"constant","leftLabel":"9","description":" "},{"snippet":"PARAM_ANGULAR_UPPER_LIMIT","displayText":"PARAM_ANGULAR_UPPER_LIMIT","type":"constant","leftLabel":"6","description":" "},{"snippet":"PARTICLE_ANGULAR_VELOCITY","displayText":"PARTICLE_ANGULAR_VELOCITY","type":"constant","leftLabel":"4","description":" "},{"snippet":"PHYSICS_2D_ACTIVE_OBJECTS","displayText":"PHYSICS_2D_ACTIVE_OBJECTS","type":"constant","leftLabel":"21","description":" "},{"snippet":"PHYSICS_3D_ACTIVE_OBJECTS","displayText":"PHYSICS_3D_ACTIVE_OBJECTS","type":"constant","leftLabel":"24","description":" "},{"snippet":"PROPERTY_HINT_GLOBAL_FILE","displayText":"PROPERTY_HINT_GLOBAL_FILE","type":"constant","leftLabel":"11","description":" "},{"snippet":"PARAM_LINEAR_LIMIT_DAMPING","displayText":"PARAM_LINEAR_LIMIT_DAMPING","type":"constant","leftLabel":"4","description":" "},{"snippet":"PHYSICS_2D_COLLISION_PAIRS","displayText":"PHYSICS_2D_COLLISION_PAIRS","type":"constant","leftLabel":"22","description":" "},{"snippet":"PHYSICS_3D_COLLISION_PAIRS","displayText":"PHYSICS_3D_COLLISION_PAIRS","type":"constant","leftLabel":"25","description":" "},{"snippet":"PARAM_ANGULAR_LIMIT_DAMPING","displayText":"PARAM_ANGULAR_LIMIT_DAMPING","type":"constant","leftLabel":"15","description":" "},{"snippet":"PARAM_EMISSION_CONE_DEGREES","displayText":"PARAM_EMISSION_CONE_DEGREES","type":"constant","leftLabel":"5","description":" "},{"snippet":"PARAM_LINEAR_LIMIT_SOFTNESS","displayText":"PARAM_LINEAR_LIMIT_SOFTNESS","type":"constant","leftLabel":"2","description":" "},{"snippet":"PARAM_LINEAR_MOTION_DAMPING","displayText":"PARAM_LINEAR_MOTION_DAMPING","type":"constant","leftLabel":"7","description":" "},{"snippet":"PARAM_MOTOR_TARGET_VELOCITY","displayText":"PARAM_MOTOR_TARGET_VELOCITY","type":"constant","leftLabel":"6","description":" "},{"snippet":"PARTICLE_HEIGHT_SPEED_SCALE","displayText":"PARTICLE_HEIGHT_SPEED_SCALE","type":"constant","leftLabel":"13","description":" "},{"snippet":"PROPERTY_HINT_RESOURCE_TYPE","displayText":"PROPERTY_HINT_RESOURCE_TYPE","type":"constant","leftLabel":"13","description":" String property is a resource, so open the resource popup menu when edited. "},{"snippet":"PARAM_ANGULAR_LIMIT_SOFTNESS","displayText":"PARAM_ANGULAR_LIMIT_SOFTNESS","type":"constant","leftLabel":"7","description":" "},{"snippet":"PARAM_ANGULAR_MOTION_DAMPING","displayText":"PARAM_ANGULAR_MOTION_DAMPING","type":"constant","leftLabel":"18","description":" "},{"snippet":"PARAM_LINEAR_MOTION_SOFTNESS","displayText":"PARAM_LINEAR_MOTION_SOFTNESS","type":"constant","leftLabel":"5","description":" "},{"snippet":"PARTICLE_LINEAR_ACCELERATION","displayText":"PARTICLE_LINEAR_ACCELERATION","type":"constant","leftLabel":"5","description":" "},{"snippet":"PARTICLE_RADIAL_ACCELERATION","displayText":"PARTICLE_RADIAL_ACCELERATION","type":"constant","leftLabel":"6","description":" "},{"snippet":"PROPERTY_HINT_COLOR_NO_ALPHA","displayText":"PROPERTY_HINT_COLOR_NO_ALPHA","type":"constant","leftLabel":"15","description":" "},{"snippet":"PROPERTY_HINT_MULTILINE_TEXT","displayText":"PROPERTY_HINT_MULTILINE_TEXT","type":"constant","leftLabel":"14","description":" "},{"snippet":"PARAM_ANGULAR_MOTION_SOFTNESS","displayText":"PARAM_ANGULAR_MOTION_SOFTNESS","type":"constant","leftLabel":"16","description":" "},{"snippet":"PARAM_ATTENUATION_DISTANCE_EXP","displayText":"PARAM_ATTENUATION_DISTANCE_EXP","type":"constant","leftLabel":"4","description":" "},{"snippet":"PARAM_ATTENUATION_MAX_DISTANCE","displayText":"PARAM_ATTENUATION_MAX_DISTANCE","type":"constant","leftLabel":"3","description":" "},{"snippet":"PARAM_ATTENUATION_MIN_DISTANCE","displayText":"PARAM_ATTENUATION_MIN_DISTANCE","type":"constant","leftLabel":"2","description":" "},{"snippet":"PARAM_LINEAR_LIMIT_RESTITUTION","displayText":"PARAM_LINEAR_LIMIT_RESTITUTION","type":"constant","leftLabel":"3","description":" "},{"snippet":"PARAM_ANGULAR_LIMIT_RESTITUTION","displayText":"PARAM_ANGULAR_LIMIT_RESTITUTION","type":"constant","leftLabel":"14","description":" "},{"snippet":"PARAM_ANGULAR_MOTOR_FORCE_LIMIT","displayText":"PARAM_ANGULAR_MOTOR_FORCE_LIMIT","type":"constant","leftLabel":"13","description":" "},{"snippet":"PARAM_LINEAR_MOTION_RESTITUTION","displayText":"PARAM_LINEAR_MOTION_RESTITUTION","type":"constant","leftLabel":"6","description":" "},{"snippet":"PARAM_LINEAR_ORTHOGONAL_DAMPING","displayText":"PARAM_LINEAR_ORTHOGONAL_DAMPING","type":"constant","leftLabel":"10","description":" "},{"snippet":"PARAM_ANGULAR_MOTION_RESTITUTION","displayText":"PARAM_ANGULAR_MOTION_RESTITUTION","type":"constant","leftLabel":"17","description":" "},{"snippet":"PARAM_ANGULAR_ORTHOGONAL_DAMPING","displayText":"PARAM_ANGULAR_ORTHOGONAL_DAMPING","type":"constant","leftLabel":"21","description":" "},{"snippet":"PARAM_LINEAR_ORTHOGONAL_SOFTNESS","displayText":"PARAM_LINEAR_ORTHOGONAL_SOFTNESS","type":"constant","leftLabel":"8","description":" "},{"snippet":"PARTICLE_TANGENTIAL_ACCELERATION","displayText":"PARTICLE_TANGENTIAL_ACCELERATION","type":"constant","leftLabel":"7","description":" "},{"snippet":"PARAM_ANGULAR_ORTHOGONAL_SOFTNESS","displayText":"PARAM_ANGULAR_ORTHOGONAL_SOFTNESS","type":"constant","leftLabel":"19","description":" "},{"snippet":"PARAM_EMISSION_CONE_ATTENUATION_DB","displayText":"PARAM_EMISSION_CONE_ATTENUATION_DB","type":"constant","leftLabel":"6","description":" "},{"snippet":"PROPERTY_HINT_IMAGE_COMPRESS_LOSSY","displayText":"PROPERTY_HINT_IMAGE_COMPRESS_LOSSY","type":"constant","leftLabel":"16","description":" "},{"snippet":"PARAM_ANGULAR_MOTOR_TARGET_VELOCITY","displayText":"PARAM_ANGULAR_MOTOR_TARGET_VELOCITY","type":"constant","leftLabel":"12","description":" "},{"snippet":"PARAM_LINEAR_ORTHOGONAL_RESTITUTION","displayText":"PARAM_LINEAR_ORTHOGONAL_RESTITUTION","type":"constant","leftLabel":"9","description":" "},{"snippet":"PARAM_ANGULAR_ORTHOGONAL_RESTITUTION","displayText":"PARAM_ANGULAR_ORTHOGONAL_RESTITUTION","type":"constant","leftLabel":"20","description":" "},{"snippet":"PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS","displayText":"PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS","type":"constant","leftLabel":"17","description":" "}],"M":[{"snippet":"MONTH_MAY","displayText":"MONTH_MAY","type":"constant","leftLabel":"4","description":" "},{"snippet":"MARGIN_TOP","displayText":"MARGIN_TOP","type":"constant","leftLabel":"1","description":" Top margin, used usually for [Control] or [StyleBox] derived classes. "},{"snippet":"METHOD_GET","displayText":"METHOD_GET","type":"constant","leftLabel":"0","description":" "},{"snippet":"METHOD_MAX","displayText":"METHOD_MAX","type":"constant","leftLabel":"8","description":" "},{"snippet":"METHOD_PUT","displayText":"METHOD_PUT","type":"constant","leftLabel":"3","description":" "},{"snippet":"MODE_RIGID","displayText":"MODE_RIGID","type":"constant","leftLabel":"0","description":" "},{"snippet":"MONTH_JULY","displayText":"MONTH_JULY","type":"constant","leftLabel":"6","description":" "},{"snippet":"MONTH_JUNE","displayText":"MONTH_JUNE","type":"constant","leftLabel":"5","description":" "},{"snippet":"MARGIN_LEFT","displayText":"MARGIN_LEFT","type":"constant","leftLabel":"0","description":" Left margin, used usually for [Control] or [StyleBox] derived classes. "},{"snippet":"MAX_CURSORS","displayText":"MAX_CURSORS","type":"constant","leftLabel":"8","description":" "},{"snippet":"METHOD_HEAD","displayText":"METHOD_HEAD","type":"constant","leftLabel":"1","description":" "},{"snippet":"METHOD_POST","displayText":"METHOD_POST","type":"constant","leftLabel":"2","description":" "},{"snippet":"MODE_CUSTOM","displayText":"MODE_CUSTOM","type":"constant","leftLabel":"2","description":" "},{"snippet":"MODE_OCTREE","displayText":"MODE_OCTREE","type":"constant","leftLabel":"0","description":" "},{"snippet":"MODE_SQUARE","displayText":"MODE_SQUARE","type":"constant","leftLabel":"0","description":" "},{"snippet":"MODE_STATIC","displayText":"MODE_STATIC","type":"constant","leftLabel":"1","description":" Static mode (does not move, can't be moved). "},{"snippet":"MONITOR_MAX","displayText":"MONITOR_MAX","type":"constant","leftLabel":"27","description":" "},{"snippet":"MONTH_APRIL","displayText":"MONTH_APRIL","type":"constant","leftLabel":"3","description":" "},{"snippet":"MONTH_MARCH","displayText":"MONTH_MARCH","type":"constant","leftLabel":"2","description":" "},{"snippet":"MARGIN_RIGHT","displayText":"MARGIN_RIGHT","type":"constant","leftLabel":"2","description":" Right margin, used usually for [Control] or [StyleBox] derived classes. "},{"snippet":"METHOD_TRACE","displayText":"METHOD_TRACE","type":"constant","leftLabel":"6","description":" "},{"snippet":"MONTH_AUGUST","displayText":"MONTH_AUGUST","type":"constant","leftLabel":"7","description":" "},{"snippet":"MOUSE_BUTTON","displayText":"MOUSE_BUTTON","type":"constant","leftLabel":"3","description":" "},{"snippet":"MOUSE_MOTION","displayText":"MOUSE_MOTION","type":"constant","leftLabel":"2","description":" "},{"snippet":"MARGIN_BOTTOM","displayText":"MARGIN_BOTTOM","type":"constant","leftLabel":"3","description":" Bottom margin, used usually for [Control] or [StyleBox] derived classes. "},{"snippet":"MEMORY_STATIC","displayText":"MEMORY_STATIC","type":"constant","leftLabel":"3","description":" "},{"snippet":"METHOD_DELETE","displayText":"METHOD_DELETE","type":"constant","leftLabel":"4","description":" "},{"snippet":"MODE_MATERIAL","displayText":"MODE_MATERIAL","type":"constant","leftLabel":"0","description":" "},{"snippet":"MODE_OPEN_DIR","displayText":"MODE_OPEN_DIR","type":"constant","leftLabel":"2","description":" The dialog functions as a folder selector, disallowing the selection of any file. "},{"snippet":"MONTH_JANUARY","displayText":"MONTH_JANUARY","type":"constant","leftLabel":"0","description":" "},{"snippet":"MONTH_OCTOBER","displayText":"MONTH_OCTOBER","type":"constant","leftLabel":"9","description":" "},{"snippet":"MEMORY_DYNAMIC","displayText":"MEMORY_DYNAMIC","type":"constant","leftLabel":"4","description":" "},{"snippet":"METHOD_CONNECT","displayText":"METHOD_CONNECT","type":"constant","leftLabel":"7","description":" "},{"snippet":"METHOD_OPTIONS","displayText":"METHOD_OPTIONS","type":"constant","leftLabel":"5","description":" "},{"snippet":"MODE_CHARACTER","displayText":"MODE_CHARACTER","type":"constant","leftLabel":"2","description":" Character body, can move but not rotate. "},{"snippet":"MODE_ISOMETRIC","displayText":"MODE_ISOMETRIC","type":"constant","leftLabel":"1","description":" "},{"snippet":"MODE_KINEMATIC","displayText":"MODE_KINEMATIC","type":"constant","leftLabel":"3","description":" "},{"snippet":"MODE_LIGHTMAPS","displayText":"MODE_LIGHTMAPS","type":"constant","leftLabel":"1","description":" "},{"snippet":"MODE_OPEN_FILE","displayText":"MODE_OPEN_FILE","type":"constant","leftLabel":"0","description":" The dialog allows the selection of one, and only one file. "},{"snippet":"MODE_SAVE_FILE","displayText":"MODE_SAVE_FILE","type":"constant","leftLabel":"3","description":" The dialog will warn when a file exists. "},{"snippet":"MONTH_DECEMBER","displayText":"MONTH_DECEMBER","type":"constant","leftLabel":"11","description":" "},{"snippet":"MONTH_FEBRUARY","displayText":"MONTH_FEBRUARY","type":"constant","leftLabel":"1","description":" "},{"snippet":"MONTH_NOVEMBER","displayText":"MONTH_NOVEMBER","type":"constant","leftLabel":"10","description":" "},{"snippet":"MODE_OPEN_FILES","displayText":"MODE_OPEN_FILES","type":"constant","leftLabel":"1","description":" The dialog allows the selection of multiple files. "},{"snippet":"MONTH_SEPTEMBER","displayText":"MONTH_SEPTEMBER","type":"constant","leftLabel":"8","description":" "},{"snippet":"MAX_COLOR_PHASES","displayText":"MAX_COLOR_PHASES","type":"constant","leftLabel":"4","description":" "},{"snippet":"MODE_CANVAS_ITEM","displayText":"MODE_CANVAS_ITEM","type":"constant","leftLabel":"1","description":" "},{"snippet":"MATERIAL_FLAG_MAX","displayText":"MATERIAL_FLAG_MAX","type":"constant","leftLabel":"7","description":" "},{"snippet":"MEMORY_STATIC_MAX","displayText":"MEMORY_STATIC_MAX","type":"constant","leftLabel":"5","description":" "},{"snippet":"MODE_POST_PROCESS","displayText":"MODE_POST_PROCESS","type":"constant","leftLabel":"2","description":" "},{"snippet":"MOUSE_MODE_HIDDEN","displayText":"MOUSE_MODE_HIDDEN","type":"constant","leftLabel":"1","description":" "},{"snippet":"MEMORY_DYNAMIC_MAX","displayText":"MEMORY_DYNAMIC_MAX","type":"constant","leftLabel":"6","description":" "},{"snippet":"MOUSE_MODE_VISIBLE","displayText":"MOUSE_MODE_VISIBLE","type":"constant","leftLabel":"0","description":" "},{"snippet":"MATERIAL_FLAG_ONTOP","displayText":"MATERIAL_FLAG_ONTOP","type":"constant","leftLabel":"4","description":" "},{"snippet":"MOUSE_MODE_CAPTURED","displayText":"MOUSE_MODE_CAPTURED","type":"constant","leftLabel":"2","description":" "},{"snippet":"MATERIAL_FLAG_VISIBLE","displayText":"MATERIAL_FLAG_VISIBLE","type":"constant","leftLabel":"0","description":" "},{"snippet":"MATERIAL_FLAG_UNSHADED","displayText":"MATERIAL_FLAG_UNSHADED","type":"constant","leftLabel":"3","description":" "},{"snippet":"MATERIAL_BLEND_MODE_ADD","displayText":"MATERIAL_BLEND_MODE_ADD","type":"constant","leftLabel":"1","description":" "},{"snippet":"MATERIAL_BLEND_MODE_MIX","displayText":"MATERIAL_BLEND_MODE_MIX","type":"constant","leftLabel":"0","description":" "},{"snippet":"MATERIAL_BLEND_MODE_MUL","displayText":"MATERIAL_BLEND_MODE_MUL","type":"constant","leftLabel":"3","description":" "},{"snippet":"MATERIAL_BLEND_MODE_SUB","displayText":"MATERIAL_BLEND_MODE_SUB","type":"constant","leftLabel":"2","description":" "},{"snippet":"MAX_PARTICLE_ATTRACTORS","displayText":"MAX_PARTICLE_ATTRACTORS","type":"constant","leftLabel":"4","description":" "},{"snippet":"MAX_PARTICLE_COLOR_PHASES","displayText":"MAX_PARTICLE_COLOR_PHASES","type":"constant","leftLabel":"4","description":" "},{"snippet":"MEMORY_MESSAGE_BUFFER_MAX","displayText":"MEMORY_MESSAGE_BUFFER_MAX","type":"constant","leftLabel":"7","description":" "},{"snippet":"MATERIAL_FLAG_DOUBLE_SIDED","displayText":"MATERIAL_FLAG_DOUBLE_SIDED","type":"constant","leftLabel":"1","description":" "},{"snippet":"MATERIAL_FLAG_INVERT_FACES","displayText":"MATERIAL_FLAG_INVERT_FACES","type":"constant","leftLabel":"2","description":" "}],"V":[{"snippet":"VAR_MAX","displayText":"VAR_MAX","type":"constant","leftLabel":"14","description":" "},{"snippet":"VAR_DRAG","displayText":"VAR_DRAG","type":"constant","leftLabel":"6","description":" "},{"snippet":"VERTICAL","displayText":"VERTICAL","type":"constant","leftLabel":"1","description":" General vertical alignment, used usually for [Separator], [ScrollBar], [Slider], etc. "},{"snippet":"VALIGN_TOP","displayText":"VALIGN_TOP","type":"constant","leftLabel":"0","description":" Align the whole text to the top. "},{"snippet":"VAR_HEIGHT","displayText":"VAR_HEIGHT","type":"constant","leftLabel":"12","description":" "},{"snippet":"VAR_SPREAD","displayText":"VAR_SPREAD","type":"constant","leftLabel":"1","description":" "},{"snippet":"VALIGN_FILL","displayText":"VALIGN_FILL","type":"constant","leftLabel":"3","description":" Align the whole text by spreading the rows. "},{"snippet":"VAR_GRAVITY","displayText":"VAR_GRAVITY","type":"constant","leftLabel":"2","description":" "},{"snippet":"VAR_LIFETIME","displayText":"VAR_LIFETIME","type":"constant","leftLabel":"0","description":" "},{"snippet":"VALIGN_BOTTOM","displayText":"VALIGN_BOTTOM","type":"constant","leftLabel":"2","description":" Align the whole text to the bottom. "},{"snippet":"VALIGN_CENTER","displayText":"VALIGN_CENTER","type":"constant","leftLabel":"1","description":" Vertical center alignment, usually for text-derived classes. "},{"snippet":"VAR_FINAL_SIZE","displayText":"VAR_FINAL_SIZE","type":"constant","leftLabel":"10","description":" "},{"snippet":"VAR_INITIAL_SIZE","displayText":"VAR_INITIAL_SIZE","type":"constant","leftLabel":"9","description":" "},{"snippet":"VAR_INITIAL_ANGLE","displayText":"VAR_INITIAL_ANGLE","type":"constant","leftLabel":"11","description":" "},{"snippet":"VAR_LINEAR_VELOCITY","displayText":"VAR_LINEAR_VELOCITY","type":"constant","leftLabel":"3","description":" "},{"snippet":"VAR_ANGULAR_VELOCITY","displayText":"VAR_ANGULAR_VELOCITY","type":"constant","leftLabel":"4","description":" "},{"snippet":"VAR_HEIGHT_SPEED_SCALE","displayText":"VAR_HEIGHT_SPEED_SCALE","type":"constant","leftLabel":"13","description":" "},{"snippet":"VAR_LINEAR_ACCELERATION","displayText":"VAR_LINEAR_ACCELERATION","type":"constant","leftLabel":"5","description":" "},{"snippet":"VAR_TANGENTIAL_ACCELERATION","displayText":"VAR_TANGENTIAL_ACCELERATION","type":"constant","leftLabel":"7","description":" "}],"H":[{"snippet":"HORIZONTAL","displayText":"HORIZONTAL","type":"constant","leftLabel":"0","description":" General horizontal alignment, used usually for [Separator], [ScrollBar], [Slider], etc. "},{"snippet":"HALIGN_LEFT","displayText":"HALIGN_LEFT","type":"constant","leftLabel":"0","description":" Horizontal left alignment, usually for text-derived classes. "},{"snippet":"HALIGN_RIGHT","displayText":"HALIGN_RIGHT","type":"constant","leftLabel":"2","description":" Horizontal right alignment, usually for text-derived classes. "},{"snippet":"HALF_OFFSET_X","displayText":"HALF_OFFSET_X","type":"constant","leftLabel":"0","description":" "},{"snippet":"HALF_OFFSET_Y","displayText":"HALF_OFFSET_Y","type":"constant","leftLabel":"1","description":" "},{"snippet":"HALIGN_CENTER","displayText":"HALIGN_CENTER","type":"constant","leftLabel":"1","description":" Horizontal center alignment, usually for text-derived classes. "},{"snippet":"HINGE_JOINT_BIAS","displayText":"HINGE_JOINT_BIAS","type":"constant","leftLabel":"0","description":" "},{"snippet":"HALF_OFFSET_DISABLED","displayText":"HALF_OFFSET_DISABLED","type":"constant","leftLabel":"2","description":" "},{"snippet":"HINGE_JOINT_LIMIT_BIAS","displayText":"HINGE_JOINT_LIMIT_BIAS","type":"constant","leftLabel":"3","description":" "},{"snippet":"HINGE_JOINT_LIMIT_LOWER","displayText":"HINGE_JOINT_LIMIT_LOWER","type":"constant","leftLabel":"2","description":" "},{"snippet":"HINGE_JOINT_LIMIT_UPPER","displayText":"HINGE_JOINT_LIMIT_UPPER","type":"constant","leftLabel":"1","description":" "},{"snippet":"HINGE_JOINT_FLAG_USE_LIMIT","displayText":"HINGE_JOINT_FLAG_USE_LIMIT","type":"constant","leftLabel":"0","description":" "},{"snippet":"HINGE_JOINT_LIMIT_SOFTNESS","displayText":"HINGE_JOINT_LIMIT_SOFTNESS","type":"constant","leftLabel":"4","description":" "},{"snippet":"HINGE_JOINT_LIMIT_RELAXATION","displayText":"HINGE_JOINT_LIMIT_RELAXATION","type":"constant","leftLabel":"5","description":" "},{"snippet":"HINGE_JOINT_FLAG_ENABLE_MOTOR","displayText":"HINGE_JOINT_FLAG_ENABLE_MOTOR","type":"constant","leftLabel":"1","description":" "},{"snippet":"HINGE_JOINT_MOTOR_MAX_IMPULSE","displayText":"HINGE_JOINT_MOTOR_MAX_IMPULSE","type":"constant","leftLabel":"7","description":" "},{"snippet":"HINGE_JOINT_MOTOR_TARGET_VELOCITY","displayText":"HINGE_JOINT_MOTOR_TARGET_VELOCITY","type":"constant","leftLabel":"6","description":" "}],"S":[{"snippet":"SPKEY","displayText":"SPKEY","type":"constant","leftLabel":"16777216","description":" Scancodes with this bit applied are non printable. "},{"snippet":"SIDE_TOP","displayText":"SIDE_TOP","type":"constant","leftLabel":"3","description":" "},{"snippet":"SHAPE_BOX","displayText":"SHAPE_BOX","type":"constant","leftLabel":"3","description":" "},{"snippet":"SHAPE_RAY","displayText":"SHAPE_RAY","type":"constant","leftLabel":"1","description":" "},{"snippet":"SIDE_BACK","displayText":"SIDE_BACK","type":"constant","leftLabel":"5","description":" "},{"snippet":"SIDE_LEFT","displayText":"SIDE_LEFT","type":"constant","leftLabel":"0","description":" "},{"snippet":"SIZE_FILL","displayText":"SIZE_FILL","type":"constant","leftLabel":"2","description":" "},{"snippet":"SELECT_ROW","displayText":"SELECT_ROW","type":"constant","leftLabel":"1","description":" "},{"snippet":"SHAPE_LINE","displayText":"SHAPE_LINE","type":"constant","leftLabel":"0","description":" "},{"snippet":"SIDE_FRONT","displayText":"SIDE_FRONT","type":"constant","leftLabel":"4","description":" "},{"snippet":"SIDE_RIGHT","displayText":"SIDE_RIGHT","type":"constant","leftLabel":"1","description":" "},{"snippet":"SCREEN_DRAG","displayText":"SCREEN_DRAG","type":"constant","leftLabel":"7","description":" "},{"snippet":"SHAPE_PLANE","displayText":"SHAPE_PLANE","type":"constant","leftLabel":"0","description":" "},{"snippet":"SIDE_BOTTOM","displayText":"SIDE_BOTTOM","type":"constant","leftLabel":"2","description":" "},{"snippet":"SIZE_EXPAND","displayText":"SIZE_EXPAND","type":"constant","leftLabel":"1","description":" "},{"snippet":"STATUS_BODY","displayText":"STATUS_BODY","type":"constant","leftLabel":"7","description":" "},{"snippet":"STATUS_NONE","displayText":"STATUS_NONE","type":"constant","leftLabel":"0","description":" "},{"snippet":"STORAGE_RAW","displayText":"STORAGE_RAW","type":"constant","leftLabel":"0","description":" "},{"snippet":"SCREEN_TOUCH","displayText":"SCREEN_TOUCH","type":"constant","leftLabel":"6","description":" "},{"snippet":"SELECT_MULTI","displayText":"SELECT_MULTI","type":"constant","leftLabel":"2","description":" "},{"snippet":"SHAPE_CIRCLE","displayText":"SHAPE_CIRCLE","type":"constant","leftLabel":"3","description":" "},{"snippet":"SHAPE_CUSTOM","displayText":"SHAPE_CUSTOM","type":"constant","leftLabel":"8","description":" "},{"snippet":"SHAPE_SPHERE","displayText":"SHAPE_SPHERE","type":"constant","leftLabel":"2","description":" "},{"snippet":"STATUS_ERROR","displayText":"STATUS_ERROR","type":"constant","leftLabel":"3","description":" "},{"snippet":"SELECT_SINGLE","displayText":"SELECT_SINGLE","type":"constant","leftLabel":"0","description":" "},{"snippet":"SHAPE_CAPSULE","displayText":"SHAPE_CAPSULE","type":"constant","leftLabel":"5","description":" "},{"snippet":"SHAPE_SEGMENT","displayText":"SHAPE_SEGMENT","type":"constant","leftLabel":"2","description":" "},{"snippet":"SHADER_MATERIAL","displayText":"SHADER_MATERIAL","type":"constant","leftLabel":"0","description":" "},{"snippet":"SHAPE_HEIGHTMAP","displayText":"SHAPE_HEIGHTMAP","type":"constant","leftLabel":"7","description":" "},{"snippet":"SHAPE_RECTANGLE","displayText":"SHAPE_RECTANGLE","type":"constant","leftLabel":"4","description":" "},{"snippet":"STRETCH_MODE_2D","displayText":"STRETCH_MODE_2D","type":"constant","leftLabel":"1","description":" "},{"snippet":"SAMPLE_LOOP_NONE","displayText":"SAMPLE_LOOP_NONE","type":"constant","leftLabel":"0","description":" Sample does not loop. "},{"snippet":"SEARCH_BACKWARDS","displayText":"SEARCH_BACKWARDS","type":"constant","leftLabel":"4","description":" Search from end to begining. "},{"snippet":"SIZE_EXPAND_FILL","displayText":"SIZE_EXPAND_FILL","type":"constant","leftLabel":"3","description":" "},{"snippet":"SLIDER_JOINT_MAX","displayText":"SLIDER_JOINT_MAX","type":"constant","leftLabel":"22","description":" "},{"snippet":"STATUS_CONNECTED","displayText":"STATUS_CONNECTED","type":"constant","leftLabel":"2","description":" "},{"snippet":"STATUS_RESOLVING","displayText":"STATUS_RESOLVING","type":"constant","leftLabel":"1","description":" "},{"snippet":"SEARCH_MATCH_CASE","displayText":"SEARCH_MATCH_CASE","type":"constant","leftLabel":"1","description":" Match case when searching. "},{"snippet":"SHADOW_ORTHOGONAL","displayText":"SHADOW_ORTHOGONAL","type":"constant","leftLabel":"0","description":" "},{"snippet":"STATUS_CONNECTING","displayText":"STATUS_CONNECTING","type":"constant","leftLabel":"3","description":" "},{"snippet":"STATUS_REQUESTING","displayText":"STATUS_REQUESTING","type":"constant","leftLabel":"6","description":" "},{"snippet":"SAMPLE_FORMAT_PCM8","displayText":"SAMPLE_FORMAT_PCM8","type":"constant","leftLabel":"0","description":" Sample format is 8 bits, signed. "},{"snippet":"SEARCH_WHOLE_WORDS","displayText":"SEARCH_WHOLE_WORDS","type":"constant","leftLabel":"2","description":" Match whole words when searching. "},{"snippet":"SHADOW_PERSPECTIVE","displayText":"SHADOW_PERSPECTIVE","type":"constant","leftLabel":"1","description":" "},{"snippet":"SAMPLE_FORMAT_PCM16","displayText":"SAMPLE_FORMAT_PCM16","type":"constant","leftLabel":"1","description":" Sample format is 16 bits, signed. "},{"snippet":"SAMPLE_LOOP_FORWARD","displayText":"SAMPLE_LOOP_FORWARD","type":"constant","leftLabel":"1","description":" Sample loops in forward mode. "},{"snippet":"SHADER_POST_PROCESS","displayText":"SHADER_POST_PROCESS","type":"constant","leftLabel":"2","description":" "},{"snippet":"STATUS_CANT_CONNECT","displayText":"STATUS_CANT_CONNECT","type":"constant","leftLabel":"4","description":" "},{"snippet":"STATUS_CANT_RESOLVE","displayText":"STATUS_CANT_RESOLVE","type":"constant","leftLabel":"2","description":" "},{"snippet":"STATUS_DISCONNECTED","displayText":"STATUS_DISCONNECTED","type":"constant","leftLabel":"0","description":" "},{"snippet":"STRETCH_ASPECT_KEEP","displayText":"STRETCH_ASPECT_KEEP","type":"constant","leftLabel":"1","description":" "},{"snippet":"SHAPE_CONVEX_POLYGON","displayText":"SHAPE_CONVEX_POLYGON","type":"constant","leftLabel":"6","description":" "},{"snippet":"SAMPLE_LOOP_PING_PONG","displayText":"SAMPLE_LOOP_PING_PONG","type":"constant","leftLabel":"2","description":" Sample loops in a bidirectional way. "},{"snippet":"SHAPE_CONCAVE_POLYGON","displayText":"SHAPE_CONCAVE_POLYGON","type":"constant","leftLabel":"6","description":" "},{"snippet":"STRETCH_ASPECT_IGNORE","displayText":"STRETCH_ASPECT_IGNORE","type":"constant","leftLabel":"0","description":" "},{"snippet":"STRETCH_MODE_DISABLED","displayText":"STRETCH_MODE_DISABLED","type":"constant","leftLabel":"0","description":" "},{"snippet":"STRETCH_MODE_VIEWPORT","displayText":"STRETCH_MODE_VIEWPORT","type":"constant","leftLabel":"2","description":" "},{"snippet":"STORAGE_COMPRESS_LOSSY","displayText":"STORAGE_COMPRESS_LOSSY","type":"constant","leftLabel":"1","description":" "},{"snippet":"SAMPLE_FORMAT_IMA_ADPCM","displayText":"SAMPLE_FORMAT_IMA_ADPCM","type":"constant","leftLabel":"2","description":" Sample format is IMA-ADPCM compressed. "},{"snippet":"SCENARIO_DEBUG_DISABLED","displayText":"SCENARIO_DEBUG_DISABLED","type":"constant","leftLabel":"0","description":" "},{"snippet":"SCENARIO_DEBUG_OVERDRAW","displayText":"SCENARIO_DEBUG_OVERDRAW","type":"constant","leftLabel":"2","description":" "},{"snippet":"STATUS_CONNECTION_ERROR","displayText":"STATUS_CONNECTION_ERROR","type":"constant","leftLabel":"8","description":" "},{"snippet":"SCENARIO_DEBUG_WIREFRAME","displayText":"SCENARIO_DEBUG_WIREFRAME","type":"constant","leftLabel":"1","description":" "},{"snippet":"SHADOW_PARALLEL_2_SPLITS","displayText":"SHADOW_PARALLEL_2_SPLITS","type":"constant","leftLabel":"2","description":" "},{"snippet":"SHADOW_PARALLEL_4_SPLITS","displayText":"SHADOW_PARALLEL_4_SPLITS","type":"constant","leftLabel":"3","description":" "},{"snippet":"SHADOW_PARAM_MAX_DISTANCE","displayText":"SHADOW_PARAM_MAX_DISTANCE","type":"constant","leftLabel":"0","description":" "},{"snippet":"STORAGE_COMPRESS_LOSSLESS","displayText":"STORAGE_COMPRESS_LOSSLESS","type":"constant","leftLabel":"2","description":" "},{"snippet":"STRETCH_ASPECT_KEEP_WIDTH","displayText":"STRETCH_ASPECT_KEEP_WIDTH","type":"constant","leftLabel":"2","description":" "},{"snippet":"STATUS_SSL_HANDSHAKE_ERROR","displayText":"STATUS_SSL_HANDSHAKE_ERROR","type":"constant","leftLabel":"9","description":" "},{"snippet":"STRETCH_ASPECT_KEEP_HEIGHT","displayText":"STRETCH_ASPECT_KEEP_HEIGHT","type":"constant","leftLabel":"3","description":" "},{"snippet":"STATUS_ERROR_NO_CERTIFICATE","displayText":"STATUS_ERROR_NO_CERTIFICATE","type":"constant","leftLabel":"2","description":" "},{"snippet":"SHADOW_PARAM_PSSM_SPLIT_WEIGHT","displayText":"SHADOW_PARAM_PSSM_SPLIT_WEIGHT","type":"constant","leftLabel":"1","description":" "},{"snippet":"STATUS_ERROR_HOSTNAME_MISMATCH","displayText":"STATUS_ERROR_HOSTNAME_MISMATCH","type":"constant","leftLabel":"3","description":" "},{"snippet":"SHADOW_PARAM_PSSM_ZOFFSET_SCALE","displayText":"SHADOW_PARAM_PSSM_ZOFFSET_SCALE","type":"constant","leftLabel":"2","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_LIMIT_LOWER","displayText":"SLIDER_JOINT_LINEAR_LIMIT_LOWER","type":"constant","leftLabel":"1","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_LIMIT_UPPER","displayText":"SLIDER_JOINT_LINEAR_LIMIT_UPPER","type":"constant","leftLabel":"0","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_LIMIT_LOWER","displayText":"SLIDER_JOINT_ANGULAR_LIMIT_LOWER","type":"constant","leftLabel":"12","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_LIMIT_UPPER","displayText":"SLIDER_JOINT_ANGULAR_LIMIT_UPPER","type":"constant","leftLabel":"11","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_LIMIT_DAMPING","displayText":"SLIDER_JOINT_LINEAR_LIMIT_DAMPING","type":"constant","leftLabel":"4","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_LIMIT_DAMPING","displayText":"SLIDER_JOINT_ANGULAR_LIMIT_DAMPING","type":"constant","leftLabel":"15","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS","displayText":"SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS","type":"constant","leftLabel":"2","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_MOTION_DAMPING","displayText":"SLIDER_JOINT_LINEAR_MOTION_DAMPING","type":"constant","leftLabel":"7","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS","displayText":"SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS","type":"constant","leftLabel":"13","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_MOTION_DAMPING","displayText":"SLIDER_JOINT_ANGULAR_MOTION_DAMPING","type":"constant","leftLabel":"18","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_MOTION_SOFTNESS","displayText":"SLIDER_JOINT_LINEAR_MOTION_SOFTNESS","type":"constant","leftLabel":"5","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS","displayText":"SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS","type":"constant","leftLabel":"16","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION","displayText":"SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION","type":"constant","leftLabel":"3","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION","displayText":"SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION","type":"constant","leftLabel":"14","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_MOTION_RESTITUTION","displayText":"SLIDER_JOINT_LINEAR_MOTION_RESTITUTION","type":"constant","leftLabel":"6","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING","displayText":"SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING","type":"constant","leftLabel":"10","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION","displayText":"SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION","type":"constant","leftLabel":"17","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING","displayText":"SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING","type":"constant","leftLabel":"21","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS","displayText":"SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS","type":"constant","leftLabel":"8","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS","displayText":"SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS","type":"constant","leftLabel":"19","description":" "},{"snippet":"SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION","displayText":"SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION","type":"constant","leftLabel":"9","description":" "},{"snippet":"SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION","displayText":"SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION","type":"constant","leftLabel":"20","description":" "}],"K":[{"snippet":"KEY","displayText":"KEY","type":"constant","leftLabel":"1","description":" "},{"snippet":"KEY_0","displayText":"KEY_0","type":"constant","leftLabel":"48","description":" "},{"snippet":"KEY_1","displayText":"KEY_1","type":"constant","leftLabel":"49","description":" "},{"snippet":"KEY_2","displayText":"KEY_2","type":"constant","leftLabel":"50","description":" "},{"snippet":"KEY_3","displayText":"KEY_3","type":"constant","leftLabel":"51","description":" "},{"snippet":"KEY_4","displayText":"KEY_4","type":"constant","leftLabel":"52","description":" "},{"snippet":"KEY_5","displayText":"KEY_5","type":"constant","leftLabel":"53","description":" "},{"snippet":"KEY_6","displayText":"KEY_6","type":"constant","leftLabel":"54","description":" "},{"snippet":"KEY_7","displayText":"KEY_7","type":"constant","leftLabel":"55","description":" "},{"snippet":"KEY_8","displayText":"KEY_8","type":"constant","leftLabel":"56","description":" "},{"snippet":"KEY_9","displayText":"KEY_9","type":"constant","leftLabel":"57","description":" "},{"snippet":"KEY_A","displayText":"KEY_A","type":"constant","leftLabel":"65","description":" "},{"snippet":"KEY_B","displayText":"KEY_B","type":"constant","leftLabel":"66","description":" "},{"snippet":"KEY_C","displayText":"KEY_C","type":"constant","leftLabel":"67","description":" "},{"snippet":"KEY_D","displayText":"KEY_D","type":"constant","leftLabel":"68","description":" "},{"snippet":"KEY_E","displayText":"KEY_E","type":"constant","leftLabel":"69","description":" "},{"snippet":"KEY_F","displayText":"KEY_F","type":"constant","leftLabel":"70","description":" "},{"snippet":"KEY_G","displayText":"KEY_G","type":"constant","leftLabel":"71","description":" "},{"snippet":"KEY_H","displayText":"KEY_H","type":"constant","leftLabel":"72","description":" "},{"snippet":"KEY_I","displayText":"KEY_I","type":"constant","leftLabel":"73","description":" "},{"snippet":"KEY_J","displayText":"KEY_J","type":"constant","leftLabel":"74","description":" "},{"snippet":"KEY_K","displayText":"KEY_K","type":"constant","leftLabel":"75","description":" "},{"snippet":"KEY_L","displayText":"KEY_L","type":"constant","leftLabel":"76","description":" "},{"snippet":"KEY_M","displayText":"KEY_M","type":"constant","leftLabel":"77","description":" "},{"snippet":"KEY_N","displayText":"KEY_N","type":"constant","leftLabel":"78","description":" "},{"snippet":"KEY_O","displayText":"KEY_O","type":"constant","leftLabel":"79","description":" "},{"snippet":"KEY_P","displayText":"KEY_P","type":"constant","leftLabel":"80","description":" "},{"snippet":"KEY_Q","displayText":"KEY_Q","type":"constant","leftLabel":"81","description":" "},{"snippet":"KEY_R","displayText":"KEY_R","type":"constant","leftLabel":"82","description":" "},{"snippet":"KEY_S","displayText":"KEY_S","type":"constant","leftLabel":"83","description":" "},{"snippet":"KEY_T","displayText":"KEY_T","type":"constant","leftLabel":"84","description":" "},{"snippet":"KEY_U","displayText":"KEY_U","type":"constant","leftLabel":"85","description":" "},{"snippet":"KEY_V","displayText":"KEY_V","type":"constant","leftLabel":"86","description":" "},{"snippet":"KEY_W","displayText":"KEY_W","type":"constant","leftLabel":"87","description":" "},{"snippet":"KEY_X","displayText":"KEY_X","type":"constant","leftLabel":"88","description":" "},{"snippet":"KEY_Y","displayText":"KEY_Y","type":"constant","leftLabel":"89","description":" "},{"snippet":"KEY_Z","displayText":"KEY_Z","type":"constant","leftLabel":"90","description":" "},{"snippet":"KEY_AE","displayText":"KEY_AE","type":"constant","leftLabel":"198","description":" "},{"snippet":"KEY_AT","displayText":"KEY_AT","type":"constant","leftLabel":"64","description":" "},{"snippet":"KEY_F1","displayText":"KEY_F1","type":"constant","leftLabel":"16777244","description":" "},{"snippet":"KEY_F2","displayText":"KEY_F2","type":"constant","leftLabel":"16777245","description":" "},{"snippet":"KEY_F3","displayText":"KEY_F3","type":"constant","leftLabel":"16777246","description":" "},{"snippet":"KEY_F4","displayText":"KEY_F4","type":"constant","leftLabel":"16777247","description":" "},{"snippet":"KEY_F5","displayText":"KEY_F5","type":"constant","leftLabel":"16777248","description":" "},{"snippet":"KEY_F6","displayText":"KEY_F6","type":"constant","leftLabel":"16777249","description":" "},{"snippet":"KEY_F7","displayText":"KEY_F7","type":"constant","leftLabel":"16777250","description":" "},{"snippet":"KEY_F8","displayText":"KEY_F8","type":"constant","leftLabel":"16777251","description":" "},{"snippet":"KEY_F9","displayText":"KEY_F9","type":"constant","leftLabel":"16777252","description":" "},{"snippet":"KEY_MU","displayText":"KEY_MU","type":"constant","leftLabel":"181","description":" "},{"snippet":"KEY_UP","displayText":"KEY_UP","type":"constant","leftLabel":"16777232","description":" "},{"snippet":"KEY_ALT","displayText":"KEY_ALT","type":"constant","leftLabel":"16777240","description":" "},{"snippet":"KEY_BAR","displayText":"KEY_BAR","type":"constant","leftLabel":"124","description":" "},{"snippet":"KEY_END","displayText":"KEY_END","type":"constant","leftLabel":"16777230","description":" "},{"snippet":"KEY_ETH","displayText":"KEY_ETH","type":"constant","leftLabel":"208","description":" "},{"snippet":"KEY_F10","displayText":"KEY_F10","type":"constant","leftLabel":"16777253","description":" "},{"snippet":"KEY_F11","displayText":"KEY_F11","type":"constant","leftLabel":"16777254","description":" "},{"snippet":"KEY_F12","displayText":"KEY_F12","type":"constant","leftLabel":"16777255","description":" "},{"snippet":"KEY_F13","displayText":"KEY_F13","type":"constant","leftLabel":"16777256","description":" "},{"snippet":"KEY_F14","displayText":"KEY_F14","type":"constant","leftLabel":"16777257","description":" "},{"snippet":"KEY_F15","displayText":"KEY_F15","type":"constant","leftLabel":"16777258","description":" "},{"snippet":"KEY_F16","displayText":"KEY_F16","type":"constant","leftLabel":"16777259","description":" "},{"snippet":"KEY_TAB","displayText":"KEY_TAB","type":"constant","leftLabel":"16777218","description":" Tab Key "},{"snippet":"KEY_YEN","displayText":"KEY_YEN","type":"constant","leftLabel":"165","description":" "},{"snippet":"KEY_BACK","displayText":"KEY_BACK","type":"constant","leftLabel":"16777280","description":" "},{"snippet":"KEY_CENT","displayText":"KEY_CENT","type":"constant","leftLabel":"162","description":" "},{"snippet":"KEY_DOWN","displayText":"KEY_DOWN","type":"constant","leftLabel":"16777234","description":" "},{"snippet":"KEY_HELP","displayText":"KEY_HELP","type":"constant","leftLabel":"16777265","description":" "},{"snippet":"KEY_HOME","displayText":"KEY_HOME","type":"constant","leftLabel":"16777229","description":" "},{"snippet":"KEY_KP_0","displayText":"KEY_KP_0","type":"constant","leftLabel":"16777350","description":" "},{"snippet":"KEY_KP_1","displayText":"KEY_KP_1","type":"constant","leftLabel":"16777351","description":" "},{"snippet":"KEY_KP_2","displayText":"KEY_KP_2","type":"constant","leftLabel":"16777352","description":" "},{"snippet":"KEY_KP_3","displayText":"KEY_KP_3","type":"constant","leftLabel":"16777353","description":" "},{"snippet":"KEY_KP_4","displayText":"KEY_KP_4","type":"constant","leftLabel":"16777354","description":" "},{"snippet":"KEY_KP_5","displayText":"KEY_KP_5","type":"constant","leftLabel":"16777355","description":" "},{"snippet":"KEY_KP_6","displayText":"KEY_KP_6","type":"constant","leftLabel":"16777356","description":" "},{"snippet":"KEY_KP_7","displayText":"KEY_KP_7","type":"constant","leftLabel":"16777357","description":" "},{"snippet":"KEY_KP_8","displayText":"KEY_KP_8","type":"constant","leftLabel":"16777358","description":" "},{"snippet":"KEY_KP_9","displayText":"KEY_KP_9","type":"constant","leftLabel":"16777359","description":" "},{"snippet":"KEY_LEFT","displayText":"KEY_LEFT","type":"constant","leftLabel":"16777231","description":" "},{"snippet":"KEY_LESS","displayText":"KEY_LESS","type":"constant","leftLabel":"60","description":" "},{"snippet":"KEY_MENU","displayText":"KEY_MENU","type":"constant","leftLabel":"16777262","description":" "},{"snippet":"KEY_META","displayText":"KEY_META","type":"constant","leftLabel":"16777239","description":" "},{"snippet":"KEY_PLUS","displayText":"KEY_PLUS","type":"constant","leftLabel":"43","description":" "},{"snippet":"KEY_STOP","displayText":"KEY_STOP","type":"constant","leftLabel":"16777282","description":" "},{"snippet":"KEY_ACUTE","displayText":"KEY_ACUTE","type":"constant","leftLabel":"180","description":" "},{"snippet":"KEY_ARING","displayText":"KEY_ARING","type":"constant","leftLabel":"197","description":" "},{"snippet":"KEY_CLEAR","displayText":"KEY_CLEAR","type":"constant","leftLabel":"16777228","description":" "},{"snippet":"KEY_COLON","displayText":"KEY_COLON","type":"constant","leftLabel":"58","description":" "},{"snippet":"KEY_COMMA","displayText":"KEY_COMMA","type":"constant","leftLabel":"44","description":" "},{"snippet":"KEY_ENTER","displayText":"KEY_ENTER","type":"constant","leftLabel":"16777222","description":" "},{"snippet":"KEY_EQUAL","displayText":"KEY_EQUAL","type":"constant","leftLabel":"61","description":" "},{"snippet":"KEY_MINUS","displayText":"KEY_MINUS","type":"constant","leftLabel":"45","description":" "},{"snippet":"KEY_PAUSE","displayText":"KEY_PAUSE","type":"constant","leftLabel":"16777225","description":" "},{"snippet":"KEY_PRINT","displayText":"KEY_PRINT","type":"constant","leftLabel":"16777226","description":" "},{"snippet":"KEY_RIGHT","displayText":"KEY_RIGHT","type":"constant","leftLabel":"16777233","description":" "},{"snippet":"KEY_SHIFT","displayText":"KEY_SHIFT","type":"constant","leftLabel":"16777237","description":" "},{"snippet":"KEY_SLASH","displayText":"KEY_SLASH","type":"constant","leftLabel":"47","description":" "},{"snippet":"KEY_SPACE","displayText":"KEY_SPACE","type":"constant","leftLabel":"32","description":" "},{"snippet":"KEY_THORN","displayText":"KEY_THORN","type":"constant","leftLabel":"222","description":" "},{"snippet":"KEEP_WIDTH","displayText":"KEEP_WIDTH","type":"constant","leftLabel":"0","description":" "},{"snippet":"KEY_AACUTE","displayText":"KEY_AACUTE","type":"constant","leftLabel":"193","description":" "},{"snippet":"KEY_AGRAVE","displayText":"KEY_AGRAVE","type":"constant","leftLabel":"192","description":" "},{"snippet":"KEY_ATILDE","displayText":"KEY_ATILDE","type":"constant","leftLabel":"195","description":" "},{"snippet":"KEY_BASSUP","displayText":"KEY_BASSUP","type":"constant","leftLabel":"16777288","description":" "},{"snippet":"KEY_DEGREE","displayText":"KEY_DEGREE","type":"constant","leftLabel":"176","description":" "},{"snippet":"KEY_DELETE","displayText":"KEY_DELETE","type":"constant","leftLabel":"16777224","description":" "},{"snippet":"KEY_DOLLAR","displayText":"KEY_DOLLAR","type":"constant","leftLabel":"36","description":" "},{"snippet":"KEY_EACUTE","displayText":"KEY_EACUTE","type":"constant","leftLabel":"201","description":" "},{"snippet":"KEY_EGRAVE","displayText":"KEY_EGRAVE","type":"constant","leftLabel":"200","description":" "},{"snippet":"KEY_ESCAPE","displayText":"KEY_ESCAPE","type":"constant","leftLabel":"16777217","description":" Escape Key "},{"snippet":"KEY_EXCLAM","displayText":"KEY_EXCLAM","type":"constant","leftLabel":"33","description":" "},{"snippet":"KEY_HYPHEN","displayText":"KEY_HYPHEN","type":"constant","leftLabel":"173","description":" "},{"snippet":"KEY_IACUTE","displayText":"KEY_IACUTE","type":"constant","leftLabel":"205","description":" "},{"snippet":"KEY_IGRAVE","displayText":"KEY_IGRAVE","type":"constant","leftLabel":"204","description":" "},{"snippet":"KEY_INSERT","displayText":"KEY_INSERT","type":"constant","leftLabel":"16777223","description":" "},{"snippet":"KEY_KP_ADD","displayText":"KEY_KP_ADD","type":"constant","leftLabel":"16777349","description":" "},{"snippet":"KEY_MACRON","displayText":"KEY_MACRON","type":"constant","leftLabel":"175","description":" "},{"snippet":"KEY_NTILDE","displayText":"KEY_NTILDE","type":"constant","leftLabel":"209","description":" "},{"snippet":"KEY_OACUTE","displayText":"KEY_OACUTE","type":"constant","leftLabel":"211","description":" "},{"snippet":"KEY_OGRAVE","displayText":"KEY_OGRAVE","type":"constant","leftLabel":"210","description":" "},{"snippet":"KEY_OTILDE","displayText":"KEY_OTILDE","type":"constant","leftLabel":"213","description":" "},{"snippet":"KEY_PAGEUP","displayText":"KEY_PAGEUP","type":"constant","leftLabel":"16777235","description":" "},{"snippet":"KEY_PERIOD","displayText":"KEY_PERIOD","type":"constant","leftLabel":"46","description":" "},{"snippet":"KEY_RETURN","displayText":"KEY_RETURN","type":"constant","leftLabel":"16777221","description":" "},{"snippet":"KEY_SEARCH","displayText":"KEY_SEARCH","type":"constant","leftLabel":"16777299","description":" "},{"snippet":"KEY_SSHARP","displayText":"KEY_SSHARP","type":"constant","leftLabel":"223","description":" "},{"snippet":"KEY_SYSREQ","displayText":"KEY_SYSREQ","type":"constant","leftLabel":"16777227","description":" "},{"snippet":"KEY_UACUTE","displayText":"KEY_UACUTE","type":"constant","leftLabel":"218","description":" "},{"snippet":"KEY_UGRAVE","displayText":"KEY_UGRAVE","type":"constant","leftLabel":"217","description":" "},{"snippet":"KEY_YACUTE","displayText":"KEY_YACUTE","type":"constant","leftLabel":"221","description":" "},{"snippet":"KEEP_HEIGHT","displayText":"KEEP_HEIGHT","type":"constant","leftLabel":"1","description":" "},{"snippet":"KEY_BACKTAB","displayText":"KEY_BACKTAB","type":"constant","leftLabel":"16777219","description":" Shift-Tab key "},{"snippet":"KEY_CEDILLA","displayText":"KEY_CEDILLA","type":"constant","leftLabel":"184","description":" "},{"snippet":"KEY_CONTROL","displayText":"KEY_CONTROL","type":"constant","leftLabel":"16777238","description":" "},{"snippet":"KEY_FORWARD","displayText":"KEY_FORWARD","type":"constant","leftLabel":"16777281","description":" "},{"snippet":"KEY_GREATER","displayText":"KEY_GREATER","type":"constant","leftLabel":"62","description":" "},{"snippet":"KEY_HYPER_L","displayText":"KEY_HYPER_L","type":"constant","leftLabel":"16777263","description":" "},{"snippet":"KEY_HYPER_R","displayText":"KEY_HYPER_R","type":"constant","leftLabel":"16777264","description":" "},{"snippet":"KEY_LAUNCH0","displayText":"KEY_LAUNCH0","type":"constant","leftLabel":"16777304","description":" "},{"snippet":"KEY_LAUNCH1","displayText":"KEY_LAUNCH1","type":"constant","leftLabel":"16777305","description":" "},{"snippet":"KEY_LAUNCH2","displayText":"KEY_LAUNCH2","type":"constant","leftLabel":"16777306","description":" "},{"snippet":"KEY_LAUNCH3","displayText":"KEY_LAUNCH3","type":"constant","leftLabel":"16777307","description":" "},{"snippet":"KEY_LAUNCH4","displayText":"KEY_LAUNCH4","type":"constant","leftLabel":"16777308","description":" "},{"snippet":"KEY_LAUNCH5","displayText":"KEY_LAUNCH5","type":"constant","leftLabel":"16777309","description":" "},{"snippet":"KEY_LAUNCH6","displayText":"KEY_LAUNCH6","type":"constant","leftLabel":"16777310","description":" "},{"snippet":"KEY_LAUNCH7","displayText":"KEY_LAUNCH7","type":"constant","leftLabel":"16777311","description":" "},{"snippet":"KEY_LAUNCH8","displayText":"KEY_LAUNCH8","type":"constant","leftLabel":"16777312","description":" "},{"snippet":"KEY_LAUNCH9","displayText":"KEY_LAUNCH9","type":"constant","leftLabel":"16777313","description":" "},{"snippet":"KEY_LAUNCHA","displayText":"KEY_LAUNCHA","type":"constant","leftLabel":"16777314","description":" "},{"snippet":"KEY_LAUNCHB","displayText":"KEY_LAUNCHB","type":"constant","leftLabel":"16777315","description":" "},{"snippet":"KEY_LAUNCHC","displayText":"KEY_LAUNCHC","type":"constant","leftLabel":"16777316","description":" "},{"snippet":"KEY_LAUNCHD","displayText":"KEY_LAUNCHD","type":"constant","leftLabel":"16777317","description":" "},{"snippet":"KEY_LAUNCHE","displayText":"KEY_LAUNCHE","type":"constant","leftLabel":"16777318","description":" "},{"snippet":"KEY_LAUNCHF","displayText":"KEY_LAUNCHF","type":"constant","leftLabel":"16777319","description":" "},{"snippet":"KEY_NOTSIGN","displayText":"KEY_NOTSIGN","type":"constant","leftLabel":"172","description":" "},{"snippet":"KEY_NUMLOCK","displayText":"KEY_NUMLOCK","type":"constant","leftLabel":"16777242","description":" "},{"snippet":"KEY_ONEHALF","displayText":"KEY_ONEHALF","type":"constant","leftLabel":"189","description":" "},{"snippet":"KEY_OPENURL","displayText":"KEY_OPENURL","type":"constant","leftLabel":"16777301","description":" "},{"snippet":"KEY_PERCENT","displayText":"KEY_PERCENT","type":"constant","leftLabel":"37","description":" "},{"snippet":"KEY_REFRESH","displayText":"KEY_REFRESH","type":"constant","leftLabel":"16777283","description":" "},{"snippet":"KEY_SECTION","displayText":"KEY_SECTION","type":"constant","leftLabel":"167","description":" "},{"snippet":"KEY_STANDBY","displayText":"KEY_STANDBY","type":"constant","leftLabel":"16777300","description":" "},{"snippet":"KEY_SUPER_L","displayText":"KEY_SUPER_L","type":"constant","leftLabel":"16777260","description":" "},{"snippet":"KEY_SUPER_R","displayText":"KEY_SUPER_R","type":"constant","leftLabel":"16777261","description":" "},{"snippet":"KEY_UNKNOWN","displayText":"KEY_UNKNOWN","type":"constant","leftLabel":"33554431","description":" "},{"snippet":"KEY_ASTERISK","displayText":"KEY_ASTERISK","type":"constant","leftLabel":"42","description":" "},{"snippet":"KEY_BASSDOWN","displayText":"KEY_BASSDOWN","type":"constant","leftLabel":"16777289","description":" "},{"snippet":"KEY_CAPSLOCK","displayText":"KEY_CAPSLOCK","type":"constant","leftLabel":"16777241","description":" "},{"snippet":"KEY_CCEDILLA","displayText":"KEY_CCEDILLA","type":"constant","leftLabel":"199","description":" "},{"snippet":"KEY_CURRENCY","displayText":"KEY_CURRENCY","type":"constant","leftLabel":"164","description":" "},{"snippet":"KEY_DIVISION","displayText":"KEY_DIVISION","type":"constant","leftLabel":"247","description":" "},{"snippet":"KEY_HOMEPAGE","displayText":"KEY_HOMEPAGE","type":"constant","leftLabel":"16777297","description":" "},{"snippet":"KEY_KP_ENTER","displayText":"KEY_KP_ENTER","type":"constant","leftLabel":"16777344","description":" "},{"snippet":"KEY_MASK_ALT","displayText":"KEY_MASK_ALT","type":"constant","leftLabel":"67108864","description":" "},{"snippet":"KEY_MULTIPLY","displayText":"KEY_MULTIPLY","type":"constant","leftLabel":"215","description":" "},{"snippet":"KEY_OOBLIQUE","displayText":"KEY_OOBLIQUE","type":"constant","leftLabel":"216","description":" "},{"snippet":"KEY_PAGEDOWN","displayText":"KEY_PAGEDOWN","type":"constant","leftLabel":"16777236","description":" "},{"snippet":"KEY_QUESTION","displayText":"KEY_QUESTION","type":"constant","leftLabel":"63","description":" "},{"snippet":"KEY_QUOTEDBL","displayText":"KEY_QUOTEDBL","type":"constant","leftLabel":"34","description":" "},{"snippet":"KEY_STERLING","displayText":"KEY_STERLING","type":"constant","leftLabel":"163","description":" "},{"snippet":"KEY_TREBLEUP","displayText":"KEY_TREBLEUP","type":"constant","leftLabel":"16777290","description":" "},{"snippet":"KEY_VOLUMEUP","displayText":"KEY_VOLUMEUP","type":"constant","leftLabel":"16777286","description":" "},{"snippet":"KEY_AMPERSAND","displayText":"KEY_AMPERSAND","type":"constant","leftLabel":"38","description":" "},{"snippet":"KEY_BACKSLASH","displayText":"KEY_BACKSLASH","type":"constant","leftLabel":"92","description":" "},{"snippet":"KEY_BACKSPACE","displayText":"KEY_BACKSPACE","type":"constant","leftLabel":"16777220","description":" "},{"snippet":"KEY_BASSBOOST","displayText":"KEY_BASSBOOST","type":"constant","leftLabel":"16777287","description":" "},{"snippet":"KEY_BRACELEFT","displayText":"KEY_BRACELEFT","type":"constant","leftLabel":"123","description":" "},{"snippet":"KEY_BROKENBAR","displayText":"KEY_BROKENBAR","type":"constant","leftLabel":"166","description":" "},{"snippet":"KEY_CODE_MASK","displayText":"KEY_CODE_MASK","type":"constant","leftLabel":"33554431","description":" "},{"snippet":"KEY_COPYRIGHT","displayText":"KEY_COPYRIGHT","type":"constant","leftLabel":"169","description":" "},{"snippet":"KEY_DIAERESIS","displayText":"KEY_DIAERESIS","type":"constant","leftLabel":"168","description":" "},{"snippet":"KEY_FAVORITES","displayText":"KEY_FAVORITES","type":"constant","leftLabel":"16777298","description":" "},{"snippet":"KEY_KP_DIVIDE","displayText":"KEY_KP_DIVIDE","type":"constant","leftLabel":"16777346","description":" "},{"snippet":"KEY_KP_PERIOD","displayText":"KEY_KP_PERIOD","type":"constant","leftLabel":"16777348","description":" "},{"snippet":"KEY_MASCULINE","displayText":"KEY_MASCULINE","type":"constant","leftLabel":"186","description":" "},{"snippet":"KEY_MASK_CTRL","displayText":"KEY_MASK_CTRL","type":"constant","leftLabel":"268435456","description":" "},{"snippet":"KEY_MASK_KPAD","displayText":"KEY_MASK_KPAD","type":"constant","leftLabel":"536870912","description":" "},{"snippet":"KEY_MASK_META","displayText":"KEY_MASK_META","type":"constant","leftLabel":"134217728","description":" "},{"snippet":"KEY_MEDIANEXT","displayText":"KEY_MEDIANEXT","type":"constant","leftLabel":"16777295","description":" "},{"snippet":"KEY_MEDIAPLAY","displayText":"KEY_MEDIAPLAY","type":"constant","leftLabel":"16777292","description":" "},{"snippet":"KEY_MEDIASTOP","displayText":"KEY_MEDIASTOP","type":"constant","leftLabel":"16777293","description":" "},{"snippet":"KEY_PARAGRAPH","displayText":"KEY_PARAGRAPH","type":"constant","leftLabel":"182","description":" "},{"snippet":"KEY_PARENLEFT","displayText":"KEY_PARENLEFT","type":"constant","leftLabel":"40","description":" "},{"snippet":"KEY_PLUSMINUS","displayText":"KEY_PLUSMINUS","type":"constant","leftLabel":"177","description":" "},{"snippet":"KEY_QUOTELEFT","displayText":"KEY_QUOTELEFT","type":"constant","leftLabel":"96","description":" "},{"snippet":"KEY_SEMICOLON","displayText":"KEY_SEMICOLON","type":"constant","leftLabel":"59","description":" "},{"snippet":"KEY_ADIAERESIS","displayText":"KEY_ADIAERESIS","type":"constant","leftLabel":"196","description":" "},{"snippet":"KEY_APOSTROPHE","displayText":"KEY_APOSTROPHE","type":"constant","leftLabel":"39","description":" "},{"snippet":"KEY_ASCIITILDE","displayText":"KEY_ASCIITILDE","type":"constant","leftLabel":"126","description":" "},{"snippet":"KEY_BRACERIGHT","displayText":"KEY_BRACERIGHT","type":"constant","leftLabel":"125","description":" "},{"snippet":"KEY_EDIAERESIS","displayText":"KEY_EDIAERESIS","type":"constant","leftLabel":"203","description":" "},{"snippet":"KEY_EXCLAMDOWN","displayText":"KEY_EXCLAMDOWN","type":"constant","leftLabel":"161","description":" "},{"snippet":"KEY_IDIAERESIS","displayText":"KEY_IDIAERESIS","type":"constant","leftLabel":"207","description":" "},{"snippet":"KEY_LAUNCHMAIL","displayText":"KEY_LAUNCHMAIL","type":"constant","leftLabel":"16777302","description":" "},{"snippet":"KEY_MASK_SHIFT","displayText":"KEY_MASK_SHIFT","type":"constant","leftLabel":"33554432","description":" "},{"snippet":"KEY_NUMBERSIGN","displayText":"KEY_NUMBERSIGN","type":"constant","leftLabel":"35","description":" "},{"snippet":"KEY_ODIAERESIS","displayText":"KEY_ODIAERESIS","type":"constant","leftLabel":"214","description":" "},{"snippet":"KEY_ONEQUARTER","displayText":"KEY_ONEQUARTER","type":"constant","leftLabel":"188","description":" "},{"snippet":"KEY_PARENRIGHT","displayText":"KEY_PARENRIGHT","type":"constant","leftLabel":"41","description":" "},{"snippet":"KEY_REGISTERED","displayText":"KEY_REGISTERED","type":"constant","leftLabel":"174","description":" "},{"snippet":"KEY_SCROLLLOCK","displayText":"KEY_SCROLLLOCK","type":"constant","leftLabel":"16777243","description":" "},{"snippet":"KEY_TREBLEDOWN","displayText":"KEY_TREBLEDOWN","type":"constant","leftLabel":"16777291","description":" "},{"snippet":"KEY_UDIAERESIS","displayText":"KEY_UDIAERESIS","type":"constant","leftLabel":"220","description":" "},{"snippet":"KEY_UNDERSCORE","displayText":"KEY_UNDERSCORE","type":"constant","leftLabel":"95","description":" "},{"snippet":"KEY_VOLUMEDOWN","displayText":"KEY_VOLUMEDOWN","type":"constant","leftLabel":"16777284","description":" "},{"snippet":"KEY_VOLUMEMUTE","displayText":"KEY_VOLUMEMUTE","type":"constant","leftLabel":"16777285","description":" "},{"snippet":"KEY_YDIAERESIS","displayText":"KEY_YDIAERESIS","type":"constant","leftLabel":"255","description":" "},{"snippet":"KEY_ACIRCUMFLEX","displayText":"KEY_ACIRCUMFLEX","type":"constant","leftLabel":"194","description":" "},{"snippet":"KEY_ASCIICIRCUM","displayText":"KEY_ASCIICIRCUM","type":"constant","leftLabel":"94","description":" "},{"snippet":"KEY_BRACKETLEFT","displayText":"KEY_BRACKETLEFT","type":"constant","leftLabel":"91","description":" "},{"snippet":"KEY_DIRECTION_L","displayText":"KEY_DIRECTION_L","type":"constant","leftLabel":"16777266","description":" "},{"snippet":"KEY_DIRECTION_R","displayText":"KEY_DIRECTION_R","type":"constant","leftLabel":"16777267","description":" "},{"snippet":"KEY_ECIRCUMFLEX","displayText":"KEY_ECIRCUMFLEX","type":"constant","leftLabel":"202","description":" "},{"snippet":"KEY_ICIRCUMFLEX","displayText":"KEY_ICIRCUMFLEX","type":"constant","leftLabel":"206","description":" "},{"snippet":"KEY_KP_MULTIPLY","displayText":"KEY_KP_MULTIPLY","type":"constant","leftLabel":"16777345","description":" "},{"snippet":"KEY_LAUNCHMEDIA","displayText":"KEY_LAUNCHMEDIA","type":"constant","leftLabel":"16777303","description":" "},{"snippet":"KEY_MEDIARECORD","displayText":"KEY_MEDIARECORD","type":"constant","leftLabel":"16777296","description":" "},{"snippet":"KEY_OCIRCUMFLEX","displayText":"KEY_OCIRCUMFLEX","type":"constant","leftLabel":"212","description":" "},{"snippet":"KEY_ONESUPERIOR","displayText":"KEY_ONESUPERIOR","type":"constant","leftLabel":"185","description":" "},{"snippet":"KEY_ORDFEMININE","displayText":"KEY_ORDFEMININE","type":"constant","leftLabel":"170","description":" "},{"snippet":"KEY_TWOSUPERIOR","displayText":"KEY_TWOSUPERIOR","type":"constant","leftLabel":"178","description":" "},{"snippet":"KEY_UCIRCUMFLEX","displayText":"KEY_UCIRCUMFLEX","type":"constant","leftLabel":"219","description":" "},{"snippet":"KEY_BRACKETRIGHT","displayText":"KEY_BRACKETRIGHT","type":"constant","leftLabel":"93","description":" "},{"snippet":"KEY_KP_SUBSTRACT","displayText":"KEY_KP_SUBSTRACT","type":"constant","leftLabel":"16777347","description":" "},{"snippet":"KEY_NOBREAKSPACE","displayText":"KEY_NOBREAKSPACE","type":"constant","leftLabel":"160","description":" "},{"snippet":"KEY_QUESTIONDOWN","displayText":"KEY_QUESTIONDOWN","type":"constant","leftLabel":"191","description":" "},{"snippet":"KEY_GUILLEMOTLEFT","displayText":"KEY_GUILLEMOTLEFT","type":"constant","leftLabel":"171","description":" "},{"snippet":"KEY_MEDIAPREVIOUS","displayText":"KEY_MEDIAPREVIOUS","type":"constant","leftLabel":"16777294","description":" "},{"snippet":"KEY_MODIFIER_MASK","displayText":"KEY_MODIFIER_MASK","type":"constant","leftLabel":"-16777216","description":" "},{"snippet":"KEY_THREEQUARTERS","displayText":"KEY_THREEQUARTERS","type":"constant","leftLabel":"190","description":" "},{"snippet":"KEY_THREESUPERIOR","displayText":"KEY_THREESUPERIOR","type":"constant","leftLabel":"179","description":" "},{"snippet":"KEY_GUILLEMOTRIGHT","displayText":"KEY_GUILLEMOTRIGHT","type":"constant","leftLabel":"187","description":" "},{"snippet":"KEY_PERIODCENTERED","displayText":"KEY_PERIODCENTERED","type":"constant","leftLabel":"183","description":" "},{"snippet":"KEY_MASK_GROUP_SWITCH","displayText":"KEY_MASK_GROUP_SWITCH","type":"constant","leftLabel":"1073741824","description":" "}],"B":[{"snippet":"BG_MAX","displayText":"BG_MAX","type":"constant","leftLabel":"7","description":" "},{"snippet":"BG_KEEP","displayText":"BG_KEEP","type":"constant","leftLabel":"0","description":" "},{"snippet":"BAKE_MAX","displayText":"BAKE_MAX","type":"constant","leftLabel":"5","description":" "},{"snippet":"BG_COLOR","displayText":"BG_COLOR","type":"constant","leftLabel":"2","description":" "},{"snippet":"BG_CUBEMAP","displayText":"BG_CUBEMAP","type":"constant","leftLabel":"4","description":" "},{"snippet":"BG_TEXTURE","displayText":"BG_TEXTURE","type":"constant","leftLabel":"3","description":" "},{"snippet":"BUTTON_LEFT","displayText":"BUTTON_LEFT","type":"constant","leftLabel":"1","description":" "},{"snippet":"BAKE_DIFFUSE","displayText":"BAKE_DIFFUSE","type":"constant","leftLabel":"0","description":" "},{"snippet":"BG_PARAM_MAX","displayText":"BG_PARAM_MAX","type":"constant","leftLabel":"6","description":" "},{"snippet":"BUTTON_RIGHT","displayText":"BUTTON_RIGHT","type":"constant","leftLabel":"2","description":" "},{"snippet":"BAKE_SPECULAR","displayText":"BAKE_SPECULAR","type":"constant","leftLabel":"1","description":" "},{"snippet":"BG_PARAM_GLOW","displayText":"BG_PARAM_GLOW","type":"constant","leftLabel":"5","description":" "},{"snippet":"BUTTON_MIDDLE","displayText":"BUTTON_MIDDLE","type":"constant","leftLabel":"3","description":" "},{"snippet":"BAKE_MODE_FULL","displayText":"BAKE_MODE_FULL","type":"constant","leftLabel":"3","description":" "},{"snippet":"BG_PARAM_COLOR","displayText":"BG_PARAM_COLOR","type":"constant","leftLabel":"0","description":" "},{"snippet":"BLEND_MODE_ADD","displayText":"BLEND_MODE_ADD","type":"constant","leftLabel":"1","description":" Additive blending mode. "},{"snippet":"BLEND_MODE_MIX","displayText":"BLEND_MODE_MIX","type":"constant","leftLabel":"0","description":" Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value. "},{"snippet":"BLEND_MODE_MUL","displayText":"BLEND_MODE_MUL","type":"constant","leftLabel":"3","description":" "},{"snippet":"BLEND_MODE_SUB","displayText":"BLEND_MODE_SUB","type":"constant","leftLabel":"2","description":" Substractive blending mode. "},{"snippet":"BODY_PARAM_MAX","displayText":"BODY_PARAM_MAX","type":"constant","leftLabel":"3","description":" "},{"snippet":"BG_CUBEMAP_RGBE","displayText":"BG_CUBEMAP_RGBE","type":"constant","leftLabel":"6","description":" "},{"snippet":"BG_PARAM_ENERGY","displayText":"BG_PARAM_ENERGY","type":"constant","leftLabel":"3","description":" "},{"snippet":"BG_TEXTURE_RGBE","displayText":"BG_TEXTURE_RGBE","type":"constant","leftLabel":"5","description":" "},{"snippet":"BODY_MODE_RIGID","displayText":"BODY_MODE_RIGID","type":"constant","leftLabel":"2","description":" "},{"snippet":"BODY_PARAM_MASS","displayText":"BODY_PARAM_MASS","type":"constant","leftLabel":"2","description":" "},{"snippet":"BUTTON_WHEEL_UP","displayText":"BUTTON_WHEEL_UP","type":"constant","leftLabel":"4","description":" "},{"snippet":"BAKE_TRANSLUCENT","displayText":"BAKE_TRANSLUCENT","type":"constant","leftLabel":"2","description":" "},{"snippet":"BG_DEFAULT_COLOR","displayText":"BG_DEFAULT_COLOR","type":"constant","leftLabel":"1","description":" "},{"snippet":"BG_PARAM_CUBEMAP","displayText":"BG_PARAM_CUBEMAP","type":"constant","leftLabel":"2","description":" "},{"snippet":"BG_PARAM_TEXTURE","displayText":"BG_PARAM_TEXTURE","type":"constant","leftLabel":"1","description":" "},{"snippet":"BODY_MODE_STATIC","displayText":"BODY_MODE_STATIC","type":"constant","leftLabel":"0","description":" "},{"snippet":"BUTTON_MASK_LEFT","displayText":"BUTTON_MASK_LEFT","type":"constant","leftLabel":"1","description":" "},{"snippet":"BODY_PARAM_BOUNCE","displayText":"BODY_PARAM_BOUNCE","type":"constant","leftLabel":"0","description":" "},{"snippet":"BUTTON_MASK_RIGHT","displayText":"BUTTON_MASK_RIGHT","type":"constant","leftLabel":"2","description":" "},{"snippet":"BUTTON_WHEEL_DOWN","displayText":"BUTTON_WHEEL_DOWN","type":"constant","leftLabel":"5","description":" "},{"snippet":"BAKE_MODE_DISABLED","displayText":"BAKE_MODE_DISABLED","type":"constant","leftLabel":"0","description":" "},{"snippet":"BAKE_MODE_INDIRECT","displayText":"BAKE_MODE_INDIRECT","type":"constant","leftLabel":"1","description":" "},{"snippet":"BUTTON_MASK_MIDDLE","displayText":"BUTTON_MASK_MIDDLE","type":"constant","leftLabel":"4","description":" "},{"snippet":"BODY_MODE_CHARACTER","displayText":"BODY_MODE_CHARACTER","type":"constant","leftLabel":"3","description":" "},{"snippet":"BODY_MODE_KINEMATIC","displayText":"BODY_MODE_KINEMATIC","type":"constant","leftLabel":"1","description":" "},{"snippet":"BODY_PARAM_FRICTION","displayText":"BODY_PARAM_FRICTION","type":"constant","leftLabel":"1","description":" "},{"snippet":"BODY_STATE_SLEEPING","displayText":"BODY_STATE_SLEEPING","type":"constant","leftLabel":"3","description":" "},{"snippet":"BAKE_CONSERVE_ENERGY","displayText":"BAKE_CONSERVE_ENERGY","type":"constant","leftLabel":"3","description":" "},{"snippet":"BODY_STATE_CAN_SLEEP","displayText":"BODY_STATE_CAN_SLEEP","type":"constant","leftLabel":"4","description":" "},{"snippet":"BODY_STATE_TRANSFORM","displayText":"BODY_STATE_TRANSFORM","type":"constant","leftLabel":"0","description":" "},{"snippet":"BLEND_MODE_PREMULT_ALPHA","displayText":"BLEND_MODE_PREMULT_ALPHA","type":"constant","leftLabel":"4","description":" "},{"snippet":"BODY_STATE_LINEAR_VELOCITY","displayText":"BODY_STATE_LINEAR_VELOCITY","type":"constant","leftLabel":"1","description":" "},{"snippet":"BODY_STATE_ANGULAR_VELOCITY","displayText":"BODY_STATE_ANGULAR_VELOCITY","type":"constant","leftLabel":"2","description":" "},{"snippet":"BAKE_MODE_INDIRECT_AND_SHADOWS","displayText":"BAKE_MODE_INDIRECT_AND_SHADOWS","type":"constant","leftLabel":"2","description":" "}],"J":[{"snippet":"JOY_L","displayText":"JOY_L","type":"constant","leftLabel":"4","description":" "},{"snippet":"JOY_R","displayText":"JOY_R","type":"constant","leftLabel":"5","description":" "},{"snippet":"JOY_L2","displayText":"JOY_L2","type":"constant","leftLabel":"6","description":" "},{"snippet":"JOY_L3","displayText":"JOY_L3","type":"constant","leftLabel":"8","description":" "},{"snippet":"JOY_R2","displayText":"JOY_R2","type":"constant","leftLabel":"7","description":" "},{"snippet":"JOY_R3","displayText":"JOY_R3","type":"constant","leftLabel":"9","description":" "},{"snippet":"JOY_DS_A","displayText":"JOY_DS_A","type":"constant","leftLabel":"1","description":" "},{"snippet":"JOY_DS_B","displayText":"JOY_DS_B","type":"constant","leftLabel":"0","description":" "},{"snippet":"JOY_DS_X","displayText":"JOY_DS_X","type":"constant","leftLabel":"3","description":" "},{"snippet":"JOY_DS_Y","displayText":"JOY_DS_Y","type":"constant","leftLabel":"2","description":" "},{"snippet":"JOINT_PIN","displayText":"JOINT_PIN","type":"constant","leftLabel":"0","description":" "},{"snippet":"JOY_START","displayText":"JOY_START","type":"constant","leftLabel":"11","description":" "},{"snippet":"JOINT_6DOF","displayText":"JOINT_6DOF","type":"constant","leftLabel":"4","description":" "},{"snippet":"JOY_AXIS_0","displayText":"JOY_AXIS_0","type":"constant","leftLabel":"0","description":" "},{"snippet":"JOY_AXIS_1","displayText":"JOY_AXIS_1","type":"constant","leftLabel":"1","description":" "},{"snippet":"JOY_AXIS_2","displayText":"JOY_AXIS_2","type":"constant","leftLabel":"2","description":" "},{"snippet":"JOY_AXIS_3","displayText":"JOY_AXIS_3","type":"constant","leftLabel":"3","description":" "},{"snippet":"JOY_AXIS_4","displayText":"JOY_AXIS_4","type":"constant","leftLabel":"4","description":" "},{"snippet":"JOY_AXIS_5","displayText":"JOY_AXIS_5","type":"constant","leftLabel":"5","description":" "},{"snippet":"JOY_AXIS_6","displayText":"JOY_AXIS_6","type":"constant","leftLabel":"6","description":" "},{"snippet":"JOY_AXIS_7","displayText":"JOY_AXIS_7","type":"constant","leftLabel":"7","description":" "},{"snippet":"JOY_SEGA_A","displayText":"JOY_SEGA_A","type":"constant","leftLabel":"0","description":" "},{"snippet":"JOY_SEGA_B","displayText":"JOY_SEGA_B","type":"constant","leftLabel":"1","description":" "},{"snippet":"JOY_SEGA_X","displayText":"JOY_SEGA_X","type":"constant","leftLabel":"2","description":" "},{"snippet":"JOY_SEGA_Y","displayText":"JOY_SEGA_Y","type":"constant","leftLabel":"3","description":" "},{"snippet":"JOY_SELECT","displayText":"JOY_SELECT","type":"constant","leftLabel":"10","description":" "},{"snippet":"JOY_SNES_A","displayText":"JOY_SNES_A","type":"constant","leftLabel":"1","description":" "},{"snippet":"JOY_SNES_B","displayText":"JOY_SNES_B","type":"constant","leftLabel":"0","description":" "},{"snippet":"JOY_SNES_X","displayText":"JOY_SNES_X","type":"constant","leftLabel":"3","description":" "},{"snippet":"JOY_SNES_Y","displayText":"JOY_SNES_Y","type":"constant","leftLabel":"2","description":" "},{"snippet":"JOY_SONY_X","displayText":"JOY_SONY_X","type":"constant","leftLabel":"0","description":" "},{"snippet":"JOY_XBOX_A","displayText":"JOY_XBOX_A","type":"constant","leftLabel":"0","description":" "},{"snippet":"JOY_XBOX_B","displayText":"JOY_XBOX_B","type":"constant","leftLabel":"1","description":" "},{"snippet":"JOY_XBOX_X","displayText":"JOY_XBOX_X","type":"constant","leftLabel":"2","description":" "},{"snippet":"JOY_XBOX_Y","displayText":"JOY_XBOX_Y","type":"constant","leftLabel":"3","description":" "},{"snippet":"JOINT_HINGE","displayText":"JOINT_HINGE","type":"constant","leftLabel":"1","description":" "},{"snippet":"JOY_DPAD_UP","displayText":"JOY_DPAD_UP","type":"constant","leftLabel":"12","description":" "},{"snippet":"JOINT_GROOVE","displayText":"JOINT_GROOVE","type":"constant","leftLabel":"1","description":" "},{"snippet":"JOINT_SLIDER","displayText":"JOINT_SLIDER","type":"constant","leftLabel":"2","description":" "},{"snippet":"JOY_AXIS_MAX","displayText":"JOY_AXIS_MAX","type":"constant","leftLabel":"8","description":" "},{"snippet":"JOY_BUTTON_0","displayText":"JOY_BUTTON_0","type":"constant","leftLabel":"0","description":" Joystick Button 0 "},{"snippet":"JOY_BUTTON_1","displayText":"JOY_BUTTON_1","type":"constant","leftLabel":"1","description":" Joystick Button 1 "},{"snippet":"JOY_BUTTON_2","displayText":"JOY_BUTTON_2","type":"constant","leftLabel":"2","description":" Joystick Button 2 "},{"snippet":"JOY_BUTTON_3","displayText":"JOY_BUTTON_3","type":"constant","leftLabel":"3","description":" Joystick Button 3 "},{"snippet":"JOY_BUTTON_4","displayText":"JOY_BUTTON_4","type":"constant","leftLabel":"4","description":" Joystick Button 4 "},{"snippet":"JOY_BUTTON_5","displayText":"JOY_BUTTON_5","type":"constant","leftLabel":"5","description":" Joystick Button 5 "},{"snippet":"JOY_BUTTON_6","displayText":"JOY_BUTTON_6","type":"constant","leftLabel":"6","description":" Joystick Button 6 "},{"snippet":"JOY_BUTTON_7","displayText":"JOY_BUTTON_7","type":"constant","leftLabel":"7","description":" Joystick Button 7 "},{"snippet":"JOY_BUTTON_8","displayText":"JOY_BUTTON_8","type":"constant","leftLabel":"8","description":" Joystick Button 8 "},{"snippet":"JOY_BUTTON_9","displayText":"JOY_BUTTON_9","type":"constant","leftLabel":"9","description":" Joystick Button 9 "},{"snippet":"JOY_BUTTON_10","displayText":"JOY_BUTTON_10","type":"constant","leftLabel":"10","description":" Joystick Button 10 "},{"snippet":"JOY_BUTTON_11","displayText":"JOY_BUTTON_11","type":"constant","leftLabel":"11","description":" Joystick Button 11 "},{"snippet":"JOY_BUTTON_12","displayText":"JOY_BUTTON_12","type":"constant","leftLabel":"12","description":" Joystick Button 12 "},{"snippet":"JOY_BUTTON_13","displayText":"JOY_BUTTON_13","type":"constant","leftLabel":"13","description":" Joystick Button 13 "},{"snippet":"JOY_BUTTON_14","displayText":"JOY_BUTTON_14","type":"constant","leftLabel":"14","description":" Joystick Button 14 "},{"snippet":"JOY_BUTTON_15","displayText":"JOY_BUTTON_15","type":"constant","leftLabel":"15","description":" Joystick Button 15 "},{"snippet":"JOY_DPAD_DOWN","displayText":"JOY_DPAD_DOWN","type":"constant","leftLabel":"13","description":" "},{"snippet":"JOY_DPAD_LEFT","displayText":"JOY_DPAD_LEFT","type":"constant","leftLabel":"14","description":" "},{"snippet":"JOY_ANALOG_0_X","displayText":"JOY_ANALOG_0_X","type":"constant","leftLabel":"0","description":" "},{"snippet":"JOY_ANALOG_0_Y","displayText":"JOY_ANALOG_0_Y","type":"constant","leftLabel":"1","description":" "},{"snippet":"JOY_ANALOG_1_X","displayText":"JOY_ANALOG_1_X","type":"constant","leftLabel":"2","description":" "},{"snippet":"JOY_ANALOG_1_Y","displayText":"JOY_ANALOG_1_Y","type":"constant","leftLabel":"3","description":" "},{"snippet":"JOY_ANALOG_2_X","displayText":"JOY_ANALOG_2_X","type":"constant","leftLabel":"4","description":" "},{"snippet":"JOY_ANALOG_2_Y","displayText":"JOY_ANALOG_2_Y","type":"constant","leftLabel":"5","description":" "},{"snippet":"JOY_BUTTON_MAX","displayText":"JOY_BUTTON_MAX","type":"constant","leftLabel":"16","description":" Joystick Button 16 "},{"snippet":"JOY_DPAD_RIGHT","displayText":"JOY_DPAD_RIGHT","type":"constant","leftLabel":"15","description":" "},{"snippet":"JOY_SONY_CIRCLE","displayText":"JOY_SONY_CIRCLE","type":"constant","leftLabel":"1","description":" "},{"snippet":"JOY_SONY_SQUARE","displayText":"JOY_SONY_SQUARE","type":"constant","leftLabel":"2","description":" "},{"snippet":"JOYSTICK_BUTTON","displayText":"JOYSTICK_BUTTON","type":"constant","leftLabel":"5","description":" "},{"snippet":"JOYSTICK_MOTION","displayText":"JOYSTICK_MOTION","type":"constant","leftLabel":"4","description":" "},{"snippet":"JOINT_CONE_TWIST","displayText":"JOINT_CONE_TWIST","type":"constant","leftLabel":"3","description":" "},{"snippet":"JOY_SONY_TRIANGLE","displayText":"JOY_SONY_TRIANGLE","type":"constant","leftLabel":"3","description":" "},{"snippet":"JOINT_DAMPED_SPRING","displayText":"JOINT_DAMPED_SPRING","type":"constant","leftLabel":"2","description":" "}],"O":[{"snippet":"OK","displayText":"OK","type":"constant","leftLabel":"0","description":" Functions that return [Error] return OK when everything went ok. Most functions don't return error anyway and/or just print errors to stdout. "},{"snippet":"OBJECT_COUNT","displayText":"OBJECT_COUNT","type":"constant","leftLabel":"8","description":" "},{"snippet":"OBJECT_NODE_COUNT","displayText":"OBJECT_NODE_COUNT","type":"constant","leftLabel":"10","description":" "},{"snippet":"OBJECT_RESOURCE_COUNT","displayText":"OBJECT_RESOURCE_COUNT","type":"constant","leftLabel":"9","description":" "}],"F":[{"snippet":"FAILED","displayText":"FAILED","type":"constant","leftLabel":"1","description":" Generic fail return error. "},{"snippet":"FX_BCS","displayText":"FX_BCS","type":"constant","leftLabel":"6","description":" "},{"snippet":"FX_FOG","displayText":"FX_FOG","type":"constant","leftLabel":"5","description":" "},{"snippet":"FX_HDR","displayText":"FX_HDR","type":"constant","leftLabel":"4","description":" "},{"snippet":"FX_MAX","displayText":"FX_MAX","type":"constant","leftLabel":"8","description":" "},{"snippet":"FX_FXAA","displayText":"FX_FXAA","type":"constant","leftLabel":"1","description":" "},{"snippet":"FX_GLOW","displayText":"FX_GLOW","type":"constant","leftLabel":"2","description":" "},{"snippet":"FX_SRGB","displayText":"FX_SRGB","type":"constant","leftLabel":"7","description":" "},{"snippet":"FLAG_MAX","displayText":"FLAG_MAX","type":"constant","leftLabel":"8","description":" "},{"snippet":"FOCUS_ALL","displayText":"FOCUS_ALL","type":"constant","leftLabel":"2","description":" Control can acquire focus if clicked, or by pressing TAB/Directionals in the keyboard from another Control. "},{"snippet":"FLAG_ONTOP","displayText":"FLAG_ONTOP","type":"constant","leftLabel":"4","description":" "},{"snippet":"FOCUS_NONE","displayText":"FOCUS_NONE","type":"constant","leftLabel":"0","description":" Control can't acquire focus. "},{"snippet":"FORMAT_ATC","displayText":"FORMAT_ATC","type":"constant","leftLabel":"19","description":" "},{"snippet":"FORMAT_BC1","displayText":"FORMAT_BC1","type":"constant","leftLabel":"9","description":" "},{"snippet":"FORMAT_BC2","displayText":"FORMAT_BC2","type":"constant","leftLabel":"10","description":" "},{"snippet":"FORMAT_BC3","displayText":"FORMAT_BC3","type":"constant","leftLabel":"11","description":" "},{"snippet":"FORMAT_BC4","displayText":"FORMAT_BC4","type":"constant","leftLabel":"12","description":" "},{"snippet":"FORMAT_BC5","displayText":"FORMAT_BC5","type":"constant","leftLabel":"13","description":" "},{"snippet":"FORMAT_ETC","displayText":"FORMAT_ETC","type":"constant","leftLabel":"18","description":" "},{"snippet":"FORMAT_RGB","displayText":"FORMAT_RGB","type":"constant","leftLabel":"3","description":" "},{"snippet":"FILTER_NONE","displayText":"FILTER_NONE","type":"constant","leftLabel":"0","description":" Filter is disabled for voice. "},{"snippet":"FILTER_PEAK","displayText":"FILTER_PEAK","type":"constant","leftLabel":"5","description":" "},{"snippet":"FLAG_FILTER","displayText":"FLAG_FILTER","type":"constant","leftLabel":"4","description":" Turn on magnifying filter, to enable smooth zooming in of the texture. "},{"snippet":"FLAG_REPEAT","displayText":"FLAG_REPEAT","type":"constant","leftLabel":"2","description":" "},{"snippet":"FLAG_SHADED","displayText":"FLAG_SHADED","type":"constant","leftLabel":"1","description":" "},{"snippet":"FOCUS_CLICK","displayText":"FOCUS_CLICK","type":"constant","leftLabel":"1","description":" Control can acquire focus only if clicked. "},{"snippet":"FORMAT_PCM8","displayText":"FORMAT_PCM8","type":"constant","leftLabel":"0","description":" 8-Bits signed little endian PCM audio. "},{"snippet":"FORMAT_RGBA","displayText":"FORMAT_RGBA","type":"constant","leftLabel":"4","description":" "},{"snippet":"FX_DOF_BLUR","displayText":"FX_DOF_BLUR","type":"constant","leftLabel":"3","description":" "},{"snippet":"FILTER_NOTCH","displayText":"FILTER_NOTCH","type":"constant","leftLabel":"4","description":" Notch (band reject) filter is used for voice. "},{"snippet":"FLAG_MIPMAPS","displayText":"FLAG_MIPMAPS","type":"constant","leftLabel":"1","description":" Generate mipmaps, to enable smooth zooming out of the texture. "},{"snippet":"FLAG_VISIBLE","displayText":"FLAG_VISIBLE","type":"constant","leftLabel":"0","description":" "},{"snippet":"FORMAT_PCM16","displayText":"FORMAT_PCM16","type":"constant","leftLabel":"1","description":" 16-Bits signed little endian PCM audio. "},{"snippet":"FX_PARAM_MAX","displayText":"FX_PARAM_MAX","type":"constant","leftLabel":"27","description":" "},{"snippet":"FILTER_HIPASS","displayText":"FILTER_HIPASS","type":"constant","leftLabel":"3","description":" Filter is a resonant highpass. "},{"snippet":"FLAG_COMPRESS","displayText":"FLAG_COMPRESS","type":"constant","leftLabel":"32","description":" "},{"snippet":"FLAG_UNSHADED","displayText":"FLAG_UNSHADED","type":"constant","leftLabel":"3","description":" Shading (lighting) is disabled when this flag is enabled. "},{"snippet":"FLAGS_DEFAULT","displayText":"FLAGS_DEFAULT","type":"constant","leftLabel":"7","description":" "},{"snippet":"FORMAT_CUSTOM","displayText":"FORMAT_CUSTOM","type":"constant","leftLabel":"22","description":" "},{"snippet":"FORMAT_PVRTC2","displayText":"FORMAT_PVRTC2","type":"constant","leftLabel":"14","description":" "},{"snippet":"FORMAT_PVRTC4","displayText":"FORMAT_PVRTC4","type":"constant","leftLabel":"16","description":" "},{"snippet":"FILTER_LOWPASS","displayText":"FILTER_LOWPASS","type":"constant","leftLabel":"1","description":" Lowpass filter is used for voice. "},{"snippet":"FLAG_BILLBOARD","displayText":"FLAG_BILLBOARD","type":"constant","leftLabel":"1","description":" "},{"snippet":"FLAG_USE_ALPHA","displayText":"FLAG_USE_ALPHA","type":"constant","leftLabel":"0","description":" "},{"snippet":"FLAG_USE_LIMIT","displayText":"FLAG_USE_LIMIT","type":"constant","leftLabel":"0","description":" "},{"snippet":"FORMAT_INDEXED","displayText":"FORMAT_INDEXED","type":"constant","leftLabel":"5","description":" "},{"snippet":"FORMAT_YUV_422","displayText":"FORMAT_YUV_422","type":"constant","leftLabel":"7","description":" "},{"snippet":"FORMAT_YUV_444","displayText":"FORMAT_YUV_444","type":"constant","leftLabel":"8","description":" "},{"snippet":"FILTER_BANDPASS","displayText":"FILTER_BANDPASS","type":"constant","leftLabel":"2","description":" Bandpass filter is used for voice. "},{"snippet":"FLAG_DEPH_SCALE","displayText":"FLAG_DEPH_SCALE","type":"constant","leftLabel":"5","description":" "},{"snippet":"FX_PARAM_FOG_BG","displayText":"FX_PARAM_FOG_BG","type":"constant","leftLabel":"23","description":" "},{"snippet":"FILTER_BANDLIMIT","displayText":"FILTER_BANDLIMIT","type":"constant","leftLabel":"6","description":" Filter is a bandlimit (resonance used as highpass). "},{"snippet":"FILTER_LOW_SHELF","displayText":"FILTER_LOW_SHELF","type":"constant","leftLabel":"7","description":" "},{"snippet":"FLAG_CAST_SHADOW","displayText":"FLAG_CAST_SHADOW","type":"constant","leftLabel":"3","description":" "},{"snippet":"FLAG_CHANGE_PATH","displayText":"FLAG_CHANGE_PATH","type":"constant","leftLabel":"4","description":" "},{"snippet":"FLAG_TRANSPARENT","displayText":"FLAG_TRANSPARENT","type":"constant","leftLabel":"0","description":" "},{"snippet":"FORMAT_GRAYSCALE","displayText":"FORMAT_GRAYSCALE","type":"constant","leftLabel":"0","description":" "},{"snippet":"FORMAT_IMA_ADPCM","displayText":"FORMAT_IMA_ADPCM","type":"constant","leftLabel":"2","description":" IMA-ADPCM Audio. "},{"snippet":"FORMAT_INTENSITY","displayText":"FORMAT_INTENSITY","type":"constant","leftLabel":"1","description":" "},{"snippet":"FX_AMBIENT_LIGHT","displayText":"FX_AMBIENT_LIGHT","type":"constant","leftLabel":"0","description":" "},{"snippet":"FILTER_HIGH_SHELF","displayText":"FILTER_HIGH_SHELF","type":"constant","leftLabel":"8","description":" "},{"snippet":"FLAG_DOUBLE_SIDED","displayText":"FLAG_DOUBLE_SIDED","type":"constant","leftLabel":"1","description":" Both front facing and back facing triangles are rendered when this flag is enabled. "},{"snippet":"FLAG_ENABLE_MOTOR","displayText":"FLAG_ENABLE_MOTOR","type":"constant","leftLabel":"2","description":" "},{"snippet":"FLAG_INVERT_FACES","displayText":"FLAG_INVERT_FACES","type":"constant","leftLabel":"2","description":" Front facing and back facing order is swapped when this flag is enabled. "},{"snippet":"FLAG_DISCARD_ALPHA","displayText":"FLAG_DISCARD_ALPHA","type":"constant","leftLabel":"3","description":" "},{"snippet":"FLAG_VIDEO_SURFACE","displayText":"FLAG_VIDEO_SURFACE","type":"constant","leftLabel":"4096","description":" Texture is a video surface. "},{"snippet":"FX_PARAM_FOG_BEGIN","displayText":"FX_PARAM_FOG_BEGIN","type":"constant","leftLabel":"19","description":" "},{"snippet":"FX_PARAM_HDR_WHITE","displayText":"FX_PARAM_HDR_WHITE","type":"constant","leftLabel":"13","description":" "},{"snippet":"FLAG_RELATIVE_PATHS","displayText":"FLAG_RELATIVE_PATHS","type":"constant","leftLabel":"1","description":" "},{"snippet":"FLAG_USE_POINT_SIZE","displayText":"FLAG_USE_POINT_SIZE","type":"constant","leftLabel":"2","description":" "},{"snippet":"FORMAT_PVRTC2_ALPHA","displayText":"FORMAT_PVRTC2_ALPHA","type":"constant","leftLabel":"15","description":" "},{"snippet":"FORMAT_PVRTC4_ALPHA","displayText":"FORMAT_PVRTC4_ALPHA","type":"constant","leftLabel":"17","description":" "},{"snippet":"FX_PARAM_GLOW_BLOOM","displayText":"FX_PARAM_GLOW_BLOOM","type":"constant","leftLabel":"6","description":" "},{"snippet":"FLAG_BILLBOARD_FIX_Y","displayText":"FLAG_BILLBOARD_FIX_Y","type":"constant","leftLabel":"2","description":" "},{"snippet":"FLAG_LIGHTMAP_ON_UV2","displayText":"FLAG_LIGHTMAP_ON_UV2","type":"constant","leftLabel":"5","description":" "},{"snippet":"FLAG_RECEIVE_SHADOWS","displayText":"FLAG_RECEIVE_SHADOWS","type":"constant","leftLabel":"4","description":" "},{"snippet":"FLAG_SAVE_BIG_ENDIAN","displayText":"FLAG_SAVE_BIG_ENDIAN","type":"constant","leftLabel":"16","description":" "},{"snippet":"FLAG_USE_COLOR_ARRAY","displayText":"FLAG_USE_COLOR_ARRAY","type":"constant","leftLabel":"1","description":" "},{"snippet":"FORMAT_INDEXED_ALPHA","displayText":"FORMAT_INDEXED_ALPHA","type":"constant","leftLabel":"6","description":" "},{"snippet":"FLAG_BUNDLE_RESOURCES","displayText":"FLAG_BUNDLE_RESOURCES","type":"constant","leftLabel":"2","description":" "},{"snippet":"FLAG_COLOR_ARRAY_SRGB","displayText":"FLAG_COLOR_ARRAY_SRGB","type":"constant","leftLabel":"6","description":" "},{"snippet":"FX_PARAM_BCS_CONTRAST","displayText":"FX_PARAM_BCS_CONTRAST","type":"constant","leftLabel":"25","description":" "},{"snippet":"FX_PARAM_HDR_EXPOSURE","displayText":"FX_PARAM_HDR_EXPOSURE","type":"constant","leftLabel":"12","description":" "},{"snippet":"FLAG_CONVERT_TO_LINEAR","displayText":"FLAG_CONVERT_TO_LINEAR","type":"constant","leftLabel":"16","description":" "},{"snippet":"FORMAT_GRAYSCALE_ALPHA","displayText":"FORMAT_GRAYSCALE_ALPHA","type":"constant","leftLabel":"2","description":" "},{"snippet":"FX_HDR_TONE_MAPPER_LOG","displayText":"FX_HDR_TONE_MAPPER_LOG","type":"constant","leftLabel":"1","description":" "},{"snippet":"FX_PARAM_FOG_END_COLOR","displayText":"FX_PARAM_FOG_END_COLOR","type":"constant","leftLabel":"21","description":" "},{"snippet":"FLAG_ANISOTROPIC_FILTER","displayText":"FLAG_ANISOTROPIC_FILTER","type":"constant","leftLabel":"8","description":" "},{"snippet":"FX_PARAM_BCS_BRIGHTNESS","displayText":"FX_PARAM_BCS_BRIGHTNESS","type":"constant","leftLabel":"24","description":" "},{"snippet":"FX_PARAM_BCS_SATURATION","displayText":"FX_PARAM_BCS_SATURATION","type":"constant","leftLabel":"26","description":" "},{"snippet":"FX_PARAM_DOF_BLUR_BEGIN","displayText":"FX_PARAM_DOF_BLUR_BEGIN","type":"constant","leftLabel":"9","description":" "},{"snippet":"FX_PARAM_DOF_BLUR_RANGE","displayText":"FX_PARAM_DOF_BLUR_RANGE","type":"constant","leftLabel":"10","description":" "},{"snippet":"FX_PARAM_HDR_GLOW_SCALE","displayText":"FX_PARAM_HDR_GLOW_SCALE","type":"constant","leftLabel":"15","description":" "},{"snippet":"FX_PARAM_HDR_TONEMAPPER","displayText":"FX_PARAM_HDR_TONEMAPPER","type":"constant","leftLabel":"11","description":" "},{"snippet":"FIXED_MATERIAL_PARAM_MAX","displayText":"FIXED_MATERIAL_PARAM_MAX","type":"constant","leftLabel":"8","description":" "},{"snippet":"FLAG_ENABLE_LINEAR_LIMIT","displayText":"FLAG_ENABLE_LINEAR_LIMIT","type":"constant","leftLabel":"0","description":" "},{"snippet":"FX_PARAM_DOF_BLUR_PASSES","displayText":"FX_PARAM_DOF_BLUR_PASSES","type":"constant","leftLabel":"8","description":" "},{"snippet":"FX_PARAM_FOG_ATTENUATION","displayText":"FX_PARAM_FOG_ATTENUATION","type":"constant","leftLabel":"22","description":" "},{"snippet":"FX_PARAM_FOG_BEGIN_COLOR","displayText":"FX_PARAM_FOG_BEGIN_COLOR","type":"constant","leftLabel":"20","description":" "},{"snippet":"FX_PARAM_GLOW_BLUR_SCALE","displayText":"FX_PARAM_GLOW_BLUR_SCALE","type":"constant","leftLabel":"3","description":" "},{"snippet":"FIXED_MATERIAL_PARAM_GLOW","displayText":"FIXED_MATERIAL_PARAM_GLOW","type":"constant","leftLabel":"5","description":" "},{"snippet":"FLAG_ENABLE_ANGULAR_LIMIT","displayText":"FLAG_ENABLE_ANGULAR_LIMIT","type":"constant","leftLabel":"1","description":" "},{"snippet":"FLAG_VISIBLE_IN_ALL_ROOMS","displayText":"FLAG_VISIBLE_IN_ALL_ROOMS","type":"constant","leftLabel":"6","description":" "},{"snippet":"FORMAT_ATC_ALPHA_EXPLICIT","displayText":"FORMAT_ATC_ALPHA_EXPLICIT","type":"constant","leftLabel":"20","description":" "},{"snippet":"FX_BLUR_BLEND_MODE_SCREEN","displayText":"FX_BLUR_BLEND_MODE_SCREEN","type":"constant","leftLabel":"1","description":" "},{"snippet":"FX_HDR_TONE_MAPPER_LINEAR","displayText":"FX_HDR_TONE_MAPPER_LINEAR","type":"constant","leftLabel":"0","description":" "},{"snippet":"FX_PARAM_GLOW_BLUR_PASSES","displayText":"FX_PARAM_GLOW_BLUR_PASSES","type":"constant","leftLabel":"2","description":" "},{"snippet":"FIXED_MATERIAL_TEXCOORD_UV","displayText":"FIXED_MATERIAL_TEXCOORD_UV","type":"constant","leftLabel":"0","description":" "},{"snippet":"FX_PARAM_HDR_GLOW_TRESHOLD","displayText":"FX_PARAM_HDR_GLOW_TRESHOLD","type":"constant","leftLabel":"14","description":" "},{"snippet":"FX_PARAM_HDR_MAX_LUMINANCE","displayText":"FX_PARAM_HDR_MAX_LUMINANCE","type":"constant","leftLabel":"17","description":" "},{"snippet":"FX_PARAM_HDR_MIN_LUMINANCE","displayText":"FX_PARAM_HDR_MIN_LUMINANCE","type":"constant","leftLabel":"16","description":" "},{"snippet":"FIXED_MATERIAL_PARAM_DETAIL","displayText":"FIXED_MATERIAL_PARAM_DETAIL","type":"constant","leftLabel":"1","description":" "},{"snippet":"FIXED_MATERIAL_PARAM_NORMAL","displayText":"FIXED_MATERIAL_PARAM_NORMAL","type":"constant","leftLabel":"6","description":" "},{"snippet":"FIXED_MATERIAL_TEXCOORD_UV2","displayText":"FIXED_MATERIAL_TEXCOORD_UV2","type":"constant","leftLabel":"2","description":" "},{"snippet":"FLAG_OMIT_EDITOR_PROPERTIES","displayText":"FLAG_OMIT_EDITOR_PROPERTIES","type":"constant","leftLabel":"8","description":" "},{"snippet":"FX_BLUR_BLEND_MODE_ADDITIVE","displayText":"FX_BLUR_BLEND_MODE_ADDITIVE","type":"constant","leftLabel":"0","description":" "},{"snippet":"FX_PARAM_GLOW_BLUR_STRENGTH","displayText":"FX_PARAM_GLOW_BLUR_STRENGTH","type":"constant","leftLabel":"4","description":" "},{"snippet":"FIXED_MATERIAL_PARAM_DIFFUSE","displayText":"FIXED_MATERIAL_PARAM_DIFFUSE","type":"constant","leftLabel":"0","description":" "},{"snippet":"FX_BLUR_BLEND_MODE_SOFTLIGHT","displayText":"FX_BLUR_BLEND_MODE_SOFTLIGHT","type":"constant","leftLabel":"2","description":" "},{"snippet":"FX_HDR_TONE_MAPPER_REINHARDT","displayText":"FX_HDR_TONE_MAPPER_REINHARDT","type":"constant","leftLabel":"2","description":" "},{"snippet":"FX_PARAM_AMBIENT_LIGHT_COLOR","displayText":"FX_PARAM_AMBIENT_LIGHT_COLOR","type":"constant","leftLabel":"0","description":" "},{"snippet":"FX_PARAM_GLOW_BLOOM_TRESHOLD","displayText":"FX_PARAM_GLOW_BLOOM_TRESHOLD","type":"constant","leftLabel":"7","description":" "},{"snippet":"FIXED_MATERIAL_PARAM_EMISSION","displayText":"FIXED_MATERIAL_PARAM_EMISSION","type":"constant","leftLabel":"3","description":" "},{"snippet":"FIXED_MATERIAL_PARAM_SPECULAR","displayText":"FIXED_MATERIAL_PARAM_SPECULAR","type":"constant","leftLabel":"2","description":" "},{"snippet":"FORMAT_ATC_ALPHA_INTERPOLATED","displayText":"FORMAT_ATC_ALPHA_INTERPOLATED","type":"constant","leftLabel":"21","description":" "},{"snippet":"FX_PARAM_AMBIENT_LIGHT_ENERGY","displayText":"FX_PARAM_AMBIENT_LIGHT_ENERGY","type":"constant","leftLabel":"1","description":" "},{"snippet":"FX_PARAM_GLOW_BLUR_BLEND_MODE","displayText":"FX_PARAM_GLOW_BLUR_BLEND_MODE","type":"constant","leftLabel":"5","description":" "},{"snippet":"FIXED_MATERIAL_TEXCOORD_SPHERE","displayText":"FIXED_MATERIAL_TEXCOORD_SPHERE","type":"constant","leftLabel":"3","description":" "},{"snippet":"FIXED_MATERIAL_PARAM_SHADE_PARAM","displayText":"FIXED_MATERIAL_PARAM_SHADE_PARAM","type":"constant","leftLabel":"7","description":" "},{"snippet":"FIXED_MATERIAL_PARAM_SPECULAR_EXP","displayText":"FIXED_MATERIAL_PARAM_SPECULAR_EXP","type":"constant","leftLabel":"4","description":" "},{"snippet":"FX_PARAM_HDR_EXPOSURE_ADJUST_SPEED","displayText":"FX_PARAM_HDR_EXPOSURE_ADJUST_SPEED","type":"constant","leftLabel":"18","description":" "},{"snippet":"FIXED_MATERIAL_TEXCOORD_UV_TRANSFORM","displayText":"FIXED_MATERIAL_TEXCOORD_UV_TRANSFORM","type":"constant","leftLabel":"1","description":" "},{"snippet":"FX_HDR_TONE_MAPPER_REINHARDT_AUTOWHITE","displayText":"FX_HDR_TONE_MAPPER_REINHARDT_AUTOWHITE","type":"constant","leftLabel":"3","description":" "}],"E":[{"snippet":"EASE_IN","displayText":"EASE_IN","type":"constant","leftLabel":"0","description":" "},{"snippet":"ERR_BUG","displayText":"ERR_BUG","type":"constant","leftLabel":"46","description":" "},{"snippet":"ERR_WTF","displayText":"ERR_WTF","type":"constant","leftLabel":"48","description":" "},{"snippet":"EASE_OUT","displayText":"EASE_OUT","type":"constant","leftLabel":"1","description":" "},{"snippet":"ERR_BUSY","displayText":"ERR_BUSY","type":"constant","leftLabel":"43","description":" "},{"snippet":"ERR_HELP","displayText":"ERR_HELP","type":"constant","leftLabel":"45","description":" "},{"snippet":"ERR_LOCKED","displayText":"ERR_LOCKED","type":"constant","leftLabel":"22","description":" "},{"snippet":"EASE_IN_OUT","displayText":"EASE_IN_OUT","type":"constant","leftLabel":"2","description":" "},{"snippet":"EASE_OUT_IN","displayText":"EASE_OUT_IN","type":"constant","leftLabel":"3","description":" "},{"snippet":"ENABLER_MAX","displayText":"ENABLER_MAX","type":"constant","leftLabel":"2","description":" "},{"snippet":"ERR_TIMEOUT","displayText":"ERR_TIMEOUT","type":"constant","leftLabel":"23","description":" "},{"snippet":"ERR_FILE_EOF","displayText":"ERR_FILE_EOF","type":"constant","leftLabel":"17","description":" "},{"snippet":"ERR_CANT_OPEN","displayText":"ERR_CANT_OPEN","type":"constant","leftLabel":"18","description":" "},{"snippet":"ERR_CANT_CREATE","displayText":"ERR_CANT_CREATE","type":"constant","leftLabel":"19","description":" "},{"snippet":"ERR_CYCLIC_LINK","displayText":"ERR_CYCLIC_LINK","type":"constant","leftLabel":"39","description":" "},{"snippet":"ERR_LINK_FAILED","displayText":"ERR_LINK_FAILED","type":"constant","leftLabel":"37","description":" "},{"snippet":"ERR_UNAVAILABLE","displayText":"ERR_UNAVAILABLE","type":"constant","leftLabel":"2","description":" "},{"snippet":"ERR_FILE_CORRUPT","displayText":"ERR_FILE_CORRUPT","type":"constant","leftLabel":"16","description":" "},{"snippet":"ERR_INVALID_DATA","displayText":"ERR_INVALID_DATA","type":"constant","leftLabel":"29","description":" "},{"snippet":"ERR_UNAUTHORIZED","displayText":"ERR_UNAUTHORIZED","type":"constant","leftLabel":"4","description":" "},{"snippet":"ERR_UNCONFIGURED","displayText":"ERR_UNCONFIGURED","type":"constant","leftLabel":"3","description":" "},{"snippet":"ERR_FILE_BAD_PATH","displayText":"ERR_FILE_BAD_PATH","type":"constant","leftLabel":"9","description":" "},{"snippet":"ERR_OUT_OF_MEMORY","displayText":"ERR_OUT_OF_MEMORY","type":"constant","leftLabel":"6","description":" "},{"snippet":"ERR_SCRIPT_FAILED","displayText":"ERR_SCRIPT_FAILED","type":"constant","leftLabel":"38","description":" "},{"snippet":"ERR_ALREADY_EXISTS","displayText":"ERR_ALREADY_EXISTS","type":"constant","leftLabel":"31","description":" "},{"snippet":"ERR_ALREADY_IN_USE","displayText":"ERR_ALREADY_IN_USE","type":"constant","leftLabel":"21","description":" "},{"snippet":"ERR_DOES_NOT_EXIST","displayText":"ERR_DOES_NOT_EXIST","type":"constant","leftLabel":"32","description":" "},{"snippet":"ERR_FILE_BAD_DRIVE","displayText":"ERR_FILE_BAD_DRIVE","type":"constant","leftLabel":"8","description":" "},{"snippet":"ERR_FILE_CANT_OPEN","displayText":"ERR_FILE_CANT_OPEN","type":"constant","leftLabel":"12","description":" "},{"snippet":"ERR_FILE_CANT_READ","displayText":"ERR_FILE_CANT_READ","type":"constant","leftLabel":"14","description":" "},{"snippet":"ERR_FILE_NOT_FOUND","displayText":"ERR_FILE_NOT_FOUND","type":"constant","leftLabel":"7","description":" "},{"snippet":"ERROR_QUERY_FAILED","displayText":"ERROR_QUERY_FAILED","type":"constant","leftLabel":"20","description":" "},{"snippet":"ERR_FILE_CANT_WRITE","displayText":"ERR_FILE_CANT_WRITE","type":"constant","leftLabel":"13","description":" "},{"snippet":"ERR_METHOD_NOT_FOUND","displayText":"ERR_METHOD_NOT_FOUND","type":"constant","leftLabel":"36","description":" "},{"snippet":"ENABLER_FREEZE_BODIES","displayText":"ENABLER_FREEZE_BODIES","type":"constant","leftLabel":"1","description":" "},{"snippet":"ERR_FILE_UNRECOGNIZED","displayText":"ERR_FILE_UNRECOGNIZED","type":"constant","leftLabel":"15","description":" "},{"snippet":"ERR_INVALID_PARAMETER","displayText":"ERR_INVALID_PARAMETER","type":"constant","leftLabel":"30","description":" "},{"snippet":"ERR_COMPILATION_FAILED","displayText":"ERR_COMPILATION_FAILED","type":"constant","leftLabel":"35","description":" "},{"snippet":"ERR_DATABASE_CANT_READ","displayText":"ERR_DATABASE_CANT_READ","type":"constant","leftLabel":"33","description":" "},{"snippet":"ERR_FILE_NO_PERMISSION","displayText":"ERR_FILE_NO_PERMISSION","type":"constant","leftLabel":"10","description":" "},{"snippet":"ERR_DATABASE_CANT_WRITE","displayText":"ERR_DATABASE_CANT_WRITE","type":"constant","leftLabel":"34","description":" "},{"snippet":"ERR_FILE_ALREADY_IN_USE","displayText":"ERR_FILE_ALREADY_IN_USE","type":"constant","leftLabel":"11","description":" "},{"snippet":"ENABLER_PAUSE_ANIMATIONS","displayText":"ENABLER_PAUSE_ANIMATIONS","type":"constant","leftLabel":"0","description":" "},{"snippet":"ERR_CANT_AQUIRE_RESOURCE","displayText":"ERR_CANT_AQUIRE_RESOURCE","type":"constant","leftLabel":"27","description":" "},{"snippet":"ERR_PARAMETER_RANGE_ERROR","displayText":"ERR_PARAMETER_RANGE_ERROR","type":"constant","leftLabel":"5","description":" "}],"T":[{"snippet":"TIME_FPS","displayText":"TIME_FPS","type":"constant","leftLabel":"0","description":" "},{"snippet":"TYPE_INT","displayText":"TYPE_INT","type":"constant","leftLabel":"2","description":" Variable is of type integer. "},{"snippet":"TYPE_MAX","displayText":"TYPE_MAX","type":"constant","leftLabel":"29","description":" "},{"snippet":"TYPE_NIL","displayText":"TYPE_NIL","type":"constant","leftLabel":"0","description":" Variable is of type nil (only applied for null). "},{"snippet":"TYPE_RID","displayText":"TYPE_RID","type":"constant","leftLabel":"17","description":" Variable is fo type [RID]. "},{"snippet":"TYPE_AABB","displayText":"TYPE_AABB","type":"constant","leftLabel":"11","description":" Variable is of type [AABB]. "},{"snippet":"TYPE_BOOL","displayText":"TYPE_BOOL","type":"constant","leftLabel":"1","description":" Variable is of type bool. "},{"snippet":"TYPE_QUAT","displayText":"TYPE_QUAT","type":"constant","leftLabel":"10","description":" Variable is of type [Quat]. "},{"snippet":"TYPE_REAL","displayText":"TYPE_REAL","type":"constant","leftLabel":"3","description":" Variable is of type float/real. "},{"snippet":"TRANS_BACK","displayText":"TRANS_BACK","type":"constant","leftLabel":"10","description":" "},{"snippet":"TRANS_CIRC","displayText":"TRANS_CIRC","type":"constant","leftLabel":"8","description":" "},{"snippet":"TRANS_EXPO","displayText":"TRANS_EXPO","type":"constant","leftLabel":"5","description":" "},{"snippet":"TRANS_QUAD","displayText":"TRANS_QUAD","type":"constant","leftLabel":"4","description":" "},{"snippet":"TRANS_SINE","displayText":"TRANS_SINE","type":"constant","leftLabel":"1","description":" "},{"snippet":"TYPE_ARRAY","displayText":"TYPE_ARRAY","type":"constant","leftLabel":"21","description":" Variable is fo type [Array]. "},{"snippet":"TYPE_COLOR","displayText":"TYPE_COLOR","type":"constant","leftLabel":"14","description":" Variable is fo type [Color]. "},{"snippet":"TYPE_IMAGE","displayText":"TYPE_IMAGE","type":"constant","leftLabel":"15","description":" Variable is fo type [Image]. "},{"snippet":"TYPE_PLANE","displayText":"TYPE_PLANE","type":"constant","leftLabel":"9","description":" Variable is of type [Plane]. "},{"snippet":"TYPE_RECT2","displayText":"TYPE_RECT2","type":"constant","leftLabel":"6","description":" Variable is of type [Rect2]. "},{"snippet":"TYPE_VALUE","displayText":"TYPE_VALUE","type":"constant","leftLabel":"0","description":" Value tracks set values in node properties, but only those which can be Interpolated. "},{"snippet":"TEXCOORD_UV","displayText":"TEXCOORD_UV","type":"constant","leftLabel":"0","description":" Read texture coordinates from the UV array. "},{"snippet":"TRANS_CUBIC","displayText":"TRANS_CUBIC","type":"constant","leftLabel":"7","description":" "},{"snippet":"TRANS_QUART","displayText":"TRANS_QUART","type":"constant","leftLabel":"3","description":" "},{"snippet":"TRANS_QUINT","displayText":"TRANS_QUINT","type":"constant","leftLabel":"2","description":" "},{"snippet":"TYPE_METHOD","displayText":"TYPE_METHOD","type":"constant","leftLabel":"2","description":" Method tracks call functions with given arguments per key. "},{"snippet":"TYPE_OBJECT","displayText":"TYPE_OBJECT","type":"constant","leftLabel":"18","description":" Variable is fo type [Object]. "},{"snippet":"TYPE_STRING","displayText":"TYPE_STRING","type":"constant","leftLabel":"4","description":" Variable is of type [String]. "},{"snippet":"TEXCOORD_UV2","displayText":"TEXCOORD_UV2","type":"constant","leftLabel":"2","description":" Read texture coordinates from the UV2 array. "},{"snippet":"TIME_PROCESS","displayText":"TIME_PROCESS","type":"constant","leftLabel":"1","description":" "},{"snippet":"TRANS_BOUNCE","displayText":"TRANS_BOUNCE","type":"constant","leftLabel":"9","description":" "},{"snippet":"TRANS_LINEAR","displayText":"TRANS_LINEAR","type":"constant","leftLabel":"0","description":" "},{"snippet":"TYPE_MATRIX3","displayText":"TYPE_MATRIX3","type":"constant","leftLabel":"12","description":" Variable is fo type [Matrix3]. "},{"snippet":"TYPE_VECTOR2","displayText":"TYPE_VECTOR2","type":"constant","leftLabel":"5","description":" Variable is of type [Vector2]. "},{"snippet":"TYPE_VECTOR3","displayText":"TYPE_VECTOR3","type":"constant","leftLabel":"7","description":" Variable is of type [Vector3]. "},{"snippet":"TRANS_ELASTIC","displayText":"TRANS_ELASTIC","type":"constant","leftLabel":"6","description":" "},{"snippet":"TYPE_MATRIX32","displayText":"TYPE_MATRIX32","type":"constant","leftLabel":"8","description":" Variable is of type [Matrix32]. "},{"snippet":"TYPE_INT_ARRAY","displayText":"TYPE_INT_ARRAY","type":"constant","leftLabel":"23","description":" "},{"snippet":"TYPE_MASK_AREA","displayText":"TYPE_MASK_AREA","type":"constant","leftLabel":"16","description":" "},{"snippet":"TYPE_NODE_PATH","displayText":"TYPE_NODE_PATH","type":"constant","leftLabel":"16","description":" Variable is fo type [NodePath]. "},{"snippet":"TYPE_RAW_ARRAY","displayText":"TYPE_RAW_ARRAY","type":"constant","leftLabel":"22","description":" "},{"snippet":"TYPE_TRANSFORM","displayText":"TYPE_TRANSFORM","type":"constant","leftLabel":"1","description":" Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are Interpolated. "},{"snippet":"TEXCOORD_SPHERE","displayText":"TEXCOORD_SPHERE","type":"constant","leftLabel":"3","description":" "},{"snippet":"TYPE_DICTIONARY","displayText":"TYPE_DICTIONARY","type":"constant","leftLabel":"20","description":" Variable is fo type [Dictionary]. "},{"snippet":"TYPE_REAL_ARRAY","displayText":"TYPE_REAL_ARRAY","type":"constant","leftLabel":"24","description":" "},{"snippet":"TYPE_COLOR_ARRAY","displayText":"TYPE_COLOR_ARRAY","type":"constant","leftLabel":"28","description":" "},{"snippet":"TYPE_INPUT_EVENT","displayText":"TYPE_INPUT_EVENT","type":"constant","leftLabel":"19","description":" Variable is fo type [InputEvent]. "},{"snippet":"TYPE_STRING_ARRAY","displayText":"TYPE_STRING_ARRAY","type":"constant","leftLabel":"25","description":" "},{"snippet":"TIME_FIXED_PROCESS","displayText":"TIME_FIXED_PROCESS","type":"constant","leftLabel":"2","description":" "},{"snippet":"TYPE_VECTOR2_ARRAY","displayText":"TYPE_VECTOR2_ARRAY","type":"constant","leftLabel":"26","description":" "},{"snippet":"TYPE_VECTOR3_ARRAY","displayText":"TYPE_VECTOR3_ARRAY","type":"constant","leftLabel":"27","description":" "},{"snippet":"TEXTURE_FLAG_FILTER","displayText":"TEXTURE_FLAG_FILTER","type":"constant","leftLabel":"4","description":" "},{"snippet":"TEXTURE_FLAG_REPEAT","displayText":"TEXTURE_FLAG_REPEAT","type":"constant","leftLabel":"2","description":" "},{"snippet":"TYPE_MASK_COLLISION","displayText":"TYPE_MASK_COLLISION","type":"constant","leftLabel":"15","description":" "},{"snippet":"TEXTURE_FLAG_CUBEMAP","displayText":"TEXTURE_FLAG_CUBEMAP","type":"constant","leftLabel":"2048","description":" "},{"snippet":"TEXTURE_FLAG_MIPMAPS","displayText":"TEXTURE_FLAG_MIPMAPS","type":"constant","leftLabel":"1","description":" "},{"snippet":"TYPE_MASK_RIGID_BODY","displayText":"TYPE_MASK_RIGID_BODY","type":"constant","leftLabel":"4","description":" "},{"snippet":"TEXCOORD_UV_TRANSFORM","displayText":"TEXCOORD_UV_TRANSFORM","type":"constant","leftLabel":"1","description":" Read texture coordinates from the UV array and transform them by uv_xform. "},{"snippet":"TEXTURE_FLAGS_DEFAULT","displayText":"TEXTURE_FLAGS_DEFAULT","type":"constant","leftLabel":"7","description":" "},{"snippet":"TYPE_MASK_STATIC_BODY","displayText":"TYPE_MASK_STATIC_BODY","type":"constant","leftLabel":"1","description":" "},{"snippet":"TYPE_MASK_CHARACTER_BODY","displayText":"TYPE_MASK_CHARACTER_BODY","type":"constant","leftLabel":"8","description":" "},{"snippet":"TYPE_MASK_KINEMATIC_BODY","displayText":"TYPE_MASK_KINEMATIC_BODY","type":"constant","leftLabel":"2","description":" "}],"I":[{"snippet":"ITEM_FONT","displayText":"ITEM_FONT","type":"constant","leftLabel":"4","description":" "},{"snippet":"ITEM_LIST","displayText":"ITEM_LIST","type":"constant","leftLabel":"9","description":" "},{"snippet":"ITEM_MAIN","displayText":"ITEM_MAIN","type":"constant","leftLabel":"0","description":" "},{"snippet":"ITEM_META","displayText":"ITEM_META","type":"constant","leftLabel":"10","description":" "},{"snippet":"ITEM_TEXT","displayText":"ITEM_TEXT","type":"constant","leftLabel":"1","description":" "},{"snippet":"ITEM_ALIGN","displayText":"ITEM_ALIGN","type":"constant","leftLabel":"7","description":" "},{"snippet":"ITEM_COLOR","displayText":"ITEM_COLOR","type":"constant","leftLabel":"5","description":" "},{"snippet":"ITEM_IMAGE","displayText":"ITEM_IMAGE","type":"constant","leftLabel":"2","description":" "},{"snippet":"ITEM_INDENT","displayText":"ITEM_INDENT","type":"constant","leftLabel":"8","description":" "},{"snippet":"INVALID_CELL","displayText":"INVALID_CELL","type":"constant","leftLabel":"-1","description":" Returned when a cell doesn't exist. "},{"snippet":"ITEM_NEWLINE","displayText":"ITEM_NEWLINE","type":"constant","leftLabel":"3","description":" "},{"snippet":"INSTANCE_MESH","displayText":"INSTANCE_MESH","type":"constant","leftLabel":"1","description":" "},{"snippet":"INSTANCE_ROOM","displayText":"INSTANCE_ROOM","type":"constant","leftLabel":"6","description":" "},{"snippet":"INVALID_VOICE","displayText":"INVALID_VOICE","type":"constant","leftLabel":"-1","description":" If the voice is invalid, this is returned. "},{"snippet":"INSTANCE_LIGHT","displayText":"INSTANCE_LIGHT","type":"constant","leftLabel":"5","description":" "},{"snippet":"ITEM_UNDERLINE","displayText":"ITEM_UNDERLINE","type":"constant","leftLabel":"6","description":" "},{"snippet":"INSTANCE_PORTAL","displayText":"INSTANCE_PORTAL","type":"constant","leftLabel":"7","description":" "},{"snippet":"INFO_ISLAND_COUNT","displayText":"INFO_ISLAND_COUNT","type":"constant","leftLabel":"2","description":" "},{"snippet":"INVALID_CELL_ITEM","displayText":"INVALID_CELL_ITEM","type":"constant","leftLabel":"-1","description":" "},{"snippet":"INSTANCE_MULTIMESH","displayText":"INSTANCE_MULTIMESH","type":"constant","leftLabel":"2","description":" "},{"snippet":"INSTANCE_PARTICLES","displayText":"INSTANCE_PARTICLES","type":"constant","leftLabel":"4","description":" "},{"snippet":"INFO_ACTIVE_OBJECTS","displayText":"INFO_ACTIVE_OBJECTS","type":"constant","leftLabel":"0","description":" "},{"snippet":"INFO_VIDEO_MEM_USED","displayText":"INFO_VIDEO_MEM_USED","type":"constant","leftLabel":"7","description":" "},{"snippet":"INTERPOLATION_CUBIC","displayText":"INTERPOLATION_CUBIC","type":"constant","leftLabel":"2","description":" Cubic interpolation. "},{"snippet":"INFO_COLLISION_PAIRS","displayText":"INFO_COLLISION_PAIRS","type":"constant","leftLabel":"1","description":" "},{"snippet":"INFO_VERTEX_MEM_USED","displayText":"INFO_VERTEX_MEM_USED","type":"constant","leftLabel":"9","description":" "},{"snippet":"INTERPOLATION_LINEAR","displayText":"INTERPOLATION_LINEAR","type":"constant","leftLabel":"1","description":" Linear interpolation. "},{"snippet":"INFO_OBJECTS_IN_FRAME","displayText":"INFO_OBJECTS_IN_FRAME","type":"constant","leftLabel":"0","description":" "},{"snippet":"INFO_TEXTURE_MEM_USED","displayText":"INFO_TEXTURE_MEM_USED","type":"constant","leftLabel":"8","description":" "},{"snippet":"INTERPOLATION_NEAREST","displayText":"INTERPOLATION_NEAREST","type":"constant","leftLabel":"0","description":" No interpolation (nearest value). "},{"snippet":"INFO_VERTICES_IN_FRAME","displayText":"INFO_VERTICES_IN_FRAME","type":"constant","leftLabel":"1","description":" "},{"snippet":"INSTANCE_GEOMETRY_MASK","displayText":"INSTANCE_GEOMETRY_MASK","type":"constant","leftLabel":"30","description":" "},{"snippet":"INFO_DRAW_CALLS_IN_FRAME","displayText":"INFO_DRAW_CALLS_IN_FRAME","type":"constant","leftLabel":"5","description":" "},{"snippet":"INFO_USAGE_VIDEO_MEM_TOTAL","displayText":"INFO_USAGE_VIDEO_MEM_TOTAL","type":"constant","leftLabel":"6","description":" "},{"snippet":"INFO_SHADER_CHANGES_IN_FRAME","displayText":"INFO_SHADER_CHANGES_IN_FRAME","type":"constant","leftLabel":"3","description":" "},{"snippet":"INFO_SURFACE_CHANGES_IN_FRAME","displayText":"INFO_SURFACE_CHANGES_IN_FRAME","type":"constant","leftLabel":"4","description":" "},{"snippet":"INFO_MATERIAL_CHANGES_IN_FRAME","displayText":"INFO_MATERIAL_CHANGES_IN_FRAME","type":"constant","leftLabel":"2","description":" "}],"A":[{"snippet":"ACTION","displayText":"ACTION","type":"constant","leftLabel":"8","description":" "},{"snippet":"AXIS_X","displayText":"AXIS_X","type":"constant","leftLabel":"0","description":" "},{"snippet":"AXIS_Y","displayText":"AXIS_Y","type":"constant","leftLabel":"1","description":" "},{"snippet":"AXIS_Z","displayText":"AXIS_Z","type":"constant","leftLabel":"2","description":" "},{"snippet":"ALIGN_END","displayText":"ALIGN_END","type":"constant","leftLabel":"2","description":" Align buttons at the end. "},{"snippet":"ARRAY_MAX","displayText":"ARRAY_MAX","type":"constant","leftLabel":"9","description":" "},{"snippet":"ALIGN_FILL","displayText":"ALIGN_FILL","type":"constant","leftLabel":"3","description":" Expand row whitespaces to fit the width. "},{"snippet":"ALIGN_LEFT","displayText":"ALIGN_LEFT","type":"constant","leftLabel":"0","description":" Align rows to the left (default). "},{"snippet":"ANCHOR_END","displayText":"ANCHOR_END","type":"constant","leftLabel":"1","description":" X is relative to -MARGIN_RIGHT, Y is relative to -MARGIN_BOTTOM. "},{"snippet":"ALIGN_BEGIN","displayText":"ALIGN_BEGIN","type":"constant","leftLabel":"0","description":" Align buttons at the begining. "},{"snippet":"ALIGN_RIGHT","displayText":"ALIGN_RIGHT","type":"constant","leftLabel":"2","description":" Align rows to the right (default). "},{"snippet":"ARRAY_BONES","displayText":"ARRAY_BONES","type":"constant","leftLabel":"6","description":" "},{"snippet":"ARRAY_COLOR","displayText":"ARRAY_COLOR","type":"constant","leftLabel":"3","description":" Vertex array (array of [Color]() colors). "},{"snippet":"ARRAY_INDEX","displayText":"ARRAY_INDEX","type":"constant","leftLabel":"8","description":" Array of integers, used as indices referencing vertices. No index can be beyond the vertex array size. "},{"snippet":"ALIGN_CENTER","displayText":"ALIGN_CENTER","type":"constant","leftLabel":"1","description":" Align rows centered. "},{"snippet":"ANCHOR_BEGIN","displayText":"ANCHOR_BEGIN","type":"constant","leftLabel":"0","description":" X is relative to MARGIN_LEFT, Y is relative to MARGIN_TOP. "},{"snippet":"ANCHOR_RATIO","displayText":"ANCHOR_RATIO","type":"constant","leftLabel":"2","description":" X and Y are a ratio (0 to 1) relative to the parent size 0 is left/top, 1 is right/bottom. "},{"snippet":"ARRAY_NORMAL","displayText":"ARRAY_NORMAL","type":"constant","leftLabel":"1","description":" "},{"snippet":"ARRAY_TEX_UV","displayText":"ARRAY_TEX_UV","type":"constant","leftLabel":"4","description":" "},{"snippet":"ARRAY_VERTEX","displayText":"ARRAY_VERTEX","type":"constant","leftLabel":"0","description":" Vertex array (array of [Vector3]() vertices). "},{"snippet":"ANCHOR_CENTER","displayText":"ANCHOR_CENTER","type":"constant","leftLabel":"3","description":" "},{"snippet":"ARRAY_TANGENT","displayText":"ARRAY_TANGENT","type":"constant","leftLabel":"2","description":" Tangent array, array of groups of 4 floats. first 3 floats determine the tangent, and the last the binormal direction as -1 or 1. "},{"snippet":"ARRAY_TEX_UV2","displayText":"ARRAY_TEX_UV2","type":"constant","leftLabel":"5","description":" Second UV array (array of [Vector3]() UVs or float array of groups of 2 floats (u,v)). "},{"snippet":"ARRAY_WEIGHTS","displayText":"ARRAY_WEIGHTS","type":"constant","leftLabel":"7","description":" "},{"snippet":"ACCESS_USERDATA","displayText":"ACCESS_USERDATA","type":"constant","leftLabel":"1","description":" "},{"snippet":"AREA_BODY_ADDED","displayText":"AREA_BODY_ADDED","type":"constant","leftLabel":"0","description":" "},{"snippet":"ACCESS_RESOURCES","displayText":"ACCESS_RESOURCES","type":"constant","leftLabel":"0","description":" "},{"snippet":"ACCESS_FILESYSTEM","displayText":"ACCESS_FILESYSTEM","type":"constant","leftLabel":"2","description":" "},{"snippet":"ALIGN_EXPAND_FILL","displayText":"ALIGN_EXPAND_FILL","type":"constant","leftLabel":"4","description":" Spread the buttons, but expand them. "},{"snippet":"ALPHA_CUT_DISCARD","displayText":"ALPHA_CUT_DISCARD","type":"constant","leftLabel":"1","description":" "},{"snippet":"AREA_BODY_REMOVED","displayText":"AREA_BODY_REMOVED","type":"constant","leftLabel":"1","description":" "},{"snippet":"ALPHA_CUT_DISABLED","displayText":"ALPHA_CUT_DISABLED","type":"constant","leftLabel":"0","description":" "},{"snippet":"AREA_PARAM_DENSITY","displayText":"AREA_PARAM_DENSITY","type":"constant","leftLabel":"4","description":" "},{"snippet":"AREA_PARAM_GRAVITY","displayText":"AREA_PARAM_GRAVITY","type":"constant","leftLabel":"0","description":" "},{"snippet":"ARRAY_FORMAT_BONES","displayText":"ARRAY_FORMAT_BONES","type":"constant","leftLabel":"64","description":" "},{"snippet":"ARRAY_FORMAT_COLOR","displayText":"ARRAY_FORMAT_COLOR","type":"constant","leftLabel":"8","description":" Array format will include a color array. "},{"snippet":"ARRAY_FORMAT_INDEX","displayText":"ARRAY_FORMAT_INDEX","type":"constant","leftLabel":"256","description":" "},{"snippet":"ARRAY_WEIGHTS_SIZE","displayText":"ARRAY_WEIGHTS_SIZE","type":"constant","leftLabel":"4","description":" Amount of weights/bone indices per vertex (always 4). "},{"snippet":"AREA_PARAM_PRIORITY","displayText":"AREA_PARAM_PRIORITY","type":"constant","leftLabel":"5","description":" "},{"snippet":"ARRAY_FORMAT_NORMAL","displayText":"ARRAY_FORMAT_NORMAL","type":"constant","leftLabel":"2","description":" "},{"snippet":"ARRAY_FORMAT_TEX_UV","displayText":"ARRAY_FORMAT_TEX_UV","type":"constant","leftLabel":"16","description":" Array format will include UVs. "},{"snippet":"ARRAY_FORMAT_VERTEX","displayText":"ARRAY_FORMAT_VERTEX","type":"constant","leftLabel":"1","description":" Array format will include vertices (mandatory). "},{"snippet":"ARRAY_FORMAT_TANGENT","displayText":"ARRAY_FORMAT_TANGENT","type":"constant","leftLabel":"4","description":" "},{"snippet":"ARRAY_FORMAT_TEX_UV2","displayText":"ARRAY_FORMAT_TEX_UV2","type":"constant","leftLabel":"32","description":" Array format will include another set of UVs. "},{"snippet":"ARRAY_FORMAT_WEIGHTS","displayText":"ARRAY_FORMAT_WEIGHTS","type":"constant","leftLabel":"128","description":" Array format will include bone weights. "},{"snippet":"ANIMATION_PROCESS_IDLE","displayText":"ANIMATION_PROCESS_IDLE","type":"constant","leftLabel":"1","description":" Process animation on idle process. "},{"snippet":"ANIMATION_PROCESS_FIXED","displayText":"ANIMATION_PROCESS_FIXED","type":"constant","leftLabel":"0","description":" Process animation on fixed process. This is specially useful when animating kinematic bodies. "},{"snippet":"ALPHA_CUT_OPAQUE_PREPASS","displayText":"ALPHA_CUT_OPAQUE_PREPASS","type":"constant","leftLabel":"2","description":" "},{"snippet":"AREA_PARAM_GRAVITY_VECTOR","displayText":"AREA_PARAM_GRAVITY_VECTOR","type":"constant","leftLabel":"1","description":" "},{"snippet":"AREA_PARAM_GRAVITY_IS_POINT","displayText":"AREA_PARAM_GRAVITY_IS_POINT","type":"constant","leftLabel":"2","description":" "},{"snippet":"AREA_SPACE_OVERRIDE_COMBINE","displayText":"AREA_SPACE_OVERRIDE_COMBINE","type":"constant","leftLabel":"1","description":" "},{"snippet":"AREA_SPACE_OVERRIDE_REPLACE","displayText":"AREA_SPACE_OVERRIDE_REPLACE","type":"constant","leftLabel":"2","description":" "},{"snippet":"AREA_SPACE_OVERRIDE_DISABLED","displayText":"AREA_SPACE_OVERRIDE_DISABLED","type":"constant","leftLabel":"0","description":" "},{"snippet":"AREA_PARAM_GRAVITY_POINT_ATTENUATION","displayText":"AREA_PARAM_GRAVITY_POINT_ATTENUATION","type":"constant","leftLabel":"3","description":" "}],"N":[{"snippet":"NONE","displayText":"NONE","type":"constant","leftLabel":"0","description":" "},{"snippet":"NODE_MIX","displayText":"NODE_MIX","type":"constant","leftLabel":"3","description":" "},{"snippet":"NODE_NONE","displayText":"NODE_NONE","type":"constant","leftLabel":"0","description":" "},{"snippet":"NODE_TEXT","displayText":"NODE_TEXT","type":"constant","leftLabel":"3","description":" "},{"snippet":"NEXT_VOICE","displayText":"NEXT_VOICE","type":"constant","leftLabel":"-2","description":" "},{"snippet":"NODE_CDATA","displayText":"NODE_CDATA","type":"constant","leftLabel":"5","description":" "},{"snippet":"NODE_BLEND2","displayText":"NODE_BLEND2","type":"constant","leftLabel":"4","description":" "},{"snippet":"NODE_BLEND3","displayText":"NODE_BLEND3","type":"constant","leftLabel":"5","description":" "},{"snippet":"NODE_BLEND4","displayText":"NODE_BLEND4","type":"constant","leftLabel":"6","description":" "},{"snippet":"NODE_OUTPUT","displayText":"NODE_OUTPUT","type":"constant","leftLabel":"0","description":" "},{"snippet":"NODE_COMMENT","displayText":"NODE_COMMENT","type":"constant","leftLabel":"4","description":" "},{"snippet":"NODE_ELEMENT","displayText":"NODE_ELEMENT","type":"constant","leftLabel":"1","description":" "},{"snippet":"NODE_ONESHOT","displayText":"NODE_ONESHOT","type":"constant","leftLabel":"2","description":" "},{"snippet":"NODE_UNKNOWN","displayText":"NODE_UNKNOWN","type":"constant","leftLabel":"6","description":" "},{"snippet":"NODE_TIMESEEK","displayText":"NODE_TIMESEEK","type":"constant","leftLabel":"8","description":" "},{"snippet":"NO_INDEX_ARRAY","displayText":"NO_INDEX_ARRAY","type":"constant","leftLabel":"-1","description":" "},{"snippet":"NODE_ANIMATION","displayText":"NODE_ANIMATION","type":"constant","leftLabel":"1","description":" "},{"snippet":"NODE_TIMESCALE","displayText":"NODE_TIMESCALE","type":"constant","leftLabel":"7","description":" "},{"snippet":"NODE_TRANSITION","displayText":"NODE_TRANSITION","type":"constant","leftLabel":"9","description":" "},{"snippet":"NODE_ELEMENT_END","displayText":"NODE_ELEMENT_END","type":"constant","leftLabel":"2","description":" "},{"snippet":"NOTIFICATION_DRAW","displayText":"NOTIFICATION_DRAW","type":"constant","leftLabel":"30","description":" CanvasItem is requested to draw. "},{"snippet":"NOTIFICATION_READY","displayText":"NOTIFICATION_READY","type":"constant","leftLabel":"13","description":" "},{"snippet":"NOTIFICATION_PAUSED","displayText":"NOTIFICATION_PAUSED","type":"constant","leftLabel":"14","description":" "},{"snippet":"NOTIFICATION_PROCESS","displayText":"NOTIFICATION_PROCESS","type":"constant","leftLabel":"17","description":" Notification received every frame when the process flag is set (see [method set_process]). "},{"snippet":"NOTIFICATION_RESIZED","displayText":"NOTIFICATION_RESIZED","type":"constant","leftLabel":"40","description":" Control changed size (get_size() reports the new size). "},{"snippet":"NOTIFICATION_PARENTED","displayText":"NOTIFICATION_PARENTED","type":"constant","leftLabel":"18","description":" Notification received when a node is set as a child of another node. Note that this doesn't mean that a node entered the Scene Tree. "},{"snippet":"NOTIFICATION_UNPAUSED","displayText":"NOTIFICATION_UNPAUSED","type":"constant","leftLabel":"15","description":" "},{"snippet":"NOTIFICATION_EXIT_TREE","displayText":"NOTIFICATION_EXIT_TREE","type":"constant","leftLabel":"11","description":" "},{"snippet":"NOTIFICATION_PREDELETE","displayText":"NOTIFICATION_PREDELETE","type":"constant","leftLabel":"1","description":" Called before the object is about to be deleted. "},{"snippet":"NOTIFICATION_ENTER_TREE","displayText":"NOTIFICATION_ENTER_TREE","type":"constant","leftLabel":"10","description":" "},{"snippet":"NOTIFICATION_EXIT_WORLD","displayText":"NOTIFICATION_EXIT_WORLD","type":"constant","leftLabel":"42","description":" "},{"snippet":"NOTIFICATION_FOCUS_EXIT","displayText":"NOTIFICATION_FOCUS_EXIT","type":"constant","leftLabel":"44","description":" Control lost focus. "},{"snippet":"NOTIFICATION_MOUSE_EXIT","displayText":"NOTIFICATION_MOUSE_EXIT","type":"constant","leftLabel":"42","description":" Mouse pointer exited the area of the Control. "},{"snippet":"NOTIFICATION_POPUP_HIDE","displayText":"NOTIFICATION_POPUP_HIDE","type":"constant","leftLabel":"81","description":" "},{"snippet":"NOTIFICATION_POST_POPUP","displayText":"NOTIFICATION_POST_POPUP","type":"constant","leftLabel":"80","description":" "},{"snippet":"NOTIFICATION_UNPARENTED","displayText":"NOTIFICATION_UNPARENTED","type":"constant","leftLabel":"19","description":" Notification received when a node is unparented (parent removed it from the list of children). "},{"snippet":"NOTIFICATION_ENTER_WORLD","displayText":"NOTIFICATION_ENTER_WORLD","type":"constant","leftLabel":"41","description":" "},{"snippet":"NOTIFICATION_EXIT_CANVAS","displayText":"NOTIFICATION_EXIT_CANVAS","type":"constant","leftLabel":"33","description":" Canvas item has exited the canvas. "},{"snippet":"NOTIFICATION_FOCUS_ENTER","displayText":"NOTIFICATION_FOCUS_ENTER","type":"constant","leftLabel":"43","description":" Control gained focus. "},{"snippet":"NOTIFICATION_MODAL_CLOSE","displayText":"NOTIFICATION_MODAL_CLOSE","type":"constant","leftLabel":"46","description":" Modal control was closed. "},{"snippet":"NOTIFICATION_MOUSE_ENTER","displayText":"NOTIFICATION_MOUSE_ENTER","type":"constant","leftLabel":"41","description":" Mouse pointer entered the area of the Control. "},{"snippet":"NOTIFICATION_WM_FOCUS_IN","displayText":"NOTIFICATION_WM_FOCUS_IN","type":"constant","leftLabel":"5","description":" "},{"snippet":"NOTIFICATION_ENTER_CANVAS","displayText":"NOTIFICATION_ENTER_CANVAS","type":"constant","leftLabel":"32","description":" Canvas item has entered the canvas. "},{"snippet":"NOTIFICATION_WM_FOCUS_OUT","displayText":"NOTIFICATION_WM_FOCUS_OUT","type":"constant","leftLabel":"6","description":" "},{"snippet":"NOTIFICATION_FIXED_PROCESS","displayText":"NOTIFICATION_FIXED_PROCESS","type":"constant","leftLabel":"16","description":" "},{"snippet":"NOTIFICATION_SORT_CHILDREN","displayText":"NOTIFICATION_SORT_CHILDREN","type":"constant","leftLabel":"50","description":" Notification for when sorting the children, it must be obeyed immediately. "},{"snippet":"NOTIFICATION_THEME_CHANGED","displayText":"NOTIFICATION_THEME_CHANGED","type":"constant","leftLabel":"45","description":" Theme changed. Redrawing is desired. "},{"snippet":"NOTIFICATION_POSTINITIALIZE","displayText":"NOTIFICATION_POSTINITIALIZE","type":"constant","leftLabel":"0","description":" Called right when the object is initialized. Not available in script. "},{"snippet":"NOTIFICATION_MOVED_IN_PARENT","displayText":"NOTIFICATION_MOVED_IN_PARENT","type":"constant","leftLabel":"12","description":" "},{"snippet":"NOTIFICATION_UPDATE_SKELETON","displayText":"NOTIFICATION_UPDATE_SKELETON","type":"constant","leftLabel":"50","description":" "},{"snippet":"NOTIFICATION_WM_QUIT_REQUEST","displayText":"NOTIFICATION_WM_QUIT_REQUEST","type":"constant","leftLabel":"7","description":" "},{"snippet":"NOTIFICATION_OS_MEMORY_WARNING","displayText":"NOTIFICATION_OS_MEMORY_WARNING","type":"constant","leftLabel":"9","description":" "},{"snippet":"NOTIFICATION_TRANSFORM_CHANGED","displayText":"NOTIFICATION_TRANSFORM_CHANGED","type":"constant","leftLabel":"29","description":" Canvas item transform has changed. Only received if requested. "},{"snippet":"NOTIFICATION_VISIBILITY_CHANGED","displayText":"NOTIFICATION_VISIBILITY_CHANGED","type":"constant","leftLabel":"31","description":" Canvas item visibility has changed. "},{"snippet":"NOTIFICATION_WM_UNFOCUS_REQUEST","displayText":"NOTIFICATION_WM_UNFOCUS_REQUEST","type":"constant","leftLabel":"8","description":" "}],"R":[{"snippet":"READ","displayText":"READ","type":"constant","leftLabel":"1","description":" "},{"snippet":"READ_WRITE","displayText":"READ_WRITE","type":"constant","leftLabel":"3","description":" "},{"snippet":"ROTATION_Y","displayText":"ROTATION_Y","type":"constant","leftLabel":"1","description":" "},{"snippet":"RESPONSE_OK","displayText":"RESPONSE_OK","type":"constant","leftLabel":"200","description":" "},{"snippet":"REVERB_HALL","displayText":"REVERB_HALL","type":"constant","leftLabel":"3","description":" Huge reverb room (cathedral, warehouse). "},{"snippet":"ROTATION_XY","displayText":"ROTATION_XY","type":"constant","leftLabel":"2","description":" "},{"snippet":"REVERB_LARGE","displayText":"REVERB_LARGE","type":"constant","leftLabel":"2","description":" Large reverb room (warehouse). "},{"snippet":"REVERB_SMALL","displayText":"REVERB_SMALL","type":"constant","leftLabel":"0","description":" Small reverb room (closet, bathroom, etc). "},{"snippet":"ROTATION_XYZ","displayText":"ROTATION_XYZ","type":"constant","leftLabel":"3","description":" "},{"snippet":"RESPONSE_GONE","displayText":"RESPONSE_GONE","type":"constant","leftLabel":"410","description":" "},{"snippet":"REVERB_MEDIUM","displayText":"REVERB_MEDIUM","type":"constant","leftLabel":"1","description":" Medium reverb room (street) "},{"snippet":"ROTATION_NONE","displayText":"ROTATION_NONE","type":"constant","leftLabel":"0","description":" "},{"snippet":"RESPONSE_FOUND","displayText":"RESPONSE_FOUND","type":"constant","leftLabel":"302","description":" "},{"snippet":"RESPONSE_LOCKED","displayText":"RESPONSE_LOCKED","type":"constant","leftLabel":"423","description":" "},{"snippet":"RESPONSE_CREATED","displayText":"RESPONSE_CREATED","type":"constant","leftLabel":"201","description":" "},{"snippet":"RESPONSE_IM_USED","displayText":"RESPONSE_IM_USED","type":"constant","leftLabel":"226","description":" "},{"snippet":"RESPONSE_ACCEPTED","displayText":"RESPONSE_ACCEPTED","type":"constant","leftLabel":"202","description":" "},{"snippet":"RESPONSE_CONFLICT","displayText":"RESPONSE_CONFLICT","type":"constant","leftLabel":"409","description":" "},{"snippet":"RESPONSE_CONTINUE","displayText":"RESPONSE_CONTINUE","type":"constant","leftLabel":"100","description":" "},{"snippet":"RESPONSE_FORBIDDEN","displayText":"RESPONSE_FORBIDDEN","type":"constant","leftLabel":"403","description":" "},{"snippet":"RESPONSE_NOT_FOUND","displayText":"RESPONSE_NOT_FOUND","type":"constant","leftLabel":"404","description":" "},{"snippet":"RESPONSE_SEE_OTHER","displayText":"RESPONSE_SEE_OTHER","type":"constant","leftLabel":"303","description":" "},{"snippet":"RESPONSE_USE_PROXY","displayText":"RESPONSE_USE_PROXY","type":"constant","leftLabel":"305","description":" "},{"snippet":"RESOLVER_INVALID_ID","displayText":"RESOLVER_INVALID_ID","type":"constant","leftLabel":"-1","description":" "},{"snippet":"RESPONSE_NO_CONTENT","displayText":"RESPONSE_NO_CONTENT","type":"constant","leftLabel":"204","description":" "},{"snippet":"RESPONSE_PROCESSING","displayText":"RESPONSE_PROCESSING","type":"constant","leftLabel":"102","description":" "},{"snippet":"RESOLVER_MAX_QUERIES","displayText":"RESOLVER_MAX_QUERIES","type":"constant","leftLabel":"32","description":" "},{"snippet":"RESOLVER_STATUS_DONE","displayText":"RESOLVER_STATUS_DONE","type":"constant","leftLabel":"2","description":" "},{"snippet":"RESOLVER_STATUS_NONE","displayText":"RESOLVER_STATUS_NONE","type":"constant","leftLabel":"0","description":" "},{"snippet":"RESPONSE_BAD_GATEWAY","displayText":"RESPONSE_BAD_GATEWAY","type":"constant","leftLabel":"502","description":" "},{"snippet":"RESPONSE_BAD_REQUEST","displayText":"RESPONSE_BAD_REQUEST","type":"constant","leftLabel":"400","description":" "},{"snippet":"RENDER_VIDEO_MEM_USED","displayText":"RENDER_VIDEO_MEM_USED","type":"constant","leftLabel":"17","description":" "},{"snippet":"RESOLVER_STATUS_ERROR","displayText":"RESOLVER_STATUS_ERROR","type":"constant","leftLabel":"3","description":" "},{"snippet":"RESPONSE_MULTI_STATUS","displayText":"RESPONSE_MULTI_STATUS","type":"constant","leftLabel":"207","description":" "},{"snippet":"RESPONSE_NOT_EXTENDED","displayText":"RESPONSE_NOT_EXTENDED","type":"constant","leftLabel":"510","description":" "},{"snippet":"RESPONSE_NOT_MODIFIED","displayText":"RESPONSE_NOT_MODIFIED","type":"constant","leftLabel":"304","description":" "},{"snippet":"RESPONSE_UNAUTHORIZED","displayText":"RESPONSE_UNAUTHORIZED","type":"constant","leftLabel":"401","description":" "},{"snippet":"RENDER_VERTEX_MEM_USED","displayText":"RENDER_VERTEX_MEM_USED","type":"constant","leftLabel":"19","description":" "},{"snippet":"RESPONSE_RESET_CONTENT","displayText":"RESPONSE_RESET_CONTENT","type":"constant","leftLabel":"205","description":" "},{"snippet":"RENDER_OBJECTS_IN_FRAME","displayText":"RENDER_OBJECTS_IN_FRAME","type":"constant","leftLabel":"11","description":" "},{"snippet":"RENDER_TEXTURE_MEM_USED","displayText":"RENDER_TEXTURE_MEM_USED","type":"constant","leftLabel":"18","description":" "},{"snippet":"RESOLVER_STATUS_WAITING","displayText":"RESOLVER_STATUS_WAITING","type":"constant","leftLabel":"1","description":" "},{"snippet":"RESPONSE_NOT_ACCEPTABLE","displayText":"RESPONSE_NOT_ACCEPTABLE","type":"constant","leftLabel":"406","description":" "},{"snippet":"RENDER_VERTICES_IN_FRAME","displayText":"RENDER_VERTICES_IN_FRAME","type":"constant","leftLabel":"12","description":" "},{"snippet":"RESPONSE_GATEWAY_TIMEOUT","displayText":"RESPONSE_GATEWAY_TIMEOUT","type":"constant","leftLabel":"504","description":" "},{"snippet":"RESPONSE_LENGTH_REQUIRED","displayText":"RESPONSE_LENGTH_REQUIRED","type":"constant","leftLabel":"411","description":" "},{"snippet":"RESPONSE_NOT_IMPLEMENTED","displayText":"RESPONSE_NOT_IMPLEMENTED","type":"constant","leftLabel":"501","description":" "},{"snippet":"RESPONSE_PARTIAL_CONTENT","displayText":"RESPONSE_PARTIAL_CONTENT","type":"constant","leftLabel":"206","description":" "},{"snippet":"RESPONSE_REQUEST_TIMEOUT","displayText":"RESPONSE_REQUEST_TIMEOUT","type":"constant","leftLabel":"408","description":" "},{"snippet":"RENDER_TARGET_UPDATE_ONCE","displayText":"RENDER_TARGET_UPDATE_ONCE","type":"constant","leftLabel":"1","description":" "},{"snippet":"RESPONSE_MULTIPLE_CHOICES","displayText":"RESPONSE_MULTIPLE_CHOICES","type":"constant","leftLabel":"300","description":" "},{"snippet":"RESPONSE_PAYMENT_REQUIRED","displayText":"RESPONSE_PAYMENT_REQUIRED","type":"constant","leftLabel":"402","description":" "},{"snippet":"RESPONSE_UPGRADE_REQUIRED","displayText":"RESPONSE_UPGRADE_REQUIRED","type":"constant","leftLabel":"426","description":" "},{"snippet":"RENDER_DRAW_CALLS_IN_FRAME","displayText":"RENDER_DRAW_CALLS_IN_FRAME","type":"constant","leftLabel":"16","description":" "},{"snippet":"RESPONSE_FAILED_DEPENDENCY","displayText":"RESPONSE_FAILED_DEPENDENCY","type":"constant","leftLabel":"424","description":" "},{"snippet":"RESPONSE_MOVED_PERMANENTLY","displayText":"RESPONSE_MOVED_PERMANENTLY","type":"constant","leftLabel":"301","description":" "},{"snippet":"RENDER_TARGET_UPDATE_ALWAYS","displayText":"RENDER_TARGET_UPDATE_ALWAYS","type":"constant","leftLabel":"3","description":" "},{"snippet":"RESPONSE_EXPECTATION_FAILED","displayText":"RESPONSE_EXPECTATION_FAILED","type":"constant","leftLabel":"417","description":" "},{"snippet":"RESPONSE_METHOD_NOT_ALLOWED","displayText":"RESPONSE_METHOD_NOT_ALLOWED","type":"constant","leftLabel":"405","description":" "},{"snippet":"RESPONSE_TEMPORARY_REDIRECT","displayText":"RESPONSE_TEMPORARY_REDIRECT","type":"constant","leftLabel":"307","description":" "},{"snippet":"RENDER_USAGE_VIDEO_MEM_TOTAL","displayText":"RENDER_USAGE_VIDEO_MEM_TOTAL","type":"constant","leftLabel":"20","description":" "},{"snippet":"RESPONSE_PRECONDITION_FAILED","displayText":"RESPONSE_PRECONDITION_FAILED","type":"constant","leftLabel":"412","description":" "},{"snippet":"RESPONSE_SERVICE_UNAVAILABLE","displayText":"RESPONSE_SERVICE_UNAVAILABLE","type":"constant","leftLabel":"503","description":" "},{"snippet":"RESPONSE_SWITCHING_PROTOCOLS","displayText":"RESPONSE_SWITCHING_PROTOCOLS","type":"constant","leftLabel":"101","description":" "},{"snippet":"RENDER_TARGET_UPDATE_DISABLED","displayText":"RENDER_TARGET_UPDATE_DISABLED","type":"constant","leftLabel":"0","description":" "},{"snippet":"RESPONSE_INSUFFICIENT_STORAGE","displayText":"RESPONSE_INSUFFICIENT_STORAGE","type":"constant","leftLabel":"507","description":" "},{"snippet":"RESPONSE_REQUEST_URI_TOO_LONG","displayText":"RESPONSE_REQUEST_URI_TOO_LONG","type":"constant","leftLabel":"414","description":" "},{"snippet":"RESPONSE_UNPROCESSABLE_ENTITY","displayText":"RESPONSE_UNPROCESSABLE_ENTITY","type":"constant","leftLabel":"422","description":" "},{"snippet":"RENDER_SHADER_CHANGES_IN_FRAME","displayText":"RENDER_SHADER_CHANGES_IN_FRAME","type":"constant","leftLabel":"14","description":" "},{"snippet":"RESPONSE_INTERNAL_SERVER_ERROR","displayText":"RESPONSE_INTERNAL_SERVER_ERROR","type":"constant","leftLabel":"500","description":" "},{"snippet":"RENDER_SURFACE_CHANGES_IN_FRAME","displayText":"RENDER_SURFACE_CHANGES_IN_FRAME","type":"constant","leftLabel":"15","description":" "},{"snippet":"RESPONSE_UNSUPPORTED_MEDIA_TYPE","displayText":"RESPONSE_UNSUPPORTED_MEDIA_TYPE","type":"constant","leftLabel":"415","description":" "},{"snippet":"RENDER_MATERIAL_CHANGES_IN_FRAME","displayText":"RENDER_MATERIAL_CHANGES_IN_FRAME","type":"constant","leftLabel":"13","description":" "},{"snippet":"RENDER_TARGET_UPDATE_WHEN_VISIBLE","displayText":"RENDER_TARGET_UPDATE_WHEN_VISIBLE","type":"constant","leftLabel":"2","description":" "},{"snippet":"RESPONSE_REQUEST_ENTITY_TOO_LARGE","displayText":"RESPONSE_REQUEST_ENTITY_TOO_LARGE","type":"constant","leftLabel":"413","description":" "},{"snippet":"RESPONSE_HTTP_VERSION_NOT_SUPPORTED","displayText":"RESPONSE_HTTP_VERSION_NOT_SUPPORTED","type":"constant","leftLabel":"505","description":" "},{"snippet":"RESPONSE_NON_AUTHORITATIVE_INFORMATION","displayText":"RESPONSE_NON_AUTHORITATIVE_INFORMATION","type":"constant","leftLabel":"203","description":" "},{"snippet":"RESPONSE_PROXY_AUTHENTICATION_REQUIRED","displayText":"RESPONSE_PROXY_AUTHENTICATION_REQUIRED","type":"constant","leftLabel":"407","description":" "},{"snippet":"RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE","displayText":"RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE","type":"constant","leftLabel":"416","description":" "}],"U":[{"snippet":"UPDATE_IDLE","displayText":"UPDATE_IDLE","type":"constant","leftLabel":"1","description":" Stream is updated on the main thread, when idle. "},{"snippet":"UPDATE_NONE","displayText":"UPDATE_NONE","type":"constant","leftLabel":"0","description":" Does not need update, or manual polling. "},{"snippet":"UPDATE_THREAD","displayText":"UPDATE_THREAD","type":"constant","leftLabel":"2","description":" Stream is updated on its own thread. "}],"D":[{"snippet":"DAY_FRIDAY","displayText":"DAY_FRIDAY","type":"constant","leftLabel":"5","description":" "},{"snippet":"DAY_MONDAY","displayText":"DAY_MONDAY","type":"constant","leftLabel":"1","description":" "},{"snippet":"DAY_SUNDAY","displayText":"DAY_SUNDAY","type":"constant","leftLabel":"0","description":" "},{"snippet":"DRAW_HOVER","displayText":"DRAW_HOVER","type":"constant","leftLabel":"2","description":" "},{"snippet":"DAY_TUESDAY","displayText":"DAY_TUESDAY","type":"constant","leftLabel":"2","description":" "},{"snippet":"DRAW_NORMAL","displayText":"DRAW_NORMAL","type":"constant","leftLabel":"0","description":" "},{"snippet":"DAY_SATURDAY","displayText":"DAY_SATURDAY","type":"constant","leftLabel":"6","description":" "},{"snippet":"DAY_THURSDAY","displayText":"DAY_THURSDAY","type":"constant","leftLabel":"4","description":" "},{"snippet":"DRAW_PRESSED","displayText":"DRAW_PRESSED","type":"constant","leftLabel":"1","description":" "},{"snippet":"DAY_WEDNESDAY","displayText":"DAY_WEDNESDAY","type":"constant","leftLabel":"3","description":" "},{"snippet":"DRAW_DISABLED","displayText":"DRAW_DISABLED","type":"constant","leftLabel":"3","description":" "},{"snippet":"DEPTH_DRAW_NEVER","displayText":"DEPTH_DRAW_NEVER","type":"constant","leftLabel":"3","description":" "},{"snippet":"DEPTH_DRAW_ALWAYS","displayText":"DEPTH_DRAW_ALWAYS","type":"constant","leftLabel":"0","description":" "},{"snippet":"DAMPED_STRING_DAMPING","displayText":"DAMPED_STRING_DAMPING","type":"constant","leftLabel":"2","description":" "},{"snippet":"DEPTH_DRAW_OPAQUE_ONLY","displayText":"DEPTH_DRAW_OPAQUE_ONLY","type":"constant","leftLabel":"1","description":" "},{"snippet":"DAMPED_STRING_STIFFNESS","displayText":"DAMPED_STRING_STIFFNESS","type":"constant","leftLabel":"1","description":" "},{"snippet":"DAMPED_STRING_REST_LENGTH","displayText":"DAMPED_STRING_REST_LENGTH","type":"constant","leftLabel":"0","description":" "},{"snippet":"DEPTH_DRAW_OPAQUE_PRE_PASS_ALPHA","displayText":"DEPTH_DRAW_OPAQUE_PRE_PASS_ALPHA","type":"constant","leftLabel":"2","description":" "}],"C":[{"snippet":"COMPRESS_BC","displayText":"COMPRESS_BC","type":"constant","leftLabel":"0","description":" "},{"snippet":"CUBEMAP_TOP","displayText":"CUBEMAP_TOP","type":"constant","leftLabel":"3","description":" "},{"snippet":"CURSOR_BUSY","displayText":"CURSOR_BUSY","type":"constant","leftLabel":"5","description":" "},{"snippet":"CURSOR_DRAG","displayText":"CURSOR_DRAG","type":"constant","leftLabel":"6","description":" "},{"snippet":"CURSOR_HELP","displayText":"CURSOR_HELP","type":"constant","leftLabel":"16","description":" "},{"snippet":"CURSOR_MOVE","displayText":"CURSOR_MOVE","type":"constant","leftLabel":"13","description":" "},{"snippet":"CURSOR_WAIT","displayText":"CURSOR_WAIT","type":"constant","leftLabel":"4","description":" "},{"snippet":"COMPRESS_ETC","displayText":"COMPRESS_ETC","type":"constant","leftLabel":"3","description":" "},{"snippet":"CUBEMAP_BACK","displayText":"CUBEMAP_BACK","type":"constant","leftLabel":"5","description":" "},{"snippet":"CUBEMAP_LEFT","displayText":"CUBEMAP_LEFT","type":"constant","leftLabel":"0","description":" "},{"snippet":"CURSOR_ARROW","displayText":"CURSOR_ARROW","type":"constant","leftLabel":"0","description":" "},{"snippet":"CURSOR_CROSS","displayText":"CURSOR_CROSS","type":"constant","leftLabel":"3","description":" "},{"snippet":"CURSOR_HSIZE","displayText":"CURSOR_HSIZE","type":"constant","leftLabel":"10","description":" "},{"snippet":"CURSOR_IBEAM","displayText":"CURSOR_IBEAM","type":"constant","leftLabel":"1","description":" "},{"snippet":"CURSOR_VSIZE","displayText":"CURSOR_VSIZE","type":"constant","leftLabel":"9","description":" "},{"snippet":"COLOR_DIFFUSE","displayText":"COLOR_DIFFUSE","type":"constant","leftLabel":"0","description":" "},{"snippet":"CUBEMAP_FRONT","displayText":"CUBEMAP_FRONT","type":"constant","leftLabel":"4","description":" "},{"snippet":"CUBEMAP_RIGHT","displayText":"CUBEMAP_RIGHT","type":"constant","leftLabel":"1","description":" "},{"snippet":"CURSOR_HSPLIT","displayText":"CURSOR_HSPLIT","type":"constant","leftLabel":"15","description":" "},{"snippet":"CURSOR_VSPLIT","displayText":"CURSOR_VSPLIT","type":"constant","leftLabel":"14","description":" "},{"snippet":"CELL_MODE_ICON","displayText":"CELL_MODE_ICON","type":"constant","leftLabel":"3","description":" "},{"snippet":"COLOR_SPECULAR","displayText":"COLOR_SPECULAR","type":"constant","leftLabel":"1","description":" "},{"snippet":"CUBEMAP_BOTTOM","displayText":"CUBEMAP_BOTTOM","type":"constant","leftLabel":"2","description":" "},{"snippet":"CELL_MODE_CHECK","displayText":"CELL_MODE_CHECK","type":"constant","leftLabel":"1","description":" "},{"snippet":"CELL_MODE_RANGE","displayText":"CELL_MODE_RANGE","type":"constant","leftLabel":"2","description":" "},{"snippet":"COMPRESS_PVRTC2","displayText":"COMPRESS_PVRTC2","type":"constant","leftLabel":"1","description":" "},{"snippet":"COMPRESS_PVRTC4","displayText":"COMPRESS_PVRTC4","type":"constant","leftLabel":"2","description":" "},{"snippet":"CONNECT_ONESHOT","displayText":"CONNECT_ONESHOT","type":"constant","leftLabel":"4","description":" One short connections disconnect themselves after emission. "},{"snippet":"CONNECT_PERSIST","displayText":"CONNECT_PERSIST","type":"constant","leftLabel":"2","description":" Persisting connections are saved when the object is serialized to file. "},{"snippet":"CURSOR_CAN_DROP","displayText":"CURSOR_CAN_DROP","type":"constant","leftLabel":"7","description":" "},{"snippet":"CELL_MODE_CUSTOM","displayText":"CELL_MODE_CUSTOM","type":"constant","leftLabel":"4","description":" "},{"snippet":"CELL_MODE_STRING","displayText":"CELL_MODE_STRING","type":"constant","leftLabel":"0","description":" "},{"snippet":"CONNECT_DEFERRED","displayText":"CONNECT_DEFERRED","type":"constant","leftLabel":"1","description":" Connect a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time. "},{"snippet":"CURSOR_BDIAGSIZE","displayText":"CURSOR_BDIAGSIZE","type":"constant","leftLabel":"11","description":" "},{"snippet":"CURSOR_FDIAGSIZE","displayText":"CURSOR_FDIAGSIZE","type":"constant","leftLabel":"12","description":" "},{"snippet":"CURSOR_FORBIDDEN","displayText":"CURSOR_FORBIDDEN","type":"constant","leftLabel":"8","description":" "},{"snippet":"CCD_MODE_CAST_RAY","displayText":"CCD_MODE_CAST_RAY","type":"constant","leftLabel":"1","description":" "},{"snippet":"CCD_MODE_DISABLED","displayText":"CCD_MODE_DISABLED","type":"constant","leftLabel":"0","description":" "},{"snippet":"CONTAINER_TOOLBAR","displayText":"CONTAINER_TOOLBAR","type":"constant","leftLabel":"0","description":" "},{"snippet":"CUSTOM_ARRAY_SIZE","displayText":"CUSTOM_ARRAY_SIZE","type":"constant","leftLabel":"8","description":" "},{"snippet":"CCD_MODE_CAST_SHAPE","displayText":"CCD_MODE_CAST_SHAPE","type":"constant","leftLabel":"2","description":" "},{"snippet":"CURSOR_POINTING_HAND","displayText":"CURSOR_POINTING_HAND","type":"constant","leftLabel":"2","description":" "},{"snippet":"CONE_TWIST_JOINT_BIAS","displayText":"CONE_TWIST_JOINT_BIAS","type":"constant","leftLabel":"2","description":" "},{"snippet":"CONE_TWIST_JOINT_SOFTNESS","displayText":"CONE_TWIST_JOINT_SOFTNESS","type":"constant","leftLabel":"3","description":" "},{"snippet":"CONE_TWIST_JOINT_RELAXATION","displayText":"CONE_TWIST_JOINT_RELAXATION","type":"constant","leftLabel":"4","description":" "},{"snippet":"CONE_TWIST_JOINT_SWING_SPAN","displayText":"CONE_TWIST_JOINT_SWING_SPAN","type":"constant","leftLabel":"0","description":" "},{"snippet":"CONE_TWIST_JOINT_TWIST_SPAN","displayText":"CONE_TWIST_JOINT_TWIST_SPAN","type":"constant","leftLabel":"1","description":" "},{"snippet":"CONTAINER_CANVAS_EDITOR_MENU","displayText":"CONTAINER_CANVAS_EDITOR_MENU","type":"constant","leftLabel":"4","description":" "},{"snippet":"CONTAINER_CANVAS_EDITOR_SIDE","displayText":"CONTAINER_CANVAS_EDITOR_SIDE","type":"constant","leftLabel":"5","description":" "},{"snippet":"CONTAINER_SPATIAL_EDITOR_MENU","displayText":"CONTAINER_SPATIAL_EDITOR_MENU","type":"constant","leftLabel":"1","description":" "},{"snippet":"CONTAINER_SPATIAL_EDITOR_SIDE","displayText":"CONTAINER_SPATIAL_EDITOR_SIDE","type":"constant","leftLabel":"2","description":" "},{"snippet":"CONTAINER_SPATIAL_EDITOR_BOTTOM","displayText":"CONTAINER_SPATIAL_EDITOR_BOTTOM","type":"constant","leftLabel":"3","description":" "}],"W":[{"snippet":"WRITE","displayText":"WRITE","type":"constant","leftLabel":"2","description":" "}],"G":[{"snippet":"GROUP_CALL_UNIQUE","displayText":"GROUP_CALL_UNIQUE","type":"constant","leftLabel":"4","description":" "},{"snippet":"GROUP_CALL_DEFAULT","displayText":"GROUP_CALL_DEFAULT","type":"constant","leftLabel":"0","description":" "},{"snippet":"GROUP_CALL_REVERSE","displayText":"GROUP_CALL_REVERSE","type":"constant","leftLabel":"1","description":" "},{"snippet":"GROUP_CALL_REALTIME","displayText":"GROUP_CALL_REALTIME","type":"constant","leftLabel":"2","description":" "},{"snippet":"G6DOF_JOINT_ANGULAR_ERP","displayText":"G6DOF_JOINT_ANGULAR_ERP","type":"constant","leftLabel":"11","description":" "},{"snippet":"G6DOF_JOINT_LINEAR_DAMPING","displayText":"G6DOF_JOINT_LINEAR_DAMPING","type":"constant","leftLabel":"4","description":" "},{"snippet":"G6DOF_JOINT_ANGULAR_DAMPING","displayText":"G6DOF_JOINT_ANGULAR_DAMPING","type":"constant","leftLabel":"8","description":" "},{"snippet":"G6DOF_JOINT_FLAG_ENABLE_MOTOR","displayText":"G6DOF_JOINT_FLAG_ENABLE_MOTOR","type":"constant","leftLabel":"2","description":" "},{"snippet":"G6DOF_JOINT_LINEAR_LOWER_LIMIT","displayText":"G6DOF_JOINT_LINEAR_LOWER_LIMIT","type":"constant","leftLabel":"0","description":" "},{"snippet":"G6DOF_JOINT_LINEAR_RESTITUTION","displayText":"G6DOF_JOINT_LINEAR_RESTITUTION","type":"constant","leftLabel":"3","description":" "},{"snippet":"G6DOF_JOINT_LINEAR_UPPER_LIMIT","displayText":"G6DOF_JOINT_LINEAR_UPPER_LIMIT","type":"constant","leftLabel":"1","description":" "},{"snippet":"G6DOF_JOINT_ANGULAR_FORCE_LIMIT","displayText":"G6DOF_JOINT_ANGULAR_FORCE_LIMIT","type":"constant","leftLabel":"10","description":" "},{"snippet":"G6DOF_JOINT_ANGULAR_LOWER_LIMIT","displayText":"G6DOF_JOINT_ANGULAR_LOWER_LIMIT","type":"constant","leftLabel":"5","description":" "},{"snippet":"G6DOF_JOINT_ANGULAR_RESTITUTION","displayText":"G6DOF_JOINT_ANGULAR_RESTITUTION","type":"constant","leftLabel":"9","description":" "},{"snippet":"G6DOF_JOINT_ANGULAR_UPPER_LIMIT","displayText":"G6DOF_JOINT_ANGULAR_UPPER_LIMIT","type":"constant","leftLabel":"6","description":" "},{"snippet":"G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS","displayText":"G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS","type":"constant","leftLabel":"2","description":" "},{"snippet":"G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS","displayText":"G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS","type":"constant","leftLabel":"7","description":" "},{"snippet":"G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT","displayText":"G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT","type":"constant","leftLabel":"0","description":" "},{"snippet":"G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT","displayText":"G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT","type":"constant","leftLabel":"13","description":" "},{"snippet":"G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT","displayText":"G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT","type":"constant","leftLabel":"1","description":" "},{"snippet":"G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY","displayText":"G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY","type":"constant","leftLabel":"12","description":" "}],"L":[{"snippet":"LIST_DOTS","displayText":"LIST_DOTS","type":"constant","leftLabel":"2","description":" "},{"snippet":"LOOP_NONE","displayText":"LOOP_NONE","type":"constant","leftLabel":"0","description":" No loop enabled. "},{"snippet":"LIGHT_OMNI","displayText":"LIGHT_OMNI","type":"constant","leftLabel":"1","description":" "},{"snippet":"LIGHT_SPOT","displayText":"LIGHT_SPOT","type":"constant","leftLabel":"2","description":" "},{"snippet":"LIST_LETTERS","displayText":"LIST_LETTERS","type":"constant","leftLabel":"1","description":" "},{"snippet":"LIST_NUMBERS","displayText":"LIST_NUMBERS","type":"constant","leftLabel":"0","description":" "},{"snippet":"LOOP_FORWARD","displayText":"LOOP_FORWARD","type":"constant","leftLabel":"1","description":" Forward looping (when playback reaches loop end, goes back to loop begin) "},{"snippet":"LOOP_PING_PONG","displayText":"LOOP_PING_PONG","type":"constant","leftLabel":"2","description":" Ping-Pong looping (when playback reaches loop end, plays backward untilloop begin). Not available in all platforms. "},{"snippet":"LIGHT_PARAM_MAX","displayText":"LIGHT_PARAM_MAX","type":"constant","leftLabel":"10","description":" "},{"snippet":"LIGHT_DIRECTIONAL","displayText":"LIGHT_DIRECTIONAL","type":"constant","leftLabel":"0","description":" "},{"snippet":"LIGHT_PARAM_ENERGY","displayText":"LIGHT_PARAM_ENERGY","type":"constant","leftLabel":"3","description":" "},{"snippet":"LIGHT_PARAM_RADIUS","displayText":"LIGHT_PARAM_RADIUS","type":"constant","leftLabel":"2","description":" "},{"snippet":"LIGHT_COLOR_DIFFUSE","displayText":"LIGHT_COLOR_DIFFUSE","type":"constant","leftLabel":"0","description":" "},{"snippet":"LIGHT_COLOR_SPECULAR","displayText":"LIGHT_COLOR_SPECULAR","type":"constant","leftLabel":"1","description":" "},{"snippet":"LIGHT_PARAM_SPOT_ANGLE","displayText":"LIGHT_PARAM_SPOT_ANGLE","type":"constant","leftLabel":"1","description":" "},{"snippet":"LIGHT_PARAM_ATTENUATION","displayText":"LIGHT_PARAM_ATTENUATION","type":"constant","leftLabel":"4","description":" "},{"snippet":"LIGHT_PARAM_SPOT_ATTENUATION","displayText":"LIGHT_PARAM_SPOT_ATTENUATION","type":"constant","leftLabel":"0","description":" "}]},"completions":{"s":[{"snippet":"set(${1:property}, ${2:value})${0}","displayText":"set","type":"function","leftLabel":"","description":" Set property into the object. "},{"snippet":"sin(${1:s})${0}","displayText":"sin","type":"function","leftLabel":"float","description":" Standard sine function. "},{"snippet":"str(${1:what}, ${2:...})${0}","displayText":"str","type":"function","leftLabel":"String","description":" Convert one or more arguments to strings in the best way possible. "},{"snippet":"save(${1:path}, ${2:resource}, ${3:arg2})${0}","displayText":"save","type":"function","leftLabel":"int","description":" Save a resource to disk, to a given path. "},{"snippet":"save(${1:path})${0}","displayText":"save","type":"function","leftLabel":"int","description":" "},{"snippet":"save()${0}","displayText":"save","type":"function","leftLabel":"int","description":" "},{"snippet":"seek(${1:pos})${0}","displayText":"seek","type":"function","leftLabel":"","description":" "},{"snippet":"seek(${1:time})${0}","displayText":"seek","type":"function","leftLabel":"bool","description":" "},{"snippet":"seek(${1:pos_sec}, ${2:update})${0}","displayText":"seek","type":"function","leftLabel":"","description":" Seek the animation to a given position in time (in seconds). If 'update' is true, the animation will be updated too, otherwise it will be updated at process time. "},{"snippet":"seek(${1:arg0})${0}","displayText":"seek","type":"function","leftLabel":"int","description":" "},{"snippet":"show()${0}","displayText":"show","type":"function","leftLabel":"","description":" "},{"snippet":"sign(${1:s})${0}","displayText":"sign","type":"function","leftLabel":"float","description":" Return sign (-1 or +1). "},{"snippet":"sinh(${1:s})${0}","displayText":"sinh","type":"function","leftLabel":"float","description":" Hyperbolic sine. "},{"snippet":"size()${0}","displayText":"size","type":"function","leftLabel":"int","description":" "},{"snippet":"sqrt(${1:s})${0}","displayText":"sqrt","type":"function","leftLabel":"float","description":" Square root. "},{"snippet":"stop(${1:voice})${0}","displayText":"stop","type":"function","leftLabel":"","description":" Stop a voice \"voice\". (see [method play]). "},{"snippet":"stop(${1:node}, ${2:key})${0}","displayText":"stop","type":"function","leftLabel":"bool","description":" "},{"snippet":"stop()${0}","displayText":"stop","type":"function","leftLabel":"","description":" "},{"snippet":"set_a(${1:a})${0}","displayText":"set_a","type":"function","leftLabel":"","description":" "},{"snippet":"set_b(${1:b})${0}","displayText":"set_b","type":"function","leftLabel":"","description":" "},{"snippet":"set_d(${1:d})${0}","displayText":"set_d","type":"function","leftLabel":"","description":" Set the line distance from the origin. "},{"snippet":"setup(${1:points}, ${2:connections})${0}","displayText":"setup","type":"function","leftLabel":"","description":" "},{"snippet":"share(${1:with})${0}","displayText":"share","type":"function","leftLabel":"","description":" "},{"snippet":"start()${0}","displayText":"start","type":"function","leftLabel":"bool","description":" "},{"snippet":"start(${1:instance}, ${2:method}, ${3:userdata}, ${4:priority})${0}","displayText":"start","type":"function","leftLabel":"int","description":" "},{"snippet":"search(${1:flags}, ${2:from_line}, ${3:from_column}, ${4:to_line})${0}","displayText":"search","type":"function","leftLabel":"IntArray","description":" Perform a search inside the text. Search flags can be specified in the SEARCH_* enum. "},{"snippet":"select(${1:column})${0}","displayText":"select","type":"function","leftLabel":"","description":" "},{"snippet":"select(${1:from}, ${2:to})${0}","displayText":"select","type":"function","leftLabel":"","description":" "},{"snippet":"select(${1:arg0})${0}","displayText":"select","type":"function","leftLabel":"","description":" Select an item by index and make it the current item. "},{"snippet":"select(${1:from_line}, ${2:from_column}, ${3:to_line}, ${4:to_column})${0}","displayText":"select","type":"function","leftLabel":"","description":" Perform selection, from line/column to line/column. "},{"snippet":"set_uv(${1:uv})${0}","displayText":"set_uv","type":"function","leftLabel":"","description":" "},{"snippet":"set_bit(${1:pos}, ${2:bit})${0}","displayText":"set_bit","type":"function","leftLabel":"","description":" "},{"snippet":"set_end(${1:pos})${0}","displayText":"set_end","type":"function","leftLabel":"","description":" Sets MARGIN_RIGHT and MARGIN_BOTTOM at the same time. This is a helper (see [method set_margin]). "},{"snippet":"set_max(${1:maximum})${0}","displayText":"set_max","type":"function","leftLabel":"","description":" "},{"snippet":"set_min(${1:minimum})${0}","displayText":"set_min","type":"function","leftLabel":"","description":" Set minimum value, clamped range value to it if it's less. "},{"snippet":"set_pan(${1:voice}, ${2:pan}, ${3:depth}, ${4:height})${0}","displayText":"set_pan","type":"function","leftLabel":"","description":" Set the panning of a voice. Panning goes from -1 (left) to +1 (right). Optionally, if the hardware supports 3D sound, also set depth and height (also in range -1 to +1). "},{"snippet":"set_pos(${1:pos})${0}","displayText":"set_pos","type":"function","leftLabel":"","description":" Set the position of the 2d node. "},{"snippet":"set_rot(${1:rot})${0}","displayText":"set_rot","type":"function","leftLabel":"","description":" Set the rotation of the 2d node. "},{"snippet":"set_uv2(${1:uv})${0}","displayText":"set_uv2","type":"function","leftLabel":"","description":" "},{"snippet":"set_val(${1:value})${0}","displayText":"set_val","type":"function","leftLabel":"","description":" "},{"snippet":"stepify(${1:s}, ${2:step})${0}","displayText":"stepify","type":"function","leftLabel":"float","description":" Snap float value to a given step. "},{"snippet":"store_8(${1:value})${0}","displayText":"store_8","type":"function","leftLabel":"","description":" "},{"snippet":"seek_end(${1:pos})${0}","displayText":"seek_end","type":"function","leftLabel":"","description":" "},{"snippet":"seek_pos(${1:time})${0}","displayText":"seek_pos","type":"function","leftLabel":"","description":" "},{"snippet":"seek_pos(${1:pos})${0}","displayText":"seek_pos","type":"function","leftLabel":"","description":" Seek to a certain position (in seconds) in an audio stream. "},{"snippet":"set_aabb(${1:arg0})${0}","displayText":"set_aabb","type":"function","leftLabel":"","description":" Set the visibility AABB. If not provided, MultiMesh will not be visible. "},{"snippet":"set_aabb(${1:rect})${0}","displayText":"set_aabb","type":"function","leftLabel":"","description":" "},{"snippet":"set_axis(${1:axis})${0}","displayText":"set_axis","type":"function","leftLabel":"","description":" "},{"snippet":"set_bake(${1:enable})${0}","displayText":"set_bake","type":"function","leftLabel":"","description":" "},{"snippet":"set_base(${1:base})${0}","displayText":"set_base","type":"function","leftLabel":"","description":" "},{"snippet":"set_bias(${1:bias})${0}","displayText":"set_bias","type":"function","leftLabel":"","description":" "},{"snippet":"set_cell(${1:x}, ${2:y}, ${3:tile}, ${4:flip_x}, ${5:flip_y})${0}","displayText":"set_cell","type":"function","leftLabel":"","description":" Set the contents of a cell. Cells can be optionally flipped in y or x. "},{"snippet":"set_clip(${1:enabled}, ${2:clipabove}, ${3:floor}, ${4:axis})${0}","displayText":"set_clip","type":"function","leftLabel":"","description":" "},{"snippet":"set_code(${1:vcode}, ${2:fcode}, ${3:lcode}, ${4:fofs}, ${5:lofs})${0}","displayText":"set_code","type":"function","leftLabel":"","description":" "},{"snippet":"set_data(${1:data})${0}","displayText":"set_data","type":"function","leftLabel":"","description":" Set sample data. Data must be little endian, no matter the host platform, and exactly as long to fit all frames. Example, if data is Stereo, 16 bits, 256 frames, it will be 1024 bytes long. "},{"snippet":"set_data(${1:image})${0}","displayText":"set_data","type":"function","leftLabel":"","description":" "},{"snippet":"set_file(${1:file})${0}","displayText":"set_file","type":"function","leftLabel":"","description":" Set the speech file (which is loaded to memory). "},{"snippet":"set_file(${1:name})${0}","displayText":"set_file","type":"function","leftLabel":"","description":" Set the file to be played. "},{"snippet":"set_flag(${1:flag}, ${2:value})${0}","displayText":"set_flag","type":"function","leftLabel":"","description":" "},{"snippet":"set_flag(${1:flag}, ${2:enable})${0}","displayText":"set_flag","type":"function","leftLabel":"","description":" Set a [Material] flag, which toggles on or off a behavior when rendering. See enumeration FLAG_* for a list. "},{"snippet":"set_flag(${1:flag}, ${2:enabled})${0}","displayText":"set_flag","type":"function","leftLabel":"","description":" "},{"snippet":"set_flat(${1:enabled})${0}","displayText":"set_flat","type":"function","leftLabel":"","description":" Set the [i]flat[/i] property of a Button. Flat buttons don't display decoration unless hoevered or pressed. "},{"snippet":"set_font(${1:name}, ${2:type}, ${3:font})${0}","displayText":"set_font","type":"function","leftLabel":"","description":" "},{"snippet":"set_icon(${1:name}, ${2:type}, ${3:texture})${0}","displayText":"set_icon","type":"function","leftLabel":"","description":" "},{"snippet":"set_icon(${1:column}, ${2:texture})${0}","displayText":"set_icon","type":"function","leftLabel":"","description":" "},{"snippet":"set_icon(${1:arg0})${0}","displayText":"set_icon","type":"function","leftLabel":"","description":" "},{"snippet":"set_loop(${1:loop})${0}","displayText":"set_loop","type":"function","leftLabel":"","description":" "},{"snippet":"set_loop(${1:enabled})${0}","displayText":"set_loop","type":"function","leftLabel":"","description":" "},{"snippet":"set_mass(${1:mass})${0}","displayText":"set_mass","type":"function","leftLabel":"","description":" Set the body mass. "},{"snippet":"set_mesh(${1:mesh})${0}","displayText":"set_mesh","type":"function","leftLabel":"","description":" Set the [Mesh] resource for the instance. "},{"snippet":"set_meta(${1:name}, ${2:value})${0}","displayText":"set_meta","type":"function","leftLabel":"","description":" Set a metadata into the object. Medatada is serialized. Metadata can be [i]anything[/i]. "},{"snippet":"set_mode(${1:mode})${0}","displayText":"set_mode","type":"function","leftLabel":"","description":" Set the body mode, from the MODE_* enum. This allows to change to a static body or a character body. "},{"snippet":"set_name(${1:name})${0}","displayText":"set_name","type":"function","leftLabel":"","description":" Set the name of the [Node]. Name must be unique within parent, and setting an already existing name will cause for the node to be automatically renamed. "},{"snippet":"set_page(${1:pagesize})${0}","displayText":"set_page","type":"function","leftLabel":"","description":" Set page size. Page is mainly used for scrollbars or anything that controls text scrolling. "},{"snippet":"set_path(${1:path})${0}","displayText":"set_path","type":"function","leftLabel":"","description":" Set the path of the resource. This is useful mainly for editors when saving/loading, and shouldn't be changed by anything else. "},{"snippet":"set_rect(${1:rect})${0}","displayText":"set_rect","type":"function","leftLabel":"","description":" Set the viewport rect. If the viewport is child of a control, it will use the same rect as the parent. "},{"snippet":"set_room(${1:room})${0}","displayText":"set_room","type":"function","leftLabel":"","description":" "},{"snippet":"set_root(${1:path})${0}","displayText":"set_root","type":"function","leftLabel":"","description":" AnimationPlayer resolves animation track paths from this node (which is relative to itself), by default root is \"..\", but it can be changed. "},{"snippet":"set_side(${1:side}, ${2:image})${0}","displayText":"set_side","type":"function","leftLabel":"","description":" "},{"snippet":"set_size(${1:size})${0}","displayText":"set_size","type":"function","leftLabel":"","description":" Changes MARGIN_RIGHT and MARGIN_BOTTOM to fit a given size. This is a helper (see [method set_margin]). "},{"snippet":"set_step(${1:size_sec})${0}","displayText":"set_step","type":"function","leftLabel":"","description":" "},{"snippet":"set_step(${1:step})${0}","displayText":"set_step","type":"function","leftLabel":"","description":" Set step value. If step is 0, stepping will be disabled. "},{"snippet":"set_text(${1:column}, ${2:text})${0}","displayText":"set_text","type":"function","leftLabel":"","description":" "},{"snippet":"set_text(${1:text})${0}","displayText":"set_text","type":"function","leftLabel":"","description":" Set the button text, which will be displayed inside the button area. "},{"snippet":"set_tint(${1:tint})${0}","displayText":"set_tint","type":"function","leftLabel":"","description":" "},{"snippet":"set_wrap(${1:enable})${0}","displayText":"set_wrap","type":"function","leftLabel":"","description":" Enable text wrapping when it goes beyond he edge of what is visible. "},{"snippet":"set_zoom(${1:arg0})${0}","displayText":"set_zoom","type":"function","leftLabel":"","description":" "},{"snippet":"stop_all()${0}","displayText":"stop_all","type":"function","leftLabel":"","description":" "},{"snippet":"store_16(${1:value})${0}","displayText":"store_16","type":"function","leftLabel":"","description":" "},{"snippet":"store_32(${1:value})${0}","displayText":"store_32","type":"function","leftLabel":"","description":" "},{"snippet":"store_64(${1:value})${0}","displayText":"store_64","type":"function","leftLabel":"","description":" "},{"snippet":"set_align(${1:align})${0}","displayText":"set_align","type":"function","leftLabel":"","description":" Set the alignmend mode to any of the ALIGN_* enumeration values. "},{"snippet":"set_atlas(${1:atlas})${0}","displayText":"set_atlas","type":"function","leftLabel":"","description":" "},{"snippet":"set_begin(${1:pos})${0}","displayText":"set_begin","type":"function","leftLabel":"","description":" Sets MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]). "},{"snippet":"set_brake(${1:brake})${0}","displayText":"set_brake","type":"function","leftLabel":"","description":" "},{"snippet":"set_color(${1:name}, ${2:type}, ${3:color})${0}","displayText":"set_color","type":"function","leftLabel":"","description":" "},{"snippet":"set_color(${1:color})${0}","displayText":"set_color","type":"function","leftLabel":"","description":" "},{"snippet":"set_color(${1:color}, ${2:value})${0}","displayText":"set_color","type":"function","leftLabel":"","description":" "},{"snippet":"set_curve(${1:curve})${0}","displayText":"set_curve","type":"function","leftLabel":"","description":" "},{"snippet":"set_depth(${1:depth})${0}","displayText":"set_depth","type":"function","leftLabel":"","description":" "},{"snippet":"set_faces(${1:faces})${0}","displayText":"set_faces","type":"function","leftLabel":"","description":" Set the faces (an array of triangles). "},{"snippet":"set_flags(${1:flags})${0}","displayText":"set_flags","type":"function","leftLabel":"","description":" "},{"snippet":"set_frame(${1:idx}, ${2:txt})${0}","displayText":"set_frame","type":"function","leftLabel":"","description":" "},{"snippet":"set_frame(${1:frame})${0}","displayText":"set_frame","type":"function","leftLabel":"","description":" "},{"snippet":"set_gizmo(${1:gizmo})${0}","displayText":"set_gizmo","type":"function","leftLabel":"","description":" "},{"snippet":"set_group(${1:call_flags}, ${2:group}, ${3:property}, ${4:value})${0}","displayText":"set_group","type":"function","leftLabel":"","description":" "},{"snippet":"set_image(${1:image})${0}","displayText":"set_image","type":"function","leftLabel":"","description":" Set the image used for mask testing. Pixels (converted to grey) that have a value, less than 0.5 will fail the test. "},{"snippet":"set_layer(${1:layer})${0}","displayText":"set_layer","type":"function","leftLabel":"","description":" Set the layer index, determines the draw order, a lower value will be below a higher one. "},{"snippet":"set_light(${1:light})${0}","displayText":"set_light","type":"function","leftLabel":"","description":" "},{"snippet":"set_limit(${1:margin}, ${2:limit})${0}","displayText":"set_limit","type":"function","leftLabel":"","description":" Set the scrolling limit in pixels. "},{"snippet":"set_order(${1:name}, ${2:pos})${0}","displayText":"set_order","type":"function","leftLabel":"","description":" Set the order of a configuration value (influences when saved to the config file). "},{"snippet":"set_owner(${1:owner})${0}","displayText":"set_owner","type":"function","leftLabel":"","description":" Set the node owner. A node can have any other node as owner (as long as a valid parent, grandparent, etc ascending in the tree). When saving a node (using SceneSaver) all the nodes it owns will be saved with it. This allows to create complex SceneTrees, with instancing and subinstancing. "},{"snippet":"set_param(${1:param}, ${2:value})${0}","displayText":"set_param","type":"function","leftLabel":"","description":" "},{"snippet":"set_pause(${1:enable})${0}","displayText":"set_pause","type":"function","leftLabel":"","description":" "},{"snippet":"set_plane(${1:plane})${0}","displayText":"set_plane","type":"function","leftLabel":"","description":" "},{"snippet":"set_range(${1:column}, ${2:value})${0}","displayText":"set_range","type":"function","leftLabel":"","description":" "},{"snippet":"set_scale(${1:scale})${0}","displayText":"set_scale","type":"function","leftLabel":"","description":" Set the scale of the 2d node. "},{"snippet":"set_shape(${1:shape})${0}","displayText":"set_shape","type":"function","leftLabel":"","description":" "},{"snippet":"set_shape(${1:points})${0}","displayText":"set_shape","type":"function","leftLabel":"","description":" Set the portal shape. The shape is an array of [Point2] points, representing a convex polygon in the X,Y plane. "},{"snippet":"set_shape(${1:shape_idx}, ${2:shape})${0}","displayText":"set_shape","type":"function","leftLabel":"","description":" "},{"snippet":"set_speed(${1:speed})${0}","displayText":"set_speed","type":"function","leftLabel":"","description":" "},{"snippet":"set_state(${1:state})${0}","displayText":"set_state","type":"function","leftLabel":"","description":" "},{"snippet":"set_theme(${1:theme})${0}","displayText":"set_theme","type":"function","leftLabel":"","description":" "},{"snippet":"set_ticks(${1:count})${0}","displayText":"set_ticks","type":"function","leftLabel":"","description":" Set amount of ticks to display in slider. "},{"snippet":"set_title(${1:title})${0}","displayText":"set_title","type":"function","leftLabel":"","description":" Set the title of the window. "},{"snippet":"set_value(${1:section}, ${2:key}, ${3:value})${0}","displayText":"set_value","type":"function","leftLabel":"","description":" "},{"snippet":"set_value(${1:value})${0}","displayText":"set_value","type":"function","leftLabel":"","description":" "},{"snippet":"set_world(${1:world})${0}","displayText":"set_world","type":"function","leftLabel":"","description":" "},{"snippet":"store_var(${1:value})${0}","displayText":"store_var","type":"function","leftLabel":"","description":" "},{"snippet":"select_all()${0}","displayText":"select_all","type":"function","leftLabel":"","description":" Select the whole string. "},{"snippet":"set_access(${1:access})${0}","displayText":"set_access","type":"function","leftLabel":"","description":" "},{"snippet":"set_action(${1:action})${0}","displayText":"set_action","type":"function","leftLabel":"","description":" "},{"snippet":"set_active(${1:enabled})${0}","displayText":"set_active","type":"function","leftLabel":"","description":" "},{"snippet":"set_active(${1:active})${0}","displayText":"set_active","type":"function","leftLabel":"","description":" "},{"snippet":"set_amount(${1:amount})${0}","displayText":"set_amount","type":"function","leftLabel":"","description":" "},{"snippet":"set_anchor(${1:margin}, ${2:anchor_mode})${0}","displayText":"set_anchor","type":"function","leftLabel":"","description":" Change the anchor (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) type for a margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Changing the anchor mode converts the current margin offset from the previos anchor mode to the new one, so margin offsets ([method set_margin]) must be done after setting anchors, or at the same time ([method set_anchor_and_margin]). "},{"snippet":"set_ascent(${1:px})${0}","displayText":"set_ascent","type":"function","leftLabel":"","description":" Set the font ascent (number of pixels above the baseline). "},{"snippet":"set_bounce(${1:bounce})${0}","displayText":"set_bounce","type":"function","leftLabel":"","description":" "},{"snippet":"set_bounds(${1:bsp_tree})${0}","displayText":"set_bounds","type":"function","leftLabel":"","description":" "},{"snippet":"set_chorus(${1:voice}, ${2:send})${0}","displayText":"set_chorus","type":"function","leftLabel":"","description":" Set the chorus send level of a voice (0 to 1). For setting chorus parameters, see [AudioServer]. "},{"snippet":"set_editor(${1:name})${0}","displayText":"set_editor","type":"function","leftLabel":"","description":" "},{"snippet":"set_expand(${1:expand})${0}","displayText":"set_expand","type":"function","leftLabel":"","description":" Set the expand property (default). When expanding, the image will use the same rules as [StyleBoxTexture] for expand. If not expanding, the image will always be tested at its original size. "},{"snippet":"set_expand(${1:enable})${0}","displayText":"set_expand","type":"function","leftLabel":"","description":" "},{"snippet":"set_filter(${1:voice}, ${2:type}, ${3:cutoff_hz}, ${4:resonance}, ${5:gain})${0}","displayText":"set_filter","type":"function","leftLabel":"","description":" Set and enable a filter of a voice, with type \"type\" (see FILTER_* enum), cutoff (0 to 22khz) frequency and resonance (0+). "},{"snippet":"set_flag_x(${1:flag}, ${2:value})${0}","displayText":"set_flag_x","type":"function","leftLabel":"","description":" "},{"snippet":"set_flag_y(${1:flag}, ${2:value})${0}","displayText":"set_flag_y","type":"function","leftLabel":"","description":" "},{"snippet":"set_flag_z(${1:flag}, ${2:value})${0}","displayText":"set_flag_z","type":"function","leftLabel":"","description":" "},{"snippet":"set_flip_h(${1:enable})${0}","displayText":"set_flip_h","type":"function","leftLabel":"","description":" "},{"snippet":"set_flip_h(${1:flip_h})${0}","displayText":"set_flip_h","type":"function","leftLabel":"","description":" If true, sprite is flipped horizontally. "},{"snippet":"set_flip_v(${1:enable})${0}","displayText":"set_flip_v","type":"function","leftLabel":"","description":" "},{"snippet":"set_flip_v(${1:flip_v})${0}","displayText":"set_flip_v","type":"function","leftLabel":"","description":" Set true to flip the sprite vertically. "},{"snippet":"set_format(${1:format})${0}","displayText":"set_format","type":"function","leftLabel":"","description":" "},{"snippet":"set_height(${1:px})${0}","displayText":"set_height","type":"function","leftLabel":"","description":" Set the total font height (ascent plus descent) in pixels. "},{"snippet":"set_height(${1:height})${0}","displayText":"set_height","type":"function","leftLabel":"","description":" Set the capsule height. "},{"snippet":"set_invert(${1:invert})${0}","displayText":"set_invert","type":"function","leftLabel":"","description":" "},{"snippet":"set_length(${1:time_sec})${0}","displayText":"set_length","type":"function","leftLabel":"","description":" Set the total length of the animation (in seconds). Note that length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping. "},{"snippet":"set_length(${1:length})${0}","displayText":"set_length","type":"function","leftLabel":"","description":" "},{"snippet":"set_locale(${1:locale})${0}","displayText":"set_locale","type":"function","leftLabel":"","description":" Set the locale of the translation. "},{"snippet":"set_margin(${1:margin}, ${2:offset})${0}","displayText":"set_margin","type":"function","leftLabel":"","description":" Set a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being set depends on the anchor mode. "},{"snippet":"set_margin(${1:margin})${0}","displayText":"set_margin","type":"function","leftLabel":"","description":" "},{"snippet":"set_motion(${1:motion})${0}","displayText":"set_motion","type":"function","leftLabel":"","description":" "},{"snippet":"set_node_a(${1:node})${0}","displayText":"set_node_a","type":"function","leftLabel":"","description":" Set the path to the A node for the joint. Must be of type PhysicsBody2D. "},{"snippet":"set_node_b(${1:node})${0}","displayText":"set_node_b","type":"function","leftLabel":"","description":" "},{"snippet":"set_normal(${1:normal})${0}","displayText":"set_normal","type":"function","leftLabel":"","description":" Set the line normal. "},{"snippet":"set_octree(${1:octree})${0}","displayText":"set_octree","type":"function","leftLabel":"","description":" "},{"snippet":"set_offset(${1:offset})${0}","displayText":"set_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_option(${1:key}, ${2:value})${0}","displayText":"set_option","type":"function","leftLabel":"","description":" "},{"snippet":"set_paused(${1:paused})${0}","displayText":"set_paused","type":"function","leftLabel":"","description":" "},{"snippet":"set_points(${1:points})${0}","displayText":"set_points","type":"function","leftLabel":"","description":" Set a list of points in either clockwise or counter clockwise order, forming a convex polygon. "},{"snippet":"set_prefix(${1:prefix})${0}","displayText":"set_prefix","type":"function","leftLabel":"","description":" Set a prefix. "},{"snippet":"set_radius(${1:length})${0}","displayText":"set_radius","type":"function","leftLabel":"","description":" "},{"snippet":"set_radius(${1:radius})${0}","displayText":"set_radius","type":"function","leftLabel":"","description":" Set the capsule radius. "},{"snippet":"set_region(${1:region})${0}","displayText":"set_region","type":"function","leftLabel":"","description":" "},{"snippet":"set_region(${1:enabled})${0}","displayText":"set_region","type":"function","leftLabel":"","description":" Set the sprite as a sub-region of a bigger texture. Useful for texture-atlases. "},{"snippet":"set_repeat(${1:repeat})${0}","displayText":"set_repeat","type":"function","leftLabel":"","description":" "},{"snippet":"set_reverb(${1:voice}, ${2:room_type}, ${3:send})${0}","displayText":"set_reverb","type":"function","leftLabel":"","description":" Set the reverb send level and type of a voice (0 to 1). (see REVERB_* enum for type). "},{"snippet":"set_rotate(${1:enable})${0}","displayText":"set_rotate","type":"function","leftLabel":"","description":" "},{"snippet":"set_script(${1:script})${0}","displayText":"set_script","type":"function","leftLabel":"","description":" Set a script into the object, scripts extend the object functionality. "},{"snippet":"set_secret(${1:enabled})${0}","displayText":"set_secret","type":"function","leftLabel":"","description":" Set the [i]secret[/i] status of the [LineEdit]. When enabled, every character is displayed as \"*\". "},{"snippet":"set_shader(${1:shader})${0}","displayText":"set_shader","type":"function","leftLabel":"","description":" "},{"snippet":"set_stream(${1:stream})${0}","displayText":"set_stream","type":"function","leftLabel":"","description":" "},{"snippet":"set_suffix(${1:suffix})${0}","displayText":"set_suffix","type":"function","leftLabel":"","description":" Set a specific suffix. "},{"snippet":"set_target(${1:target})${0}","displayText":"set_target","type":"function","leftLabel":"","description":" "},{"snippet":"set_valign(${1:valign})${0}","displayText":"set_valign","type":"function","leftLabel":"","description":" "},{"snippet":"set_vertex(${1:idx}, ${2:vertex})${0}","displayText":"set_vertex","type":"function","leftLabel":"","description":" "},{"snippet":"set_volume(${1:voice}, ${2:nrg})${0}","displayText":"set_volume","type":"function","leftLabel":"","description":" Set the volume of a voice, 0db is maximum volume (every about -6db, volume is reduced in half). \"db\" does in fact go from zero to negative. "},{"snippet":"set_volume(${1:volume})${0}","displayText":"set_volume","type":"function","leftLabel":"","description":" "},{"snippet":"set_weight(${1:weight})${0}","displayText":"set_weight","type":"function","leftLabel":"","description":" Set the body mass given standard earth-weight (gravity 9.8). Not really useful for 2D since most measures for this node are in pixels. "},{"snippet":"shell_open(${1:uri})${0}","displayText":"shell_open","type":"function","leftLabel":"int","description":" "},{"snippet":"show_modal(${1:exclusive})${0}","displayText":"show_modal","type":"function","leftLabel":"","description":" Display a Control as modal. Control must be a subwindow (see [method set_as_subwindow]). Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus. "},{"snippet":"stop_voice(${1:voice})${0}","displayText":"stop_voice","type":"function","leftLabel":"","description":" Stop a given voice. "},{"snippet":"store_line(${1:line})${0}","displayText":"store_line","type":"function","leftLabel":"","description":" "},{"snippet":"store_real(${1:value})${0}","displayText":"store_real","type":"function","leftLabel":"","description":" "},{"snippet":"set_bitmask(${1:bitmask})${0}","displayText":"set_bitmask","type":"function","leftLabel":"","description":" "},{"snippet":"set_bounces(${1:bounces})${0}","displayText":"set_bounces","type":"function","leftLabel":"","description":" "},{"snippet":"set_cast_to(${1:local_point})${0}","displayText":"set_cast_to","type":"function","leftLabel":"","description":" "},{"snippet":"set_checked(${1:column}, ${2:checked})${0}","displayText":"set_checked","type":"function","leftLabel":"","description":" "},{"snippet":"set_columns(${1:columns})${0}","displayText":"set_columns","type":"function","leftLabel":"","description":" "},{"snippet":"set_columns(${1:amount})${0}","displayText":"set_columns","type":"function","leftLabel":"","description":" "},{"snippet":"set_damping(${1:damping})${0}","displayText":"set_damping","type":"function","leftLabel":"","description":" Set the damping of the spring joint. "},{"snippet":"set_density(${1:density})${0}","displayText":"set_density","type":"function","leftLabel":"","description":" "},{"snippet":"set_enabled(${1:enable})${0}","displayText":"set_enabled","type":"function","leftLabel":"","description":" Enable the portal (it is enabled by defaul though), disabling it will cause the parent [RoomInstance] to not be visible any longer when looking through the portal. "},{"snippet":"set_enabled(${1:enabled})${0}","displayText":"set_enabled","type":"function","leftLabel":"","description":" "},{"snippet":"set_enabler(${1:enabler}, ${2:enabled})${0}","displayText":"set_enabler","type":"function","leftLabel":"","description":" "},{"snippet":"set_exclude(${1:exclude})${0}","displayText":"set_exclude","type":"function","leftLabel":"","description":" "},{"snippet":"set_extents(${1:extents})${0}","displayText":"set_extents","type":"function","leftLabel":"","description":" Set the half extents, the actual width and height of this shape is twice the half extents. "},{"snippet":"set_gravity(${1:gravity})${0}","displayText":"set_gravity","type":"function","leftLabel":"","description":" "},{"snippet":"set_hframes(${1:hframes})${0}","displayText":"set_hframes","type":"function","leftLabel":"","description":" "},{"snippet":"set_item_ID(${1:idx}, ${2:id})${0}","displayText":"set_item_ID","type":"function","leftLabel":"","description":" Set the ID of an item at index \"idx\". "},{"snippet":"set_minsize(${1:minsize})${0}","displayText":"set_minsize","type":"function","leftLabel":"","description":" "},{"snippet":"set_opacity(${1:opacity})${0}","displayText":"set_opacity","type":"function","leftLabel":"","description":" Set canvas item opacity. This will affect the canvas item and all the children. "},{"snippet":"set_param_x(${1:param}, ${2:value})${0}","displayText":"set_param_x","type":"function","leftLabel":"","description":" "},{"snippet":"set_param_y(${1:param}, ${2:value})${0}","displayText":"set_param_y","type":"function","leftLabel":"","description":" "},{"snippet":"set_param_z(${1:param}, ${2:value})${0}","displayText":"set_param_z","type":"function","leftLabel":"","description":" "},{"snippet":"set_polygon(${1:polygon})${0}","displayText":"set_polygon","type":"function","leftLabel":"","description":" "},{"snippet":"set_pressed(${1:pressed})${0}","displayText":"set_pressed","type":"function","leftLabel":"","description":" Set the button to pressed state (only if toggle_mode is active). "},{"snippet":"set_process(${1:enable})${0}","displayText":"set_process","type":"function","leftLabel":"","description":" Enables or disables node processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the [method _process] callback will be called if exists). It is common to check how much time was elapsed since the previous frame by calling [method get_process_time]. "},{"snippet":"set_storage(${1:mode})${0}","displayText":"set_storage","type":"function","leftLabel":"","description":" "},{"snippet":"set_tangent(${1:tangent})${0}","displayText":"set_tangent","type":"function","leftLabel":"","description":" "},{"snippet":"set_texture(${1:param}, ${2:texture})${0}","displayText":"set_texture","type":"function","leftLabel":"","description":" Set a texture. Textures change parameters per texel and are mapped to the model depending on the texcoord mode (see [method set_texcoord_mode]). "},{"snippet":"set_texture(${1:texture})${0}","displayText":"set_texture","type":"function","leftLabel":"","description":" "},{"snippet":"set_tileset(${1:tileset})${0}","displayText":"set_tileset","type":"function","leftLabel":"","description":" Set the current tileset. "},{"snippet":"set_tooltip(${1:tooltip})${0}","displayText":"set_tooltip","type":"function","leftLabel":"","description":" Set a tooltip, which will appear when the cursor is resting over this control. "},{"snippet":"set_tooltip(${1:column}, ${2:tooltip})${0}","displayText":"set_tooltip","type":"function","leftLabel":"","description":" "},{"snippet":"set_vframes(${1:vframes})${0}","displayText":"set_vframes","type":"function","leftLabel":"","description":" "},{"snippet":"store_float(${1:value})${0}","displayText":"store_float","type":"function","leftLabel":"","description":" "},{"snippet":"str2var:var(${1:str})${0}","displayText":"str2var:var","type":"function","leftLabel":"String","description":" Converts the value of a String to a variable. "},{"snippet":"set_autoplay(${1:enabled})${0}","displayText":"set_autoplay","type":"function","leftLabel":"","description":" "},{"snippet":"set_autoplay(${1:name})${0}","displayText":"set_autoplay","type":"function","leftLabel":"","description":" Set the name of the animation that will be automatically played when the scene is loaded. "},{"snippet":"set_autowrap(${1:enable})${0}","displayText":"set_autowrap","type":"function","leftLabel":"","description":" Set [i]autowrap[/i] mode. When enabled, autowrap will fit text to the control width, breaking sentences when they exceed the available horizontal space. When disabled, the label minimum width becomes the width of the longest row, and the minimum height large enough to fit all rows. "},{"snippet":"set_bg_color(${1:color})${0}","displayText":"set_bg_color","type":"function","leftLabel":"","description":" "},{"snippet":"set_bit_rect(${1:p_rect}, ${2:bit})${0}","displayText":"set_bit_rect","type":"function","leftLabel":"","description":" "},{"snippet":"set_center_x(${1:enable})${0}","displayText":"set_center_x","type":"function","leftLabel":"","description":" "},{"snippet":"set_center_y(${1:enable})${0}","displayText":"set_center_y","type":"function","leftLabel":"","description":" "},{"snippet":"set_center_z(${1:enable})${0}","displayText":"set_center_z","type":"function","leftLabel":"","description":" "},{"snippet":"set_centered(${1:centered})${0}","displayText":"set_centered","type":"function","leftLabel":"","description":" Set to true if the camera is at the center of the screen (default: true). "},{"snippet":"set_constant(${1:name}, ${2:type}, ${3:constant})${0}","displayText":"set_constant","type":"function","leftLabel":"","description":" "},{"snippet":"set_disabled(${1:disabled})${0}","displayText":"set_disabled","type":"function","leftLabel":"","description":" Set the button into disabled state. When a button is disabled, it can't be clicked or toggled. "},{"snippet":"set_editable(${1:column}, ${2:enabled})${0}","displayText":"set_editable","type":"function","leftLabel":"","description":" "},{"snippet":"set_editable(${1:editable})${0}","displayText":"set_editable","type":"function","leftLabel":"","description":" Set whether the spinbox is editable. "},{"snippet":"set_editable(${1:enabled})${0}","displayText":"set_editable","type":"function","leftLabel":"","description":" Set the [i]editable[/i] status of the [LineEdit]. When disabled, existing text can't be modified and new text can't be added. "},{"snippet":"set_emitting(${1:active})${0}","displayText":"set_emitting","type":"function","leftLabel":"","description":" "},{"snippet":"set_emitting(${1:enabled})${0}","displayText":"set_emitting","type":"function","leftLabel":"","description":" Set the \"emitting\" property state. When emitting, the particle system generates new particles at constant rate. "},{"snippet":"set_filename(${1:filename})${0}","displayText":"set_filename","type":"function","leftLabel":"","description":" A node can contain a filename. This filename should not be changed by the user, unless writing editors and tools. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded. "},{"snippet":"set_friction(${1:friction})${0}","displayText":"set_friction","type":"function","leftLabel":"","description":" Set the body friction, from 0 (frictionless) to 1 (full friction). "},{"snippet":"set_function(${1:name})${0}","displayText":"set_function","type":"function","leftLabel":"","description":" "},{"snippet":"set_h_frames(${1:enable})${0}","displayText":"set_h_frames","type":"function","leftLabel":"","description":" "},{"snippet":"set_h_offset(${1:ofs})${0}","displayText":"set_h_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_h_offset(${1:h_offset})${0}","displayText":"set_h_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_h_scroll(${1:val})${0}","displayText":"set_h_scroll","type":"function","leftLabel":"","description":" "},{"snippet":"set_instance(${1:instance})${0}","displayText":"set_instance","type":"function","leftLabel":"","description":" "},{"snippet":"set_lifetime(${1:lifetime})${0}","displayText":"set_lifetime","type":"function","leftLabel":"","description":" "},{"snippet":"set_loop_end(${1:pos})${0}","displayText":"set_loop_end","type":"function","leftLabel":"","description":" Set the loop end position, it must be a valid frame and greater than the loop begin position. "},{"snippet":"set_material(${1:material})${0}","displayText":"set_material","type":"function","leftLabel":"","description":" "},{"snippet":"set_metadata(${1:column}, ${2:meta})${0}","displayText":"set_metadata","type":"function","leftLabel":"","description":" "},{"snippet":"set_mix_rate(${1:hz})${0}","displayText":"set_mix_rate","type":"function","leftLabel":"","description":" Set the mix rate for the sample (expected playback frequency). "},{"snippet":"set_mix_rate(${1:voice}, ${2:hz})${0}","displayText":"set_mix_rate","type":"function","leftLabel":"","description":" Change the mix rate of a voice \"voice\" to given \"hz\". "},{"snippet":"set_modulate(${1:modulate})${0}","displayText":"set_modulate","type":"function","leftLabel":"","description":" "},{"snippet":"set_one_shot(${1:enable})${0}","displayText":"set_one_shot","type":"function","leftLabel":"","description":" Set as one-shot. If true, timer will stop after timeout, otherwise it will automatically restart. "},{"snippet":"set_operator(${1:operator})${0}","displayText":"set_operator","type":"function","leftLabel":"","description":" "},{"snippet":"set_phonemes(${1:phonemes})${0}","displayText":"set_phonemes","type":"function","leftLabel":"","description":" Set the phoneme library. "},{"snippet":"set_point_in(${1:idx}, ${2:pos})${0}","displayText":"set_point_in","type":"function","leftLabel":"","description":" "},{"snippet":"set_priority(${1:priority})${0}","displayText":"set_priority","type":"function","leftLabel":"","description":" "},{"snippet":"set_readonly(${1:enable})${0}","displayText":"set_readonly","type":"function","leftLabel":"","description":" Set the text editor as read-only. Text can be displayed but not edited. "},{"snippet":"set_rotating(${1:rotating})${0}","displayText":"set_rotating","type":"function","leftLabel":"","description":" "},{"snippet":"set_rotation(${1:rotation})${0}","displayText":"set_rotation","type":"function","leftLabel":"","description":" Set the base rotation for this layer (helper). "},{"snippet":"set_segments(${1:segments})${0}","displayText":"set_segments","type":"function","leftLabel":"","description":" Set the array of segments. "},{"snippet":"set_selected(${1:button})${0}","displayText":"set_selected","type":"function","leftLabel":"","description":" Sekect a button in the array. "},{"snippet":"set_sleeping(${1:sleeping})${0}","displayText":"set_sleeping","type":"function","leftLabel":"","description":" "},{"snippet":"set_steering(${1:steering})${0}","displayText":"set_steering","type":"function","leftLabel":"","description":" "},{"snippet":"set_stylebox(${1:name}, ${2:type}, ${3:texture})${0}","displayText":"set_stylebox","type":"function","leftLabel":"","description":" "},{"snippet":"set_tab_icon(${1:tab_idx}, ${2:icon})${0}","displayText":"set_tab_icon","type":"function","leftLabel":"","description":" "},{"snippet":"set_tab_size(${1:spaces})${0}","displayText":"set_tab_size","type":"function","leftLabel":"","description":" "},{"snippet":"set_v_frames(${1:enable})${0}","displayText":"set_v_frames","type":"function","leftLabel":"","description":" "},{"snippet":"set_v_offset(${1:v_offset})${0}","displayText":"set_v_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_v_offset(${1:ofs})${0}","displayText":"set_v_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_v_scroll(${1:val})${0}","displayText":"set_v_scroll","type":"function","leftLabel":"","description":" "},{"snippet":"set_variable(${1:variable}, ${2:value})${0}","displayText":"set_variable","type":"function","leftLabel":"","description":" Set a specific variable for the particle system (see VAR_* enum). "},{"snippet":"set_vertices(${1:vertices})${0}","displayText":"set_vertices","type":"function","leftLabel":"","description":" "},{"snippet":"shape_create(${1:type})${0}","displayText":"shape_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"size_changed()${0}","displayText":"size_changed","type":"method","leftLabel":"signal","description":"   "},{"snippet":"skip_section()${0}","displayText":"skip_section","type":"function","leftLabel":"","description":" "},{"snippet":"space_create()${0}","displayText":"space_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"store_buffer(${1:buffer})${0}","displayText":"store_buffer","type":"function","leftLabel":"","description":" "},{"snippet":"store_double(${1:value})${0}","displayText":"store_double","type":"function","leftLabel":"","description":" "},{"snippet":"store_string(${1:string})${0}","displayText":"store_string","type":"function","leftLabel":"","description":" "},{"snippet":"sample_create(${1:format}, ${2:stereo}, ${3:length})${0}","displayText":"sample_create","type":"function","leftLabel":"RID","description":" Create an audio sample, return a [RID] referencing it. The sample will be created with a given format (from the SAMPLE_FORMAT_* enum), a total length (in frames, not samples or bytes), in either stereo or mono. "},{"snippet":"set_ao_radius(${1:ao_radius})${0}","displayText":"set_ao_radius","type":"function","leftLabel":"","description":" "},{"snippet":"set_autostart(${1:enable})${0}","displayText":"set_autostart","type":"function","leftLabel":"","description":" Set to automatically start when entering the scene. "},{"snippet":"set_axis_lock(${1:axis_lock})${0}","displayText":"set_axis_lock","type":"function","leftLabel":"","description":" "},{"snippet":"set_bake_flag(${1:flag}, ${2:enabled})${0}","displayText":"set_bake_flag","type":"function","leftLabel":"","description":" "},{"snippet":"set_bake_mode(${1:bake_mode})${0}","displayText":"set_bake_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_base_path(${1:path})${0}","displayText":"set_base_path","type":"function","leftLabel":"","description":" "},{"snippet":"set_bone_pose(${1:bone_idx}, ${2:pose})${0}","displayText":"set_bone_pose","type":"function","leftLabel":"","description":" Return the pose transform for bone \"bone_idx\". "},{"snippet":"set_bone_rest(${1:bone_idx}, ${2:rest})${0}","displayText":"set_bone_rest","type":"function","leftLabel":"","description":" Set the rest transform for bone \"bone_idx\" "},{"snippet":"set_can_sleep(${1:able_to_sleep})${0}","displayText":"set_can_sleep","type":"function","leftLabel":"","description":" Set the body ability to fall asleep when not moving. This saves an enormous amount of processor time when there are plenty of rigid bodies (non static) in a scene. "},{"snippet":"set_cell_item(${1:x}, ${2:y}, ${3:z}, ${4:item}, ${5:orientation})${0}","displayText":"set_cell_item","type":"function","leftLabel":"","description":" "},{"snippet":"set_cell_mode(${1:column}, ${2:mode})${0}","displayText":"set_cell_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_cell_size(${1:size})${0}","displayText":"set_cell_size","type":"function","leftLabel":"","description":" Set the cell size. "},{"snippet":"set_clip_text(${1:enabled})${0}","displayText":"set_clip_text","type":"function","leftLabel":"","description":" Set the [i]clip_text[/i] property of a Button. When this property is enabled, text that is too large to fit the button is clipped, when disabled (default) the Button will always be wide enough to hold the text. "},{"snippet":"set_clipboard(${1:clipboard})${0}","displayText":"set_clipboard","type":"function","leftLabel":"","description":" Set clipboard to the OS. "},{"snippet":"set_collapsed(${1:enable})${0}","displayText":"set_collapsed","type":"function","leftLabel":"","description":" "},{"snippet":"set_collapsed(${1:collapsed})${0}","displayText":"set_collapsed","type":"function","leftLabel":"","description":" Set if the split must be collapsed. "},{"snippet":"set_draw_flag(${1:flag}, ${2:enabled})${0}","displayText":"set_draw_flag","type":"function","leftLabel":"","description":" "},{"snippet":"set_edge_damp(${1:edge_damp})${0}","displayText":"set_edge_damp","type":"function","leftLabel":"","description":" "},{"snippet":"set_edge_meta(${1:idx}, ${2:meta})${0}","displayText":"set_edge_meta","type":"function","leftLabel":"","description":" "},{"snippet":"set_enable_fx(${1:effect}, ${2:enabled})${0}","displayText":"set_enable_fx","type":"function","leftLabel":"","description":" "},{"snippet":"set_exclusive(${1:enable})${0}","displayText":"set_exclusive","type":"function","leftLabel":"","description":" "},{"snippet":"set_face_meta(${1:idx}, ${2:meta})${0}","displayText":"set_face_meta","type":"function","leftLabel":"","description":" "},{"snippet":"set_hide_root(${1:arg0})${0}","displayText":"set_hide_root","type":"function","leftLabel":"","description":" "},{"snippet":"set_item_icon(${1:idx}, ${2:icon})${0}","displayText":"set_item_icon","type":"function","leftLabel":"","description":" Set the icon of the item at index \"idx\". "},{"snippet":"set_item_icon(${1:idx}, ${2:texture})${0}","displayText":"set_item_icon","type":"function","leftLabel":"","description":" Set the icon of an item at index \"idx\". "},{"snippet":"set_item_mesh(${1:id}, ${2:mesh})${0}","displayText":"set_item_mesh","type":"function","leftLabel":"","description":" Set the mesh of the item. "},{"snippet":"set_item_name(${1:id}, ${2:name})${0}","displayText":"set_item_name","type":"function","leftLabel":"","description":" Set the name of the item. "},{"snippet":"set_item_text(${1:idx}, ${2:text})${0}","displayText":"set_item_text","type":"function","leftLabel":"","description":" Set the text of an item at index \"idx\". "},{"snippet":"set_limit_end(${1:ofs})${0}","displayText":"set_limit_end","type":"function","leftLabel":"","description":" "},{"snippet":"set_max_chars(${1:amount})${0}","displayText":"set_max_chars","type":"function","leftLabel":"","description":" Set the maximum amount of characters editable. "},{"snippet":"set_mirroring(${1:mirror})${0}","displayText":"set_mirroring","type":"function","leftLabel":"","description":" "},{"snippet":"set_multimesh(${1:multimesh})${0}","displayText":"set_multimesh","type":"function","leftLabel":"","description":" Set the [MultiMesh] to be instance. "},{"snippet":"set_parameter(${1:param}, ${2:value})${0}","displayText":"set_parameter","type":"function","leftLabel":"","description":" Set a parameter, parameters are defined in the PARAM_* enum. The type of each parameter may change, so it's best to check the enum. "},{"snippet":"set_parameter(${1:variable}, ${2:value})${0}","displayText":"set_parameter","type":"function","leftLabel":"","description":" "},{"snippet":"set_plot_size(${1:plot_size})${0}","displayText":"set_plot_size","type":"function","leftLabel":"","description":" "},{"snippet":"set_point_out(${1:idx}, ${2:pos})${0}","displayText":"set_point_out","type":"function","leftLabel":"","description":" "},{"snippet":"set_point_pos(${1:idx}, ${2:pos})${0}","displayText":"set_point_pos","type":"function","leftLabel":"","description":" "},{"snippet":"set_polyphony(${1:voices})${0}","displayText":"set_polyphony","type":"function","leftLabel":"","description":" "},{"snippet":"set_projector(${1:projector})${0}","displayText":"set_projector","type":"function","leftLabel":"","description":" "},{"snippet":"set_shape_rid(${1:shape})${0}","displayText":"set_shape_rid","type":"function","leftLabel":"","description":" "},{"snippet":"set_stiffness(${1:stiffness})${0}","displayText":"set_stiffness","type":"function","leftLabel":"","description":" Set the stiffness of the spring joint. "},{"snippet":"set_tab_align(${1:align})${0}","displayText":"set_tab_align","type":"function","leftLabel":"","description":" Set tab alignment, from the ALIGN_* enum. Moves tabs to the left, right or center. "},{"snippet":"set_tab_title(${1:tab_idx}, ${2:title})${0}","displayText":"set_tab_title","type":"function","leftLabel":"","description":" Set a title for the tab. Tab titles are by default the children node name, but this can be overriden. "},{"snippet":"set_transform(${1:local})${0}","displayText":"set_transform","type":"function","leftLabel":"","description":" Set the transform locally, relative to the parent spatial node. "},{"snippet":"set_transform(${1:xform})${0}","displayText":"set_transform","type":"function","leftLabel":"","description":" "},{"snippet":"set_transform(${1:transform})${0}","displayText":"set_transform","type":"function","leftLabel":"","description":" Set the base transform for this layer. "},{"snippet":"set_up_vector(${1:up})${0}","displayText":"set_up_vector","type":"function","leftLabel":"","description":" "},{"snippet":"set_uppercase(${1:enable})${0}","displayText":"set_uppercase","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_alpha(${1:enable})${0}","displayText":"set_use_alpha","type":"function","leftLabel":"","description":" "},{"snippet":"set_vertex_uv(${1:idx}, ${2:uv})${0}","displayText":"set_vertex_uv","type":"function","leftLabel":"","description":" "},{"snippet":"set_volume_db(${1:db})${0}","displayText":"set_volume_db","type":"function","leftLabel":"","description":" "},{"snippet":"set_volume_db(${1:voice}, ${2:nrg})${0}","displayText":"set_volume_db","type":"function","leftLabel":"","description":" "},{"snippet":"set_wait_time(${1:time_sec})${0}","displayText":"set_wait_time","type":"function","leftLabel":"","description":" Set wait time. When the time is over, it will emit the timeout signal. "},{"snippet":"shader_create(${1:mode})${0}","displayText":"shader_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"sort_children()${0}","displayText":"sort_children","type":"method","leftLabel":"signal","description":"  Enmitted when sorting the children is needed.  "},{"snippet":"screen_resized()${0}","displayText":"screen_resized","type":"method","leftLabel":"signal","description":"   "},{"snippet":"script_changed()${0}","displayText":"script_changed","type":"method","leftLabel":"signal","description":"   "},{"snippet":"send_body_data(${1:body})${0}","displayText":"send_body_data","type":"function","leftLabel":"int","description":" "},{"snippet":"send_body_text(${1:body})${0}","displayText":"send_body_text","type":"function","leftLabel":"int","description":" "},{"snippet":"set_absorption(${1:absorption})${0}","displayText":"set_absorption","type":"function","leftLabel":"","description":" "},{"snippet":"set_background(${1:bgmode})${0}","displayText":"set_background","type":"function","leftLabel":"","description":" "},{"snippet":"set_blend_mode(${1:mode})${0}","displayText":"set_blend_mode","type":"function","leftLabel":"","description":" Set blend mode for the material, which can be one of BLEND_MODE_MIX (default), BLEND_MODE_ADD, BLEND_MODE_SUB. Keep in mind that only BLEND_MODE_MIX ensures that the material [i]may[/i] be opaque, any other blend mode will render with alpha blending enabled in raster-based [VisualServer] implementations. "},{"snippet":"set_blend_mode(${1:blend_mode})${0}","displayText":"set_blend_mode","type":"function","leftLabel":"","description":" Set the blending mode from enum BLEND_MODE_*. "},{"snippet":"set_blend_time(${1:anim_from}, ${2:anim_to}, ${3:sec})${0}","displayText":"set_blend_time","type":"function","leftLabel":"","description":" Specify a blend time (in seconds) between two animations, referemced by their names. "},{"snippet":"set_build_mode(${1:arg0})${0}","displayText":"set_build_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_click_mask(${1:mask})${0}","displayText":"set_click_mask","type":"function","leftLabel":"","description":" "},{"snippet":"set_connection(${1:connection})${0}","displayText":"set_connection","type":"function","leftLabel":"","description":" "},{"snippet":"set_cursor_pos(${1:pos})${0}","displayText":"set_cursor_pos","type":"function","leftLabel":"","description":" Set the cursor position inside the [LineEdit], causing it to scroll if needed. "},{"snippet":"set_dark_color(${1:color})${0}","displayText":"set_dark_color","type":"function","leftLabel":"","description":" "},{"snippet":"set_edit_alpha(${1:show})${0}","displayText":"set_edit_alpha","type":"function","leftLabel":"","description":" "},{"snippet":"set_fixed_flag(${1:flag}, ${2:value})${0}","displayText":"set_fixed_flag","type":"function","leftLabel":"","description":" "},{"snippet":"set_focus_mode(${1:mode})${0}","displayText":"set_focus_mode","type":"function","leftLabel":"","description":" Set the focus access mode for the control (FOCUS_NONE, FOCUS_CLICK, FOCUS_ALL). Only one Control can be focused at the same time, and it will receive keyboard signals. "},{"snippet":"set_global_pos(${1:pos})${0}","displayText":"set_global_pos","type":"function","leftLabel":"","description":" Move the Control to a new position, relative to the top-left corner of the [i]window[/i] Control, and without changing current anchor mode. (see [method set_margin]). "},{"snippet":"set_global_pos(${1:arg0})${0}","displayText":"set_global_pos","type":"function","leftLabel":"","description":" "},{"snippet":"set_group_name(${1:name})${0}","displayText":"set_group_name","type":"function","leftLabel":"","description":" "},{"snippet":"set_hide_on_ok(${1:enabled})${0}","displayText":"set_hide_on_ok","type":"function","leftLabel":"","description":" Set whether the dialog is hidden when accepted (default true). "},{"snippet":"set_item_shape(${1:id}, ${2:shape})${0}","displayText":"set_item_shape","type":"function","leftLabel":"","description":" "},{"snippet":"set_layer_mask(${1:layer_mask})${0}","displayText":"set_layer_mask","type":"function","leftLabel":"","description":" "},{"snippet":"set_layer_mask(${1:mask})${0}","displayText":"set_layer_mask","type":"function","leftLabel":"","description":" "},{"snippet":"set_line_width(${1:width})${0}","displayText":"set_line_width","type":"function","leftLabel":"","description":" Set the line width for geometry drawn with FLAG_WIREFRAME enabled, or LINE primitives. Note that not all hardware or VisualServer backends support this (like DirectX). "},{"snippet":"set_loop_begin(${1:pos})${0}","displayText":"set_loop_begin","type":"function","leftLabel":"","description":" Set the loop begin position, it must be a valid frame and less than the loop end position. "},{"snippet":"set_max_length(${1:chars})${0}","displayText":"set_max_length","type":"function","leftLabel":"","description":" Set the maximum amount of characters the [LineEdit] can edit, and cropping existing text in case it exceeds that limit. Setting 0 removes the limit. "},{"snippet":"set_mouse_mode(${1:mode})${0}","displayText":"set_mouse_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_orthogonal(${1:size}, ${2:z_near}, ${3:z_far})${0}","displayText":"set_orthogonal","type":"function","leftLabel":"","description":" Set the camera projection to orthogonal mode, by specifying a width and the [i]near[/i] and [i]far[/i] clip planes in worldspace units. (As a hint, 2D games often use this projection, with values specified in pixels) "},{"snippet":"set_pause_mode(${1:mode})${0}","displayText":"set_pause_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_persisting(${1:name}, ${2:enable})${0}","displayText":"set_persisting","type":"function","leftLabel":"","description":" If set to true, this value can be saved to the configuration file. This is useful for editors. "},{"snippet":"set_pixel_size(${1:pixel_size})${0}","displayText":"set_pixel_size","type":"function","leftLabel":"","description":" "},{"snippet":"set_point_size(${1:size})${0}","displayText":"set_point_size","type":"function","leftLabel":"","description":" "},{"snippet":"set_point_tilt(${1:idx}, ${2:tilt})${0}","displayText":"set_point_tilt","type":"function","leftLabel":"","description":" "},{"snippet":"set_randomness(${1:variable}, ${2:randomness})${0}","displayText":"set_randomness","type":"function","leftLabel":"","description":" Set the randomness for a specific variable of the particle system. Randomness produces small changes from the default each time a particle is emitted. "},{"snippet":"set_randomness(${1:param}, ${2:value})${0}","displayText":"set_randomness","type":"function","leftLabel":"","description":" "},{"snippet":"set_resolution(${1:resolution})${0}","displayText":"set_resolution","type":"function","leftLabel":"","description":" "},{"snippet":"set_saturation(${1:saturation})${0}","displayText":"set_saturation","type":"function","leftLabel":"","description":" "},{"snippet":"set_selectable(${1:column}, ${2:selectable})${0}","displayText":"set_selectable","type":"function","leftLabel":"","description":" "},{"snippet":"set_stop_mouse(${1:stop})${0}","displayText":"set_stop_mouse","type":"function","leftLabel":"","description":" "},{"snippet":"set_target_fps(${1:target_fps})${0}","displayText":"set_target_fps","type":"function","leftLabel":"","description":" "},{"snippet":"set_text_align(${1:align})${0}","displayText":"set_text_align","type":"function","leftLabel":"","description":" "},{"snippet":"set_time_scale(${1:time_scale})${0}","displayText":"set_time_scale","type":"function","leftLabel":"","description":" "},{"snippet":"set_unit_value(${1:value})${0}","displayText":"set_unit_value","type":"function","leftLabel":"","description":" Set value mapped to 0 to 1 (unit) range, it will then be converted to the actual value within min and max. "},{"snippet":"set_vertex_uv2(${1:idx}, ${2:uv2})${0}","displayText":"set_vertex_uv2","type":"function","leftLabel":"","description":" "},{"snippet":"set_video_mode(${1:size}, ${2:fullscreen}, ${3:resizable}, ${4:screen})${0}","displayText":"set_video_mode","type":"function","leftLabel":"","description":" Change the video mode. "},{"snippet":"set_xfade_time(${1:sec})${0}","displayText":"set_xfade_time","type":"function","leftLabel":"","description":" Set the cross-fade time between random phonemes. "},{"snippet":"shape_get_data(${1:shape})${0}","displayText":"shape_get_data","type":"function","leftLabel":"","description":" "},{"snippet":"shape_get_type(${1:shape})${0}","displayText":"shape_get_type","type":"function","leftLabel":"int","description":" "},{"snippet":"shape_set_data(${1:shape}, ${2:data})${0}","displayText":"shape_set_data","type":"function","leftLabel":"","description":" "},{"snippet":"surface_remove(${1:surf_idx})${0}","displayText":"surface_remove","type":"function","leftLabel":"","description":" Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down. "},{"snippet":"sample_get_data(${1:sample})${0}","displayText":"sample_get_data","type":"function","leftLabel":"RawArray","description":" Return the sample data as an array of bytes. The length will be the expected length in bytes. "},{"snippet":"sample_set_data(${1:sample}, ${2:arg1})${0}","displayText":"sample_set_data","type":"function","leftLabel":"","description":" Set the sample data for a given sample as an array of bytes. The length must be equal to the sample lenght expected in bytes or an error will be produced. "},{"snippet":"scenario_create()${0}","displayText":"scenario_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"set_ao_strength(${1:ao_strength})${0}","displayText":"set_ao_strength","type":"function","leftLabel":"","description":" "},{"snippet":"set_as_toplevel(${1:enable})${0}","displayText":"set_as_toplevel","type":"function","leftLabel":"","description":" Set as toplevel. This means that it will not inherit transform from parent canvas items. "},{"snippet":"set_audio_track(${1:idx})${0}","displayText":"set_audio_track","type":"function","leftLabel":"","description":" "},{"snippet":"set_baked_light(${1:baked_light})${0}","displayText":"set_baked_light","type":"function","leftLabel":"","description":" "},{"snippet":"set_bone_parent(${1:bone_idx}, ${2:parent_idx})${0}","displayText":"set_bone_parent","type":"function","leftLabel":"","description":" Set the bone index \"parent_idx\" as the parent of the bone at \"bone_idx\". If -1, then bone has no parent. Note: \"parent_idx\" must be less than \"bone_idx\". "},{"snippet":"set_border_size(${1:size})${0}","displayText":"set_border_size","type":"function","leftLabel":"","description":" "},{"snippet":"set_button_icon(${1:button}, ${2:icon})${0}","displayText":"set_button_icon","type":"function","leftLabel":"","description":" Set the icon of an existing button. "},{"snippet":"set_button_icon(${1:texture})${0}","displayText":"set_button_icon","type":"function","leftLabel":"","description":" "},{"snippet":"set_button_text(${1:button}, ${2:text})${0}","displayText":"set_button_text","type":"function","leftLabel":"","description":" "},{"snippet":"set_current_dir(${1:dir})${0}","displayText":"set_current_dir","type":"function","leftLabel":"","description":" "},{"snippet":"set_current_tab(${1:tab_idx})${0}","displayText":"set_current_tab","type":"function","leftLabel":"","description":" Bring a tab (and the Control it represents) to the front, and hide the rest. "},{"snippet":"set_custom_aabb(${1:aabb})${0}","displayText":"set_custom_aabb","type":"function","leftLabel":"","description":" "},{"snippet":"set_custom_draw(${1:column}, ${2:object}, ${3:callback})${0}","displayText":"set_custom_draw","type":"function","leftLabel":"","description":" "},{"snippet":"set_custom_step(${1:step})${0}","displayText":"set_custom_step","type":"function","leftLabel":"","description":" "},{"snippet":"set_default_pan(${1:pan}, ${2:depth}, ${3:height})${0}","displayText":"set_default_pan","type":"function","leftLabel":"","description":" "},{"snippet":"set_drag_margin(${1:margin}, ${2:drag_margin})${0}","displayText":"set_drag_margin","type":"function","leftLabel":"","description":" Set the margins needed to drag the camera (relative to the screen size). Margin uses the MARGIN_* enum. Drag margins of 0,0,0,0 will keep the camera at the center of the screen, while drag margins of 1,1,1,1 will only move when the camera is at the edges. "},{"snippet":"set_draw_center(${1:enable})${0}","displayText":"set_draw_center","type":"function","leftLabel":"","description":" "},{"snippet":"set_draw_center(${1:size})${0}","displayText":"set_draw_center","type":"function","leftLabel":"","description":" "},{"snippet":"set_editor_hint(${1:enable})${0}","displayText":"set_editor_hint","type":"function","leftLabel":"","description":" "},{"snippet":"set_editor_only(${1:editor_only})${0}","displayText":"set_editor_only","type":"function","leftLabel":"","description":" "},{"snippet":"set_endian_swap(${1:enable})${0}","displayText":"set_endian_swap","type":"function","leftLabel":"","description":" "},{"snippet":"set_environment(${1:env})${0}","displayText":"set_environment","type":"function","leftLabel":"","description":" "},{"snippet":"set_grid_radius(${1:radius})${0}","displayText":"set_grid_radius","type":"function","leftLabel":"","description":" "},{"snippet":"set_half_offset(${1:half_offset})${0}","displayText":"set_half_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_icon_region(${1:column}, ${2:region})${0}","displayText":"set_icon_region","type":"function","leftLabel":"","description":" "},{"snippet":"set_light_color(${1:color})${0}","displayText":"set_light_color","type":"function","leftLabel":"","description":" "},{"snippet":"set_limit_begin(${1:ofs})${0}","displayText":"set_limit_begin","type":"function","leftLabel":"","description":" "},{"snippet":"set_loop_format(${1:format})${0}","displayText":"set_loop_format","type":"function","leftLabel":"","description":" Set the loop format, see LOOP_* enum "},{"snippet":"set_margin_size(${1:margin}, ${2:size})${0}","displayText":"set_margin_size","type":"function","leftLabel":"","description":" "},{"snippet":"set_normal_damp(${1:normal_damp})${0}","displayText":"set_normal_damp","type":"function","leftLabel":"","description":" "},{"snippet":"set_octant_size(${1:size})${0}","displayText":"set_octant_size","type":"function","leftLabel":"","description":" "},{"snippet":"set_perspective(${1:fov}, ${2:z_near}, ${3:z_far})${0}","displayText":"set_perspective","type":"function","leftLabel":"","description":" Set the camera projection to perspective mode, by specifying a [i]FOV[/i] Y angle in degrees (FOV means Field of View), and the [i]near[/i] and [i]far[/i] clip planes in worldspace units. "},{"snippet":"set_pitch_scale(${1:voice}, ${2:ratio})${0}","displayText":"set_pitch_scale","type":"function","leftLabel":"","description":" Scale the pitch (mix rate) of a voice by a ratio value \"ratio\". A ratio of 1.0 means the voice is unscaled. "},{"snippet":"set_pitch_scale(${1:pitch_scale})${0}","displayText":"set_pitch_scale","type":"function","leftLabel":"","description":" "},{"snippet":"set_point_cloud(${1:point_cloud})${0}","displayText":"set_point_cloud","type":"function","leftLabel":"","description":" Create the point set from a point cloud. The resulting convex hull will be set as the shape. "},{"snippet":"set_region_rect(${1:rect})${0}","displayText":"set_region_rect","type":"function","leftLabel":"","description":" Set the region rect to read from. "},{"snippet":"set_remote_node(${1:path})${0}","displayText":"set_remote_node","type":"function","leftLabel":"","description":" "},{"snippet":"set_rest_length(${1:rest_length})${0}","displayText":"set_rest_length","type":"function","leftLabel":"","description":" Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart. "},{"snippet":"set_reverb_mode(${1:reverb_mode})${0}","displayText":"set_reverb_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_select_mode(${1:mode})${0}","displayText":"set_select_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_shadow_mode(${1:mode})${0}","displayText":"set_shadow_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_sleep_state(${1:enabled})${0}","displayText":"set_sleep_state","type":"function","leftLabel":"","description":" Set the sleeping state of the body, only affects character/rigid bodies. "},{"snippet":"set_source_code(${1:source})${0}","displayText":"set_source_code","type":"function","leftLabel":"","description":" Set the script source code. "},{"snippet":"set_stream_peer(${1:peer})${0}","displayText":"set_stream_peer","type":"function","leftLabel":"","description":" Set the StreamPeer object to be wrapped "},{"snippet":"set_target_path(${1:target_path})${0}","displayText":"set_target_path","type":"function","leftLabel":"","description":" "},{"snippet":"set_tempo_scale(${1:tempo_scale})${0}","displayText":"set_tempo_scale","type":"function","leftLabel":"","description":" "},{"snippet":"set_toggle_mode(${1:enabled})${0}","displayText":"set_toggle_mode","type":"function","leftLabel":"","description":" Set the button toggle_mode property. Toggle mode makes the button flip state between pressed and unpressed each time its area is clicked. "},{"snippet":"set_translation(${1:translation})${0}","displayText":"set_translation","type":"function","leftLabel":"","description":" "},{"snippet":"set_unit_offset(${1:unit_offset})${0}","displayText":"set_unit_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_vertex_meta(${1:idx}, ${2:meta})${0}","displayText":"set_vertex_meta","type":"function","leftLabel":"","description":" "},{"snippet":"set_voice_count(${1:max_voices})${0}","displayText":"set_voice_count","type":"function","leftLabel":"","description":" Set the amount of simultaneous voices that will be used for playback. "},{"snippet":"shader_set_mode(${1:shader}, ${2:mode})${0}","displayText":"shader_set_mode","type":"function","leftLabel":"","description":" "},{"snippet":"skeleton_create()${0}","displayText":"skeleton_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"skeleton_resize(${1:arg0}, ${2:arg1})${0}","displayText":"skeleton_resize","type":"function","leftLabel":"","description":" "},{"snippet":"space_get_param(${1:space}, ${2:param})${0}","displayText":"space_get_param","type":"function","leftLabel":"float","description":" "},{"snippet":"space_is_active(${1:space})${0}","displayText":"space_is_active","type":"function","leftLabel":"bool","description":" "},{"snippet":"space_set_param(${1:space}, ${2:param}, ${3:value})${0}","displayText":"space_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"sample_is_stereo(${1:sample})${0}","displayText":"sample_is_stereo","type":"function","leftLabel":"bool","description":" Return wether the sample is stereo (2 channels) "},{"snippet":"set_border_blend(${1:blend})${0}","displayText":"set_border_blend","type":"function","leftLabel":"","description":" "},{"snippet":"set_color_phases(${1:phases})${0}","displayText":"set_color_phases","type":"function","leftLabel":"","description":" "},{"snippet":"set_color_phases(${1:count})${0}","displayText":"set_color_phases","type":"function","leftLabel":"","description":" "},{"snippet":"set_column_title(${1:column}, ${2:title})${0}","displayText":"set_column_title","type":"function","leftLabel":"","description":" "},{"snippet":"set_current_file(${1:file})${0}","displayText":"set_current_file","type":"function","leftLabel":"","description":" "},{"snippet":"set_current_path(${1:path})${0}","displayText":"set_current_path","type":"function","leftLabel":"","description":" "},{"snippet":"set_custom_color(${1:column}, ${2:color})${0}","displayText":"set_custom_color","type":"function","leftLabel":"","description":" "},{"snippet":"set_default_font(${1:font})${0}","displayText":"set_default_font","type":"function","leftLabel":"","description":" "},{"snippet":"set_drag_preview(${1:control})${0}","displayText":"set_drag_preview","type":"function","leftLabel":"","description":" "},{"snippet":"set_emit_timeout(${1:arg0})${0}","displayText":"set_emit_timeout","type":"function","leftLabel":"","description":" "},{"snippet":"set_emit_timeout(${1:value})${0}","displayText":"set_emit_timeout","type":"function","leftLabel":"","description":" "},{"snippet":"set_engine_force(${1:engine_force})${0}","displayText":"set_engine_force","type":"function","leftLabel":"","description":" "},{"snippet":"set_gamma_adjust(${1:gamma_adjust})${0}","displayText":"set_gamma_adjust","type":"function","leftLabel":"","description":" "},{"snippet":"set_h_size_flags(${1:flags})${0}","displayText":"set_h_size_flags","type":"function","leftLabel":"","description":" Hint for containers, set horizontal positioning flags. "},{"snippet":"set_ignore_mouse(${1:ignore})${0}","displayText":"set_ignore_mouse","type":"function","leftLabel":"","description":" Ignore mouse events on this control (even touchpad events send mouse events). "},{"snippet":"set_item_checked(${1:idx}, ${2:arg1})${0}","displayText":"set_item_checked","type":"function","leftLabel":"","description":" Set the checkstate status of the item at index \"idx\". "},{"snippet":"set_item_submenu(${1:idx}, ${2:submenu})${0}","displayText":"set_item_submenu","type":"function","leftLabel":"","description":" "},{"snippet":"set_light_shader(${1:shader})${0}","displayText":"set_light_shader","type":"function","leftLabel":"","description":" "},{"snippet":"set_motion_scale(${1:scale})${0}","displayText":"set_motion_scale","type":"function","leftLabel":"","description":" "},{"snippet":"set_over_texture(${1:tex})${0}","displayText":"set_over_texture","type":"function","leftLabel":"","description":" "},{"snippet":"set_passby_press(${1:enabled})${0}","displayText":"set_passby_press","type":"function","leftLabel":"","description":" "},{"snippet":"set_piece_offset(${1:idx}, ${2:ofs})${0}","displayText":"set_piece_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_range_config(${1:column}, ${2:min}, ${3:max}, ${4:step}, ${5:expr})${0}","displayText":"set_range_config","type":"function","leftLabel":"","description":" "},{"snippet":"set_ray_pickable(${1:ray_pickable})${0}","displayText":"set_ray_pickable","type":"function","leftLabel":"","description":" "},{"snippet":"set_self_opacity(${1:self_opacity})${0}","displayText":"set_self_opacity","type":"function","leftLabel":"","description":" Set canvas item self-opacity. This does not affect the opacity of children items. "},{"snippet":"set_send_address(${1:host}, ${2:port})${0}","displayText":"set_send_address","type":"function","leftLabel":"int","description":" "},{"snippet":"set_shader_param(${1:param}, ${2:value})${0}","displayText":"set_shader_param","type":"function","leftLabel":"","description":" "},{"snippet":"set_shadow_param(${1:param}, ${2:value})${0}","displayText":"set_shadow_param","type":"function","leftLabel":"","description":" "},{"snippet":"set_sort_enabled(${1:enabled})${0}","displayText":"set_sort_enabled","type":"function","leftLabel":"","description":" "},{"snippet":"set_split_offset(${1:offset})${0}","displayText":"set_split_offset","type":"function","leftLabel":"","description":" Set the split offset. "},{"snippet":"set_symbol_color(${1:color})${0}","displayText":"set_symbol_color","type":"function","leftLabel":"","description":" Set the color for symbols. "},{"snippet":"set_tabs_visible(${1:visible})${0}","displayText":"set_tabs_visible","type":"function","leftLabel":"","description":" Set whether the tabs should be visible or hidden. "},{"snippet":"set_use_top_left(${1:enable})${0}","displayText":"set_use_top_left","type":"function","leftLabel":"","description":" "},{"snippet":"set_uv_transform(${1:transform})${0}","displayText":"set_uv_transform","type":"function","leftLabel":"","description":" Sets a special transform used to post-transform UV coordinates of the uv_xfrom tecoord mode: TEXCOORD_UV_TRANSFORM. "},{"snippet":"set_v_size_flags(${1:flags})${0}","displayText":"set_v_size_flags","type":"function","leftLabel":"","description":" Hint for containers, set vertical positioning flags. "},{"snippet":"set_vertex_bones(${1:idx}, ${2:bones})${0}","displayText":"set_vertex_bones","type":"function","leftLabel":"","description":" "},{"snippet":"set_vertex_color(${1:idx}, ${2:color})${0}","displayText":"set_vertex_color","type":"function","leftLabel":"","description":" "},{"snippet":"settings_changed()${0}","displayText":"settings_changed","type":"method","leftLabel":"signal","description":"   "},{"snippet":"space_set_active(${1:space}, ${2:active})${0}","displayText":"space_set_active","type":"function","leftLabel":"","description":" "},{"snippet":"surface_get_name(${1:surf_idx})${0}","displayText":"surface_get_name","type":"function","leftLabel":"String","description":" "},{"snippet":"surface_set_name(${1:surf_idx}, ${2:name})${0}","displayText":"surface_set_name","type":"function","leftLabel":"","description":" "},{"snippet":"sample_get_format(${1:sample})${0}","displayText":"sample_get_format","type":"function","leftLabel":"int","description":" Return the format of the audio sample, in the form of the SAMPLE_FORMAT_* enum. "},{"snippet":"sample_get_length(${1:sample})${0}","displayText":"sample_get_length","type":"function","leftLabel":"int","description":" Return the length in frames of the audio sample (not samples or bytes). "},{"snippet":"set_applied_force(${1:force})${0}","displayText":"set_applied_force","type":"function","leftLabel":"","description":" "},{"snippet":"set_axis_velocity(${1:axis_velocity})${0}","displayText":"set_axis_velocity","type":"function","leftLabel":"","description":" "},{"snippet":"set_bake_interval(${1:distance})${0}","displayText":"set_bake_interval","type":"function","leftLabel":"","description":" "},{"snippet":"set_block_signals(${1:enable})${0}","displayText":"set_block_signals","type":"function","leftLabel":"","description":" If set to true, signal emission is blocked. "},{"snippet":"set_blocking_mode(${1:enabled})${0}","displayText":"set_blocking_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_column_expand(${1:arg0}, ${2:arg1})${0}","displayText":"set_column_expand","type":"function","leftLabel":"","description":" "},{"snippet":"set_connect_range(${1:range})${0}","displayText":"set_connect_range","type":"function","leftLabel":"","description":" Set the range for auto-connecting two portals from different rooms sharing the same space. "},{"snippet":"set_dispatch_mode(${1:mode})${0}","displayText":"set_dispatch_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_explosiveness(${1:amount})${0}","displayText":"set_explosiveness","type":"function","leftLabel":"","description":" "},{"snippet":"set_fixed_process(${1:enable})${0}","displayText":"set_fixed_process","type":"function","leftLabel":"","description":" Enables or disables node fixed framerate processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS at a fixed (usually 60fps, check [OS] to change that) interval (and the [method _fixed_process] callback will be called if exists). It is common to check how much time was elapsed since the previous frame by calling [method get_fixed_process_time]. "},{"snippet":"set_friction_slip(${1:length})${0}","displayText":"set_friction_slip","type":"function","leftLabel":"","description":" "},{"snippet":"set_geometry_hint(${1:triangles})${0}","displayText":"set_geometry_hint","type":"function","leftLabel":"","description":" "},{"snippet":"set_hover_texture(${1:texture})${0}","displayText":"set_hover_texture","type":"function","leftLabel":"","description":" "},{"snippet":"set_invert_border(${1:invert_border})${0}","displayText":"set_invert_border","type":"function","leftLabel":"","description":" "},{"snippet":"set_item_disabled(${1:idx}, ${2:disabled})${0}","displayText":"set_item_disabled","type":"function","leftLabel":"","description":" "},{"snippet":"set_item_metadata(${1:idx}, ${2:metadata})${0}","displayText":"set_item_metadata","type":"function","leftLabel":"","description":" "},{"snippet":"set_piece_texture(${1:idx}, ${2:texture})${0}","displayText":"set_piece_texture","type":"function","leftLabel":"","description":" "},{"snippet":"set_point_penalty(${1:idx}, ${2:penalty})${0}","displayText":"set_point_penalty","type":"function","leftLabel":"","description":" "},{"snippet":"set_process_input(${1:enable})${0}","displayText":"set_process_input","type":"function","leftLabel":"","description":" Enable input processing for node. This is not requiered for GUI controls! It hooks up the node to receive all input (see [method _input]). "},{"snippet":"set_quadrant_size(${1:size})${0}","displayText":"set_quadrant_size","type":"function","leftLabel":"","description":" Set the quadrant size, this optimizes drawing by batching chunks of map at draw/cull time. "},{"snippet":"set_rotation_mode(${1:rotation_mode})${0}","displayText":"set_rotation_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_scroll_active(${1:active})${0}","displayText":"set_scroll_active","type":"function","leftLabel":"","description":" "},{"snippet":"set_scroll_follow(${1:follow})${0}","displayText":"set_scroll_follow","type":"function","leftLabel":"","description":" "},{"snippet":"set_scroll_offset(${1:ofs})${0}","displayText":"set_scroll_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_size_override(${1:enable}, ${2:size}, ${3:margin})${0}","displayText":"set_size_override","type":"function","leftLabel":"","description":" "},{"snippet":"set_size_override(${1:size})${0}","displayText":"set_size_override","type":"function","leftLabel":"","description":" "},{"snippet":"set_skeleton_path(${1:skeleton_path})${0}","displayText":"set_skeleton_path","type":"function","leftLabel":"","description":" "},{"snippet":"set_sprite_frames(${1:sprite_frames})${0}","displayText":"set_sprite_frames","type":"function","leftLabel":"","description":" Set the [SpriteFrames] resource, which contains all frames. "},{"snippet":"set_stretch_ratio(${1:ratio})${0}","displayText":"set_stretch_ratio","type":"function","leftLabel":"","description":" Hint for containers, set the stretch ratio. This value is relative to other stretch ratio, so if this control has 2 and another has 1, this one will be twice as big. "},{"snippet":"set_texcoord_mode(${1:param}, ${2:mode})${0}","displayText":"set_texcoord_mode","type":"function","leftLabel":"","description":" Set the texture coordinate mode. Each texture param (from the PARAM_* enum) has one. It defines how the textures are mapped to the object. "},{"snippet":"set_texture_scale(${1:texture_scale})${0}","displayText":"set_texture_scale","type":"function","leftLabel":"","description":" "},{"snippet":"set_under_texture(${1:tex})${0}","displayText":"set_under_texture","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_own_world(${1:enable})${0}","displayText":"set_use_own_world","type":"function","leftLabel":"","description":" "},{"snippet":"set_vertex_normal(${1:idx}, ${2:normal})${0}","displayText":"set_vertex_normal","type":"function","leftLabel":"","description":" "},{"snippet":"set_viewport_path(${1:path})${0}","displayText":"set_viewport_path","type":"function","leftLabel":"","description":" "},{"snippet":"scenario_set_debug(${1:arg0}, ${2:arg1})${0}","displayText":"scenario_set_debug","type":"function","leftLabel":"","description":" "},{"snippet":"set_alpha_cut_mode(${1:mode})${0}","displayText":"set_alpha_cut_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_channel_volume(${1:idx}, ${2:channel_volume})${0}","displayText":"set_channel_volume","type":"function","leftLabel":"","description":" "},{"snippet":"set_click_on_press(${1:enable})${0}","displayText":"set_click_on_press","type":"function","leftLabel":"","description":" Set the button click_on_press mode. This mode generates click events when a mousebutton or key is just pressed (by default events are generated when the button/keys are released and both press and release occur in the visual area of the Button). "},{"snippet":"set_default_chorus(${1:send})${0}","displayText":"set_default_chorus","type":"function","leftLabel":"","description":" "},{"snippet":"set_default_filter(${1:type}, ${2:cutoff_hz}, ${3:resonance}, ${4:gain})${0}","displayText":"set_default_filter","type":"function","leftLabel":"","description":" "},{"snippet":"set_default_margin(${1:margin}, ${2:offset})${0}","displayText":"set_default_margin","type":"function","leftLabel":"","description":" Set the default offset \"offset\" of the margin \"margin\" (see MARGIN_* enum) for a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded. "},{"snippet":"set_default_reverb(${1:room_type}, ${2:send})${0}","displayText":"set_default_reverb","type":"function","leftLabel":"","description":" "},{"snippet":"set_default_volume(${1:nrg})${0}","displayText":"set_default_volume","type":"function","leftLabel":"","description":" "},{"snippet":"set_disable_radius(${1:radius})${0}","displayText":"set_disable_radius","type":"function","leftLabel":"","description":" "},{"snippet":"set_disabled_color(${1:color})${0}","displayText":"set_disabled_color","type":"function","leftLabel":"","description":" When the portal goes beyond the disable distance (see [method set_disable_distance]), it becomes opaque and displayed with color \"color\". "},{"snippet":"set_draw_range_end(${1:mode})${0}","displayText":"set_draw_range_end","type":"function","leftLabel":"","description":" "},{"snippet":"set_emissor_offset(${1:offset})${0}","displayText":"set_emissor_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_exp_unit_value(${1:enabled})${0}","displayText":"set_exp_unit_value","type":"function","leftLabel":"","description":" "},{"snippet":"set_gravity_normal(${1:normal})${0}","displayText":"set_gravity_normal","type":"function","leftLabel":"","description":" Set the normal vector towards where gravity is pulling (by default, negative Y). "},{"snippet":"set_gravity_vector(${1:vector})${0}","displayText":"set_gravity_vector","type":"function","leftLabel":"","description":" Set gravity vector. If gravity is a point, this will be the attraction center. "},{"snippet":"set_h_drag_enabled(${1:enabled})${0}","displayText":"set_h_drag_enabled","type":"function","leftLabel":"","description":" "},{"snippet":"set_icon_max_width(${1:column}, ${2:width})${0}","displayText":"set_icon_max_width","type":"function","leftLabel":"","description":" "},{"snippet":"set_initial_offset(${1:offset})${0}","displayText":"set_initial_offset","type":"function","leftLabel":"","description":" Set the initial offset of the groove on body A. "},{"snippet":"set_instance_color(${1:arg0}, ${2:arg1})${0}","displayText":"set_instance_color","type":"function","leftLabel":"","description":" Set the color of a specific instance. "},{"snippet":"set_instance_count(${1:arg0})${0}","displayText":"set_instance_count","type":"function","leftLabel":"","description":" Set the amount of instnces that is going to be drawn. Changing this number will erase all the existing instance transform and color data. "},{"snippet":"set_meta_underline(${1:enable})${0}","displayText":"set_meta_underline","type":"function","leftLabel":"","description":" "},{"snippet":"set_normal_texture(${1:texture})${0}","displayText":"set_normal_texture","type":"function","leftLabel":"","description":" "},{"snippet":"set_particles_path(${1:path})${0}","displayText":"set_particles_path","type":"function","leftLabel":"","description":" "},{"snippet":"set_pressed_button(${1:button})${0}","displayText":"set_pressed_button","type":"function","leftLabel":"","description":" Set the button to be pressed. "},{"snippet":"set_rounded_values(${1:arg0})${0}","displayText":"set_rounded_values","type":"function","leftLabel":"","description":" "},{"snippet":"set_sample_library(${1:library})${0}","displayText":"set_sample_library","type":"function","leftLabel":"","description":" Set the sample library for the player. "},{"snippet":"set_sampler_octree(${1:sampler_octree})${0}","displayText":"set_sampler_octree","type":"function","leftLabel":"","description":" "},{"snippet":"set_screen_stretch(${1:mode}, ${2:aspect}, ${3:minsize})${0}","displayText":"set_screen_stretch","type":"function","leftLabel":"","description":" "},{"snippet":"set_texture_offset(${1:texture_offset})${0}","displayText":"set_texture_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_texture_repeat(${1:enable})${0}","displayText":"set_texture_repeat","type":"function","leftLabel":"","description":" "},{"snippet":"set_v_drag_enabled(${1:enabled})${0}","displayText":"set_v_drag_enabled","type":"function","leftLabel":"","description":" "},{"snippet":"set_vertex_tangent(${1:idx}, ${2:tangent})${0}","displayText":"set_vertex_tangent","type":"function","leftLabel":"","description":" "},{"snippet":"set_vertex_weights(${1:idx}, ${2:weights})${0}","displayText":"set_vertex_weights","type":"function","leftLabel":"","description":" "},{"snippet":"set_visible_layers(${1:mask})${0}","displayText":"set_visible_layers","type":"function","leftLabel":"","description":" "},{"snippet":"size_flags_changed()${0}","displayText":"size_flags_changed","type":"method","leftLabel":"signal","description":"  Emitted when the size flags changed.  "},{"snippet":"surface_get_format(${1:surf_idx})${0}","displayText":"surface_get_format","type":"function","leftLabel":"int","description":" Return the format mask of the requested surface (see [method add_surface]). "},{"snippet":"sample_get_loop_end(${1:sample})${0}","displayText":"sample_get_loop_end","type":"function","leftLabel":"int","description":" Return the final loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format]. "},{"snippet":"sample_get_mix_rate(${1:sample})${0}","displayText":"sample_get_mix_rate","type":"function","leftLabel":"int","description":" Return the mix rate of the given sample. "},{"snippet":"sample_set_loop_end(${1:sample}, ${2:pos})${0}","displayText":"sample_set_loop_end","type":"function","leftLabel":"","description":" Set the final loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format]. "},{"snippet":"sample_set_mix_rate(${1:sample}, ${2:mix_rate})${0}","displayText":"sample_set_mix_rate","type":"function","leftLabel":"","description":" Change the default mix rate of a given sample. "},{"snippet":"set_color_phase_pos(${1:phase}, ${2:pos})${0}","displayText":"set_color_phase_pos","type":"function","leftLabel":"","description":" Set the position of a color phase (0 to 1). "},{"snippet":"set_contact_monitor(${1:enabled})${0}","displayText":"set_contact_monitor","type":"function","leftLabel":"","description":" Enable contact monitoring. (the signals to notify when a body entered/exited collision). "},{"snippet":"set_custom_bg_color(${1:column}, ${2:color})${0}","displayText":"set_custom_bg_color","type":"function","leftLabel":"","description":" "},{"snippet":"set_custom_bg_color(${1:color})${0}","displayText":"set_custom_bg_color","type":"function","leftLabel":"","description":" Set a custom background color. A background color with alpha==0 disables this. "},{"snippet":"set_depth_draw_mode(${1:mode})${0}","displayText":"set_depth_draw_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_dragger_visible(${1:visible})${0}","displayText":"set_dragger_visible","type":"function","leftLabel":"","description":" "},{"snippet":"set_emission_points(${1:points})${0}","displayText":"set_emission_points","type":"function","leftLabel":"","description":" "},{"snippet":"set_enable_h_scroll(${1:enable})${0}","displayText":"set_enable_h_scroll","type":"function","leftLabel":"","description":" "},{"snippet":"set_enable_v_scroll(${1:enable})${0}","displayText":"set_enable_v_scroll","type":"function","leftLabel":"","description":" "},{"snippet":"set_focus_neighbour(${1:margin}, ${2:neighbour})${0}","displayText":"set_focus_neighbour","type":"function","leftLabel":"","description":" Force a neighbour for moving the input focus to. When pressing TAB or directional/joypad directions focus is moved to the next control in that direction. However, the neighbour to move to can be forced with this function. "},{"snippet":"set_focused_texture(${1:texture})${0}","displayText":"set_focused_texture","type":"function","leftLabel":"","description":" "},{"snippet":"set_import_metadata(${1:metadata})${0}","displayText":"set_import_metadata","type":"function","leftLabel":"","description":" "},{"snippet":"set_linear_velocity(${1:linear_velocity})${0}","displayText":"set_linear_velocity","type":"function","leftLabel":"","description":" Set the body linear velocity. Can be used sporadically, but[b] DONT SET THIS IN EVERY FRAME [/b], because physics may be running in another thread and definitely runs at a different granularity. Use [_integrate_forces] as your process loop if you want to have precise control of the body state. "},{"snippet":"set_linear_velocity(${1:velocity})${0}","displayText":"set_linear_velocity","type":"function","leftLabel":"","description":" "},{"snippet":"set_navigation_mesh(${1:navmesh})${0}","displayText":"set_navigation_mesh","type":"function","leftLabel":"","description":" "},{"snippet":"set_percent_visible(${1:visible})${0}","displayText":"set_percent_visible","type":"function","leftLabel":"","description":" "},{"snippet":"set_percent_visible(${1:percent_visible})${0}","displayText":"set_percent_visible","type":"function","leftLabel":"","description":" "},{"snippet":"set_pressed_texture(${1:texture})${0}","displayText":"set_pressed_texture","type":"function","leftLabel":"","description":" "},{"snippet":"set_project_shadows(${1:enable})${0}","displayText":"set_project_shadows","type":"function","leftLabel":"","description":" "},{"snippet":"set_shape_transform(${1:shape_idx}, ${2:transform})${0}","displayText":"set_shape_transform","type":"function","leftLabel":"","description":" Change the shape transform in the collision body. "},{"snippet":"set_solver_priority(${1:priority})${0}","displayText":"set_solver_priority","type":"function","leftLabel":"","description":" "},{"snippet":"set_syntax_coloring(${1:enable})${0}","displayText":"set_syntax_coloring","type":"function","leftLabel":"","description":" Set to enable the syntax coloring. "},{"snippet":"set_texture_pressed(${1:texture_pressed})${0}","displayText":"set_texture_pressed","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_as_steering(${1:enable})${0}","displayText":"set_use_as_steering","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_as_traction(${1:enable})${0}","displayText":"set_use_as_traction","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_baked_light(${1:use})${0}","displayText":"set_use_baked_light","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_color_array(${1:enable})${0}","displayText":"set_use_color_array","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_local_space(${1:enable})${0}","displayText":"set_use_local_space","type":"function","leftLabel":"","description":" "},{"snippet":"set_visibility_aabb(${1:aabb})${0}","displayText":"set_visibility_aabb","type":"function","leftLabel":"","description":" Set the visibility AABB for the particle system, since the default one will not work properly most of the time. "},{"snippet":"set_visibility_mode(${1:mode})${0}","displayText":"set_visibility_mode","type":"function","leftLabel":"","description":" "},{"snippet":"store_pascal_string(${1:string})${0}","displayText":"store_pascal_string","type":"function","leftLabel":"","description":" "},{"snippet":"sample_get_volume_db(${1:name})${0}","displayText":"sample_get_volume_db","type":"function","leftLabel":"float","description":" "},{"snippet":"sample_set_volume_db(${1:name}, ${2:db})${0}","displayText":"sample_set_volume_db","type":"function","leftLabel":"","description":" "},{"snippet":"set_angular_velocity(${1:velocity})${0}","displayText":"set_angular_velocity","type":"function","leftLabel":"","description":" "},{"snippet":"set_angular_velocity(${1:angular_velocity})${0}","displayText":"set_angular_velocity","type":"function","leftLabel":"","description":" Set the body angular velocity. Can be used sporadically, but[b] DONT SET THIS IN EVERY FRAME [/b], because physics may be running in another thread and definitely runs at a different granularity. Use [_integrate_forces] as your process loop if you want to have precise control of the body state. "},{"snippet":"set_as_render_target(${1:enable})${0}","displayText":"set_as_render_target","type":"function","leftLabel":"","description":" "},{"snippet":"set_auto_accept_quit(${1:enabled})${0}","displayText":"set_auto_accept_quit","type":"function","leftLabel":"","description":" "},{"snippet":"set_background_param(${1:param}, ${2:value})${0}","displayText":"set_background_param","type":"function","leftLabel":"","description":" "},{"snippet":"set_bone_custom_pose(${1:bone_idx}, ${2:custom_pose})${0}","displayText":"set_bone_custom_pose","type":"function","leftLabel":"","description":" "},{"snippet":"set_bone_global_pose(${1:bone_idx}, ${2:pose})${0}","displayText":"set_bone_global_pose","type":"function","leftLabel":"","description":" "},{"snippet":"set_canvas_transform(${1:xform})${0}","displayText":"set_canvas_transform","type":"function","leftLabel":"","description":" "},{"snippet":"set_cell_subdivision(${1:cell_subdivision})${0}","displayText":"set_cell_subdivision","type":"function","leftLabel":"","description":" "},{"snippet":"set_collision_bounce(${1:value})${0}","displayText":"set_collision_bounce","type":"function","leftLabel":"","description":" "},{"snippet":"set_collision_margin(${1:pixels})${0}","displayText":"set_collision_margin","type":"function","leftLabel":"","description":" "},{"snippet":"set_column_min_width(${1:arg0}, ${2:arg1})${0}","displayText":"set_column_min_width","type":"function","leftLabel":"","description":" "},{"snippet":"set_custom_transform(${1:custom_transform})${0}","displayText":"set_custom_transform","type":"function","leftLabel":"","description":" "},{"snippet":"set_disable_distance(${1:distance})${0}","displayText":"set_disable_distance","type":"function","leftLabel":"","description":" Set the distance threshold for disabling the portal. Every time that the portal goes beyond \"distance\", it disables itself, becoming the opaque color (see [method set_disabled_color]). "},{"snippet":"set_disabled_texture(${1:texture})${0}","displayText":"set_disabled_texture","type":"function","leftLabel":"","description":" "},{"snippet":"set_draw_range_begin(${1:mode})${0}","displayText":"set_draw_range_begin","type":"function","leftLabel":"","description":" "},{"snippet":"set_follow_smoothing(${1:follow_smoothing})${0}","displayText":"set_follow_smoothing","type":"function","leftLabel":"","description":" "},{"snippet":"set_global_transform(${1:global})${0}","displayText":"set_global_transform","type":"function","leftLabel":"","description":" Set the transform globally, relative to worldspace. "},{"snippet":"set_global_transform(${1:xform})${0}","displayText":"set_global_transform","type":"function","leftLabel":"","description":" "},{"snippet":"set_gravity_is_point(${1:enable})${0}","displayText":"set_gravity_is_point","type":"function","leftLabel":"","description":" "},{"snippet":"set_initial_velocity(${1:velocity})${0}","displayText":"set_initial_velocity","type":"function","leftLabel":"","description":" "},{"snippet":"set_input_as_handled()${0}","displayText":"set_input_as_handled","type":"function","leftLabel":"","description":" "},{"snippet":"set_item_accelerator(${1:idx}, ${2:accel})${0}","displayText":"set_item_accelerator","type":"function","leftLabel":"","description":" Set the accelerator of the item at index \"idx\". Accelerators are special combinations of keys that activate the item, no matter which control is focused. "},{"snippet":"set_keep_aspect_mode(${1:mode})${0}","displayText":"set_keep_aspect_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_object_type_mask(${1:object_type_mask})${0}","displayText":"set_object_type_mask","type":"function","leftLabel":"","description":" "},{"snippet":"set_pre_process_time(${1:time})${0}","displayText":"set_pre_process_time","type":"function","leftLabel":"","description":" "},{"snippet":"set_progress_texture(${1:tex})${0}","displayText":"set_progress_texture","type":"function","leftLabel":"","description":" "},{"snippet":"set_shape_as_trigger(${1:shape_idx}, ${2:enable})${0}","displayText":"set_shape_as_trigger","type":"function","leftLabel":"","description":" "},{"snippet":"set_texture_rotation(${1:texture_rotation})${0}","displayText":"set_texture_rotation","type":"function","leftLabel":"","description":" "},{"snippet":"set_ticks_on_borders(${1:ticks_on_border})${0}","displayText":"set_ticks_on_borders","type":"function","leftLabel":"","description":" Set true if ticks are visible on borders. "},{"snippet":"surface_get_material(${1:surf_idx})${0}","displayText":"surface_get_material","type":"function","leftLabel":"Material","description":" Return a [Material] in a given surface. Surface is rendered using this material. "},{"snippet":"surface_set_material(${1:surf_idx}, ${2:material})${0}","displayText":"surface_set_material","type":"function","leftLabel":"","description":" Set a [Material] for a given surface. Surface will be rendered using this material. "},{"snippet":"sample_get_loop_begin(${1:sample})${0}","displayText":"sample_get_loop_begin","type":"function","leftLabel":"int","description":" Return the initial loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format]. "},{"snippet":"sample_set_loop_begin(${1:sample}, ${2:pos})${0}","displayText":"sample_set_loop_begin","type":"function","leftLabel":"","description":" Set the initial loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format]. "},{"snippet":"set_anchor_and_margin(${1:margin}, ${2:anchor_mode}, ${3:offset})${0}","displayText":"set_anchor_and_margin","type":"function","leftLabel":"","description":" Change the anchor (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) type for a margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM), and also set its offset. This is a helper (see [method set_anchor] and [method set_margin]). "},{"snippet":"set_as_audio_listener(${1:enable})${0}","displayText":"set_as_audio_listener","type":"function","leftLabel":"","description":" "},{"snippet":"set_cell_extra_margin(${1:cell_extra_margin})${0}","displayText":"set_cell_extra_margin","type":"function","leftLabel":"","description":" "},{"snippet":"set_color_phase_color(${1:phase}, ${2:color})${0}","displayText":"set_color_phase_color","type":"function","leftLabel":"","description":" "},{"snippet":"set_current_animation(${1:anim})${0}","displayText":"set_current_animation","type":"function","leftLabel":"","description":" Set the current animation (even if no playback occurs). Using set_current_animation() and set_active() are similar to calling play(). "},{"snippet":"set_default_volume_db(${1:db})${0}","displayText":"set_default_volume_db","type":"function","leftLabel":"","description":" "},{"snippet":"set_edited_scene_root(${1:scene})${0}","displayText":"set_edited_scene_root","type":"function","leftLabel":"","description":" "},{"snippet":"set_enable_monitoring(${1:enable})${0}","displayText":"set_enable_monitoring","type":"function","leftLabel":"","description":" "},{"snippet":"set_energy_multiplier(${1:energy_multiplier})${0}","displayText":"set_energy_multiplier","type":"function","leftLabel":"","description":" "},{"snippet":"set_item_as_checkable(${1:idx}, ${2:enable})${0}","displayText":"set_item_as_checkable","type":"function","leftLabel":"","description":" "},{"snippet":"set_item_as_separator(${1:idx}, ${2:enable})${0}","displayText":"set_item_as_separator","type":"function","leftLabel":"","description":" "},{"snippet":"set_material_override(${1:material})${0}","displayText":"set_material_override","type":"function","leftLabel":"","description":" Set the material override for the whole geometry. "},{"snippet":"set_morph_target_mode(${1:mode})${0}","displayText":"set_morph_target_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_scroll_base_scale(${1:scale})${0}","displayText":"set_scroll_base_scale","type":"function","leftLabel":"","description":" "},{"snippet":"set_selection_enabled(${1:enabled})${0}","displayText":"set_selection_enabled","type":"function","leftLabel":"","description":" Set to true if selecting the text inside this richtext is allowed. "},{"snippet":"set_suspension_travel(${1:length})${0}","displayText":"set_suspension_travel","type":"function","leftLabel":"","description":" "},{"snippet":"surface_get_array_len(${1:surf_idx})${0}","displayText":"surface_get_array_len","type":"function","leftLabel":"int","description":" Return the length in vertices of the vertex array in the requested surface (see [method add_surface]). "},{"snippet":"sample_get_description(${1:sample}, ${2:arg1})${0}","displayText":"sample_get_description","type":"function","leftLabel":"String","description":" Return the description of an audio sample. Mainly used for organization. "},{"snippet":"sample_get_loop_format(${1:sample})${0}","displayText":"sample_get_loop_format","type":"function","leftLabel":"int","description":" Return the loop format for a sample, as a value from the SAMPLE_LOOP_* enum. "},{"snippet":"sample_get_pitch_scale(${1:name})${0}","displayText":"sample_get_pitch_scale","type":"function","leftLabel":"float","description":" "},{"snippet":"sample_set_description(${1:sample}, ${2:description})${0}","displayText":"sample_set_description","type":"function","leftLabel":"","description":" Set the description of an audio sample. Mainly used for organization. "},{"snippet":"sample_set_loop_format(${1:sample}, ${2:loop_format})${0}","displayText":"sample_set_loop_format","type":"function","leftLabel":"","description":" Set the loop format for a sample from the SAMPLE_LOOP_* enum. As a warning, Ping Pong loops may not be available on some hardware-mixing platforms. "},{"snippet":"sample_set_pitch_scale(${1:name}, ${2:pitch})${0}","displayText":"sample_set_pitch_scale","type":"function","leftLabel":"","description":" "},{"snippet":"sample_set_signed_data(${1:sample}, ${2:data})${0}","displayText":"sample_set_signed_data","type":"function","leftLabel":"","description":" Set the sample data for a given sample as an array of floats. The length must be equal to the sample lenght or an error will be produced. "},{"snippet":"set_collision_friction(${1:value})${0}","displayText":"set_collision_friction","type":"function","leftLabel":"","description":" "},{"snippet":"set_custom_solver_bias(${1:bias})${0}","displayText":"set_custom_solver_bias","type":"function","leftLabel":"","description":" Use a custom solver bias. No need to change this unless you really know what you are doing. "},{"snippet":"set_damping_relaxation(${1:length})${0}","displayText":"set_damping_relaxation","type":"function","leftLabel":"","description":" "},{"snippet":"set_default_blend_time(${1:sec})${0}","displayText":"set_default_blend_time","type":"function","leftLabel":"","description":" Set the default blend time between animations. "},{"snippet":"set_draw_behind_parent(${1:enabe})${0}","displayText":"set_draw_behind_parent","type":"function","leftLabel":"","description":" Sets whether the canvas item is drawn behind its parent. "},{"snippet":"set_expand_margin_size(${1:margin}, ${2:size})${0}","displayText":"set_expand_margin_size","type":"function","leftLabel":"","description":" "},{"snippet":"set_instance_transform(${1:arg0}, ${2:arg1})${0}","displayText":"set_instance_transform","type":"function","leftLabel":"","description":" Set the transform for a specific instance. "},{"snippet":"set_pitch_random_scale(${1:pitch_random_scale})${0}","displayText":"set_pitch_random_scale","type":"function","leftLabel":"","description":" Set the random scaling for the pitch. "},{"snippet":"set_random_pitch_scale(${1:val})${0}","displayText":"set_random_pitch_scale","type":"function","leftLabel":"","description":" "},{"snippet":"set_scroll_base_offset(${1:ofs})${0}","displayText":"set_scroll_base_offset","type":"function","leftLabel":"","description":" "},{"snippet":"set_simulate_acoustics(${1:enable})${0}","displayText":"set_simulate_acoustics","type":"function","leftLabel":"","description":" "},{"snippet":"set_tween_process_mode(${1:mode})${0}","displayText":"set_tween_process_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_visible_characters(${1:arg0})${0}","displayText":"set_visible_characters","type":"function","leftLabel":"","description":" "},{"snippet":"slider_joint_get_param(${1:joint}, ${2:param})${0}","displayText":"slider_joint_get_param","type":"function","leftLabel":"float","description":" "},{"snippet":"slider_joint_set_param(${1:joint}, ${2:param}, ${3:value})${0}","displayText":"slider_joint_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"space_get_direct_state(${1:space})${0}","displayText":"space_get_direct_state","type":"function","leftLabel":"Physics2DDirectSpaceState","description":" "},{"snippet":"set_area_as_parent_rect(${1:margin})${0}","displayText":"set_area_as_parent_rect","type":"function","leftLabel":"","description":" Change all margins and anchors, so this Control always takes up the same area as the parent Control. This is a helper (see [method set_anchor],[method set_margin]). "},{"snippet":"set_cubic_interpolation(${1:enable})${0}","displayText":"set_cubic_interpolation","type":"function","leftLabel":"","description":" "},{"snippet":"set_custom_minimum_size(${1:size})${0}","displayText":"set_custom_minimum_size","type":"function","leftLabel":"","description":" "},{"snippet":"set_damping_compression(${1:length})${0}","displayText":"set_damping_compression","type":"function","leftLabel":"","description":" "},{"snippet":"set_default_clear_color(${1:arg0})${0}","displayText":"set_default_clear_color","type":"function","leftLabel":"","description":" "},{"snippet":"set_default_pitch_scale(${1:ratio})${0}","displayText":"set_default_pitch_scale","type":"function","leftLabel":"","description":" "},{"snippet":"set_message_translation(${1:enable})${0}","displayText":"set_message_translation","type":"function","leftLabel":"","description":" Set true if this object can translate strings (in calls to tr() ). Default is true. "},{"snippet":"set_render_target_vflip(${1:enable})${0}","displayText":"set_render_target_vflip","type":"function","leftLabel":"","description":" "},{"snippet":"set_space_override_mode(${1:enable})${0}","displayText":"set_space_override_mode","type":"function","leftLabel":"","description":" "},{"snippet":"skeleton_get_bone_count(${1:arg0})${0}","displayText":"skeleton_get_bone_count","type":"function","leftLabel":"int","description":" "},{"snippet":"set_as_audio_listener_2d(${1:enable})${0}","displayText":"set_as_audio_listener_2d","type":"function","leftLabel":"","description":" "},{"snippet":"set_collision_layer_mask(${1:mask})${0}","displayText":"set_collision_layer_mask","type":"function","leftLabel":"","description":" "},{"snippet":"set_default_cursor_shape(${1:shape})${0}","displayText":"set_default_cursor_shape","type":"function","leftLabel":"","description":" Set the default cursor shape for this control. See enum CURSOR_* for the list of shapes. "},{"snippet":"set_height_from_velocity(${1:enable})${0}","displayText":"set_height_from_velocity","type":"function","leftLabel":"","description":" "},{"snippet":"set_render_target_filter(${1:enable})${0}","displayText":"set_render_target_filter","type":"function","leftLabel":"","description":" "},{"snippet":"set_suspension_max_force(${1:length})${0}","displayText":"set_suspension_max_force","type":"function","leftLabel":"","description":" "},{"snippet":"set_suspension_stiffness(${1:length})${0}","displayText":"set_suspension_stiffness","type":"function","leftLabel":"","description":" "},{"snippet":"segment_intersects_circle(${1:segment_from}, ${2:segment_to}, ${3:circle_pos}, ${4:circle_radius})${0}","displayText":"segment_intersects_circle","type":"function","leftLabel":"float","description":" "},{"snippet":"segment_intersects_convex(${1:from}, ${2:to}, ${3:planes})${0}","displayText":"segment_intersects_convex","type":"function","leftLabel":"Vector3Array","description":" "},{"snippet":"segment_intersects_sphere(${1:from}, ${2:to}, ${3:spos}, ${4:sradius})${0}","displayText":"segment_intersects_sphere","type":"function","leftLabel":"Vector3Array","description":" "},{"snippet":"set_capture_input_on_drag(${1:enable})${0}","displayText":"set_capture_input_on_drag","type":"function","leftLabel":"","description":" "},{"snippet":"set_column_titles_visible(${1:visible})${0}","displayText":"set_column_titles_visible","type":"function","leftLabel":"","description":" "},{"snippet":"set_emission_half_extents(${1:extents})${0}","displayText":"set_emission_half_extents","type":"function","leftLabel":"","description":" "},{"snippet":"set_emission_half_extents(${1:half_extents})${0}","displayText":"set_emission_half_extents","type":"function","leftLabel":"","description":" Set the half extents for the emission box. "},{"snippet":"set_interpolation_enabled(${1:target_path})${0}","displayText":"set_interpolation_enabled","type":"function","leftLabel":"","description":" "},{"snippet":"set_iterations_per_second(${1:iterations_per_second})${0}","displayText":"set_iterations_per_second","type":"function","leftLabel":"","description":" Set the amount of fixed iterations per second (for fixed process and physics). "},{"snippet":"set_lossy_storage_quality(${1:quality})${0}","displayText":"set_lossy_storage_quality","type":"function","leftLabel":"","description":" "},{"snippet":"set_max_contacts_reported(${1:amount})${0}","displayText":"set_max_contacts_reported","type":"function","leftLabel":"","description":" "},{"snippet":"set_size_override_stretch(${1:enabled})${0}","displayText":"set_size_override_stretch","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_custom_integrator(${1:enable})${0}","displayText":"set_use_custom_integrator","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_local_coordinates(${1:enable})${0}","displayText":"set_use_local_coordinates","type":"function","leftLabel":"","description":" "},{"snippet":"set_animation_process_mode(${1:mode})${0}","displayText":"set_animation_process_mode","type":"function","leftLabel":"","description":" Set the mode in which the animation player processes. By default, it processes on idle time (framerate dependent), but using fixed time works well for animating static collision bodies in 2D and 3D. See enum ANIMATION_PROCESS_*. "},{"snippet":"set_baked_light_texture_id(${1:id})${0}","displayText":"set_baked_light_texture_id","type":"function","leftLabel":"","description":" "},{"snippet":"set_emission_base_velocity(${1:base_velocity})${0}","displayText":"set_emission_base_velocity","type":"function","leftLabel":"","description":" "},{"snippet":"set_fx_global_volume_scale(${1:scale})${0}","displayText":"set_fx_global_volume_scale","type":"function","leftLabel":"","description":" "},{"snippet":"set_initial_lattice_subdiv(${1:cell_subdivision})${0}","displayText":"set_initial_lattice_subdiv","type":"function","leftLabel":"","description":" "},{"snippet":"set_physics_object_picking(${1:enable})${0}","displayText":"set_physics_object_picking","type":"function","leftLabel":"","description":" "},{"snippet":"set_suspension_rest_length(${1:length})${0}","displayText":"set_suspension_rest_length","type":"function","leftLabel":"","description":" "},{"snippet":"set_transparent_background(${1:enable})${0}","displayText":"set_transparent_background","type":"function","leftLabel":"","description":" If this viewport is a child of another viewport, keep the previously drawn background visible. "},{"snippet":"surface_get_primitive_type(${1:surf_idx})${0}","displayText":"surface_get_primitive_type","type":"function","leftLabel":"int","description":" Return the primitive type of the requested surface (see [method add_surface]). "},{"snippet":"segment_intersects_cylinder(${1:from}, ${2:to}, ${3:height}, ${4:radius})${0}","displayText":"segment_intersects_cylinder","type":"function","leftLabel":"Vector3Array","description":" "},{"snippet":"segment_intersects_triangle(${1:from}, ${2:to}, ${3:a}, ${4:b}, ${5:c})${0}","displayText":"segment_intersects_triangle","type":"function","leftLabel":"","description":" "},{"snippet":"set_global_canvas_transform(${1:xform})${0}","displayText":"set_global_canvas_transform","type":"function","leftLabel":"","description":" "},{"snippet":"set_process_unhandled_input(${1:enable})${0}","displayText":"set_process_unhandled_input","type":"function","leftLabel":"","description":" Enable unhandled input processing for node. This is not requiered for GUI controls! It hooks up the node to receive all input that was not previously handled before (usually by a [Control]). (see [method _unhandled_input]). "},{"snippet":"skeleton_bone_get_transform(${1:arg0}, ${2:arg1})${0}","displayText":"skeleton_bone_get_transform","type":"function","leftLabel":"Transform","description":" "},{"snippet":"skeleton_bone_set_transform(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"skeleton_bone_set_transform","type":"function","leftLabel":"","description":" "},{"snippet":"surface_get_array_index_len(${1:surf_idx})${0}","displayText":"surface_get_array_index_len","type":"function","leftLabel":"int","description":" Return the length in indices of the index array in the requested surface (see [method add_surface]). "},{"snippet":"set_constant_linear_velocity(${1:vel})${0}","displayText":"set_constant_linear_velocity","type":"function","leftLabel":"","description":" Set a constant linear velocity for the body. "},{"snippet":"set_low_processor_usage_mode(${1:enable})${0}","displayText":"set_low_processor_usage_mode","type":"function","leftLabel":"","description":" Set to true to enable the low cpu usage mode. In this mode, the screen only redraws when there are changes, and a considerable sleep time is inserted between frames. This way, editors using the engine UI only use very little cpu. "},{"snippet":"segment_intersects_segment_2d(${1:from_a}, ${2:to_a}, ${3:from_b}, ${4:to_b})${0}","displayText":"segment_intersects_segment_2d","type":"function","leftLabel":"","description":" "},{"snippet":"set_collide_with_rigid_bodies(${1:enable})${0}","displayText":"set_collide_with_rigid_bodies","type":"function","leftLabel":"","description":" "},{"snippet":"set_constant_angular_velocity(${1:vel})${0}","displayText":"set_constant_angular_velocity","type":"function","leftLabel":"","description":" Set a constant angular velocity for the body. "},{"snippet":"set_render_target_gen_mipmaps(${1:enable})${0}","displayText":"set_render_target_gen_mipmaps","type":"function","leftLabel":"","description":" "},{"snippet":"set_render_target_update_mode(${1:mode})${0}","displayText":"set_render_target_update_mode","type":"function","leftLabel":"","description":" "},{"snippet":"set_abort_on_missing_resources(${1:abort})${0}","displayText":"set_abort_on_missing_resources","type":"function","leftLabel":"","description":" Change the behavior on missing sub-resources. Default is to abort load. "},{"snippet":"set_collide_with_static_bodies(${1:enable})${0}","displayText":"set_collide_with_static_bodies","type":"function","leftLabel":"","description":" "},{"snippet":"set_stream_global_volume_scale(${1:scale})${0}","displayText":"set_stream_global_volume_scale","type":"function","leftLabel":"","description":" Set global scale for stream playback. Default is 1.0. "},{"snippet":"set_force_params_to_all_sources(${1:enabled})${0}","displayText":"set_force_params_to_all_sources","type":"function","leftLabel":"","description":" "},{"snippet":"set_process_unhandled_key_input(${1:enable})${0}","displayText":"set_process_unhandled_key_input","type":"function","leftLabel":"","description":" "},{"snippet":"set_render_target_to_screen_rect(${1:arg0})${0}","displayText":"set_render_target_to_screen_rect","type":"function","leftLabel":"","description":" "},{"snippet":"set_collide_with_character_bodies(${1:enable})${0}","displayText":"set_collide_with_character_bodies","type":"function","leftLabel":"","description":" "},{"snippet":"set_collide_with_kinematic_bodies(${1:enable})${0}","displayText":"set_collide_with_kinematic_bodies","type":"function","leftLabel":"","description":" "},{"snippet":"set_ignore_transform_notification(${1:enabled})${0}","displayText":"set_ignore_transform_notification","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_file_access_save_and_swap(${1:enabled})${0}","displayText":"set_use_file_access_save_and_swap","type":"function","leftLabel":"","description":" "},{"snippet":"set_transfer_lightmaps_only_to_uv2(${1:enable})${0}","displayText":"set_transfer_lightmaps_only_to_uv2","type":"function","leftLabel":"","description":" "},{"snippet":"set_event_voice_global_volume_scale(${1:scale})${0}","displayText":"set_event_voice_global_volume_scale","type":"function","leftLabel":"","description":" "},{"snippet":"set_use_continuous_collision_detection(${1:enable})${0}","displayText":"set_use_continuous_collision_detection","type":"function","leftLabel":"","description":" "},{"snippet":"set_continuous_collision_detection_mode(${1:mode})${0}","displayText":"set_continuous_collision_detection_mode","type":"function","leftLabel":"","description":" "}],"c":[{"snippet":"cos(${1:s})${0}","displayText":"cos","type":"function","leftLabel":"float","description":" Standard cosine function. "},{"snippet":"cut()${0}","displayText":"cut","type":"function","leftLabel":"","description":" Cut the current selection. "},{"snippet":"call(${1:method}, ${2:arg0}, ${3:arg9}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5}, ${9:arg6}, ${10:arg7}, ${11:arg8})${0}","displayText":"call","type":"function","leftLabel":"","description":" Call a function in the object, result is returned. "},{"snippet":"ceil(${1:s})${0}","displayText":"ceil","type":"function","leftLabel":"float","description":" Ceiling (rounds up to nearest integer). "},{"snippet":"copy(${1:from}, ${2:to})${0}","displayText":"copy","type":"function","leftLabel":"int","description":" "},{"snippet":"copy()${0}","displayText":"copy","type":"function","leftLabel":"","description":" Copy the current selection. "},{"snippet":"cosh(${1:s})${0}","displayText":"cosh","type":"function","leftLabel":"float","description":" Hyperbolic cosine. "},{"snippet":"callv(${1:method}, ${2:arg_array})${0}","displayText":"callv","type":"function","leftLabel":"","description":" "},{"snippet":"clamp(${1:val}, ${2:min}, ${3:max})${0}","displayText":"clamp","type":"function","leftLabel":"float","description":" Clamp both values to a range. "},{"snippet":"clear()${0}","displayText":"clear","type":"function","leftLabel":"","description":" Clear the [LineEdit] text. "},{"snippet":"clear(${1:name})${0}","displayText":"clear","type":"function","leftLabel":"","description":" Clear the whole configuration (not recommended, may break things). "},{"snippet":"close()${0}","displayText":"close","type":"function","leftLabel":"","description":" "},{"snippet":"commit(${1:existing})${0}","displayText":"commit","type":"function","leftLabel":"Mesh","description":" "},{"snippet":"create(${1:width}, ${2:height}, ${3:format}, ${4:flags})${0}","displayText":"create","type":"function","leftLabel":"","description":" "},{"snippet":"create(${1:format}, ${2:stereo}, ${3:length})${0}","displayText":"create","type":"function","leftLabel":"","description":" Create new data for the sample, with format \"format\" (see FORMAT_* enum), stereo hint, and length in frames (not samples or bytes!) \"frame\". Calling create overrides previous existing data if it exists. Stereo samples are interleaved pairs of left and right (in that order) points "},{"snippet":"create(${1:size})${0}","displayText":"create","type":"function","leftLabel":"","description":" "},{"snippet":"changed()${0}","displayText":"changed","type":"method","leftLabel":"signal","description":"   "},{"snippet":"collide(${1:local_xform}, ${2:with_shape}, ${3:shape_xform})${0}","displayText":"collide","type":"function","leftLabel":"bool","description":" "},{"snippet":"compile(${1:pattern})${0}","displayText":"compile","type":"function","leftLabel":"int","description":" "},{"snippet":"connect(${1:id}, ${2:dst_id}, ${3:dst_input_idx})${0}","displayText":"connect","type":"function","leftLabel":"int","description":" "},{"snippet":"connect(${1:stream}, ${2:validate_certs}, ${3:for_hostname})${0}","displayText":"connect","type":"function","leftLabel":"int","description":" "},{"snippet":"connect(${1:host}, ${2:ip})${0}","displayText":"connect","type":"function","leftLabel":"int","description":" "},{"snippet":"connect(${1:signal}, ${2:target}, ${3:method}, ${4:binds}, ${5:flags})${0}","displayText":"connect","type":"function","leftLabel":"int","description":" Connect a signal to a method at a target (member function). Binds are optional and are passed as extra arguments to the call. Flags specify optional deferred or one shot connections, see enum CONNECT_*. A signal can only be connected once to a method, and it will throw an error if already connected. If you want to avoid this, use [method is_connected] to check. "},{"snippet":"connect(${1:host}, ${2:port}, ${3:use_ssl}, ${4:arg3})${0}","displayText":"connect","type":"function","leftLabel":"int","description":" "},{"snippet":"convert(${1:what}, ${2:type})${0}","displayText":"convert","type":"function","leftLabel":"Object","description":" Convert from a type to another in the best way possible. The \"type\" parameter uses the enum TYPE_* in Global Scope. "},{"snippet":"can_draw()${0}","displayText":"can_draw","type":"function","leftLabel":"bool","description":" Return true if the host OS allows drawing. "},{"snippet":"call_func(${1:method}, ${2:arg0}, ${3:arg9}, ${4:arg1}, ${5:arg2}, ${6:arg3}, ${7:arg4}, ${8:arg5}, ${9:arg6}, ${10:arg7}, ${11:arg8})${0}","displayText":"call_func","type":"function","leftLabel":"","description":" "},{"snippet":"confirmed()${0}","displayText":"confirmed","type":"method","leftLabel":"signal","description":"  Emitted when accepted.  "},{"snippet":"call_group(${1:flags}, ${2:group}, ${3:method}, ${4:arg0}, ${5:arg1}, ${6:arg2}, ${7:arg3}, ${8:arg4})${0}","displayText":"call_group","type":"function","leftLabel":"","description":" "},{"snippet":"change_dir(${1:todir})${0}","displayText":"change_dir","type":"function","leftLabel":"int","description":" "},{"snippet":"clear_font(${1:name}, ${2:type})${0}","displayText":"clear_font","type":"function","leftLabel":"","description":" "},{"snippet":"clear_icon(${1:name}, ${2:type})${0}","displayText":"clear_icon","type":"function","leftLabel":"","description":" "},{"snippet":"can_move_to(${1:position}, ${2:arg1})${0}","displayText":"can_move_to","type":"function","leftLabel":"bool","description":" "},{"snippet":"can_process()${0}","displayText":"can_process","type":"function","leftLabel":"bool","description":" Return true if the node can process. "},{"snippet":"cast_motion(${1:shape}, ${2:motion})${0}","displayText":"cast_motion","type":"function","leftLabel":"Array","description":" "},{"snippet":"cast_motion(${1:shape})${0}","displayText":"cast_motion","type":"function","leftLabel":"Array","description":" "},{"snippet":"clear_bones()${0}","displayText":"clear_bones","type":"function","leftLabel":"","description":" Clear all the bones in this skeleton. "},{"snippet":"clear_color(${1:name}, ${2:type})${0}","displayText":"clear_color","type":"function","leftLabel":"","description":" "},{"snippet":"clear_queue()${0}","displayText":"clear_queue","type":"function","leftLabel":"","description":" If animations are queued to play, clear them. "},{"snippet":"create_area(${1:id}, ${2:area})${0}","displayText":"create_area","type":"function","leftLabel":"int","description":" "},{"snippet":"create_item(${1:id})${0}","displayText":"create_item","type":"function","leftLabel":"","description":" Create a new item in the library, supplied an id. "},{"snippet":"create_item(${1:parent})${0}","displayText":"create_item","type":"function","leftLabel":"TreeItem","description":" "},{"snippet":"create_tile(${1:id})${0}","displayText":"create_tile","type":"function","leftLabel":"","description":" Create a new tile, the ID must be specified. "},{"snippet":"can_instance()${0}","displayText":"can_instance","type":"function","leftLabel":"bool","description":" Return true if this script can be instance (ie not a library). "},{"snippet":"clear_caches()${0}","displayText":"clear_caches","type":"function","leftLabel":"","description":" The animation player creates caches for faster access to the nodes it will animate. However, if a specific node is removed, it may not notice it, so clear_caches will force the player to search for the nodes again. "},{"snippet":"clear_colors()${0}","displayText":"clear_colors","type":"function","leftLabel":"","description":" Clear all the syntax coloring information. "},{"snippet":"clear_remaps()${0}","displayText":"clear_remaps","type":"function","leftLabel":"","description":" Clear all remaps. "},{"snippet":"clear_shapes()${0}","displayText":"clear_shapes","type":"function","leftLabel":"","description":" Remove all shapes. "},{"snippet":"call_deferred(${1:method}, ${2:arg0}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4})${0}","displayText":"call_deferred","type":"function","leftLabel":"","description":" Create and store a function in the object. The call will take place on idle time. "},{"snippet":"camera_create()${0}","displayText":"camera_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"can_drop_data(${1:pos}, ${2:data})${0}","displayText":"can_drop_data","type":"function","leftLabel":"bool","description":" "},{"snippet":"canvas_create()${0}","displayText":"canvas_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"cell_selected()${0}","displayText":"cell_selected","type":"method","leftLabel":"signal","description":"   "},{"snippet":"clear_current()${0}","displayText":"clear_current","type":"function","leftLabel":"","description":" "},{"snippet":"clear_filters()${0}","displayText":"clear_filters","type":"function","leftLabel":"","description":" Clear all the added filters in the dialog. "},{"snippet":"collide_shape(${1:shape}, ${2:max_results})${0}","displayText":"collide_shape","type":"function","leftLabel":"Array","description":" "},{"snippet":"color_changed(${1:color})${0}","displayText":"color_changed","type":"method","leftLabel":"signal","description":"     "},{"snippet":"custom_action(${1:action})${0}","displayText":"custom_action","type":"method","leftLabel":"signal","description":"    Emitted with a custom button is added.  "},{"snippet":"custom_export(${1:path})${0}","displayText":"custom_export","type":"function","leftLabel":"RawArray","description":" "},{"snippet":"clear_constant(${1:name}, ${2:type})${0}","displayText":"clear_constant","type":"function","leftLabel":"","description":" "},{"snippet":"clear_polygons()${0}","displayText":"clear_polygons","type":"function","leftLabel":"","description":" "},{"snippet":"clear_stylebox(${1:name}, ${2:type})${0}","displayText":"clear_stylebox","type":"function","leftLabel":"","description":" "},{"snippet":"current_is_dir()${0}","displayText":"current_is_dir","type":"function","leftLabel":"bool","description":" "},{"snippet":"cursor_changed()${0}","displayText":"cursor_changed","type":"method","leftLabel":"signal","description":"  Emitted when the cursor changes.  "},{"snippet":"cursor_set_pos(${1:arg0}, ${2:arg1})${0}","displayText":"cursor_set_pos","type":"function","leftLabel":"","description":" "},{"snippet":"can_use_threads()${0}","displayText":"can_use_threads","type":"function","leftLabel":"bool","description":" "},{"snippet":"center_geometry()${0}","displayText":"center_geometry","type":"function","leftLabel":"","description":" "},{"snippet":"clear_lightmaps()${0}","displayText":"clear_lightmaps","type":"function","leftLabel":"","description":" "},{"snippet":"cursor_get_line()${0}","displayText":"cursor_get_line","type":"function","leftLabel":"int","description":" Return the line the editing cursor is at. "},{"snippet":"cursor_set_line(${1:line})${0}","displayText":"cursor_set_line","type":"function","leftLabel":"","description":" Set the current line of the text editor. "},{"snippet":"clear_exceptions()${0}","displayText":"clear_exceptions","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_clear(${1:arg0})${0}","displayText":"canvas_item_clear","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_raise(${1:arg0})${0}","displayText":"canvas_item_raise","type":"function","leftLabel":"","description":" "},{"snippet":"commit_to_surface(${1:mesh})${0}","displayText":"commit_to_surface","type":"function","leftLabel":"int","description":" "},{"snippet":"create_from_image(${1:image}, ${2:flags})${0}","displayText":"create_from_image","type":"function","leftLabel":"","description":" "},{"snippet":"cursor_get_column()${0}","displayText":"cursor_get_column","type":"function","leftLabel":"int","description":" Return the column the editing cursor is at. "},{"snippet":"cursor_set_column(${1:column})${0}","displayText":"cursor_set_column","type":"function","leftLabel":"","description":" Set the current column of the text editor. "},{"snippet":"canvas_item_create()${0}","displayText":"canvas_item_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"clear_custom_color(${1:column})${0}","displayText":"clear_custom_color","type":"function","leftLabel":"","description":" "},{"snippet":"clear_undo_history()${0}","displayText":"clear_undo_history","type":"function","leftLabel":"","description":" Clear the undo history. "},{"snippet":"copy_default_theme()${0}","displayText":"copy_default_theme","type":"function","leftLabel":"","description":" "},{"snippet":"cursor_set_texture(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"cursor_set_texture","type":"function","leftLabel":"","description":" "},{"snippet":"cursor_set_visible(${1:arg0}, ${2:arg1})${0}","displayText":"cursor_set_visible","type":"function","leftLabel":"","description":" "},{"snippet":"clear_morph_targets()${0}","displayText":"clear_morph_targets","type":"function","leftLabel":"","description":" "},{"snippet":"collide_with_motion(${1:local_xform}, ${2:local_motion}, ${3:with_shape}, ${4:shape_xform}, ${5:shape_motion})${0}","displayText":"collide_with_motion","type":"function","leftLabel":"bool","description":" "},{"snippet":"create_from_surface(${1:mesh}, ${2:surface})${0}","displayText":"create_from_surface","type":"function","leftLabel":"int","description":" "},{"snippet":"cursor_set_rotation(${1:arg0}, ${2:arg1})${0}","displayText":"cursor_set_rotation","type":"function","leftLabel":"","description":" "},{"snippet":"custom_popup_edited(${1:arrow_clicked})${0}","displayText":"custom_popup_edited","type":"method","leftLabel":"signal","description":"     "},{"snippet":"camera_set_transform(${1:arg0}, ${2:arg1})${0}","displayText":"camera_set_transform","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_add_line(${1:arg0}, ${2:arg1}, ${3:arg2}, ${4:arg3}, ${5:arg4})${0}","displayText":"canvas_item_add_line","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_add_rect(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"canvas_item_add_rect","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_set_clip(${1:arg0}, ${2:arg1})${0}","displayText":"canvas_item_set_clip","type":"function","leftLabel":"","description":" "},{"snippet":"camera_set_orthogonal(${1:arg0}, ${2:arg1}, ${3:arg2}, ${4:arg3})${0}","displayText":"camera_set_orthogonal","type":"function","leftLabel":"","description":" "},{"snippet":"clear_custom_bg_color(${1:column})${0}","displayText":"clear_custom_bg_color","type":"function","leftLabel":"","description":" "},{"snippet":"camera_set_perspective(${1:arg0}, ${2:arg1}, ${3:arg2}, ${4:arg3})${0}","displayText":"camera_set_perspective","type":"function","leftLabel":"","description":" "},{"snippet":"can_translate_messages()${0}","displayText":"can_translate_messages","type":"function","leftLabel":"bool","description":" Return true if this object can translate strings. "},{"snippet":"canvas_item_add_circle(${1:arg0}, ${2:arg1}, ${3:arg2}, ${4:arg3})${0}","displayText":"canvas_item_add_circle","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_get_parent(${1:arg0})${0}","displayText":"canvas_item_get_parent","type":"function","leftLabel":"RID","description":" "},{"snippet":"canvas_item_set_parent(${1:arg0}, ${2:arg1})${0}","displayText":"canvas_item_set_parent","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_get_opacity(${1:arg0}, ${2:arg1})${0}","displayText":"canvas_item_get_opacity","type":"function","leftLabel":"float","description":" "},{"snippet":"canvas_item_set_opacity(${1:arg0}, ${2:arg1})${0}","displayText":"canvas_item_set_opacity","type":"function","leftLabel":"","description":" "},{"snippet":"create_convex_collision()${0}","displayText":"create_convex_collision","type":"function","leftLabel":"","description":" "},{"snippet":"create_from_image_alpha(${1:image})${0}","displayText":"create_from_image_alpha","type":"function","leftLabel":"","description":" "},{"snippet":"collide_and_get_contacts(${1:local_xform}, ${2:with_shape}, ${3:shape_xform})${0}","displayText":"collide_and_get_contacts","type":"function","leftLabel":"","description":" "},{"snippet":"create_trimesh_collision()${0}","displayText":"create_trimesh_collision","type":"function","leftLabel":"","description":" This helper creates a [StaticBody] child [Node] using the mesh geometry as collision. It's mainly used for testing. "},{"snippet":"canvas_item_add_style_box(${1:arg0}, ${2:arg1}, ${3:arg2}, ${4:arg3}, ${5:arg4})${0}","displayText":"canvas_item_add_style_box","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_set_transform(${1:arg0}, ${2:arg1})${0}","displayText":"canvas_item_set_transform","type":"function","leftLabel":"","description":" "},{"snippet":"compute_room_from_subtree()${0}","displayText":"compute_room_from_subtree","type":"function","leftLabel":"","description":" "},{"snippet":"cone_twist_joint_get_param(${1:joint}, ${2:param})${0}","displayText":"cone_twist_joint_get_param","type":"function","leftLabel":"float","description":" "},{"snippet":"cone_twist_joint_set_param(${1:joint}, ${2:param}, ${3:value})${0}","displayText":"cone_twist_joint_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_set_custom_rect(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"canvas_item_set_custom_rect","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_add_texture_rect(${1:arg0}, ${2:arg1}, ${3:arg2}, ${4:arg3}, ${5:arg4})${0}","displayText":"canvas_item_add_texture_rect","type":"function","leftLabel":"","description":" "},{"snippet":"canvas_item_get_self_opacity(${1:arg0}, ${2:arg1})${0}","displayText":"canvas_item_get_self_opacity","type":"function","leftLabel":"float","description":" "},{"snippet":"canvas_item_set_self_opacity(${1:arg0}, ${2:arg1})${0}","displayText":"canvas_item_set_self_opacity","type":"function","leftLabel":"","description":" "},{"snippet":"can_collide_with_rigid_bodies()${0}","displayText":"can_collide_with_rigid_bodies","type":"function","leftLabel":"bool","description":" "},{"snippet":"can_collide_with_static_bodies()${0}","displayText":"can_collide_with_static_bodies","type":"function","leftLabel":"bool","description":" "},{"snippet":"can_collide_with_character_bodies()${0}","displayText":"can_collide_with_character_bodies","type":"function","leftLabel":"bool","description":" "},{"snippet":"can_collide_with_kinematic_bodies()${0}","displayText":"can_collide_with_kinematic_bodies","type":"function","leftLabel":"bool","description":" "},{"snippet":"canvas_item_add_texture_rect_region(${1:arg0}, ${2:arg1}, ${3:arg2}, ${4:arg3}, ${5:arg4})${0}","displayText":"canvas_item_add_texture_rect_region","type":"function","leftLabel":"","description":" "},{"snippet":"collide_with_motion_and_get_contacts(${1:local_xform}, ${2:local_motion}, ${3:with_shape}, ${4:shape_xform}, ${5:shape_motion})${0}","displayText":"collide_with_motion_and_get_contacts","type":"function","leftLabel":"","description":" "}],"t":[{"snippet":"tr(${1:message})${0}","displayText":"tr","type":"function","leftLabel":"String","description":" Translate a message. Only works in message translation is enabled (which is by default). See [method set_message_translation]. "},{"snippet":"tan(${1:s})${0}","displayText":"tan","type":"function","leftLabel":"float","description":" Standard tangent function. "},{"snippet":"tanh(${1:s})${0}","displayText":"tanh","type":"function","leftLabel":"float","description":" Hyperbolic tangent. "},{"snippet":"tell()${0}","displayText":"tell","type":"function","leftLabel":"float","description":" "},{"snippet":"timeout()${0}","displayText":"timeout","type":"method","leftLabel":"signal","description":"  Emitted when the time runs out.  "},{"snippet":"toggled(${1:pressed})${0}","displayText":"toggled","type":"method","leftLabel":"signal","description":"    This signal is emitted when the button was just toggled between pressed and normal states (only if toggle_mode is active). The new state is contained in the [i]pressed[/i] argument.  "},{"snippet":"try_lock()${0}","displayText":"try_lock","type":"function","leftLabel":"int","description":" "},{"snippet":"test_mask(${1:point}, ${2:rect})${0}","displayText":"test_mask","type":"function","leftLabel":"bool","description":" Test a position in a rectangle, return wether it pases the mask test. "},{"snippet":"translate(${1:arg0})${0}","displayText":"translate","type":"function","leftLabel":"String","description":" "},{"snippet":"tween_step(${1:node}, ${2:key}, ${3:elapsed}, ${4:value})${0}","displayText":"tween_step","type":"method","leftLabel":"signal","description":"           "},{"snippet":"tab_changed(${1:tab})${0}","displayText":"tab_changed","type":"method","leftLabel":"signal","description":"    Emitted when the current tab changes.  "},{"snippet":"tween_start(${1:node}, ${2:key})${0}","displayText":"tween_start","type":"method","leftLabel":"signal","description":"       "},{"snippet":"text_changed(${1:text})${0}","displayText":"text_changed","type":"method","leftLabel":"signal","description":"    When the text changes, this signal is emitted.  "},{"snippet":"text_changed()${0}","displayText":"text_changed","type":"method","leftLabel":"signal","description":"  Emitted when the text changes.  "},{"snippet":"text_entered(${1:text})${0}","displayText":"text_entered","type":"method","leftLabel":"signal","description":"    This signal is emitted when the user presses KEY_ENTER on the [LineEdit]. This signal is often used as an alternate confirmation mechanism in dialogs.  "},{"snippet":"tree_changed()${0}","displayText":"tree_changed","type":"method","leftLabel":"signal","description":"   "},{"snippet":"tile_get_name(${1:id})${0}","displayText":"tile_get_name","type":"function","leftLabel":"String","description":" Return the name of a tile, for decriptive purposes. "},{"snippet":"tile_set_name(${1:id}, ${2:name})${0}","displayText":"tile_set_name","type":"function","leftLabel":"","description":" Set the name of a tile, for decriptive purposes. "},{"snippet":"track_move_up(${1:idx})${0}","displayText":"track_move_up","type":"function","leftLabel":"","description":" Move a track up. "},{"snippet":"take_over_path(${1:path})${0}","displayText":"take_over_path","type":"function","leftLabel":"","description":" "},{"snippet":"texture_create()${0}","displayText":"texture_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"tile_get_shape(${1:id})${0}","displayText":"tile_get_shape","type":"function","leftLabel":"Shape2D","description":" Return the shape of the tile. "},{"snippet":"tile_set_shape(${1:id}, ${2:shape})${0}","displayText":"tile_set_shape","type":"function","leftLabel":"","description":" Set a shape for the tile, enabling physics to collide with it. "},{"snippet":"track_find_key(${1:idx}, ${2:time}, ${3:exact})${0}","displayText":"track_find_key","type":"function","leftLabel":"int","description":" Find the key index by time in a given track. Optionally, only find it if the exact time is given. "},{"snippet":"track_get_path(${1:idx})${0}","displayText":"track_get_path","type":"function","leftLabel":"NodePath","description":" Get the path of a track. for more information on the path format, see [method track_set_path] "},{"snippet":"track_get_type(${1:idx})${0}","displayText":"track_get_type","type":"function","leftLabel":"int","description":" Get the type of a track. "},{"snippet":"track_set_path(${1:idx}, ${2:path})${0}","displayText":"track_set_path","type":"function","leftLabel":"","description":" Set the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by \":\". Example: \"character/skeleton:ankle\" or \"character/mesh:transform/local\" "},{"snippet":"tween_complete(${1:node}, ${2:key})${0}","displayText":"tween_complete","type":"method","leftLabel":"signal","description":"       "},{"snippet":"take_connection()${0}","displayText":"take_connection","type":"function","leftLabel":"Object","description":" If a connection is available, return a StreamPeerTCP with the connection/ "},{"snippet":"tile_get_region(${1:id})${0}","displayText":"tile_get_region","type":"function","leftLabel":"Rect2","description":" Return the tile sub-region in the texture. This is common in texture atlases. "},{"snippet":"tile_get_shapes(${1:id})${0}","displayText":"tile_get_shapes","type":"function","leftLabel":"Array","description":" "},{"snippet":"tile_set_region(${1:id}, ${2:region})${0}","displayText":"tile_set_region","type":"function","leftLabel":"","description":" Set the tile sub-region in the texture. This is common in texture atlases. "},{"snippet":"tile_set_shapes(${1:id}, ${2:shapes})${0}","displayText":"tile_set_shapes","type":"function","leftLabel":"","description":" "},{"snippet":"track_move_down(${1:idx})${0}","displayText":"track_move_down","type":"function","leftLabel":"","description":" Nove a track down. "},{"snippet":"targeting_method(${1:node}, ${2:method}, ${3:initial}, ${4:initial_method}, ${5:final_val}, ${6:times_in_sec}, ${7:trans_type}, ${8:ease_type}, ${9:delay})${0}","displayText":"targeting_method","type":"function","leftLabel":"bool","description":" "},{"snippet":"tile_get_texture(${1:id})${0}","displayText":"tile_get_texture","type":"function","leftLabel":"Texture","description":" Return the texture of the tile. "},{"snippet":"tile_set_texture(${1:id}, ${2:texture})${0}","displayText":"tile_set_texture","type":"function","leftLabel":"","description":" Set the texture of the tile. "},{"snippet":"track_insert_key(${1:idx}, ${2:time}, ${3:key}, ${4:transition})${0}","displayText":"track_insert_key","type":"function","leftLabel":"","description":" Insert a generic key in a given track. "},{"snippet":"track_remove_key(${1:idx}, ${2:key_idx})${0}","displayText":"track_remove_key","type":"function","leftLabel":"","description":" Remove a key by index in a given track. "},{"snippet":"texture_get_flags(${1:arg0})${0}","displayText":"texture_get_flags","type":"function","leftLabel":"int","description":" "},{"snippet":"texture_get_width(${1:arg0})${0}","displayText":"texture_get_width","type":"function","leftLabel":"int","description":" "},{"snippet":"texture_set_flags(${1:arg0}, ${2:arg1})${0}","displayText":"texture_set_flags","type":"function","leftLabel":"","description":" "},{"snippet":"targeting_property(${1:node}, ${2:property}, ${3:initial}, ${4:initial_val}, ${5:final_val}, ${6:times_in_sec}, ${7:trans_type}, ${8:ease_type}, ${9:delay})${0}","displayText":"targeting_property","type":"function","leftLabel":"bool","description":" "},{"snippet":"texture_get_height(${1:arg0})${0}","displayText":"texture_get_height","type":"function","leftLabel":"int","description":" "},{"snippet":"timeseek_node_seek(${1:id}, ${2:pos_sec})${0}","displayText":"timeseek_node_seek","type":"function","leftLabel":"","description":" "},{"snippet":"track_get_key_time(${1:idx}, ${2:key_idx})${0}","displayText":"track_get_key_time","type":"function","leftLabel":"float","description":" Return the time at which the key is located. "},{"snippet":"track_get_key_count(${1:idx})${0}","displayText":"track_get_key_count","type":"function","leftLabel":"int","description":" Return the amount of keys in a given track. "},{"snippet":"track_get_key_value(${1:idx}, ${2:key_idx})${0}","displayText":"track_get_key_value","type":"function","leftLabel":"","description":" Return the value of a given key in a given track. "},{"snippet":"track_set_key_value(${1:idx}, ${2:key}, ${3:value})${0}","displayText":"track_set_key_value","type":"function","leftLabel":"","description":" Set the value of an existing key. "},{"snippet":"triangulate_polygon(${1:polygon})${0}","displayText":"triangulate_polygon","type":"function","leftLabel":"IntArray","description":" "},{"snippet":"tile_get_shape_offset(${1:id})${0}","displayText":"tile_get_shape_offset","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"tile_set_shape_offset(${1:id}, ${2:shape_offset})${0}","displayText":"tile_set_shape_offset","type":"function","leftLabel":"","description":" "},{"snippet":"tile_get_texture_offset(${1:id})${0}","displayText":"tile_get_texture_offset","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"tile_set_texture_offset(${1:id}, ${2:texture_offset})${0}","displayText":"tile_set_texture_offset","type":"function","leftLabel":"","description":" "},{"snippet":"track_remove_key_at_pos(${1:idx}, ${2:pos})${0}","displayText":"track_remove_key_at_pos","type":"function","leftLabel":"","description":" Remove a key by position (seconds) in a given track. "},{"snippet":"timescale_node_get_scale(${1:id})${0}","displayText":"timescale_node_get_scale","type":"function","leftLabel":"float","description":" "},{"snippet":"timescale_node_set_scale(${1:id}, ${2:scale})${0}","displayText":"timescale_node_set_scale","type":"function","leftLabel":"","description":" "},{"snippet":"track_get_key_transition(${1:idx}, ${2:key_idx})${0}","displayText":"track_get_key_transition","type":"function","leftLabel":"float","description":" Return the transition curve (easing) for a specific key (see built-in math function \"ease\"). "},{"snippet":"track_set_key_transition(${1:idx}, ${2:key_idx}, ${3:transition})${0}","displayText":"track_set_key_transition","type":"function","leftLabel":"","description":" Set the transition curve (easing) for a specific key (see built-in math function \"ease\"). "},{"snippet":"texture_create_from_image(${1:arg0}, ${2:arg1})${0}","displayText":"texture_create_from_image","type":"function","leftLabel":"RID","description":" "},{"snippet":"transform_track_insert_key(${1:idx}, ${2:time}, ${3:loc}, ${4:rot}, ${5:scale})${0}","displayText":"transform_track_insert_key","type":"function","leftLabel":"int","description":" Insert a transform key for a transform track. "},{"snippet":"transform_track_interpolate(${1:idx}, ${2:time_sec})${0}","displayText":"transform_track_interpolate","type":"function","leftLabel":"Array","description":" Return the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position ([Vector3]), rotation ([Quat]) and scale ([Vector3]). "},{"snippet":"transition_node_get_current(${1:id})${0}","displayText":"transition_node_get_current","type":"function","leftLabel":"int","description":" "},{"snippet":"transition_node_set_current(${1:id}, ${2:input_idx})${0}","displayText":"transition_node_set_current","type":"function","leftLabel":"","description":" "},{"snippet":"track_get_interpolation_type(${1:idx})${0}","displayText":"track_get_interpolation_type","type":"function","leftLabel":"int","description":" Return the interpolation type of a given track, from the INTERPOLATION_* enum. "},{"snippet":"track_set_interpolation_type(${1:idx}, ${2:interpolation})${0}","displayText":"track_set_interpolation_type","type":"function","leftLabel":"","description":" Set the interpolation type of a given track, from the INTERPOLATION_* enum. "},{"snippet":"transition_node_delete_input(${1:id}, ${2:input_idx})${0}","displayText":"transition_node_delete_input","type":"function","leftLabel":"","description":" "},{"snippet":"transition_node_get_xfade_time(${1:id})${0}","displayText":"transition_node_get_xfade_time","type":"function","leftLabel":"float","description":" "},{"snippet":"transition_node_set_xfade_time(${1:id}, ${2:time_sec})${0}","displayText":"transition_node_set_xfade_time","type":"function","leftLabel":"","description":" "},{"snippet":"transition_node_get_input_count(${1:id})${0}","displayText":"transition_node_get_input_count","type":"function","leftLabel":"int","description":" "},{"snippet":"transition_node_set_input_count(${1:id}, ${2:count})${0}","displayText":"transition_node_set_input_count","type":"function","leftLabel":"","description":" "},{"snippet":"transition_node_has_input_auto_advance(${1:id}, ${2:input_idx})${0}","displayText":"transition_node_has_input_auto_advance","type":"function","leftLabel":"bool","description":" "},{"snippet":"transition_node_set_input_auto_advance(${1:id}, ${2:input_idx}, ${3:enable})${0}","displayText":"transition_node_set_input_auto_advance","type":"function","leftLabel":"","description":" "}],"a":[{"snippet":"abs(${1:s})${0}","displayText":"abs","type":"function","leftLabel":"float","description":" Remove sign (works for integer and float). "},{"snippet":"acos(${1:s})${0}","displayText":"acos","type":"function","leftLabel":"float","description":" Arc-cosine. "},{"snippet":"asin(${1:s})${0}","displayText":"asin","type":"function","leftLabel":"float","description":" Arc-sine. "},{"snippet":"atan(${1:s})${0}","displayText":"atan","type":"function","leftLabel":"float","description":" Arc-tangent. "},{"snippet":"atan2(${1:x}, ${2:y})${0}","displayText":"atan2","type":"function","leftLabel":"float","description":" Arc-tangent that takes a 2D vector as argument, retuns the full -pi to +pi range. "},{"snippet":"accept(${1:stream})${0}","displayText":"accept","type":"function","leftLabel":"int","description":" "},{"snippet":"add_uv(${1:uv})${0}","displayText":"add_uv","type":"function","leftLabel":"","description":" "},{"snippet":"add_tab(${1:title}, ${2:icon})${0}","displayText":"add_tab","type":"function","leftLabel":"","description":" "},{"snippet":"add_uv2(${1:uv2})${0}","displayText":"add_uv2","type":"function","leftLabel":"","description":" "},{"snippet":"advance(${1:delta})${0}","displayText":"advance","type":"function","leftLabel":"","description":" "},{"snippet":"add_bone(${1:name})${0}","displayText":"add_bone","type":"function","leftLabel":"","description":" Add a bone, with name \"name\". [method get_bone_count] will become the bone index. "},{"snippet":"add_char(${1:character}, ${2:texture}, ${3:rect}, ${4:align}, ${5:advance})${0}","displayText":"add_char","type":"function","leftLabel":"","description":" Add a character to the font, where \"character\" is the unicode value, \"texture\" is the texture index, \"rect\" is the region in the texture (in pixels!), \"align\" is the (optional) alignment for the character and \"advance\" is the (optional) advance. "},{"snippet":"add_file(${1:pck_path}, ${2:source_path})${0}","displayText":"add_file","type":"function","leftLabel":"int","description":" "},{"snippet":"add_item(${1:label}, ${2:id})${0}","displayText":"add_item","type":"function","leftLabel":"","description":" Add an item, with text \"label\" and (optionally) id. If no \"id\" is passed, \"id\" becomes the item index. New items are appended at the end. "},{"snippet":"add_item(${1:label}, ${2:id}, ${3:accel})${0}","displayText":"add_item","type":"function","leftLabel":"","description":" Add a new item with text \"label\". An id can optonally be provided, as well as an accelerator. If no id is provided, one will be created from the index. "},{"snippet":"add_node(${1:type}, ${2:id})${0}","displayText":"add_node","type":"function","leftLabel":"","description":" Add a node of a given type in the graph with given id. "},{"snippet":"add_text(${1:text})${0}","displayText":"add_text","type":"function","leftLabel":"","description":" "},{"snippet":"add_bones(${1:bones})${0}","displayText":"add_bones","type":"function","leftLabel":"","description":" "},{"snippet":"add_child(${1:node})${0}","displayText":"add_child","type":"function","leftLabel":"","description":" Add a child [Node]. Nodes can have as many children as they want, but every child must have a unique name. Children nodes are automatically deleted when the parent node is deleted, so deleting a whole scene is performed by deleting its topmost node. "},{"snippet":"add_color(${1:color})${0}","displayText":"add_color","type":"function","leftLabel":"","description":" "},{"snippet":"add_force(${1:force}, ${2:pos})${0}","displayText":"add_force","type":"function","leftLabel":"","description":" "},{"snippet":"add_frame(${1:frame}, ${2:atpos})${0}","displayText":"add_frame","type":"function","leftLabel":"","description":" Add a frame (texture). "},{"snippet":"add_image(${1:image})${0}","displayText":"add_image","type":"function","leftLabel":"","description":" "},{"snippet":"add_piece(${1:ofs}, ${2:texture})${0}","displayText":"add_piece","type":"function","leftLabel":"int","description":" "},{"snippet":"add_point(${1:pos}, ${2:in}, ${3:out}, ${4:atpos})${0}","displayText":"add_point","type":"function","leftLabel":"","description":" "},{"snippet":"add_remap(${1:from}, ${2:to}, ${3:locale})${0}","displayText":"add_remap","type":"function","leftLabel":"","description":" Add a remap from a file to another. "},{"snippet":"add_shape(${1:shape}, ${2:transform})${0}","displayText":"add_shape","type":"function","leftLabel":"","description":" "},{"snippet":"add_track(${1:type}, ${2:at_pos})${0}","displayText":"add_track","type":"function","leftLabel":"int","description":" Add a track to the Animation. The track type must be specified as any of the values in te TYPE_* enumeration. "},{"snippet":"add_action(${1:action})${0}","displayText":"add_action","type":"function","leftLabel":"","description":" "},{"snippet":"add_button(${1:column}, ${2:button}, ${3:arg2})${0}","displayText":"add_button","type":"function","leftLabel":"","description":" "},{"snippet":"add_button(${1:text})${0}","displayText":"add_button","type":"function","leftLabel":"","description":" Add a new button. "},{"snippet":"add_button(${1:text}, ${2:right}, ${3:action})${0}","displayText":"add_button","type":"function","leftLabel":"Button","description":" "},{"snippet":"add_cancel(${1:name})${0}","displayText":"add_cancel","type":"function","leftLabel":"Button","description":" "},{"snippet":"add_filter(${1:filter})${0}","displayText":"add_filter","type":"function","leftLabel":"","description":" Add a custom filter. Filter format is: \"mask ; description\", example (C++): dialog->add_filter(\"*.png ; PNG Images\"); "},{"snippet":"add_normal(${1:normal})${0}","displayText":"add_normal","type":"function","leftLabel":"","description":" "},{"snippet":"add_sample(${1:name}, ${2:sample})${0}","displayText":"add_sample","type":"function","leftLabel":"","description":" Add a sample to the library, with a given text id. "},{"snippet":"add_source(${1:path}, ${2:md5})${0}","displayText":"add_source","type":"function","leftLabel":"","description":" "},{"snippet":"add_sphere(${1:lats}, ${2:lons}, ${3:radius})${0}","displayText":"add_sphere","type":"function","leftLabel":"","description":" "},{"snippet":"add_vertex(${1:vertex})${0}","displayText":"add_vertex","type":"function","leftLabel":"","description":" "},{"snippet":"add_vertex(${1:color})${0}","displayText":"add_vertex","type":"function","leftLabel":"","description":" "},{"snippet":"add_message(${1:src_message}, ${2:xlated_message})${0}","displayText":"add_message","type":"function","leftLabel":"","description":" Add a message for translation. "},{"snippet":"add_polygon(${1:polygon})${0}","displayText":"add_polygon","type":"function","leftLabel":"","description":" "},{"snippet":"add_surface(${1:primitive}, ${2:arrays}, ${3:morph_arrays}, ${4:arg3})${0}","displayText":"add_surface","type":"function","leftLabel":"","description":" Create a new surface ([method get_surface_count] that will become surf_idx for this. Surfaces are created to be rendered using a \"primitive\", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. (As a note, when using indices, it is recommended to only use just points, lines or triangles). The format of a surface determines which arrays it will allocate and hold, so \"format\" is a combination of ARRAY_FORMAT_* mask constants ORed together. ARRAY_FORMAT_VERTEX must be always present. \"array_len\" determines the amount of vertices in the array (not primitives!). if ARRAY_FORMAT_INDEX is in the format mask, then it means that an index array will be allocated and \"index_array_len\" must be passed. "},{"snippet":"add_tangent(${1:tangent})${0}","displayText":"add_tangent","type":"function","leftLabel":"","description":" "},{"snippet":"add_texture(${1:texture})${0}","displayText":"add_texture","type":"function","leftLabel":"","description":" Add a texture to the [Font]. "},{"snippet":"add_weights(${1:weights})${0}","displayText":"add_weights","type":"function","leftLabel":"","description":" "},{"snippet":"area_create()${0}","displayText":"area_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"accept_event()${0}","displayText":"accept_event","type":"function","leftLabel":"","description":" Handles the event, no other control will receive it and it will not be sent to nodes waiting on [method Node._unhandled_input] or [method Node._unhandled_key_input]. "},{"snippet":"add_lightmap(${1:texture}, ${2:gen_size})${0}","displayText":"add_lightmap","type":"function","leftLabel":"","description":" "},{"snippet":"add_resource(${1:name}, ${2:resource})${0}","displayText":"add_resource","type":"function","leftLabel":"","description":" Add a resource to the preloader. Set the text-id that will be used to identify it (retrieve it/erase it/etc). "},{"snippet":"add_to_group(${1:group}, ${2:arg1})${0}","displayText":"add_to_group","type":"function","leftLabel":"","description":" Add a node to a group. Groups are helpers to name and organize group of nodes, like for example: \"Enemies\", \"Collectables\", etc. A [Node] can be in any number of groups. Nodes can be assigned a group at any time, but will not be added to it until they are inside the scene tree (see [method is_inside_scene]). "},{"snippet":"about_to_show()${0}","displayText":"about_to_show","type":"method","leftLabel":"signal","description":"  This signal is emitted when a popup is about to be shown. (often used in [PopupMenu] for clearing the list of options and creating a new one according to the current context).  "},{"snippet":"add_animation(${1:name}, ${2:animation})${0}","displayText":"add_animation","type":"function","leftLabel":"int","description":" Add an animation resource to the player, which will be later referenced by the \"name\" argument. "},{"snippet":"add_exception(${1:node})${0}","displayText":"add_exception","type":"function","leftLabel":"","description":" "},{"snippet":"add_icon_item(${1:texture}, ${2:label}, ${3:id})${0}","displayText":"add_icon_item","type":"function","leftLabel":"","description":" Add an item, with a \"texture\" icon, text \"label\" and (optionally) id. If no \"id\" is passed, \"id\" becomes the item index. New items are appended at the end. "},{"snippet":"add_icon_item(${1:texture}, ${2:label}, ${3:id}, ${4:accel})${0}","displayText":"add_icon_item","type":"function","leftLabel":"","description":" Add a new item with text \"label\" and icon \"texture\". An id can optonally be provided, as well as an accelerator. If no id is provided, one will be created from the index. "},{"snippet":"add_root_node(${1:node})${0}","displayText":"add_root_node","type":"function","leftLabel":"","description":" "},{"snippet":"add_separator()${0}","displayText":"add_separator","type":"function","leftLabel":"","description":" Add a separator between items. Separators also occupy an index. "},{"snippet":"append_bbcode(${1:bbcode})${0}","displayText":"append_bbcode","type":"function","leftLabel":"int","description":" "},{"snippet":"apply_changes()${0}","displayText":"apply_changes","type":"function","leftLabel":"","description":" "},{"snippet":"apply_impulse(${1:pos}, ${2:j})${0}","displayText":"apply_impulse","type":"function","leftLabel":"","description":" "},{"snippet":"apply_impulse(${1:pos}, ${2:impulse})${0}","displayText":"apply_impulse","type":"function","leftLabel":"","description":" "},{"snippet":"area_get_name(${1:area})${0}","displayText":"area_get_name","type":"function","leftLabel":"String","description":" "},{"snippet":"area_set_name(${1:area}, ${2:name})${0}","displayText":"area_set_name","type":"function","leftLabel":"","description":" "},{"snippet":"add_check_item(${1:label}, ${2:id}, ${3:accel})${0}","displayText":"add_check_item","type":"function","leftLabel":"","description":" Add a new checkable item with text \"label\". An id can optonally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. "},{"snippet":"area_add_shape(${1:area}, ${2:shape}, ${3:transform})${0}","displayText":"area_add_shape","type":"function","leftLabel":"","description":" "},{"snippet":"area_get_param(${1:area}, ${2:param})${0}","displayText":"area_get_param","type":"function","leftLabel":"","description":" "},{"snippet":"area_get_shape(${1:area}, ${2:shape_idx})${0}","displayText":"area_get_shape","type":"function","leftLabel":"RID","description":" "},{"snippet":"area_get_space(${1:area})${0}","displayText":"area_get_space","type":"function","leftLabel":"RID","description":" "},{"snippet":"area_set_param(${1:area}, ${2:param}, ${3:value})${0}","displayText":"area_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"area_set_shape(${1:area}, ${2:shape_idx}, ${3:shape})${0}","displayText":"area_set_shape","type":"function","leftLabel":"","description":" "},{"snippet":"area_set_space(${1:area}, ${2:space})${0}","displayText":"area_set_space","type":"function","leftLabel":"","description":" "},{"snippet":"add_custom_type(${1:type}, ${2:base}, ${3:script}, ${4:icon})${0}","displayText":"add_custom_type","type":"function","leftLabel":"","description":" "},{"snippet":"add_icon_button(${1:icon}, ${2:text})${0}","displayText":"add_icon_button","type":"function","leftLabel":"","description":" "},{"snippet":"add_translation(${1:arg0})${0}","displayText":"add_translation","type":"function","leftLabel":"","description":" "},{"snippet":"add_user_signal(${1:signal}, ${2:arguments})${0}","displayText":"add_user_signal","type":"function","leftLabel":"","description":" Add a user signal (can be added anytime). Arguments are optional, but can be added as an array of dictionaries, each containing \"name\" and \"type\" (from [@GlobalScope] TYPE_*). "},{"snippet":"area_get_bounds(${1:area})${0}","displayText":"area_get_bounds","type":"function","leftLabel":"AABB","description":" "},{"snippet":"action_add_event(${1:action}, ${2:event})${0}","displayText":"action_add_event","type":"function","leftLabel":"","description":" "},{"snippet":"action_has_event(${1:action}, ${2:event})${0}","displayText":"action_has_event","type":"function","leftLabel":"bool","description":" "},{"snippet":"add_color_region(${1:begin_key}, ${2:end_key}, ${3:color}, ${4:line_only})${0}","displayText":"add_color_region","type":"function","leftLabel":"","description":" Add color region (given the delimiters) and its colors. "},{"snippet":"add_kerning_pair(${1:char_a}, ${2:char_b}, ${3:kerning})${0}","displayText":"add_kerning_pair","type":"function","leftLabel":"","description":" Add a kerning pair to the [Font] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character. "},{"snippet":"add_morph_target(${1:name})${0}","displayText":"add_morph_target","type":"function","leftLabel":"","description":" "},{"snippet":"add_smooth_group(${1:smooth})${0}","displayText":"add_smooth_group","type":"function","leftLabel":"","description":" "},{"snippet":"add_submenu_item(${1:label}, ${2:submenu}, ${3:id})${0}","displayText":"add_submenu_item","type":"function","leftLabel":"","description":" "},{"snippet":"append_at_cursor(${1:text})${0}","displayText":"append_at_cursor","type":"function","leftLabel":"","description":" Append text at cursor, scrolling the [LineEdit] when needed. "},{"snippet":"are_tabs_visible()${0}","displayText":"are_tabs_visible","type":"function","leftLabel":"bool","description":" Return whether the tabs should be visible or hidden. "},{"snippet":"add_exception_rid(${1:rid})${0}","displayText":"add_exception_rid","type":"function","leftLabel":"","description":" "},{"snippet":"add_font_override(${1:name}, ${2:font})${0}","displayText":"add_font_override","type":"function","leftLabel":"","description":" Override a single font (font) in the theme of this Control. If font is empty, override is cleared. "},{"snippet":"add_icon_override(${1:name}, ${2:texture})${0}","displayText":"add_icon_override","type":"function","leftLabel":"","description":" Override a single icon ([Texture]) in the theme of this Control. If texture is empty, override is cleared. "},{"snippet":"add_keyword_color(${1:keyword}, ${2:color})${0}","displayText":"add_keyword_color","type":"function","leftLabel":"","description":" Add a keyword and its color. "},{"snippet":"animation_changed(${1:old_name}, ${2:new_name})${0}","displayText":"animation_changed","type":"method","leftLabel":"signal","description":"      If the currently being played animation changes, this signal will notify of such change.  "},{"snippet":"area_clear_shapes(${1:area})${0}","displayText":"area_clear_shapes","type":"function","leftLabel":"","description":" "},{"snippet":"area_remove_shape(${1:area}, ${2:shape_idx})${0}","displayText":"area_remove_shape","type":"function","leftLabel":"","description":" "},{"snippet":"action_erase_event(${1:action}, ${2:event})${0}","displayText":"action_erase_event","type":"function","leftLabel":"","description":" "},{"snippet":"add_color_override(${1:name}, ${2:color})${0}","displayText":"add_color_override","type":"function","leftLabel":"","description":" "},{"snippet":"add_custom_control(${1:container}, ${2:control})${0}","displayText":"add_custom_control","type":"function","leftLabel":"","description":" "},{"snippet":"add_style_override(${1:name}, ${2:stylebox})${0}","displayText":"add_style_override","type":"function","leftLabel":"","description":" Override a single stylebox ([Stylebox]) in the theme of this Control. If stylebox is empty, override is cleared. "},{"snippet":"area_get_transform(${1:area})${0}","displayText":"area_get_transform","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"area_set_transform(${1:area}, ${2:transform})${0}","displayText":"area_set_transform","type":"function","leftLabel":"","description":" "},{"snippet":"add_icon_check_item(${1:texture}, ${2:label}, ${3:id}, ${4:accel})${0}","displayText":"add_icon_check_item","type":"function","leftLabel":"","description":" Add a new checkable item with text \"label\" and icon \"texture\". An id can optonally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. "},{"snippet":"area_get_shape_count(${1:area})${0}","displayText":"area_get_shape_count","type":"function","leftLabel":"int","description":" "},{"snippet":"area_is_ray_pickable(${1:area})${0}","displayText":"area_is_ray_pickable","type":"function","leftLabel":"bool","description":" "},{"snippet":"add_constant_override(${1:name}, ${2:constant})${0}","displayText":"add_constant_override","type":"function","leftLabel":"","description":" Override a single constant (integer) in the theme of this Control. If constant equals Theme.INVALID_CONSTANT, override is cleared. "},{"snippet":"area_set_ray_pickable(${1:area}, ${2:enable})${0}","displayText":"area_set_ray_pickable","type":"function","leftLabel":"","description":" "},{"snippet":"area_is_exterior_portal(${1:area})${0}","displayText":"area_is_exterior_portal","type":"function","leftLabel":"bool","description":" "},{"snippet":"area_get_shape_transform(${1:area}, ${2:shape_idx})${0}","displayText":"area_get_shape_transform","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"area_set_exterior_portal(${1:area}, ${2:enable})${0}","displayText":"area_set_exterior_portal","type":"function","leftLabel":"","description":" "},{"snippet":"area_set_shape_transform(${1:area}, ${2:shape_idx}, ${3:transform})${0}","displayText":"area_set_shape_transform","type":"function","leftLabel":"","description":" "},{"snippet":"are_column_titles_visible()${0}","displayText":"are_column_titles_visible","type":"function","leftLabel":"bool","description":" "},{"snippet":"area_set_monitor_callback(${1:receiver}, ${2:method}, ${3:arg2})${0}","displayText":"area_set_monitor_callback","type":"function","leftLabel":"","description":" "},{"snippet":"area_get_object_instance_ID(${1:area})${0}","displayText":"area_get_object_instance_ID","type":"function","leftLabel":"int","description":" "},{"snippet":"add_collision_exception_with(${1:body})${0}","displayText":"add_collision_exception_with","type":"function","leftLabel":"","description":" "},{"snippet":"animation_node_get_animation(${1:id})${0}","displayText":"animation_node_get_animation","type":"function","leftLabel":"Animation","description":" "},{"snippet":"animation_node_set_animation(${1:id}, ${2:animation})${0}","displayText":"animation_node_set_animation","type":"function","leftLabel":"","description":" Set the animation for an animation node. "},{"snippet":"area_get_space_override_mode(${1:area})${0}","displayText":"area_get_space_override_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"area_set_space_override_mode(${1:area}, ${2:mode})${0}","displayText":"area_set_space_override_mode","type":"function","leftLabel":"","description":" "},{"snippet":"area_get_portal_disable_color(${1:area})${0}","displayText":"area_get_portal_disable_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"area_set_portal_disable_color(${1:area}, ${2:color})${0}","displayText":"area_set_portal_disable_color","type":"function","leftLabel":"","description":" "},{"snippet":"area_attach_object_instance_ID(${1:area}, ${2:id})${0}","displayText":"area_attach_object_instance_ID","type":"function","leftLabel":"","description":" "},{"snippet":"area_get_portal_disable_distance(${1:area})${0}","displayText":"area_get_portal_disable_distance","type":"function","leftLabel":"float","description":" "},{"snippet":"area_set_portal_disable_distance(${1:area}, ${2:distance})${0}","displayText":"area_set_portal_disable_distance","type":"function","leftLabel":"","description":" "},{"snippet":"animation_node_get_master_animation(${1:id})${0}","displayText":"animation_node_get_master_animation","type":"function","leftLabel":"String","description":" "},{"snippet":"animation_node_set_master_animation(${1:id}, ${2:source})${0}","displayText":"animation_node_set_master_animation","type":"function","leftLabel":"","description":" "}],"f":[{"snippet":"find(${1:text}, ${2:start}, ${3:end})${0}","displayText":"find","type":"function","leftLabel":"int","description":" "},{"snippet":"fmod(${1:x}, ${2:y})${0}","displayText":"fmod","type":"function","leftLabel":"float","description":" Module (remainder of x/y). "},{"snippet":"free(${1:arg0})${0}","displayText":"free","type":"function","leftLabel":"","description":" "},{"snippet":"free(${1:rid})${0}","displayText":"free","type":"function","leftLabel":"","description":" Free a [RID] resource. "},{"snippet":"floor(${1:s})${0}","displayText":"floor","type":"function","leftLabel":"float","description":" Floor (rounds down to nearest integer). "},{"snippet":"flush(${1:arg0})${0}","displayText":"flush","type":"function","leftLabel":"int","description":" "},{"snippet":"flush()${0}","displayText":"flush","type":"function","leftLabel":"","description":" "},{"snippet":"fposmod(${1:x}, ${2:y})${0}","displayText":"fposmod","type":"function","leftLabel":"float","description":" Module (remainder of x/y) that wraps equally in positive and negative. "},{"snippet":"funcref(${1:instance}, ${2:funcname})${0}","displayText":"funcref","type":"function","leftLabel":"Object","description":" Returns a reference to the specified function "},{"snippet":"finished()${0}","displayText":"finished","type":"method","leftLabel":"signal","description":"  Notifies when an animation finished playing.  "},{"snippet":"free_rid(${1:rid})${0}","displayText":"free_rid","type":"function","leftLabel":"","description":" "},{"snippet":"find_bone(${1:name})${0}","displayText":"find_bone","type":"function","leftLabel":"int","description":" Return the bone index that matches \"name\" as its name. "},{"snippet":"find_path(${1:from}, ${2:to})${0}","displayText":"find_path","type":"function","leftLabel":"Vector2Array","description":" "},{"snippet":"find_track(${1:path})${0}","displayText":"find_track","type":"function","leftLabel":"int","description":" "},{"snippet":"find_world()${0}","displayText":"find_world","type":"function","leftLabel":"World","description":" "},{"snippet":"focus_exit()${0}","displayText":"focus_exit","type":"method","leftLabel":"signal","description":"  Emitted when the keyboard focus is lost.  "},{"snippet":"force_drag(${1:data}, ${2:preview})${0}","displayText":"force_drag","type":"function","leftLabel":"","description":" "},{"snippet":"file_exists(${1:path})${0}","displayText":"file_exists","type":"function","leftLabel":"bool","description":" "},{"snippet":"file_exists(${1:name})${0}","displayText":"file_exists","type":"function","leftLabel":"bool","description":" "},{"snippet":"focus_enter()${0}","displayText":"focus_enter","type":"method","leftLabel":"signal","description":"  Emitted when keyboard focus is gained.  "},{"snippet":"fx_get_param(${1:param})${0}","displayText":"fx_get_param","type":"function","leftLabel":"","description":" "},{"snippet":"fx_set_param(${1:param}, ${2:value})${0}","displayText":"fx_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"file_selected(${1:path})${0}","displayText":"file_selected","type":"method","leftLabel":"signal","description":"    Event emitted when the user selects a file (double clicks it or presses the OK button).  "},{"snippet":"find_world_2d()${0}","displayText":"find_world_2d","type":"function","leftLabel":"World2D","description":" "},{"snippet":"follow_method(${1:node}, ${2:method}, ${3:initial_val}, ${4:target}, ${5:target_method}, ${6:times_in_sec}, ${7:trans_type}, ${8:ease_type}, ${9:delay})${0}","displayText":"follow_method","type":"function","leftLabel":"bool","description":" "},{"snippet":"files_selected(${1:paths})${0}","displayText":"files_selected","type":"method","leftLabel":"signal","description":"     "},{"snippet":"find_animation(${1:animation})${0}","displayText":"find_animation","type":"function","leftLabel":"String","description":" Find an animation name by resource. "},{"snippet":"fix_alpha_edges()${0}","displayText":"fix_alpha_edges","type":"function","leftLabel":"","description":" "},{"snippet":"follow_property(${1:node}, ${2:property}, ${3:initial_val}, ${4:target}, ${5:target_property}, ${6:times_in_sec}, ${7:trans_type}, ${8:ease_type}, ${9:delay})${0}","displayText":"follow_property","type":"function","leftLabel":"bool","description":" "},{"snippet":"find_tile_by_name(${1:name})${0}","displayText":"find_tile_by_name","type":"function","leftLabel":"int","description":" Find the first tile with the given name. "},{"snippet":"fit_child_in_rect(${1:child}, ${2:rect})${0}","displayText":"fit_child_in_rect","type":"function","leftLabel":"","description":" Fit a child control in a given rect. This is mainly a helper for creating custom container classes. "},{"snippet":"force_update_scroll()${0}","displayText":"force_update_scroll","type":"function","leftLabel":"","description":" Force the camera to update scroll immediately. "},{"snippet":"forward_input_event(${1:event})${0}","displayText":"forward_input_event","type":"function","leftLabel":"bool","description":" "},{"snippet":"forward_spatial_input_event(${1:camera}, ${2:event})${0}","displayText":"forward_spatial_input_event","type":"function","leftLabel":"bool","description":" "}],"r":[{"snippet":"read()${0}","displayText":"read","type":"function","leftLabel":"int","description":" "},{"snippet":"redo()${0}","displayText":"redo","type":"function","leftLabel":"","description":" Perform redo operation. "},{"snippet":"raise()${0}","displayText":"raise","type":"function","leftLabel":"","description":" Move this node to the top of the array of nodes of the parent node. This is often useful on GUIs ([Control]), because their order of drawing fully depends on their order in the tree. "},{"snippet":"randf()${0}","displayText":"randf","type":"function","leftLabel":"float","description":" Random value (0 to 1 float). "},{"snippet":"randi()${0}","displayText":"randi","type":"function","leftLabel":"int","description":" Random 32 bits value (integer). To obtain a value from 0 to N, you can use remainder, like (for random from 0 to 19): randi() % 20. "},{"snippet":"range(${1:...})${0}","displayText":"range","type":"function","leftLabel":"Array","description":" Return an array with the given range. Range can be 1 argument N (0 to N-1), two arguments (initial, final-1) or three arguments (initial,final-1,increment). "},{"snippet":"reset(${1:node}, ${2:key})${0}","displayText":"reset","type":"function","leftLabel":"bool","description":" "},{"snippet":"reset()${0}","displayText":"reset","type":"function","leftLabel":"","description":" "},{"snippet":"round(${1:s})${0}","displayText":"round","type":"function","leftLabel":"float","description":" Round to nearest integer. "},{"snippet":"reload()${0}","displayText":"reload","type":"function","leftLabel":"int","description":" Reload the script. This will fail if there are existing instances. "},{"snippet":"remove(${1:file})${0}","displayText":"remove","type":"function","leftLabel":"int","description":" "},{"snippet":"remove(${1:node}, ${2:key})${0}","displayText":"remove","type":"function","leftLabel":"bool","description":" "},{"snippet":"rename(${1:from}, ${2:to})${0}","displayText":"rename","type":"function","leftLabel":"int","description":" "},{"snippet":"resume(${1:node}, ${2:key})${0}","displayText":"resume","type":"function","leftLabel":"bool","description":" "},{"snippet":"resume(${1:arg})${0}","displayText":"resume","type":"function","leftLabel":"","description":" "},{"snippet":"rotate(${1:degrees})${0}","displayText":"rotate","type":"function","leftLabel":"","description":" "},{"snippet":"rad2deg(${1:rad})${0}","displayText":"rad2deg","type":"function","leftLabel":"float","description":" Convert from radias to degrees. "},{"snippet":"renamed()${0}","displayText":"renamed","type":"method","leftLabel":"signal","description":"  Emitted when the node is renamed.  "},{"snippet":"request(${1:method}, ${2:url}, ${3:headers}, ${4:body})${0}","displayText":"request","type":"function","leftLabel":"int","description":" "},{"snippet":"resized()${0}","displayText":"resized","type":"method","leftLabel":"signal","description":"  Emitted when the control changed size.  "},{"snippet":"released()${0}","displayText":"released","type":"method","leftLabel":"signal","description":"   "},{"snippet":"rand_seed(${1:seed})${0}","displayText":"rand_seed","type":"function","leftLabel":"Array","description":" Random from seed, pass a seed and an array with both number and new seed is returned. "},{"snippet":"randomize()${0}","displayText":"randomize","type":"function","leftLabel":"Nil","description":" Reset the seed of the random number generator with a new, different one. "},{"snippet":"reference()${0}","displayText":"reference","type":"function","leftLabel":"","description":" Increase the internal reference counter. Use this only if you really know what you are doing. "},{"snippet":"reset_all()${0}","displayText":"reset_all","type":"function","leftLabel":"bool","description":" "},{"snippet":"rand_range(${1:from}, ${2:to})${0}","displayText":"rand_range","type":"function","leftLabel":"float","description":" Random range, any floating point value between 'from' and 'to' "},{"snippet":"remove_all()${0}","displayText":"remove_all","type":"function","leftLabel":"bool","description":" "},{"snippet":"remove_tab(${1:tab_idx})${0}","displayText":"remove_tab","type":"function","leftLabel":"","description":" "},{"snippet":"replace_by(${1:node}, ${2:keep_data})${0}","displayText":"replace_by","type":"function","leftLabel":"","description":" Replace a node in a scene by a given one. Subscriptions that pass through this node will be lost. "},{"snippet":"resume_all()${0}","displayText":"resume_all","type":"function","leftLabel":"bool","description":" "},{"snippet":"remove_item(${1:idx})${0}","displayText":"remove_item","type":"function","leftLabel":"","description":" "},{"snippet":"remove_item(${1:id})${0}","displayText":"remove_item","type":"function","leftLabel":"","description":" Remove the item. "},{"snippet":"remove_node(${1:id})${0}","displayText":"remove_node","type":"function","leftLabel":"","description":" "},{"snippet":"remove_tile(${1:id})${0}","displayText":"remove_tile","type":"function","leftLabel":"","description":" Remove a tile, by integer id. "},{"snippet":"room_create()${0}","displayText":"room_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"remove_child(${1:node})${0}","displayText":"remove_child","type":"function","leftLabel":"","description":" Remove a child [Node]. Node is NOT deleted and will have to be deleted manually. "},{"snippet":"remove_child(${1:child})${0}","displayText":"remove_child","type":"function","leftLabel":"","description":" "},{"snippet":"remove_frame(${1:idx})${0}","displayText":"remove_frame","type":"function","leftLabel":"","description":" Remove a frame "},{"snippet":"remove_point(${1:idx})${0}","displayText":"remove_point","type":"function","leftLabel":"","description":" "},{"snippet":"remove_shape(${1:shape_idx})${0}","displayText":"remove_shape","type":"function","leftLabel":"","description":" Remove the shape in the given index. "},{"snippet":"remove_track(${1:idx})${0}","displayText":"remove_track","type":"function","leftLabel":"","description":" Remove a track by specifying the track index. "},{"snippet":"release_focus()${0}","displayText":"release_focus","type":"function","leftLabel":"","description":" Give up the focus, no other control will be able to receive keyboard input. "},{"snippet":"remove_sample(${1:name})${0}","displayText":"remove_sample","type":"function","leftLabel":"","description":" Remove a sample given a specific text id. "},{"snippet":"remove_source(${1:idx})${0}","displayText":"remove_source","type":"function","leftLabel":"","description":" "},{"snippet":"regenerate_bsp()${0}","displayText":"regenerate_bsp","type":"function","leftLabel":"","description":" "},{"snippet":"remove_and_skip()${0}","displayText":"remove_and_skip","type":"function","leftLabel":"","description":" Remove a node and set all its children as childrens of the parent node (if exists). All even subscriptions that pass by the removed node will be unsubscribed. "},{"snippet":"remove_resource(${1:name})${0}","displayText":"remove_resource","type":"function","leftLabel":"","description":" Remove a resource from the preloader by text id. "},{"snippet":"rename_resource(${1:name}, ${2:newname})${0}","displayText":"rename_resource","type":"function","leftLabel":"","description":" Rename a resource inside the preloader, from a text-id to a new text-id. "},{"snippet":"room_get_bounds(${1:arg0})${0}","displayText":"room_get_bounds","type":"function","leftLabel":"Dictionary","description":" "},{"snippet":"room_set_bounds(${1:arg0}, ${2:arg1})${0}","displayText":"room_set_bounds","type":"function","leftLabel":"","description":" "},{"snippet":"recompute_caches()${0}","displayText":"recompute_caches","type":"function","leftLabel":"","description":" "},{"snippet":"regen_normalmaps()${0}","displayText":"regen_normalmaps","type":"function","leftLabel":"","description":" "},{"snippet":"remove_animation(${1:name})${0}","displayText":"remove_animation","type":"function","leftLabel":"","description":" Remove an animation from the player (by supplying the same name used to add it). "},{"snippet":"remove_exception(${1:node})${0}","displayText":"remove_exception","type":"function","leftLabel":"","description":" "},{"snippet":"rename_animation(${1:name}, ${2:newname})${0}","displayText":"rename_animation","type":"function","leftLabel":"","description":" Rename an existing animation. "},{"snippet":"resolve_hostname(${1:host})${0}","displayText":"resolve_hostname","type":"function","leftLabel":"String","description":" Resolve a given hostname, blocking. Resolved hostname is returned as an IP. "},{"snippet":"resource_changed(${1:arg0})${0}","displayText":"resource_changed","type":"function","leftLabel":"","description":" "},{"snippet":"remove_from_group(${1:group})${0}","displayText":"remove_from_group","type":"function","leftLabel":"","description":" Remove a node from a group. "},{"snippet":"remove_custom_type(${1:type})${0}","displayText":"remove_custom_type","type":"function","leftLabel":"","description":" "},{"snippet":"remove_translation(${1:arg0})${0}","displayText":"remove_translation","type":"function","leftLabel":"","description":" "},{"snippet":"request_completion(${1:keyword}, ${2:line})${0}","displayText":"request_completion","type":"method","leftLabel":"signal","description":"       "},{"snippet":"register_text_enter(${1:line_edit})${0}","displayText":"register_text_enter","type":"function","leftLabel":"","description":" Register a [LineEdit] in the dialog. When the enter key is pressed, the dialog will be accepted. "},{"snippet":"regenerate_bsp_cubic()${0}","displayText":"regenerate_bsp_cubic","type":"function","leftLabel":"","description":" "},{"snippet":"remove_exception_rid(${1:rid})${0}","displayText":"remove_exception_rid","type":"function","leftLabel":"","description":" "},{"snippet":"ray_intersects_triangle(${1:from}, ${2:dir}, ${3:a}, ${4:b}, ${5:c})${0}","displayText":"ray_intersects_triangle","type":"function","leftLabel":"","description":" "},{"snippet":"remove_and_delete_child(${1:node})${0}","displayText":"remove_and_delete_child","type":"function","leftLabel":"","description":" "},{"snippet":"read_response_body_chunk()${0}","displayText":"read_response_body_chunk","type":"function","leftLabel":"RawArray","description":" "},{"snippet":"resolve_hostname_queue_item(${1:host})${0}","displayText":"resolve_hostname_queue_item","type":"function","leftLabel":"int","description":" Create a queue item for resolving a given hostname. The queue ID is returned, or RESOLVER_INVALID_ID on error. "},{"snippet":"remove_collision_exception_with(${1:body})${0}","displayText":"remove_collision_exception_with","type":"function","leftLabel":"","description":" "}],"p":[{"snippet":"pop()${0}","displayText":"pop","type":"function","leftLabel":"","description":" "},{"snippet":"pow(${1:x}, ${2:y})${0}","displayText":"pow","type":"function","leftLabel":"float","description":" Power function, x elevate to y. "},{"snippet":"pack(${1:path})${0}","displayText":"pack","type":"function","leftLabel":"int","description":" Pack will ignore any sub-nodes not owned by given node. See [Node.set_owner]. "},{"snippet":"pack(${1:value})${0}","displayText":"pack","type":"function","leftLabel":"int","description":" "},{"snippet":"play(${1:name}, ${2:custom_blend}, ${3:custom_speed}, ${4:from_end})${0}","displayText":"play","type":"function","leftLabel":"","description":" Play a given animation by the animation name. Custom speed and blend times can be set. If custom speed is negative (-1), 'from_end' being true can play the animation backwards. "},{"snippet":"play(${1:name}, ${2:unique})${0}","displayText":"play","type":"function","leftLabel":"int","description":" Play back sample, given it's identifier \"name\". If \"unique\" is true, all othere previous samples will be stopped. The voice allocated for playback will be returned. "},{"snippet":"play(${1:sample}, ${2:voice})${0}","displayText":"play","type":"function","leftLabel":"int","description":" "},{"snippet":"play()${0}","displayText":"play","type":"function","leftLabel":"","description":" "},{"snippet":"poll()${0}","displayText":"poll","type":"function","leftLabel":"int","description":" Poll the load. If OK is returned, this means poll will have to be called again. If ERR_EOF is returned, them the load has finished and the resource can be obtained by calling [get_resource]. "},{"snippet":"post()${0}","displayText":"post","type":"function","leftLabel":"int","description":" "},{"snippet":"paste()${0}","displayText":"paste","type":"function","leftLabel":"","description":" Paste the current selection. "},{"snippet":"popup()${0}","displayText":"popup","type":"function","leftLabel":"","description":" Popup (show the control in modal form). "},{"snippet":"print(${1:what}, ${2:...})${0}","displayText":"print","type":"function","leftLabel":"Nil","description":" Print one or more arguments to strings in the best way possible to a console line. "},{"snippet":"printt(${1:what}, ${2:...})${0}","displayText":"printt","type":"function","leftLabel":"Nil","description":" Print one or more arguments to the console with a tab between each argument. "},{"snippet":"pressed()${0}","displayText":"pressed","type":"method","leftLabel":"signal","description":"  This signal is emitted every time the button is pressed or toggled.  "},{"snippet":"put_var(${1:var})${0}","displayText":"put_var","type":"function","leftLabel":"int","description":" "},{"snippet":"printerr(${1:what}, ${2:...})${0}","displayText":"printerr","type":"function","leftLabel":"Nil","description":" Print one or more arguments to strings in the best way possible to standard error line. "},{"snippet":"printraw(${1:what}, ${2:...})${0}","displayText":"printraw","type":"function","leftLabel":"Nil","description":" Print one or more arguments to strings in the best way possible to console. No newline is added at the end. "},{"snippet":"put_data(${1:data})${0}","displayText":"put_data","type":"function","leftLabel":"int","description":" Send a chunk of data through the connection, blocking if necesary until the data is done sending. This function returns an [Error] code. "},{"snippet":"pck_start(${1:pck_name}, ${2:alignment})${0}","displayText":"pck_start","type":"function","leftLabel":"int","description":" "},{"snippet":"pop_frame(${1:arg0})${0}","displayText":"pop_frame","type":"function","leftLabel":"","description":" "},{"snippet":"push_font(${1:font})${0}","displayText":"push_font","type":"function","leftLabel":"","description":" "},{"snippet":"push_list(${1:type})${0}","displayText":"push_list","type":"function","leftLabel":"","description":" "},{"snippet":"push_meta(${1:data})${0}","displayText":"push_meta","type":"function","leftLabel":"","description":" "},{"snippet":"peek_frame()${0}","displayText":"peek_frame","type":"function","leftLabel":"Image","description":" "},{"snippet":"popup_hide()${0}","displayText":"popup_hide","type":"method","leftLabel":"signal","description":"   "},{"snippet":"print_tree()${0}","displayText":"print_tree","type":"function","leftLabel":"","description":" Print the screne to stdout. Used mainly for debugging purposes. "},{"snippet":"push_align(${1:align})${0}","displayText":"push_align","type":"function","leftLabel":"","description":" "},{"snippet":"push_color(${1:color})${0}","displayText":"push_color","type":"function","leftLabel":"","description":" "},{"snippet":"post_import(${1:scene})${0}","displayText":"post_import","type":"function","leftLabel":"","description":" "},{"snippet":"pre_process(${1:time})${0}","displayText":"pre_process","type":"function","leftLabel":"","description":" "},{"snippet":"print_stack()${0}","displayText":"print_stack","type":"function","leftLabel":"Nil","description":" Print a stack track at code location, only works when running with debugger turned on. "},{"snippet":"push_indent(${1:level})${0}","displayText":"push_indent","type":"function","leftLabel":"","description":" "},{"snippet":"parse_bbcode(${1:bbcode})${0}","displayText":"parse_bbcode","type":"function","leftLabel":"int","description":" "},{"snippet":"portal_create()${0}","displayText":"portal_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"popup_centered(${1:size})${0}","displayText":"popup_centered","type":"function","leftLabel":"","description":" Popup (show the control in modal form) in the center of the screen, at the curent size, or at a size determined by \"size\". "},{"snippet":"push_underline()${0}","displayText":"push_underline","type":"function","leftLabel":"","description":" "},{"snippet":"particles_create()${0}","displayText":"particles_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"pin_joint_create(${1:anchor}, ${2:body_a}, ${3:body_b})${0}","displayText":"pin_joint_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"portal_get_shape(${1:arg0})${0}","displayText":"portal_get_shape","type":"function","leftLabel":"Vector2Array","description":" "},{"snippet":"portal_set_shape(${1:arg0}, ${2:arg1})${0}","displayText":"portal_set_shape","type":"function","leftLabel":"","description":" "},{"snippet":"project_position(${1:screen_point})${0}","displayText":"project_position","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"put_partial_data(${1:data})${0}","displayText":"put_partial_data","type":"function","leftLabel":"Array","description":" Send a chunk of data through the connection, if all the data could not be sent at once, only part of it will. This function returns two values, an [Error] code and an integer, describing how much data was actually sent. "},{"snippet":"portal_is_enabled(${1:arg0})${0}","displayText":"portal_is_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"premultiply_alpha()${0}","displayText":"premultiply_alpha","type":"function","leftLabel":"","description":" "},{"snippet":"print_stray_nodes()${0}","displayText":"print_stray_nodes","type":"function","leftLabel":"","description":" "},{"snippet":"portal_set_enabled(${1:arg0}, ${2:arg1})${0}","displayText":"portal_set_enabled","type":"function","leftLabel":"","description":" "},{"snippet":"project_ray_normal(${1:screen_point})${0}","displayText":"project_ray_normal","type":"function","leftLabel":"Vector3","description":" Return a normal vector in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin,normal) for object intersection or picking. "},{"snippet":"project_ray_origin(${1:screen_point})${0}","displayText":"project_ray_origin","type":"function","leftLabel":"Vector3","description":" Return a 3D position in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin,normal) for object intersection or picking. "},{"snippet":"pin_joint_get_param(${1:joint}, ${2:param})${0}","displayText":"pin_joint_get_param","type":"function","leftLabel":"float","description":" "},{"snippet":"pin_joint_set_param(${1:joint}, ${2:param}, ${3:value})${0}","displayText":"pin_joint_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"print_all_resources(${1:tofile})${0}","displayText":"print_all_resources","type":"function","leftLabel":"","description":" "},{"snippet":"particles_get_amount(${1:arg0})${0}","displayText":"particles_get_amount","type":"function","leftLabel":"int","description":" "},{"snippet":"particles_set_amount(${1:arg0}, ${2:arg1})${0}","displayText":"particles_set_amount","type":"function","leftLabel":"","description":" "},{"snippet":"popup_centered_ratio(${1:ratio})${0}","displayText":"popup_centered_ratio","type":"function","leftLabel":"","description":" Popup (show the control in modal form) in the center of the screen, scalled at a ratio of size of the screen. "},{"snippet":"particles_is_emitting(${1:arg0})${0}","displayText":"particles_is_emitting","type":"function","leftLabel":"bool","description":" "},{"snippet":"pin_joint_get_local_A(${1:joint})${0}","displayText":"pin_joint_get_local_A","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"pin_joint_get_local_B(${1:joint})${0}","displayText":"pin_joint_get_local_B","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"pin_joint_set_local_A(${1:joint}, ${2:local_A})${0}","displayText":"pin_joint_set_local_A","type":"function","leftLabel":"","description":" "},{"snippet":"pin_joint_set_local_B(${1:joint}, ${2:local_B})${0}","displayText":"pin_joint_set_local_B","type":"function","leftLabel":"","description":" "},{"snippet":"particles_get_variable(${1:arg0}, ${2:arg1})${0}","displayText":"particles_get_variable","type":"function","leftLabel":"float","description":" "},{"snippet":"particles_set_emitting(${1:arg0}, ${2:arg1})${0}","displayText":"particles_set_emitting","type":"function","leftLabel":"","description":" "},{"snippet":"particles_set_material(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"particles_set_material","type":"function","leftLabel":"","description":" "},{"snippet":"particles_set_variable(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"particles_set_variable","type":"function","leftLabel":"","description":" "},{"snippet":"popup_centered_minsize(${1:minsize})${0}","displayText":"popup_centered_minsize","type":"function","leftLabel":"","description":" "},{"snippet":"print_resources_in_use(${1:short})${0}","displayText":"print_resources_in_use","type":"function","leftLabel":"","description":" "},{"snippet":"propagate_notification(${1:what})${0}","displayText":"propagate_notification","type":"function","leftLabel":"","description":" Notify the current node and all its chldren recursively by calling notification() in all of them. "},{"snippet":"print_resources_by_type(${1:arg0})${0}","displayText":"print_resources_by_type","type":"function","leftLabel":"","description":" "},{"snippet":"particles_get_attractors(${1:arg0})${0}","displayText":"particles_get_attractors","type":"function","leftLabel":"int","description":" "},{"snippet":"particles_get_randomness(${1:arg0}, ${2:arg1})${0}","displayText":"particles_get_randomness","type":"function","leftLabel":"float","description":" "},{"snippet":"particles_set_attractors(${1:arg0}, ${2:arg1})${0}","displayText":"particles_set_attractors","type":"function","leftLabel":"","description":" "},{"snippet":"particles_set_randomness(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"particles_set_randomness","type":"function","leftLabel":"","description":" "},{"snippet":"project_local_ray_normal(${1:screen_point})${0}","displayText":"project_local_ray_normal","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"portal_get_disabled_color(${1:arg0})${0}","displayText":"portal_get_disabled_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"portal_set_disabled_color(${1:arg0}, ${2:arg1})${0}","displayText":"portal_set_disabled_color","type":"function","leftLabel":"","description":" "},{"snippet":"particles_get_color_phases(${1:arg0})${0}","displayText":"particles_get_color_phases","type":"function","leftLabel":"int","description":" "},{"snippet":"particles_set_color_phases(${1:arg0}, ${2:arg1})${0}","displayText":"particles_set_color_phases","type":"function","leftLabel":"","description":" "},{"snippet":"print_all_textures_by_size()${0}","displayText":"print_all_textures_by_size","type":"function","leftLabel":"","description":" "},{"snippet":"particles_get_attractor_pos(${1:arg0}, ${2:arg1})${0}","displayText":"particles_get_attractor_pos","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"particles_set_attractor_pos(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"particles_set_attractor_pos","type":"function","leftLabel":"","description":" "},{"snippet":"portal_get_disable_distance(${1:arg0})${0}","displayText":"portal_get_disable_distance","type":"function","leftLabel":"float","description":" "},{"snippet":"portal_set_disable_distance(${1:arg0}, ${2:arg1})${0}","displayText":"portal_set_disable_distance","type":"function","leftLabel":"","description":" "},{"snippet":"property_list_changed_notify()${0}","displayText":"property_list_changed_notify","type":"function","leftLabel":"","description":" "},{"snippet":"particles_get_color_phase_pos(${1:arg0}, ${2:arg1})${0}","displayText":"particles_get_color_phase_pos","type":"function","leftLabel":"float","description":" "},{"snippet":"particles_get_visibility_aabb(${1:arg0})${0}","displayText":"particles_get_visibility_aabb","type":"function","leftLabel":"AABB","description":" "},{"snippet":"particles_set_color_phase_pos(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"particles_set_color_phase_pos","type":"function","leftLabel":"","description":" "},{"snippet":"particles_set_visibility_aabb(${1:arg0}, ${2:arg1})${0}","displayText":"particles_set_visibility_aabb","type":"function","leftLabel":"","description":" "},{"snippet":"particles_get_color_phase_color(${1:arg0}, ${2:arg1})${0}","displayText":"particles_get_color_phase_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"particles_set_color_phase_color(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"particles_set_color_phase_color","type":"function","leftLabel":"","description":" "},{"snippet":"particles_get_attractor_strength(${1:arg0}, ${2:arg1})${0}","displayText":"particles_get_attractor_strength","type":"function","leftLabel":"float","description":" "},{"snippet":"particles_set_attractor_strength(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"particles_set_attractor_strength","type":"function","leftLabel":"","description":" "},{"snippet":"particles_has_height_from_velocity(${1:arg0})${0}","displayText":"particles_has_height_from_velocity","type":"function","leftLabel":"bool","description":" "},{"snippet":"particles_set_height_from_velocity(${1:arg0}, ${2:arg1})${0}","displayText":"particles_set_height_from_velocity","type":"function","leftLabel":"","description":" "}],"l":[{"snippet":"log(${1:s})${0}","displayText":"log","type":"function","leftLabel":"float","description":" Natural logarithm. "},{"snippet":"lerp(${1:from}, ${2:to}, ${3:weight})${0}","displayText":"lerp","type":"function","leftLabel":"float","description":" Linear interpolates between two values by a normalized value. "},{"snippet":"load(${1:path})${0}","displayText":"load","type":"function","leftLabel":"int","description":" "},{"snippet":"load(${1:path}, ${2:type_hint})${0}","displayText":"load","type":"function","leftLabel":"Resource","description":" Load a resource. Optionally a hint can be given for the resource type to load. "},{"snippet":"lock()${0}","displayText":"lock","type":"function","leftLabel":"","description":" "},{"snippet":"listen(${1:port}, ${2:recv_buf_size})${0}","displayText":"listen","type":"function","leftLabel":"int","description":" "},{"snippet":"listen(${1:port}, ${2:accepted_hosts})${0}","displayText":"listen","type":"function","leftLabel":"int","description":" Listen on a port, alternatively give a white-list of accepted hosts. "},{"snippet":"look_at(${1:target}, ${2:up})${0}","displayText":"look_at","type":"function","leftLabel":"","description":" "},{"snippet":"linear2db(${1:nrg})${0}","displayText":"linear2db","type":"function","leftLabel":"float","description":" Convert from linear energy to decibels (audio). "},{"snippet":"light_create(${1:arg0})${0}","displayText":"light_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"list_dir_end()${0}","displayText":"list_dir_end","type":"function","leftLabel":"","description":" "},{"snippet":"light_get_var(${1:arg0}, ${2:arg1})${0}","displayText":"light_get_var","type":"function","leftLabel":"float","description":" "},{"snippet":"light_set_var(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"light_set_var","type":"function","leftLabel":"","description":" "},{"snippet":"localize_path(${1:path})${0}","displayText":"localize_path","type":"function","leftLabel":"String","description":" Convert a path to a localized path (res:// path). "},{"snippet":"light_get_type(${1:arg0})${0}","displayText":"light_get_type","type":"function","leftLabel":"int","description":" "},{"snippet":"list_dir_begin()${0}","displayText":"list_dir_begin","type":"function","leftLabel":"bool","description":" "},{"snippet":"light_get_color(${1:arg0}, ${2:arg1})${0}","displayText":"light_get_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"light_set_color(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"light_set_color","type":"function","leftLabel":"","description":" "},{"snippet":"light_has_shadow(${1:arg0})${0}","displayText":"light_has_shadow","type":"function","leftLabel":"bool","description":" "},{"snippet":"light_set_shadow(${1:arg0}, ${2:arg1})${0}","displayText":"light_set_shadow","type":"function","leftLabel":"","description":" "},{"snippet":"load_interactive(${1:path}, ${2:type_hint})${0}","displayText":"load_interactive","type":"function","leftLabel":"ResourceInteractiveLoader","description":" Load a resource interactively, the returned object allows to load with high granularity. "},{"snippet":"look_at_from_pos(${1:pos}, ${2:target}, ${3:up})${0}","displayText":"look_at_from_pos","type":"function","leftLabel":"","description":" "},{"snippet":"load_from_globals()${0}","displayText":"load_from_globals","type":"function","leftLabel":"","description":" "},{"snippet":"load_resource_pack(${1:arg0})${0}","displayText":"load_resource_pack","type":"function","leftLabel":"bool","description":" "},{"snippet":"light_get_projector(${1:arg0})${0}","displayText":"light_get_projector","type":"function","leftLabel":"RID","description":" "},{"snippet":"light_is_volumetric(${1:arg0})${0}","displayText":"light_is_volumetric","type":"function","leftLabel":"bool","description":" "},{"snippet":"light_set_projector(${1:arg0}, ${2:arg1})${0}","displayText":"light_set_projector","type":"function","leftLabel":"","description":" "},{"snippet":"light_set_volumetric(${1:arg0}, ${2:arg1})${0}","displayText":"light_set_volumetric","type":"function","leftLabel":"","description":" "}],"e":[{"snippet":"end()${0}","displayText":"end","type":"function","leftLabel":"","description":" "},{"snippet":"exp(${1:s})${0}","displayText":"exp","type":"function","leftLabel":"float","description":" Exponential logarithm. "},{"snippet":"ease(${1:s}, ${2:curve})${0}","displayText":"ease","type":"function","leftLabel":"float","description":" Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in. "},{"snippet":"edit(${1:object})${0}","displayText":"edit","type":"function","leftLabel":"","description":" "},{"snippet":"execute(${1:path}, ${2:arguments}, ${3:blocking}, ${4:output})${0}","displayText":"execute","type":"function","leftLabel":"int","description":" Execute the binary file in given path, optionally blocking until it returns. A process ID is returned. "},{"snippet":"edit_get()${0}","displayText":"edit_get","type":"function","leftLabel":"","description":" "},{"snippet":"exit_tree()${0}","displayText":"exit_tree","type":"method","leftLabel":"signal","description":"   "},{"snippet":"enter_tree()${0}","displayText":"enter_tree","type":"method","leftLabel":"signal","description":"   "},{"snippet":"erase_area(${1:area})${0}","displayText":"erase_area","type":"function","leftLabel":"","description":" "},{"snippet":"edit_rotate(${1:degrees})${0}","displayText":"edit_rotate","type":"function","leftLabel":"","description":" Used for editing, handle rotation. "},{"snippet":"emit_signal(${1:signal}, ${2:arg0}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4})${0}","displayText":"emit_signal","type":"function","leftLabel":"","description":" Emit a signal. Arguments are passed in an array. "},{"snippet":"eof_reached()${0}","displayText":"eof_reached","type":"function","leftLabel":"bool","description":" "},{"snippet":"erase_remap(${1:path})${0}","displayText":"erase_remap","type":"function","leftLabel":"","description":" Erase a remap. "},{"snippet":"exit_camera(${1:camera})${0}","displayText":"exit_camera","type":"method","leftLabel":"signal","description":"     "},{"snippet":"exit_screen()${0}","displayText":"exit_screen","type":"method","leftLabel":"signal","description":"   "},{"snippet":"enter_camera(${1:camera})${0}","displayText":"enter_camera","type":"method","leftLabel":"signal","description":"     "},{"snippet":"enter_screen()${0}","displayText":"enter_screen","type":"method","leftLabel":"signal","description":"   "},{"snippet":"erase_action(${1:action})${0}","displayText":"erase_action","type":"function","leftLabel":"","description":" "},{"snippet":"erase_button(${1:button})${0}","displayText":"erase_button","type":"function","leftLabel":"","description":" Remove a button in the array, by index. "},{"snippet":"erase_button(${1:column}, ${2:button_idx})${0}","displayText":"erase_button","type":"function","leftLabel":"","description":" "},{"snippet":"edit_set_rect(${1:rect})${0}","displayText":"edit_set_rect","type":"function","leftLabel":"","description":" "},{"snippet":"erase_message(${1:src_message})${0}","displayText":"erase_message","type":"function","leftLabel":"","description":" Erase a message. "},{"snippet":"exit_viewport(${1:viewport})${0}","displayText":"exit_viewport","type":"method","leftLabel":"signal","description":"     "},{"snippet":"edit_set_pivot(${1:arg0})${0}","displayText":"edit_set_pivot","type":"function","leftLabel":"","description":" "},{"snippet":"edit_set_state(${1:state})${0}","displayText":"edit_set_state","type":"function","leftLabel":"","description":" Used for editing, returns an opaque value represeting the transform state. "},{"snippet":"enter_viewport(${1:viewport})${0}","displayText":"enter_viewport","type":"method","leftLabel":"signal","description":"     "},{"snippet":"erase_lightmap(${1:id})${0}","displayText":"erase_lightmap","type":"function","leftLabel":"","description":" "},{"snippet":"event_is_action(${1:event}, ${2:action})${0}","displayText":"event_is_action","type":"function","leftLabel":"bool","description":" "},{"snippet":"erase_resolve_item(${1:id})${0}","displayText":"erase_resolve_item","type":"function","leftLabel":"","description":" Erase a queue ID, removing it from the queue if needed. This should be used after a queue is completed to free it and enable more queries to happen. "},{"snippet":"ensure_cursor_is_visible()${0}","displayText":"ensure_cursor_is_visible","type":"function","leftLabel":"","description":" "}],"i":[{"snippet":"index()${0}","displayText":"index","type":"function","leftLabel":"","description":" "},{"snippet":"input(${1:local_event})${0}","displayText":"input","type":"function","leftLabel":"","description":" "},{"snippet":"isinf(${1:s})${0}","displayText":"isinf","type":"function","leftLabel":"float","description":" Return true if the float is infinite. "},{"snippet":"isnan(${1:s})${0}","displayText":"isnan","type":"function","leftLabel":"float","description":" Return true if the float is not a number. "},{"snippet":"import(${1:path}, ${2:from})${0}","displayText":"import","type":"function","leftLabel":"int","description":" "},{"snippet":"is_flat()${0}","displayText":"is_flat","type":"function","leftLabel":"bool","description":" Return the state of the [i]flat[/i] property (see [method set_flat]) "},{"snippet":"is_open()${0}","displayText":"is_open","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_type(${1:type})${0}","displayText":"is_type","type":"function","leftLabel":"bool","description":" Check the type of the obeject against a string (including inheritance). "},{"snippet":"init_ref()${0}","displayText":"init_ref","type":"function","leftLabel":"bool","description":" "},{"snippet":"instance(${1:arg0})${0}","displayText":"instance","type":"function","leftLabel":"Node","description":" "},{"snippet":"is_empty()${0}","displayText":"is_empty","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_valid()${0}","displayText":"is_valid","type":"function","leftLabel":"bool","description":" "},{"snippet":"inst2dict(${1:inst})${0}","displayText":"inst2dict","type":"function","leftLabel":"Dictionary","description":" Convert a script class instance to a dictionary (useful for serializing). "},{"snippet":"is_active()${0}","displayText":"is_active","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_hidden()${0}","displayText":"is_hidden","type":"function","leftLabel":"bool","description":" Return true if this CanvasItem is hidden. Note that the CanvasItem may not be visible, but as long as it's not hidden ([method hide] called) the function will return false. "},{"snippet":"is_paused()${0}","displayText":"is_paused","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_region()${0}","displayText":"is_region","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_repeat()${0}","displayText":"is_repeat","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_secret()${0}","displayText":"is_secret","type":"function","leftLabel":"bool","description":" Return the [i]secret[/i] status of the [LineEdit] (see [method set_secret]). "},{"snippet":"is_stereo()${0}","displayText":"is_stereo","type":"function","leftLabel":"bool","description":" Return true if the sample was created stereo. "},{"snippet":"is_window()${0}","displayText":"is_window","type":"function","leftLabel":"bool","description":" Return wether this control is a [i]window[/i]. Controls are considered windows when their parent [Node] is not a Control. "},{"snippet":"invalidate()${0}","displayText":"invalidate","type":"function","leftLabel":"","description":" "},{"snippet":"is_checked(${1:column})${0}","displayText":"is_checked","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_current()${0}","displayText":"is_current","type":"function","leftLabel":"bool","description":" Return wether the Camera is the current one in the [Viewport], or plans to become current (if outside the scene tree). "},{"snippet":"is_enabled()${0}","displayText":"is_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_hovered()${0}","displayText":"is_hovered","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_playing()${0}","displayText":"is_playing","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_pressed()${0}","displayText":"is_pressed","type":"function","leftLabel":"bool","description":" Return when the button is pressed (only if toggle_mode is active). "},{"snippet":"is_visible()${0}","displayText":"is_visible","type":"function","leftLabel":"bool","description":" "},{"snippet":"input_event()${0}","displayText":"input_event","type":"method","leftLabel":"signal","description":"  Emitted when an input event is received. Connecting in realtime is recommended for accepting the events.  "},{"snippet":"input_event(${1:camera}, ${2:event}, ${3:click_pos}, ${4:click_normal}, ${5:shape_idx})${0}","displayText":"input_event","type":"method","leftLabel":"signal","description":"             "},{"snippet":"input_event(${1:arg0})${0}","displayText":"input_event","type":"function","leftLabel":"","description":" "},{"snippet":"interpolate(${1:idx}, ${2:t})${0}","displayText":"interpolate","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"is_centered()${0}","displayText":"is_centered","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_disabled()${0}","displayText":"is_disabled","type":"function","leftLabel":"bool","description":" Return wether the button is in disabled state (see [method set_disabled]). "},{"snippet":"is_editable(${1:column})${0}","displayText":"is_editable","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_editable()${0}","displayText":"is_editable","type":"function","leftLabel":"bool","description":" Return the [i]editable[/i] status of the [LineEdit] (see [method set_editable]). "},{"snippet":"is_emitting()${0}","displayText":"is_emitting","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_in_group(${1:group})${0}","displayText":"is_in_group","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_one_shot()${0}","displayText":"is_one_shot","type":"function","leftLabel":"bool","description":" Return true if is set as one-shot. If true, timer will stop after timeout, otherwise it will automatically restart. "},{"snippet":"is_rotating()${0}","displayText":"is_rotating","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_selected(${1:column})${0}","displayText":"is_selected","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_sleeping()${0}","displayText":"is_sleeping","type":"function","leftLabel":"bool","description":" "},{"snippet":"item_edited()${0}","displayText":"item_edited","type":"method","leftLabel":"signal","description":"   "},{"snippet":"instance_has(${1:base_object})${0}","displayText":"instance_has","type":"function","leftLabel":"bool","description":" Return true if a given object uses an instance of this script. "},{"snippet":"interpolatef(${1:fofs})${0}","displayText":"interpolatef","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"is_collapsed()${0}","displayText":"is_collapsed","type":"function","leftLabel":"bool","description":" Return if the split is collapsed. "},{"snippet":"is_colliding()${0}","displayText":"is_colliding","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_connected(${1:id}, ${2:dst_id}, ${3:dst_input_idx})${0}","displayText":"is_connected","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_connected()${0}","displayText":"is_connected","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_connected(${1:signal}, ${2:target}, ${3:method})${0}","displayText":"is_connected","type":"function","leftLabel":"bool","description":" Return true if a connection exists for a given signal and target/method. "},{"snippet":"is_exclusive()${0}","displayText":"is_exclusive","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_flipped_h()${0}","displayText":"is_flipped_h","type":"function","leftLabel":"bool","description":" Return true if the sprite is flipped horizontally. "},{"snippet":"is_flipped_v()${0}","displayText":"is_flipped_v","type":"function","leftLabel":"bool","description":" Return true if the sprite is flipped vertically. "},{"snippet":"is_listening()${0}","displayText":"is_listening","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_on_screen()${0}","displayText":"is_on_screen","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_uppercase()${0}","displayText":"is_uppercase","type":"function","leftLabel":"bool","description":" "},{"snippet":"item_pressed(${1:ID})${0}","displayText":"item_pressed","type":"method","leftLabel":"signal","description":"    This even is emitted when an item is pressed or its accelerator is activated. The id of the item is returned if it exists, else the index.  "},{"snippet":"import_dialog(${1:from})${0}","displayText":"import_dialog","type":"function","leftLabel":"","description":" "},{"snippet":"intersect_ray(${1:from}, ${2:to}, ${3:exclude}, ${4:layer_mask}, ${5:type_mask})${0}","displayText":"intersect_ray","type":"function","leftLabel":"Dictionary","description":" "},{"snippet":"is_fx_enabled(${1:effect})${0}","displayText":"is_fx_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_persisting(${1:name})${0}","displayText":"is_persisting","type":"function","leftLabel":"bool","description":" If returns true, this value can be saved to the configuration file. This is useful for editors. "},{"snippet":"is_processing()${0}","displayText":"is_processing","type":"function","leftLabel":"bool","description":" Return whether processing is enabled in the current node (see [method set_process]). "},{"snippet":"is_selectable(${1:column})${0}","displayText":"is_selectable","type":"function","leftLabel":"bool","description":" "},{"snippet":"item_selected()${0}","displayText":"item_selected","type":"method","leftLabel":"signal","description":"   "},{"snippet":"item_selected(${1:ID})${0}","displayText":"item_selected","type":"method","leftLabel":"signal","description":"    This signal is emitted when the current item was changed by the user. ID of the item selected is passed as argument (if no IDs were added, ID will be just the item index).  "},{"snippet":"is_a_parent_of(${1:node})${0}","displayText":"is_a_parent_of","type":"function","leftLabel":"bool","description":" Return [i]true[/i] if the \"node\" argument is a direct or indirect child of the current node, otherwise return [i]false[/i]. "},{"snippet":"is_debug_build()${0}","displayText":"is_debug_build","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_editor_hint()${0}","displayText":"is_editor_hint","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_editor_only()${0}","displayText":"is_editor_only","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_inside_tree()${0}","displayText":"is_inside_tree","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_key_pressed(${1:scancode})${0}","displayText":"is_key_pressed","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_toggle_mode()${0}","displayText":"is_toggle_mode","type":"function","leftLabel":"bool","description":" Return the toggle_mode property (see [method set_toggle_mode]). "},{"snippet":"is_using_alpha()${0}","displayText":"is_using_alpha","type":"function","leftLabel":"bool","description":" "},{"snippet":"item_activated()${0}","displayText":"item_activated","type":"method","leftLabel":"signal","description":"   "},{"snippet":"item_collapsed(${1:item})${0}","displayText":"item_collapsed","type":"method","leftLabel":"signal","description":"     "},{"snippet":"instance_create()${0}","displayText":"instance_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"intersect_shape(${1:shape}, ${2:max_results})${0}","displayText":"intersect_shape","type":"function","leftLabel":"Array","description":" "},{"snippet":"is_greater_than(${1:node})${0}","displayText":"is_greater_than","type":"function","leftLabel":"bool","description":" Return [i]true[/i] if \"node\" occurs later in the scene hierarchy than the current node, otherwise return [i]false[/i]. "},{"snippet":"is_item_checked(${1:idx})${0}","displayText":"is_item_checked","type":"function","leftLabel":"bool","description":" Return the checkstate status of the item at index \"idx\". "},{"snippet":"is_point_inside(${1:point})${0}","displayText":"is_point_inside","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_ray_pickable()${0}","displayText":"is_ray_pickable","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_sort_enabled()${0}","displayText":"is_sort_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_voice_active(${1:voice})${0}","displayText":"is_voice_active","type":"function","leftLabel":"bool","description":" "},{"snippet":"integrate_forces()${0}","displayText":"integrate_forces","type":"function","leftLabel":"","description":" "},{"snippet":"is_able_to_sleep()${0}","displayText":"is_able_to_sleep","type":"function","leftLabel":"bool","description":" Return true if the body has the ability to fall asleep when not moving. See [set_can_sleep]. "},{"snippet":"is_editing_alpha()${0}","displayText":"is_editing_alpha","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_item_disabled(${1:idx})${0}","displayText":"is_item_disabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_scroll_active()${0}","displayText":"is_scroll_active","type":"function","leftLabel":"bool","description":" "},{"snippet":"instance_get_base(${1:arg0})${0}","displayText":"instance_get_base","type":"function","leftLabel":"RID","description":" "},{"snippet":"instance_get_room(${1:arg0})${0}","displayText":"instance_get_room","type":"function","leftLabel":"RID","description":" "},{"snippet":"instance_set_room(${1:arg0}, ${2:arg1})${0}","displayText":"instance_set_room","type":"function","leftLabel":"","description":" "},{"snippet":"interpolate_baked(${1:offset}, ${2:cubic})${0}","displayText":"interpolate_baked","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"is_action_pressed(${1:action})${0}","displayText":"is_action_pressed","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_audio_listener()${0}","displayText":"is_audio_listener","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_baking_enabled()${0}","displayText":"is_baking_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_cell_x_flipped(${1:x}, ${2:y})${0}","displayText":"is_cell_x_flipped","type":"function","leftLabel":"bool","description":" Return if a given cell is flipped in x axis. "},{"snippet":"is_cell_y_flipped(${1:x}, ${2:y})${0}","displayText":"is_cell_y_flipped","type":"function","leftLabel":"bool","description":" Return if a given cell is flipped in y axis. "},{"snippet":"is_h_drag_enabled()${0}","displayText":"is_h_drag_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_ignoring_mouse()${0}","displayText":"is_ignoring_mouse","type":"function","leftLabel":"bool","description":" Return if the control is ignoring mouse events (even touchpad events send mouse events). "},{"snippet":"is_item_checkable(${1:idx})${0}","displayText":"is_item_checkable","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_item_separator(${1:idx})${0}","displayText":"is_item_separator","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_stdout_verbose()${0}","displayText":"is_stdout_verbose","type":"function","leftLabel":"bool","description":" Return true if the engine was executed with -v (verbose stdout). "},{"snippet":"is_stopping_mouse()${0}","displayText":"is_stopping_mouse","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_unit_value_exp()${0}","displayText":"is_unit_value_exp","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_using_top_left()${0}","displayText":"is_using_top_left","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_v_drag_enabled()${0}","displayText":"is_v_drag_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"item_rect_changed()${0}","displayText":"item_rect_changed","type":"method","leftLabel":"signal","description":"  Emitted when the intem rect has changed.  "},{"snippet":"instances_cull_ray(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"instances_cull_ray","type":"function","leftLabel":"Array","description":" "},{"snippet":"interpolate_method(${1:node}, ${2:method}, ${3:initial_val}, ${4:final_val}, ${5:times_in_sec}, ${6:trans_type}, ${7:ease_type}, ${8:delay})${0}","displayText":"interpolate_method","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_dragger_visible()${0}","displayText":"is_dragger_visible","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_enabler_enabled(${1:enabler})${0}","displayText":"is_enabler_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_gravity_a_point()${0}","displayText":"is_gravity_a_point","type":"function","leftLabel":"bool","description":" Return if gravity is a point. When overriding space parameters, areas can have a center of gravity as a point. "},{"snippet":"is_meta_underlined()${0}","displayText":"is_meta_underlined","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_percent_visible()${0}","displayText":"is_percent_visible","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_set_as_toplevel()${0}","displayText":"is_set_as_toplevel","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_using_own_world()${0}","displayText":"is_using_own_world","type":"function","leftLabel":"bool","description":" "},{"snippet":"instances_cull_aabb(${1:arg0}, ${2:arg1})${0}","displayText":"instances_cull_aabb","type":"function","leftLabel":"Array","description":" "},{"snippet":"is_blocking_signals()${0}","displayText":"is_blocking_signals","type":"function","leftLabel":"bool","description":" Return true if signal emission blocking is enabled. "},{"snippet":"is_fixed_processing()${0}","displayText":"is_fixed_processing","type":"function","leftLabel":"bool","description":" Return true if fixed processing is enabled (see [method set_fixed_process]). "},{"snippet":"is_h_scroll_enabled()${0}","displayText":"is_h_scroll_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_processing_input()${0}","displayText":"is_processing_input","type":"function","leftLabel":"bool","description":" Return true if the node is processing input (see [method set_process_input]). "},{"snippet":"is_response_chunked()${0}","displayText":"is_response_chunked","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_scroll_following()${0}","displayText":"is_scroll_following","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_selection_active()${0}","displayText":"is_selection_active","type":"function","leftLabel":"bool","description":" Return true if the selection is active. "},{"snippet":"is_used_as_steering()${0}","displayText":"is_used_as_steering","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_used_as_traction()${0}","displayText":"is_used_as_traction","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_v_scroll_enabled()${0}","displayText":"is_v_scroll_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"instance_is_exterior(${1:arg0})${0}","displayText":"instance_is_exterior","type":"function","leftLabel":"bool","description":" "},{"snippet":"interpolate_callback(${1:node}, ${2:callback}, ${3:times_in_sec}, ${4:args})${0}","displayText":"interpolate_callback","type":"function","leftLabel":"bool","description":" "},{"snippet":"interpolate_property(${1:node}, ${2:property}, ${3:initial_val}, ${4:final_val}, ${5:times_in_sec}, ${6:trans_type}, ${7:ease_type}, ${8:delay})${0}","displayText":"interpolate_property","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_audio_listener_2d()${0}","displayText":"is_audio_listener_2d","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_selection_enabled()${0}","displayText":"is_selection_enabled","type":"function","leftLabel":"bool","description":" Return true if selecting the text inside this richtext is allowed. "},{"snippet":"is_using_baked_light()${0}","displayText":"is_using_baked_light","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_using_color_array()${0}","displayText":"is_using_color_array","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_using_local_space()${0}","displayText":"is_using_local_space","type":"function","leftLabel":"bool","description":" "},{"snippet":"insert_text_at_cursor(${1:text})${0}","displayText":"insert_text_at_cursor","type":"function","leftLabel":"","description":" Insert a given text at the cursor position. "},{"snippet":"instance_get_skeleton(${1:arg0})${0}","displayText":"instance_get_skeleton","type":"function","leftLabel":"RID","description":" "},{"snippet":"instance_set_exterior(${1:arg0}, ${2:arg1})${0}","displayText":"instance_set_exterior","type":"function","leftLabel":"","description":" "},{"snippet":"instances_cull_convex(${1:arg0}, ${2:arg1})${0}","displayText":"instances_cull_convex","type":"function","leftLabel":"Array","description":" "},{"snippet":"is_joy_button_pressed(${1:device}, ${2:button})${0}","displayText":"is_joy_button_pressed","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_monitoring_enabled()${0}","displayText":"is_monitoring_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"instance_get_base_aabb(${1:arg0})${0}","displayText":"instance_get_base_aabb","type":"function","leftLabel":"RID","description":" "},{"snippet":"instance_get_transform(${1:arg0})${0}","displayText":"instance_get_transform","type":"function","leftLabel":"Transform","description":" "},{"snippet":"instance_set_transform(${1:arg0}, ${2:arg1})${0}","displayText":"instance_set_transform","type":"function","leftLabel":"","description":" "},{"snippet":"is_connection_available()${0}","displayText":"is_connection_available","type":"function","leftLabel":"bool","description":" Return true if a connection is available for taking. "},{"snippet":"is_mouse_button_pressed(${1:button})${0}","displayText":"is_mouse_button_pressed","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_passby_press_enabled()${0}","displayText":"is_passby_press_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_set_as_render_target()${0}","displayText":"is_set_as_render_target","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_shape_set_as_trigger(${1:shape_idx})${0}","displayText":"is_shape_set_as_trigger","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_simulating_acoustics()${0}","displayText":"is_simulating_acoustics","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_video_mode_resizable(${1:screen})${0}","displayText":"is_video_mode_resizable","type":"function","leftLabel":"bool","description":" Return true if the window is resizable. "},{"snippet":"instance_attach_skeleton(${1:arg0}, ${2:arg1})${0}","displayText":"instance_attach_skeleton","type":"function","leftLabel":"","description":" "},{"snippet":"is_blocking_mode_enabled()${0}","displayText":"is_blocking_mode_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_interpolation_enabled()${0}","displayText":"is_interpolation_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_size_override_enabled()${0}","displayText":"is_size_override_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_video_mode_fullscreen(${1:screen})${0}","displayText":"is_video_mode_fullscreen","type":"function","leftLabel":"bool","description":" Return true if the current video mode is fullscreen. "},{"snippet":"is_contact_monitor_enabled()${0}","displayText":"is_contact_monitor_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_syntax_coloring_enabled()${0}","displayText":"is_syntax_coloring_enabled","type":"function","leftLabel":"bool","description":" Return true if the syntax coloring is enabled. "},{"snippet":"is_using_custom_integrator()${0}","displayText":"is_using_custom_integrator","type":"function","leftLabel":"bool","description":" Return true if the body is not doing any built-in force integration. "},{"snippet":"is_using_local_coordinates()${0}","displayText":"is_using_local_coordinates","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_draw_behind_parent_enabled()${0}","displayText":"is_draw_behind_parent_enabled","type":"function","leftLabel":"bool","description":" Return whether the item is drawn behind its parent. "},{"snippet":"is_processing_unhandled_input()${0}","displayText":"is_processing_unhandled_input","type":"function","leftLabel":"bool","description":" Return true if the node is processing unhandled input (see [method set_process_unhandled_input]). "},{"snippet":"is_in_low_processor_usage_mode()${0}","displayText":"is_in_low_processor_usage_mode","type":"function","leftLabel":"bool","description":" Return true if low cpu usage mode is enabled. "},{"snippet":"instance_get_object_instance_ID(${1:arg0})${0}","displayText":"instance_get_object_instance_ID","type":"function","leftLabel":"int","description":" "},{"snippet":"is_forcing_params_to_all_sources()${0}","displayText":"is_forcing_params_to_all_sources","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_size_override_stretch_enabled()${0}","displayText":"is_size_override_stretch_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"is_processing_unhandled_key_input()${0}","displayText":"is_processing_unhandled_key_input","type":"function","leftLabel":"bool","description":" "},{"snippet":"instance_attach_object_instance_ID(${1:arg0}, ${2:arg1})${0}","displayText":"instance_attach_object_instance_ID","type":"function","leftLabel":"","description":" "},{"snippet":"instance_geometry_get_material_param(${1:arg0})${0}","displayText":"instance_geometry_get_material_param","type":"function","leftLabel":"RID","description":" "},{"snippet":"is_using_continuous_collision_detection()${0}","displayText":"is_using_continuous_collision_detection","type":"function","leftLabel":"bool","description":" "},{"snippet":"instance_geometry_override_material_param(${1:arg0})${0}","displayText":"instance_geometry_override_material_param","type":"function","leftLabel":"RID","description":" "}],"d":[{"snippet":"draw(${1:canvas_item}, ${2:pos}, ${3:modulate})${0}","displayText":"draw","type":"function","leftLabel":"","description":" Draw the texture into a a [VisualServer] canvas item. "},{"snippet":"draw(${1:arg0}, ${2:arg1})${0}","displayText":"draw","type":"function","leftLabel":"","description":" "},{"snippet":"draw(${1:canvas_item}, ${2:pos}, ${3:string}, ${4:modulate}, ${5:clip_w})${0}","displayText":"draw","type":"function","leftLabel":"","description":" Draw \"string\" into a canvas item using the font at a given \"pos\" position, with \"modulate\" color, and optionally clipping the width. \"pos\" specifies te baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. "},{"snippet":"draw()${0}","displayText":"draw","type":"method","leftLabel":"signal","description":"  Emitted when the CanvasItem must redraw. This can only be connected realtime, as deferred will not allow drawing.  "},{"snippet":"dectime(${1:value}, ${2:amount}, ${3:step})${0}","displayText":"dectime","type":"function","leftLabel":"float","description":" Decreases time by a specified amount. "},{"snippet":"deg2rad(${1:deg})${0}","displayText":"deg2rad","type":"function","leftLabel":"float","description":" Convert from degrees to radians. "},{"snippet":"deindex()${0}","displayText":"deindex","type":"function","leftLabel":"","description":" "},{"snippet":"decimals(${1:step})${0}","displayText":"decimals","type":"function","leftLabel":"float","description":" Return the amount of decimals in the floating point value. "},{"snippet":"deselect(${1:column})${0}","displayText":"deselect","type":"function","leftLabel":"","description":" "},{"snippet":"db2linear(${1:db})${0}","displayText":"db2linear","type":"function","leftLabel":"float","description":" Convert from decibels to linear energy (audio). "},{"snippet":"dict2inst(${1:dict})${0}","displayText":"dict2inst","type":"function","leftLabel":"Object","description":" Convert a previously converted instances to dictionary back into an instance. Useful for deserializing. "},{"snippet":"draw_char(${1:font}, ${2:pos}, ${3:char}, ${4:next}, ${5:modulate})${0}","displayText":"draw_char","type":"function","leftLabel":"float","description":" Draw a string character using a custom font. Returns the advance, depending on the char width and kerning with an optional next char. "},{"snippet":"draw_char(${1:canvas_item}, ${2:pos}, ${3:char}, ${4:next}, ${5:modulate})${0}","displayText":"draw_char","type":"function","leftLabel":"float","description":" Draw character \"char\" into a canvas item using the font at a given \"pos\" position, with \"modulate\" color, and optionally kerning if \"next\" is apassed. clipping the width. \"pos\" specifies te baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character. "},{"snippet":"draw_line(${1:from}, ${2:to}, ${3:color}, ${4:width})${0}","displayText":"draw_line","type":"function","leftLabel":"","description":" Draw a line from a 2D point to another, with a given color and width. "},{"snippet":"draw_rect(${1:canvas_item}, ${2:rect}, ${3:tile}, ${4:modulate})${0}","displayText":"draw_rect","type":"function","leftLabel":"","description":" "},{"snippet":"draw_rect(${1:rect}, ${2:color})${0}","displayText":"draw_rect","type":"function","leftLabel":"","description":" Draw a colored rectangle. "},{"snippet":"drop_data(${1:pos}, ${2:data})${0}","displayText":"drop_data","type":"function","leftLabel":"","description":" "},{"snippet":"duplicate()${0}","displayText":"duplicate","type":"function","leftLabel":"Node","description":" Return a duplicate of the scene, with all nodes and parameters copied. Subscriptions will not be duplicated. "},{"snippet":"duplicate(${1:arg0})${0}","displayText":"duplicate","type":"function","leftLabel":"Object","description":" "},{"snippet":"delay_msec(${1:msec})${0}","displayText":"delay_msec","type":"function","leftLabel":"","description":" Delay executing of the current thread by given milliseconds. "},{"snippet":"delay_usec(${1:usec})${0}","displayText":"delay_usec","type":"function","leftLabel":"","description":" Delay executing of the current thread by given microseconds. "},{"snippet":"dir_exists(${1:name})${0}","displayText":"dir_exists","type":"function","leftLabel":"bool","description":" "},{"snippet":"disconnect()${0}","displayText":"disconnect","type":"function","leftLabel":"","description":" "},{"snippet":"disconnect(${1:id}, ${2:dst_input_idx})${0}","displayText":"disconnect","type":"function","leftLabel":"","description":" "},{"snippet":"disconnect(${1:signal}, ${2:target}, ${3:method})${0}","displayText":"disconnect","type":"function","leftLabel":"","description":" Disconnect a signal from a method. "},{"snippet":"draw_circle(${1:pos}, ${2:radius}, ${3:color})${0}","displayText":"draw_circle","type":"function","leftLabel":"","description":" Draw a colored circle. "},{"snippet":"draw_string(${1:font}, ${2:pos}, ${3:text}, ${4:modulate}, ${5:clip_w})${0}","displayText":"draw_string","type":"function","leftLabel":"","description":" Draw a string using a custom font. "},{"snippet":"dir_selected(${1:dir})${0}","displayText":"dir_selected","type":"method","leftLabel":"signal","description":"     "},{"snippet":"draw_polygon(${1:points}, ${2:colors}, ${3:uvs}, ${4:texture})${0}","displayText":"draw_polygon","type":"function","leftLabel":"","description":" Draw a polygon of any amount of points, convex or concave. "},{"snippet":"draw_texture(${1:texture}, ${2:pos})${0}","displayText":"draw_texture","type":"function","leftLabel":"","description":" Draw a texture at a given position. "},{"snippet":"draw_primitive(${1:points}, ${2:colors}, ${3:uvs}, ${4:texture}, ${5:width})${0}","displayText":"draw_primitive","type":"function","leftLabel":"","description":" Draw a custom primitive, 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad. "},{"snippet":"draw_style_box(${1:style_box}, ${2:rect})${0}","displayText":"draw_style_box","type":"function","leftLabel":"","description":" Draw a styled rectangle. "},{"snippet":"draw_rect_region(${1:canvas_item}, ${2:rect}, ${3:src_rect}, ${4:modulate})${0}","displayText":"draw_rect_region","type":"function","leftLabel":"","description":" "},{"snippet":"draw_texture_rect(${1:texture}, ${2:rect}, ${3:tile}, ${4:modulate}, ${5:transpose})${0}","displayText":"draw_texture_rect","type":"function","leftLabel":"","description":" Draw a textured rectangle at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture. "},{"snippet":"draw_set_transform(${1:pos}, ${2:rot}, ${3:scale})${0}","displayText":"draw_set_transform","type":"function","leftLabel":"","description":" Set a custom transform for drawing. Anything drawn afterwards will be transformed by this. "},{"snippet":"dump_memory_to_file(${1:file})${0}","displayText":"dump_memory_to_file","type":"function","leftLabel":"","description":" "},{"snippet":"draw_colored_polygon(${1:points}, ${2:color}, ${3:uvs}, ${4:texture})${0}","displayText":"draw_colored_polygon","type":"function","leftLabel":"","description":" Draw a colored polygon of any amount of points, convex or concave. "},{"snippet":"dump_resources_to_file(${1:file})${0}","displayText":"dump_resources_to_file","type":"function","leftLabel":"","description":" "},{"snippet":"draw_texture_rect_region(${1:texture}, ${2:rect}, ${3:src_rect}, ${4:modulate}, ${5:transpose})${0}","displayText":"draw_texture_rect_region","type":"function","leftLabel":"","description":" Draw a textured rectangle region at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture. "},{"snippet":"damped_spring_joint_create(${1:anchor_a}, ${2:anchor_b}, ${3:body_a}, ${4:body_b})${0}","displayText":"damped_spring_joint_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"damped_string_joint_get_param(${1:joint}, ${2:param})${0}","displayText":"damped_string_joint_get_param","type":"function","leftLabel":"float","description":" "},{"snippet":"damped_string_joint_set_param(${1:joint}, ${2:param}, ${3:value})${0}","displayText":"damped_string_joint_set_param","type":"function","leftLabel":"","description":" "}],"m":[{"snippet":"max(${1:a}, ${2:b})${0}","displayText":"max","type":"function","leftLabel":"float","description":" Return the maximum of two values. "},{"snippet":"min(${1:a}, ${2:b})${0}","displayText":"min","type":"function","leftLabel":"float","description":" Return the minimum of two values. "},{"snippet":"move(${1:rel_vec})${0}","displayText":"move","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"move_to(${1:position})${0}","displayText":"move_to","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"make_dir(${1:name})${0}","displayText":"make_dir","type":"function","leftLabel":"int","description":" "},{"snippet":"make_atlas(${1:sizes})${0}","displayText":"make_atlas","type":"function","leftLabel":"Dictionary","description":" "},{"snippet":"mouse_exit()${0}","displayText":"mouse_exit","type":"method","leftLabel":"signal","description":"  Emitted when the mouse left the control area.  "},{"snippet":"move_child(${1:child_node}, ${2:to_pos})${0}","displayText":"move_child","type":"function","leftLabel":"","description":" Move a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of chilren nodes may be useful. "},{"snippet":"mesh_create()${0}","displayText":"mesh_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"mouse_enter()${0}","displayText":"mouse_enter","type":"method","leftLabel":"signal","description":"   "},{"snippet":"move_to_top()${0}","displayText":"move_to_top","type":"function","leftLabel":"","description":" "},{"snippet":"make_current()${0}","displayText":"make_current","type":"function","leftLabel":"","description":" Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene. "},{"snippet":"make_visible(${1:visible})${0}","displayText":"make_visible","type":"function","leftLabel":"","description":" "},{"snippet":"map_to_world(${1:mappos}, ${2:ignore_half_ofs})${0}","displayText":"map_to_world","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"meta_clicked(${1:meta})${0}","displayText":"meta_clicked","type":"method","leftLabel":"signal","description":"     "},{"snippet":"move_local_x(${1:delta}, ${2:scaled})${0}","displayText":"move_local_x","type":"function","leftLabel":"","description":" "},{"snippet":"move_local_y(${1:delta}, ${2:scaled})${0}","displayText":"move_local_y","type":"function","leftLabel":"","description":" "},{"snippet":"move_to_bottom()${0}","displayText":"move_to_bottom","type":"function","leftLabel":"","description":" "},{"snippet":"multi_selected(${1:item}, ${2:column}, ${3:selected})${0}","displayText":"multi_selected","type":"method","leftLabel":"signal","description":"         "},{"snippet":"material_create()${0}","displayText":"material_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"make_sphere_mesh(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"make_sphere_mesh","type":"function","leftLabel":"RID","description":" "},{"snippet":"mesh_add_surface(${1:arg0}, ${2:arg1}, ${3:arg2}, ${4:arg3}, ${5:arg4})${0}","displayText":"mesh_add_surface","type":"function","leftLabel":"","description":" "},{"snippet":"multimesh_create()${0}","displayText":"multimesh_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"material_get_flag(${1:arg0}, ${2:arg1})${0}","displayText":"material_get_flag","type":"function","leftLabel":"bool","description":" "},{"snippet":"material_set_flag(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"material_set_flag","type":"function","leftLabel":"","description":" "},{"snippet":"make_dir_recursive(${1:name})${0}","displayText":"make_dir_recursive","type":"function","leftLabel":"int","description":" "},{"snippet":"material_get_param(${1:arg0}, ${2:arg1})${0}","displayText":"material_get_param","type":"function","leftLabel":"","description":" "},{"snippet":"material_set_param(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"material_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"multimesh_get_aabb(${1:arg0}, ${2:arg1})${0}","displayText":"multimesh_get_aabb","type":"function","leftLabel":"AABB","description":" "},{"snippet":"multimesh_get_mesh(${1:arg0})${0}","displayText":"multimesh_get_mesh","type":"function","leftLabel":"RID","description":" "},{"snippet":"multimesh_set_aabb(${1:arg0}, ${2:arg1})${0}","displayText":"multimesh_set_aabb","type":"function","leftLabel":"","description":" "},{"snippet":"multimesh_set_mesh(${1:arg0}, ${2:arg1})${0}","displayText":"multimesh_set_mesh","type":"function","leftLabel":"","description":" "},{"snippet":"material_get_shader(${1:arg0})${0}","displayText":"material_get_shader","type":"function","leftLabel":"RID","description":" "},{"snippet":"material_set_shader(${1:shader}, ${2:arg1})${0}","displayText":"material_set_shader","type":"function","leftLabel":"","description":" "},{"snippet":"mesh_remove_surface(${1:arg0}, ${2:arg1})${0}","displayText":"mesh_remove_surface","type":"function","leftLabel":"","description":" "},{"snippet":"mix_node_get_amount(${1:id})${0}","displayText":"mix_node_get_amount","type":"function","leftLabel":"float","description":" "},{"snippet":"mix_node_set_amount(${1:id}, ${2:ratio})${0}","displayText":"mix_node_set_amount","type":"function","leftLabel":"","description":" "},{"snippet":"minimum_size_changed()${0}","displayText":"minimum_size_changed","type":"method","leftLabel":"signal","description":"  Emitted when the minimum size of the control changed.  "},{"snippet":"method_track_get_name(${1:idx}, ${2:key_idx})${0}","displayText":"method_track_get_name","type":"function","leftLabel":"String","description":" Return the method name of a method track. "},{"snippet":"mesh_get_surface_count(${1:arg0})${0}","displayText":"mesh_get_surface_count","type":"function","leftLabel":"int","description":" "},{"snippet":"material_get_blend_mode(${1:arg0})${0}","displayText":"material_get_blend_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"material_get_line_width(${1:arg0})${0}","displayText":"material_get_line_width","type":"function","leftLabel":"float","description":" "},{"snippet":"material_set_blend_mode(${1:arg0}, ${2:arg1})${0}","displayText":"material_set_blend_mode","type":"function","leftLabel":"","description":" "},{"snippet":"material_set_line_width(${1:arg0}, ${2:arg1})${0}","displayText":"material_set_line_width","type":"function","leftLabel":"","description":" "},{"snippet":"mesh_surface_get_format(${1:arg0}, ${2:arg1})${0}","displayText":"mesh_surface_get_format","type":"function","leftLabel":"int","description":" "},{"snippet":"method_track_get_params(${1:idx}, ${2:key_idx})${0}","displayText":"method_track_get_params","type":"function","leftLabel":"Array","description":" Return the arguments values to be called on a method track for a given key in a given track. "},{"snippet":"mesh_surface_get_material(${1:arg0}, ${2:arg1})${0}","displayText":"mesh_surface_get_material","type":"function","leftLabel":"RID","description":" "},{"snippet":"mesh_surface_set_material(${1:arg0}, ${2:arg1}, ${3:arg2}, ${4:arg3})${0}","displayText":"mesh_surface_set_material","type":"function","leftLabel":"","description":" "},{"snippet":"mesh_surface_get_array_len(${1:arg0}, ${2:arg1})${0}","displayText":"mesh_surface_get_array_len","type":"function","leftLabel":"int","description":" "},{"snippet":"mesh_add_surface_from_planes(${1:arg0}, ${2:arg1})${0}","displayText":"mesh_add_surface_from_planes","type":"function","leftLabel":"","description":" "},{"snippet":"method_track_get_key_indices(${1:idx}, ${2:time_sec}, ${3:delta})${0}","displayText":"method_track_get_key_indices","type":"function","leftLabel":"IntArray","description":" Return all the key indices of a method track, given a position and delta time. "},{"snippet":"multimesh_instance_get_color(${1:arg0}, ${2:arg1})${0}","displayText":"multimesh_instance_get_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"multimesh_instance_set_color(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"multimesh_instance_set_color","type":"function","leftLabel":"","description":" "},{"snippet":"mesh_surface_get_primitive_type(${1:arg0}, ${2:arg1})${0}","displayText":"mesh_surface_get_primitive_type","type":"function","leftLabel":"int","description":" "},{"snippet":"mesh_surface_get_array_index_len(${1:arg0}, ${2:arg1})${0}","displayText":"mesh_surface_get_array_index_len","type":"function","leftLabel":"int","description":" "},{"snippet":"multimesh_instance_get_transform(${1:arg0}, ${2:arg1})${0}","displayText":"multimesh_instance_get_transform","type":"function","leftLabel":"Transform","description":" "},{"snippet":"multimesh_instance_set_transform(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"multimesh_instance_set_transform","type":"function","leftLabel":"","description":" "}],"n":[{"snippet":"new()${0}","displayText":"new","type":"function","leftLabel":"","description":" "},{"snippet":"newline()${0}","displayText":"newline","type":"function","leftLabel":"","description":" "},{"snippet":"nearest_po2(${1:val})${0}","displayText":"nearest_po2","type":"function","leftLabel":"int","description":" Return the nearest larger power of 2 for an integer. "},{"snippet":"node_exists(${1:node})${0}","displayText":"node_exists","type":"function","leftLabel":"bool","description":" Check if a node exists (by name). "},{"snippet":"node_rename(${1:node}, ${2:new_name})${0}","displayText":"node_rename","type":"function","leftLabel":"int","description":" Rename a node in the graph. "},{"snippet":"node_get_pos(${1:id})${0}","displayText":"node_get_pos","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"node_removed(${1:node})${0}","displayText":"node_removed","type":"method","leftLabel":"signal","description":"     "},{"snippet":"node_set_pos(${1:id}, ${2:screen_pos})${0}","displayText":"node_set_pos","type":"function","leftLabel":"","description":" "},{"snippet":"notification(${1:what}, ${2:arg1})${0}","displayText":"notification","type":"function","leftLabel":"","description":" Notify the object of something. "},{"snippet":"notify_group(${1:call_flags}, ${2:group}, ${3:notification})${0}","displayText":"notify_group","type":"function","leftLabel":"","description":" "},{"snippet":"node_get_type(${1:id})${0}","displayText":"node_get_type","type":"function","leftLabel":"int","description":" Get the node type, will return from NODE_* enum. "},{"snippet":"navmesh_create(${1:mesh}, ${2:xform}, ${3:owner})${0}","displayText":"navmesh_create","type":"function","leftLabel":"int","description":" "},{"snippet":"navmesh_remove(${1:id})${0}","displayText":"navmesh_remove","type":"function","leftLabel":"","description":" "},{"snippet":"native_video_play(${1:arg0}, ${2:arg1}, ${3:arg2}, ${4:arg3})${0}","displayText":"native_video_play","type":"function","leftLabel":"int","description":" "},{"snippet":"native_video_stop()${0}","displayText":"native_video_stop","type":"function","leftLabel":"","description":" "},{"snippet":"native_video_pause()${0}","displayText":"native_video_pause","type":"function","leftLabel":"","description":" "},{"snippet":"node_get_input_count(${1:id})${0}","displayText":"node_get_input_count","type":"function","leftLabel":"int","description":" Return the input count for a given node. Different types of nodes have different amount of inputs. "},{"snippet":"navmesh_set_transform(${1:id}, ${2:xform})${0}","displayText":"navmesh_set_transform","type":"function","leftLabel":"","description":" "},{"snippet":"node_get_input_source(${1:id}, ${2:idx})${0}","displayText":"node_get_input_source","type":"function","leftLabel":"String","description":" Return the input source for a given node input. "},{"snippet":"native_video_is_playing()${0}","displayText":"native_video_is_playing","type":"function","leftLabel":"bool","description":" "}],"w":[{"snippet":"wait()${0}","displayText":"wait","type":"function","leftLabel":"int","description":" "},{"snippet":"weakref(${1:obj})${0}","displayText":"weakref","type":"function","leftLabel":"Object","description":" Return a weak reference to an object. "},{"snippet":"world_to_map(${1:worldpos})${0}","displayText":"world_to_map","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"wait_to_finish()${0}","displayText":"wait_to_finish","type":"function","leftLabel":"","description":" "},{"snippet":"warp_mouse_pos(${1:to})${0}","displayText":"warp_mouse_pos","type":"function","leftLabel":"","description":" "}],"v":[{"snippet":"var2str(${1:var})${0}","displayText":"var2str","type":"function","leftLabel":"String","description":" Converts the value of a variable to a String. "},{"snippet":"voice_play(${1:voice}, ${2:sample})${0}","displayText":"voice_play","type":"function","leftLabel":"","description":" Start playback of a given voice using a given sample. If the voice was already playing it will be restarted. "},{"snippet":"voice_stop(${1:voice})${0}","displayText":"voice_stop","type":"function","leftLabel":"","description":" Stop a given voice. "},{"snippet":"voice_create()${0}","displayText":"voice_create","type":"function","leftLabel":"RID","description":" Allocate a voice for playback. Voices are persistent. A voice can play a single sample at the same time. See [method sample_create]. "},{"snippet":"value_changed(${1:value})${0}","displayText":"value_changed","type":"method","leftLabel":"signal","description":"    This signal is emitted when value changes.  "},{"snippet":"voice_get_pan(${1:voice})${0}","displayText":"voice_get_pan","type":"function","leftLabel":"float","description":" Return the current pan for a given voice (-1 to +1 range). "},{"snippet":"voice_set_pan(${1:voice}, ${2:pan}, ${3:depth}, ${4:height})${0}","displayText":"voice_set_pan","type":"function","leftLabel":"","description":" Change the pan of a currently playing voice and, optionally, the depth and height for a positional/3D sound. Panning values are expressed within the -1 to +1 range. "},{"snippet":"viewport_create()${0}","displayText":"viewport_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"voice_get_chorus(${1:voice})${0}","displayText":"voice_get_chorus","type":"function","leftLabel":"float","description":" Return the current chorus send for a given voice (0 to 1). "},{"snippet":"voice_get_reverb(${1:voice})${0}","displayText":"voice_get_reverb","type":"function","leftLabel":"float","description":" Return the current reverb send for a given voice (0 to 1). "},{"snippet":"voice_get_volume(${1:voice})${0}","displayText":"voice_get_volume","type":"function","leftLabel":"float","description":" Return the current volume for a given voice. "},{"snippet":"voice_set_chorus(${1:voice}, ${2:chorus})${0}","displayText":"voice_set_chorus","type":"function","leftLabel":"","description":" Set chorus send post processing for the voice (from 0 to 1). "},{"snippet":"voice_set_filter(${1:voice}, ${2:type}, ${3:cutoff}, ${4:resonance}, ${5:gain})${0}","displayText":"voice_set_filter","type":"function","leftLabel":"","description":" Set a resonant filter post processing for the voice. Filter type is a value from the FILTER_* enum. "},{"snippet":"voice_set_reverb(${1:voice}, ${2:room}, ${3:reverb})${0}","displayText":"voice_set_reverb","type":"function","leftLabel":"","description":" Set the reverb send post processing for the voice (from 0 to 1) and the reverb type, from the REVERB_* enum. "},{"snippet":"voice_set_volume(${1:voice}, ${2:volume})${0}","displayText":"voice_set_volume","type":"function","leftLabel":"","description":" Change the volume of a currently playing voice. Volume is expressed as linear gain where 0.0 is mute and 1.0 is default. "},{"snippet":"variant_to_base64(${1:variant})${0}","displayText":"variant_to_base64","type":"function","leftLabel":"String","description":" "},{"snippet":"viewport_get_rect(${1:arg0})${0}","displayText":"viewport_get_rect","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"viewport_set_rect(${1:arg0}, ${2:arg1})${0}","displayText":"viewport_set_rect","type":"function","leftLabel":"","description":" "},{"snippet":"visibility_changed()${0}","displayText":"visibility_changed","type":"method","leftLabel":"signal","description":"  Emitted when the visibility (hidden/visible) changes.  "},{"snippet":"voice_get_mix_rate(${1:voice})${0}","displayText":"voice_get_mix_rate","type":"function","leftLabel":"int","description":" Return the current mix rate for a given voice. "},{"snippet":"voice_set_mix_rate(${1:voice}, ${2:rate})${0}","displayText":"voice_set_mix_rate","type":"function","leftLabel":"","description":" Set a different playback mix rate for the given voice. "},{"snippet":"voice_get_pan_depth(${1:voice})${0}","displayText":"voice_get_pan_depth","type":"function","leftLabel":"float","description":" Return the current pan depth for a given voice (-1 to +1 range). "},{"snippet":"voice_is_positional(${1:voice})${0}","displayText":"voice_is_positional","type":"function","leftLabel":"bool","description":" Return wether the current voice is positional. See [method voice_set_positional]. "},{"snippet":"voice_get_pan_height(${1:voice})${0}","displayText":"voice_get_pan_height","type":"function","leftLabel":"float","description":" Return the current pan height for a given voice (-1 to +1 range). "},{"snippet":"voice_set_positional(${1:voice}, ${2:enabled})${0}","displayText":"voice_set_positional","type":"function","leftLabel":"","description":" Set wether a given voice is positional. This is only interpreted as a hint and used for backends that may support binaural encoding. "},{"snippet":"viewport_get_scenario(${1:arg0})${0}","displayText":"viewport_get_scenario","type":"function","leftLabel":"RID","description":" "},{"snippet":"voice_get_filter_type(${1:voice})${0}","displayText":"voice_get_filter_type","type":"function","leftLabel":"int","description":" Return the current selected filter type for a given voice, from the FILTER_* enum. "},{"snippet":"voice_get_reverb_type(${1:voice})${0}","displayText":"voice_get_reverb_type","type":"function","leftLabel":"int","description":" Return the current reverb type for a given voice from the REVERB_* enum. "},{"snippet":"voice_set_pitch_scale(${1:voice}, ${2:ratio})${0}","displayText":"voice_set_pitch_scale","type":"function","leftLabel":"","description":" "},{"snippet":"viewport_attach_camera(${1:arg0}, ${2:arg1})${0}","displayText":"viewport_attach_camera","type":"function","leftLabel":"","description":" "},{"snippet":"viewport_attach_canvas(${1:arg0}, ${2:arg1})${0}","displayText":"viewport_attach_canvas","type":"function","leftLabel":"","description":" "},{"snippet":"viewport_remove_canvas(${1:arg0}, ${2:arg1})${0}","displayText":"viewport_remove_canvas","type":"function","leftLabel":"","description":" "},{"snippet":"voice_get_filter_cutoff(${1:voice})${0}","displayText":"voice_get_filter_cutoff","type":"function","leftLabel":"float","description":" Return the current filter cutoff (in hz) for a given voice. "},{"snippet":"value_track_is_continuous(${1:idx})${0}","displayText":"value_track_is_continuous","type":"function","leftLabel":"bool","description":" Return wether interpolation is enabled or disabled for a whole track. By default tracks are interpolated. "},{"snippet":"voice_set_volume_scale_db(${1:voice}, ${2:db})${0}","displayText":"voice_set_volume_scale_db","type":"function","leftLabel":"","description":" "},{"snippet":"value_track_set_continuous(${1:idx}, ${2:continuous})${0}","displayText":"value_track_set_continuous","type":"function","leftLabel":"","description":" Enable or disable interpolation for a whole track. By default tracks are interpolated. "},{"snippet":"voice_get_filter_resonance(${1:voice})${0}","displayText":"voice_get_filter_resonance","type":"function","leftLabel":"float","description":" Return the current filter resonance for a given voice. "},{"snippet":"value_track_get_key_indices(${1:idx}, ${2:time_sec}, ${3:delta})${0}","displayText":"value_track_get_key_indices","type":"function","leftLabel":"IntArray","description":" Return all the key indices of a value track, given a position and delta time. "},{"snippet":"viewport_get_attached_camera(${1:arg0})${0}","displayText":"viewport_get_attached_camera","type":"function","leftLabel":"RID","description":" "},{"snippet":"viewport_set_canvas_transform(${1:arg0}, ${2:arg1}, ${3:arg2})${0}","displayText":"viewport_set_canvas_transform","type":"function","leftLabel":"","description":" "},{"snippet":"viewport_set_global_canvas_transform(${1:arg0}, ${2:arg1})${0}","displayText":"viewport_set_global_canvas_transform","type":"function","leftLabel":"","description":" "}],"h":[{"snippet":"has(${1:arg0})${0}","displayText":"has","type":"function","leftLabel":"bool","description":" "},{"snippet":"has(${1:name})${0}","displayText":"has","type":"function","leftLabel":"bool","description":" Return true if a configuration value is present. "},{"snippet":"hash(${1:var:var})${0}","displayText":"hash","type":"function","leftLabel":"int","description":" Hashes the variable passed and returns an integer. "},{"snippet":"hide()${0}","displayText":"hide","type":"function","leftLabel":"","description":" "},{"snippet":"handles(${1:object})${0}","displayText":"handles","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_font(${1:name}, ${2:type})${0}","displayText":"has_font","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_icon(${1:name}, ${2:type})${0}","displayText":"has_icon","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_loop()${0}","displayText":"has_loop","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_meta(${1:name})${0}","displayText":"has_meta","type":"function","leftLabel":"bool","description":" Return true if a metadata is found with the requested name. "},{"snippet":"has_node(${1:path})${0}","displayText":"has_node","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_alpha()${0}","displayText":"has_alpha","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_color(${1:name}, ${2:type})${0}","displayText":"has_color","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_focus()${0}","displayText":"has_focus","type":"function","leftLabel":"bool","description":" Return wether the Control is the current focused control (see [method set_focus_mode]). "},{"snippet":"has_param(${1:name})${0}","displayText":"has_param","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_remap(${1:path})${0}","displayText":"has_remap","type":"function","leftLabel":"bool","description":" Return true if a file is being remapped. "},{"snippet":"has_action(${1:action})${0}","displayText":"has_action","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_expand()${0}","displayText":"has_expand","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_method(${1:arg0})${0}","displayText":"has_method","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_sample(${1:name})${0}","displayText":"has_sample","type":"function","leftLabel":"bool","description":" Return true if the sample text id exists in the library. "},{"snippet":"has_section(${1:section})${0}","displayText":"has_section","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_autoplay()${0}","displayText":"has_autoplay","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_autowrap()${0}","displayText":"has_autowrap","type":"function","leftLabel":"bool","description":" Return the state of the [i]autowrap[/i] mode (see [method set_autowrap]). "},{"snippet":"has_constant(${1:name}, ${2:type})${0}","displayText":"has_constant","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_resource(${1:name})${0}","displayText":"has_resource","type":"function","leftLabel":"bool","description":" Return true if the preloader has a given resource. "},{"snippet":"has_response()${0}","displayText":"has_response","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_stylebox(${1:name}, ${2:type})${0}","displayText":"has_stylebox","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_animation(${1:name})${0}","displayText":"has_animation","type":"function","leftLabel":"bool","description":" Request wether an [Animation] name exist within the player. "},{"snippet":"has_attribute(${1:arg0})${0}","displayText":"has_attribute","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_autostart()${0}","displayText":"has_autostart","type":"function","leftLabel":"bool","description":" Return true if set to automatically start when entering the scene. "},{"snippet":"has_singleton(${1:arg0})${0}","displayText":"has_singleton","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_environment(${1:environment})${0}","displayText":"has_environment","type":"function","leftLabel":"bool","description":" Return true if an envieronment variable exists. "},{"snippet":"has_main_screen()${0}","displayText":"has_main_screen","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_section_key(${1:section}, ${2:key})${0}","displayText":"has_section_key","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_source_code()${0}","displayText":"has_source_code","type":"function","leftLabel":"bool","description":" Return true if the script contains source code. "},{"snippet":"has_project_shadows()${0}","displayText":"has_project_shadows","type":"function","leftLabel":"bool","description":" "},{"snippet":"hinge_joint_get_flag(${1:joint}, ${2:flag})${0}","displayText":"hinge_joint_get_flag","type":"function","leftLabel":"bool","description":" "},{"snippet":"hinge_joint_set_flag(${1:joint}, ${2:flag}, ${3:enabled})${0}","displayText":"hinge_joint_set_flag","type":"function","leftLabel":"","description":" "},{"snippet":"has_node_and_resource(${1:path})${0}","displayText":"has_node_and_resource","type":"function","leftLabel":"bool","description":" "},{"snippet":"hinge_joint_get_param(${1:joint}, ${2:param})${0}","displayText":"hinge_joint_get_param","type":"function","leftLabel":"float","description":" "},{"snippet":"hinge_joint_set_param(${1:joint}, ${2:param}, ${3:value})${0}","displayText":"hinge_joint_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"has_touchscreen_ui_hint()${0}","displayText":"has_touchscreen_ui_hint","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_height_from_velocity()${0}","displayText":"has_height_from_velocity","type":"function","leftLabel":"bool","description":" "},{"snippet":"has_transparent_background()${0}","displayText":"has_transparent_background","type":"function","leftLabel":"bool","description":" Reurn whether the viewport lets whatever is behind it to show. "}],"g":[{"snippet":"get(${1:property})${0}","displayText":"get","type":"function","leftLabel":"","description":" Get a property from the object. "},{"snippet":"get_8()${0}","displayText":"get_8","type":"function","leftLabel":"int","description":" "},{"snippet":"get_a()${0}","displayText":"get_a","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_b()${0}","displayText":"get_b","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_d()${0}","displayText":"get_d","type":"function","leftLabel":"float","description":" Return the line distance from the origin. "},{"snippet":"get_16()${0}","displayText":"get_16","type":"function","leftLabel":"int","description":" "},{"snippet":"get_32()${0}","displayText":"get_32","type":"function","leftLabel":"int","description":" "},{"snippet":"get_64()${0}","displayText":"get_64","type":"function","leftLabel":"int","description":" "},{"snippet":"get_id()${0}","displayText":"get_id","type":"function","leftLabel":"String","description":" "},{"snippet":"get_ok()${0}","displayText":"get_ok","type":"function","leftLabel":"Object","description":" Return the OK Button. "},{"snippet":"get_uv()${0}","displayText":"get_uv","type":"function","leftLabel":"Vector2Array","description":" "},{"snippet":"get_bit(${1:pos})${0}","displayText":"get_bit","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_end()${0}","displayText":"get_end","type":"function","leftLabel":"Vector2","description":" Returns MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]). "},{"snippet":"get_fov()${0}","displayText":"get_fov","type":"function","leftLabel":"float","description":" "},{"snippet":"get_len()${0}","displayText":"get_len","type":"function","leftLabel":"int","description":" "},{"snippet":"get_max()${0}","displayText":"get_max","type":"function","leftLabel":"float","description":" Return the maximum value. "},{"snippet":"get_min()${0}","displayText":"get_min","type":"function","leftLabel":"float","description":" Return the minimum value. "},{"snippet":"get_pan(${1:voice})${0}","displayText":"get_pan","type":"function","leftLabel":"float","description":" Return the current panning for a given voice. Panning goes from -1 (left) to +1 (right). "},{"snippet":"get_pos()${0}","displayText":"get_pos","type":"function","leftLabel":"float","description":" "},{"snippet":"get_rid()${0}","displayText":"get_rid","type":"function","leftLabel":"RID","description":" Return the texture RID as used in the [VisualServer]. "},{"snippet":"get_rot()${0}","displayText":"get_rot","type":"function","leftLabel":"float","description":" Return the rotation of the 2D node. "},{"snippet":"get_val()${0}","displayText":"get_val","type":"function","leftLabel":"float","description":" Return the current value. "},{"snippet":"get_var()${0}","displayText":"get_var","type":"function","leftLabel":"","description":" "},{"snippet":"generate(${1:from})${0}","displayText":"generate","type":"function","leftLabel":"","description":" "},{"snippet":"get_aabb()${0}","displayText":"get_aabb","type":"function","leftLabel":"AABB","description":" Return the visibility AABB. "},{"snippet":"get_axis()${0}","displayText":"get_axis","type":"function","leftLabel":"int","description":" "},{"snippet":"get_bias()${0}","displayText":"get_bias","type":"function","leftLabel":"float","description":" "},{"snippet":"get_cell(${1:x}, ${2:y})${0}","displayText":"get_cell","type":"function","leftLabel":"int","description":" Return the contents of a cell. "},{"snippet":"get_data()${0}","displayText":"get_data","type":"function","leftLabel":"RawArray","description":" Return sample data. Data will be little endian, no matter the host platform, and exactly as long to fit all frames. Example, if data is Stereo, 16 bits, 256 frames, it will be 1024 bytes long. "},{"snippet":"get_data(${1:bytes})${0}","displayText":"get_data","type":"function","leftLabel":"Array","description":" Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an [Error] code and a data array. "},{"snippet":"get_date()${0}","displayText":"get_date","type":"function","leftLabel":"Dictionary","description":" Return the current date. "},{"snippet":"get_file()${0}","displayText":"get_file","type":"function","leftLabel":"String","description":" Return the speech file. "},{"snippet":"get_flag(${1:flag})${0}","displayText":"get_flag","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_font(${1:name}, ${2:type})${0}","displayText":"get_font","type":"function","leftLabel":"Font","description":" "},{"snippet":"get_icon(${1:column})${0}","displayText":"get_icon","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_icon(${1:name}, ${2:type})${0}","displayText":"get_icon","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_line(${1:arg0})${0}","displayText":"get_line","type":"function","leftLabel":"String","description":" Return the text of a specific line. "},{"snippet":"get_line()${0}","displayText":"get_line","type":"function","leftLabel":"String","description":" "},{"snippet":"get_mass()${0}","displayText":"get_mass","type":"function","leftLabel":"float","description":" Return the body mass. "},{"snippet":"get_mesh()${0}","displayText":"get_mesh","type":"function","leftLabel":"Mesh","description":" Return the [Mesh] resource drawn as multiple instances. "},{"snippet":"get_meta(${1:name})${0}","displayText":"get_meta","type":"function","leftLabel":"","description":" Return a metadata from the object. "},{"snippet":"get_mode()${0}","displayText":"get_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_name()${0}","displayText":"get_name","type":"function","leftLabel":"String","description":" "},{"snippet":"get_next()${0}","displayText":"get_next","type":"function","leftLabel":"String","description":" "},{"snippet":"get_node(${1:path})${0}","displayText":"get_node","type":"function","leftLabel":"Node","description":" Fetch a node. NodePath must be valid (or else error will occur) and can be either the path to child node, a relative path (from the current node to another node), or an absolute path to a node. Note: fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_scene]). Examples. Assume your current node is Character and following tree:[br] root/ root/Character root/Character/Sword root/Character/Backpack/Dagger root/MyGame root/Swamp/Alligator root/Swamp/Mosquito root/Swamp/Goblin Possible paths are: - get_node(\"Sword\") - get_node(\"Backpack/Dagger\") - get_node(\"../Swamp/Alligator\") - get_node(\"/root/MyGame\") "},{"snippet":"get_page()${0}","displayText":"get_page","type":"function","leftLabel":"float","description":" Return the page size, if page is 0, paging is disabled. "},{"snippet":"get_path()${0}","displayText":"get_path","type":"function","leftLabel":"NodePath","description":" Return the absolute path of the current node. This only works if the curent node is inside the scene tree (see [method is_inside_scene]). "},{"snippet":"get_prev()${0}","displayText":"get_prev","type":"function","leftLabel":"TreeItem","description":" "},{"snippet":"get_real()${0}","displayText":"get_real","type":"function","leftLabel":"float","description":" "},{"snippet":"get_rect()${0}","displayText":"get_rect","type":"function","leftLabel":"Rect2","description":" Return the viewport rect. If the viewport is child of a control, it will use the same rect as the parent. Otherwise, if the rect is empty, the viewport will use all the allowed space. "},{"snippet":"get_room()${0}","displayText":"get_room","type":"function","leftLabel":"Room","description":" "},{"snippet":"get_root()${0}","displayText":"get_root","type":"function","leftLabel":"Viewport","description":" "},{"snippet":"get_side(${1:side})${0}","displayText":"get_side","type":"function","leftLabel":"Image","description":" "},{"snippet":"get_size()${0}","displayText":"get_size","type":"function","leftLabel":"Vector2","description":" Returns the size of the Control, computed from all margins, however the size returned will [b]never be smaller than the minimum size reported by [method get_minimum_size][/b]. This means that even if end position of the Control rectangle is smaller than the begin position, the Control will still display and interact correctly. (see description, [method get_minimum_size], [method set_margin], [method set_anchor]). "},{"snippet":"get_step()${0}","displayText":"get_step","type":"function","leftLabel":"float","description":" "},{"snippet":"get_text(${1:column})${0}","displayText":"get_text","type":"function","leftLabel":"String","description":" "},{"snippet":"get_text()${0}","displayText":"get_text","type":"function","leftLabel":"String","description":" Return the built-in label text. "},{"snippet":"get_time()${0}","displayText":"get_time","type":"function","leftLabel":"Dictionary","description":" Return the current time. "},{"snippet":"get_tint()${0}","displayText":"get_tint","type":"function","leftLabel":"float","description":" "},{"snippet":"get_tree()${0}","displayText":"get_tree","type":"function","leftLabel":"SceneTree","description":" "},{"snippet":"get_type()${0}","displayText":"get_type","type":"function","leftLabel":"String","description":" Return the type of the object as a string. "},{"snippet":"get_vbox()${0}","displayText":"get_vbox","type":"function","leftLabel":"VBoxContainer","description":" "},{"snippet":"get_zfar()${0}","displayText":"get_zfar","type":"function","leftLabel":"float","description":" "},{"snippet":"get_zoom()${0}","displayText":"get_zoom","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_align()${0}","displayText":"get_align","type":"function","leftLabel":"int","description":" Return the alignmend mode (any of the ALIGN_* enumeration values). "},{"snippet":"get_atlas()${0}","displayText":"get_atlas","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_begin()${0}","displayText":"get_begin","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_brake()${0}","displayText":"get_brake","type":"function","leftLabel":"float","description":" "},{"snippet":"get_child(${1:idx})${0}","displayText":"get_child","type":"function","leftLabel":"Node","description":" Return a children node by it's index (see [method get_child_count]). This method is often used for iterating all children of a node. "},{"snippet":"get_color(${1:arg0})${0}","displayText":"get_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"get_color()${0}","displayText":"get_color","type":"function","leftLabel":"Color","description":" Return the current (edited) color. "},{"snippet":"get_color(${1:name}, ${2:type})${0}","displayText":"get_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"get_curve()${0}","displayText":"get_curve","type":"function","leftLabel":"Curve2D","description":" "},{"snippet":"get_depth()${0}","displayText":"get_depth","type":"function","leftLabel":"float","description":" "},{"snippet":"get_drive(${1:idx})${0}","displayText":"get_drive","type":"function","leftLabel":"String","description":" "},{"snippet":"get_error()${0}","displayText":"get_error","type":"function","leftLabel":"int","description":" "},{"snippet":"get_faces()${0}","displayText":"get_faces","type":"function","leftLabel":"Vector3Array","description":" Return the faces (an array of triangles). "},{"snippet":"get_flags()${0}","displayText":"get_flags","type":"function","leftLabel":"int","description":" Return the current texture flags. "},{"snippet":"get_float()${0}","displayText":"get_float","type":"function","leftLabel":"float","description":" "},{"snippet":"get_frame(${1:idx})${0}","displayText":"get_frame","type":"function","leftLabel":"Object","description":" Return a texture (frame). "},{"snippet":"get_frame()${0}","displayText":"get_frame","type":"function","leftLabel":"int","description":" Return the visible frame index. "},{"snippet":"get_gizmo()${0}","displayText":"get_gizmo","type":"function","leftLabel":"SpatialGizmo","description":" "},{"snippet":"get_image()${0}","displayText":"get_image","type":"function","leftLabel":"Image","description":" Return the image used for mask testing. (see [method set_imag]). "},{"snippet":"get_index()${0}","displayText":"get_index","type":"function","leftLabel":"int","description":" Get the node index in the parent (assuming it has a parent). "},{"snippet":"get_label()${0}","displayText":"get_label","type":"function","leftLabel":"Object","description":" Return the label used for built-in text. "},{"snippet":"get_layer()${0}","displayText":"get_layer","type":"function","leftLabel":"int","description":" Return the layer index, determines the draw order, a lower value will be below a higher one. "},{"snippet":"get_light()${0}","displayText":"get_light","type":"function","leftLabel":"RawArray","description":" "},{"snippet":"get_limit(${1:margin})${0}","displayText":"get_limit","type":"function","leftLabel":"int","description":" Return the scrolling limit in pixels. "},{"snippet":"get_order(${1:name})${0}","displayText":"get_order","type":"function","leftLabel":"int","description":" Return the order of a configuration value (influences when saved to the config file). "},{"snippet":"get_owner()${0}","displayText":"get_owner","type":"function","leftLabel":"Node","description":" Get the node owner (see [method set_node_owner]). "},{"snippet":"get_param(${1:param})${0}","displayText":"get_param","type":"function","leftLabel":"float","description":" "},{"snippet":"get_plane()${0}","displayText":"get_plane","type":"function","leftLabel":"Plane","description":" "},{"snippet":"get_popup()${0}","displayText":"get_popup","type":"function","leftLabel":"Object","description":" Return the [PopupMenu] contained in this button. "},{"snippet":"get_range(${1:column})${0}","displayText":"get_range","type":"function","leftLabel":"float","description":" "},{"snippet":"get_remap(${1:path})${0}","displayText":"get_remap","type":"function","leftLabel":"String","description":" Return the remapped new path of a file. "},{"snippet":"get_scale()${0}","displayText":"get_scale","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_scene()${0}","displayText":"get_scene","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_shape(${1:shape_idx})${0}","displayText":"get_shape","type":"function","leftLabel":"Shape2D","description":" Return the shape in the given index. "},{"snippet":"get_shape()${0}","displayText":"get_shape","type":"function","leftLabel":"Vector2Array","description":" Return the portal shape. The shape is an array of [Point2] points, representing a convex polygon in the X,Y plane. "},{"snippet":"get_space()${0}","displayText":"get_space","type":"function","leftLabel":"RID","description":" "},{"snippet":"get_speed()${0}","displayText":"get_speed","type":"function","leftLabel":"float","description":" Get the speed scaling ratio in a given animation channel (or channel 0 if none is provided). Default ratio is [i]1[/i] (no scaling). "},{"snippet":"get_stage()${0}","displayText":"get_stage","type":"function","leftLabel":"int","description":" Return the load stage. The total amount of stages can be queried with [get_stage_count] "},{"snippet":"get_state()${0}","displayText":"get_state","type":"function","leftLabel":"Dictionary","description":" "},{"snippet":"get_theme()${0}","displayText":"get_theme","type":"function","leftLabel":"MeshLibrary","description":" "},{"snippet":"get_ticks()${0}","displayText":"get_ticks","type":"function","leftLabel":"int","description":" Return amounts of ticks to display on slider. "},{"snippet":"get_title()${0}","displayText":"get_title","type":"function","leftLabel":"String","description":" Return the title of the window. "},{"snippet":"get_value(${1:section}, ${2:key})${0}","displayText":"get_value","type":"function","leftLabel":"","description":" "},{"snippet":"get_value()${0}","displayText":"get_value","type":"function","leftLabel":"float","description":" "},{"snippet":"get_width()${0}","displayText":"get_width","type":"function","leftLabel":"int","description":" Return the texture width. "},{"snippet":"get_world()${0}","displayText":"get_world","type":"function","leftLabel":"World","description":" "},{"snippet":"get_znear()${0}","displayText":"get_znear","type":"function","leftLabel":"float","description":" "},{"snippet":"get_access()${0}","displayText":"get_access","type":"function","leftLabel":"int","description":" "},{"snippet":"get_action()${0}","displayText":"get_action","type":"function","leftLabel":"String","description":" "},{"snippet":"get_amount()${0}","displayText":"get_amount","type":"function","leftLabel":"int","description":" Return the total amount of particles in the system. "},{"snippet":"get_anchor(${1:margin})${0}","displayText":"get_anchor","type":"function","leftLabel":"int","description":" Return the anchor type (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) for a given margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). "},{"snippet":"get_ascent()${0}","displayText":"get_ascent","type":"function","leftLabel":"float","description":" Return the font ascent (number of pixels above the baseline). "},{"snippet":"get_bounce()${0}","displayText":"get_bounce","type":"function","leftLabel":"float","description":" Return the body bounciness. "},{"snippet":"get_bounds()${0}","displayText":"get_bounds","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"get_buffer(${1:len})${0}","displayText":"get_buffer","type":"function","leftLabel":"RawArray","description":" "},{"snippet":"get_button(${1:column}, ${2:button_idx})${0}","displayText":"get_button","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_camera()${0}","displayText":"get_camera","type":"function","leftLabel":"Camera","description":" "},{"snippet":"get_cancel()${0}","displayText":"get_cancel","type":"function","leftLabel":"Button","description":" Return the cancel button. "},{"snippet":"get_canvas()${0}","displayText":"get_canvas","type":"function","leftLabel":"RID","description":" "},{"snippet":"get_chorus(${1:voice})${0}","displayText":"get_chorus","type":"function","leftLabel":"float","description":" Return the current chorus send level for a given voice. (0 to 1). "},{"snippet":"get_double()${0}","displayText":"get_double","type":"function","leftLabel":"float","description":" "},{"snippet":"get_edited()${0}","displayText":"get_edited","type":"function","leftLabel":"TreeItem","description":" "},{"snippet":"get_editor()${0}","displayText":"get_editor","type":"function","leftLabel":"String","description":" "},{"snippet":"get_expand()${0}","displayText":"get_expand","type":"function","leftLabel":"bool","description":" Return wether the expand property is set(default). When expanding, the image will use the same rules as [StyleBoxTexture] for expand. If not expanding, the image will always be tested at its original size. "},{"snippet":"get_flag_x(${1:flag})${0}","displayText":"get_flag_x","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_flag_y(${1:flag})${0}","displayText":"get_flag_y","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_flag_z(${1:flag})${0}","displayText":"get_flag_z","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_format()${0}","displayText":"get_format","type":"function","leftLabel":"int","description":" "},{"snippet":"get_groups()${0}","displayText":"get_groups","type":"function","leftLabel":"Array","description":" "},{"snippet":"get_height()${0}","displayText":"get_height","type":"function","leftLabel":"float","description":" Return the capsule height. "},{"snippet":"get_invert()${0}","displayText":"get_invert","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_length()${0}","displayText":"get_length","type":"function","leftLabel":"float","description":" Return the length of the groove. "},{"snippet":"get_locale()${0}","displayText":"get_locale","type":"function","leftLabel":"String","description":" Return the host OS locale. "},{"snippet":"get_margin(${1:margin})${0}","displayText":"get_margin","type":"function","leftLabel":"float","description":" Return the offset of margin \"margin\" (see MARGIN_* enum). "},{"snippet":"get_margin()${0}","displayText":"get_margin","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"get_motion()${0}","displayText":"get_motion","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_node_a()${0}","displayText":"get_node_a","type":"function","leftLabel":"NodePath","description":" Return the path to the A node for the joint. "},{"snippet":"get_node_b()${0}","displayText":"get_node_b","type":"function","leftLabel":"NodePath","description":" Return the path to the B node for the joint. "},{"snippet":"get_normal()${0}","displayText":"get_normal","type":"function","leftLabel":"Vector2","description":" Return the line normal. "},{"snippet":"get_octree()${0}","displayText":"get_octree","type":"function","leftLabel":"RawArray","description":" "},{"snippet":"get_offset()${0}","displayText":"get_offset","type":"function","leftLabel":"Vector2","description":" Return the offset of the sprite in the node origin. "},{"snippet":"get_option(${1:key})${0}","displayText":"get_option","type":"function","leftLabel":"","description":" "},{"snippet":"get_parent()${0}","displayText":"get_parent","type":"function","leftLabel":"Parent","description":" Return the parent [Node] of the current [Node], or an empty Object if the node lacks a parent. "},{"snippet":"get_points()${0}","displayText":"get_points","type":"function","leftLabel":"Vector2Array","description":" Return a list of points in either clockwise or counter clockwise order, forming a convex polygon. "},{"snippet":"get_prefix()${0}","displayText":"get_prefix","type":"function","leftLabel":"String","description":" "},{"snippet":"get_radius()${0}","displayText":"get_radius","type":"function","leftLabel":"float","description":" Return the radius of the [CapsuleShape2D]. "},{"snippet":"get_region()${0}","displayText":"get_region","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"get_reverb(${1:voice})${0}","displayText":"get_reverb","type":"function","leftLabel":"float","description":" Return the current reverb send level for a given voice. (0 to 1). "},{"snippet":"get_sample(${1:name})${0}","displayText":"get_sample","type":"function","leftLabel":"Sample","description":" Return a sample from the library, from a given text-id. Return null if the sample is not found. "},{"snippet":"get_script()${0}","displayText":"get_script","type":"function","leftLabel":"Script","description":" Return the object script (or null if it doesn't have one). "},{"snippet":"get_scroll()${0}","displayText":"get_scroll","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_shader()${0}","displayText":"get_shader","type":"function","leftLabel":"Shader","description":" "},{"snippet":"get_status()${0}","displayText":"get_status","type":"function","leftLabel":"int","description":" "},{"snippet":"get_stream()${0}","displayText":"get_stream","type":"function","leftLabel":"Stream","description":" "},{"snippet":"get_suffix()${0}","displayText":"get_suffix","type":"function","leftLabel":"String","description":" Return the specific suffix. "},{"snippet":"get_valign()${0}","displayText":"get_valign","type":"function","leftLabel":"int","description":" "},{"snippet":"get_vertex(${1:idx})${0}","displayText":"get_vertex","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_volume(${1:voice})${0}","displayText":"get_volume","type":"function","leftLabel":"float","description":" Return the current volume (in db) for a given voice. 0db is maximum volume (every about -6db, volume is reduced in half). \"db\" does in fact go from zero to negative. "},{"snippet":"get_volume()${0}","displayText":"get_volume","type":"function","leftLabel":"float","description":" "},{"snippet":"get_weight()${0}","displayText":"get_weight","type":"function","leftLabel":"float","description":" "},{"snippet":"get_window()${0}","displayText":"get_window","type":"function","leftLabel":"Object","description":" Return the [i]window[/i] for this control, ascending the scene tree (see [method is_window]). "},{"snippet":"grab_focus()${0}","displayText":"grab_focus","type":"function","leftLabel":"","description":" Steal the focus from another control and become the focused control (see [method set_focus_mode]). "},{"snippet":"get_as_text()${0}","displayText":"get_as_text","type":"function","leftLabel":"String","description":" "},{"snippet":"get_bitmask()${0}","displayText":"get_bitmask","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_bounces()${0}","displayText":"get_bounces","type":"function","leftLabel":"int","description":" "},{"snippet":"get_cast_to()${0}","displayText":"get_cast_to","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_columns()${0}","displayText":"get_columns","type":"function","leftLabel":"int","description":" "},{"snippet":"get_damping()${0}","displayText":"get_damping","type":"function","leftLabel":"float","description":" Return the damping of the spring joint. "},{"snippet":"get_density()${0}","displayText":"get_density","type":"function","leftLabel":"float","description":" "},{"snippet":"get_descent()${0}","displayText":"get_descent","type":"function","leftLabel":"float","description":" Return the font descent (number of pixels below the baseline). "},{"snippet":"get_exclude()${0}","displayText":"get_exclude","type":"function","leftLabel":"Array","description":" "},{"snippet":"get_extents()${0}","displayText":"get_extents","type":"function","leftLabel":"Vector2","description":" Return the half extents, the actual width and height of this shape is twice the half extents. "},{"snippet":"get_gravity()${0}","displayText":"get_gravity","type":"function","leftLabel":"float","description":" "},{"snippet":"get_hframes()${0}","displayText":"get_hframes","type":"function","leftLabel":"int","description":" "},{"snippet":"get_hovered()${0}","displayText":"get_hovered","type":"function","leftLabel":"int","description":" Return the currently hovered button in the array. "},{"snippet":"get_item_ID(${1:idx})${0}","displayText":"get_item_ID","type":"function","leftLabel":"int","description":" Return the id of the item at index \"idx\". "},{"snippet":"get_message(${1:src_message})${0}","displayText":"get_message","type":"function","leftLabel":"String","description":" Return a message for translation. "},{"snippet":"get_minsize()${0}","displayText":"get_minsize","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_monitor(${1:monitor})${0}","displayText":"get_monitor","type":"function","leftLabel":"float","description":" "},{"snippet":"get_opacity()${0}","displayText":"get_opacity","type":"function","leftLabel":"float","description":" Return the canvas item opacity. This affects the canvas item and all the children. "},{"snippet":"get_options()${0}","displayText":"get_options","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_param_x(${1:param})${0}","displayText":"get_param_x","type":"function","leftLabel":"float","description":" "},{"snippet":"get_param_y(${1:param})${0}","displayText":"get_param_y","type":"function","leftLabel":"float","description":" "},{"snippet":"get_param_z(${1:param})${0}","displayText":"get_param_z","type":"function","leftLabel":"float","description":" "},{"snippet":"get_path_to(${1:node})${0}","displayText":"get_path_to","type":"function","leftLabel":"NodePath","description":" Return the relative path from the current node to the specified node in \"node\" argument. Both nodes must be in the same scene, or else the function will fail. "},{"snippet":"get_polygon(${1:idx})${0}","displayText":"get_polygon","type":"function","leftLabel":"IntArray","description":" "},{"snippet":"get_polygon()${0}","displayText":"get_polygon","type":"function","leftLabel":"Vector2Array","description":" "},{"snippet":"get_runtime()${0}","displayText":"get_runtime","type":"function","leftLabel":"float","description":" "},{"snippet":"get_storage()${0}","displayText":"get_storage","type":"function","leftLabel":"int","description":" "},{"snippet":"get_texture(${1:param})${0}","displayText":"get_texture","type":"function","leftLabel":"Texture","description":" Return a texture. Textures change parameters per texel and are mapped to the model depending on the texcoord mode (see [method set_texcoord_mode]). "},{"snippet":"get_texture()${0}","displayText":"get_texture","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_tileset()${0}","displayText":"get_tileset","type":"function","leftLabel":"TileSet","description":" Return the current tileset. "},{"snippet":"get_tooltip(${1:column})${0}","displayText":"get_tooltip","type":"function","leftLabel":"String","description":" "},{"snippet":"get_tooltip(${1:atpos})${0}","displayText":"get_tooltip","type":"function","leftLabel":"String","description":" Return the tooltip, which will appear when the cursor is resting over this control. "},{"snippet":"get_vframes()${0}","displayText":"get_vframes","type":"function","leftLabel":"int","description":" Return the amount of vertical frames. See [set_vframes]. "},{"snippet":"get_autoplay()${0}","displayText":"get_autoplay","type":"function","leftLabel":"String","description":" Return the name of the animation that will be automatically played when the scene is loaded. "},{"snippet":"get_bg_color()${0}","displayText":"get_bg_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"get_captures()${0}","displayText":"get_captures","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_center_x()${0}","displayText":"get_center_x","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_center_y()${0}","displayText":"get_center_y","type":"function","leftLabel":"bool","description":" Return true if tiles are to be centered in y coordinate (by default this is false and they are drawn from upper left cell corner). "},{"snippet":"get_center_z()${0}","displayText":"get_center_z","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_children()${0}","displayText":"get_children","type":"function","leftLabel":"TreeItem","description":" "},{"snippet":"get_collider()${0}","displayText":"get_collider","type":"function","leftLabel":"Object","description":" Return the closest object the ray is pointing to. Note that this does not consider the length of the vector, so you must also use [is_colliding] to check if the object returned is actually colliding with the ray. "},{"snippet":"get_constant(${1:name}, ${2:type})${0}","displayText":"get_constant","type":"function","leftLabel":"int","description":" "},{"snippet":"get_csv_line()${0}","displayText":"get_csv_line","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_data_dir()${0}","displayText":"get_data_dir","type":"function","leftLabel":"String","description":" "},{"snippet":"get_filename()${0}","displayText":"get_filename","type":"function","leftLabel":"String","description":" Return a filename that may be containedA node can contained by the node. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded (see [method set_filename]). "},{"snippet":"get_friction()${0}","displayText":"get_friction","type":"function","leftLabel":"float","description":" "},{"snippet":"get_h_frames()${0}","displayText":"get_h_frames","type":"function","leftLabel":"int","description":" "},{"snippet":"get_h_offset()${0}","displayText":"get_h_offset","type":"function","leftLabel":"float","description":" "},{"snippet":"get_h_scroll()${0}","displayText":"get_h_scroll","type":"function","leftLabel":"int","description":" "},{"snippet":"get_joy_axis(${1:device}, ${2:axis})${0}","displayText":"get_joy_axis","type":"function","leftLabel":"float","description":" "},{"snippet":"get_joy_name(${1:device})${0}","displayText":"get_joy_name","type":"function","leftLabel":"String","description":" "},{"snippet":"get_lifetime()${0}","displayText":"get_lifetime","type":"function","leftLabel":"float","description":" "},{"snippet":"get_loop_end()${0}","displayText":"get_loop_end","type":"function","leftLabel":"int","description":" Return the loop begin position. "},{"snippet":"get_material()${0}","displayText":"get_material","type":"function","leftLabel":"Material","description":" Return the material used to draw particles. "},{"snippet":"get_metadata(${1:column})${0}","displayText":"get_metadata","type":"function","leftLabel":"","description":" "},{"snippet":"get_mix_rate()${0}","displayText":"get_mix_rate","type":"function","leftLabel":"int","description":" Return the mix rate for the sample (expected playback frequency). "},{"snippet":"get_mix_rate(${1:voice})${0}","displayText":"get_mix_rate","type":"function","leftLabel":"int","description":" Return the current mix rate for a given voice. "},{"snippet":"get_modulate()${0}","displayText":"get_modulate","type":"function","leftLabel":"Color","description":" "},{"snippet":"get_operator()${0}","displayText":"get_operator","type":"function","leftLabel":"int","description":" "},{"snippet":"get_phonemes()${0}","displayText":"get_phonemes","type":"function","leftLabel":"Object","description":" Return the phoneme library. "},{"snippet":"get_point_in(${1:idx})${0}","displayText":"get_point_in","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_priority()${0}","displayText":"get_priority","type":"function","leftLabel":"float","description":" "},{"snippet":"get_resource(${1:name})${0}","displayText":"get_resource","type":"function","leftLabel":"Object","description":" Return the resource given a text-id. "},{"snippet":"get_resource()${0}","displayText":"get_resource","type":"function","leftLabel":"Object","description":" Return the loaded resource (only if loaded). Otherwise, returns null. "},{"snippet":"get_rotation()${0}","displayText":"get_rotation","type":"function","leftLabel":"float","description":" Return the base rotation for this layer (helper). "},{"snippet":"get_scenario()${0}","displayText":"get_scenario","type":"function","leftLabel":"RID","description":" "},{"snippet":"get_sections()${0}","displayText":"get_sections","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_segments()${0}","displayText":"get_segments","type":"function","leftLabel":"Vector2Array","description":" Return the array of segments. "},{"snippet":"get_selected()${0}","displayText":"get_selected","type":"function","leftLabel":"TreeItem","description":" "},{"snippet":"get_steering()${0}","displayText":"get_steering","type":"function","leftLabel":"float","description":" "},{"snippet":"get_stylebox(${1:name}, ${2:type})${0}","displayText":"get_stylebox","type":"function","leftLabel":"StyleBox","description":" "},{"snippet":"get_tab_icon(${1:tab_idx})${0}","displayText":"get_tab_icon","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_tab_size()${0}","displayText":"get_tab_size","type":"function","leftLabel":"int","description":" "},{"snippet":"get_v_frames()${0}","displayText":"get_v_frames","type":"function","leftLabel":"int","description":" "},{"snippet":"get_v_offset()${0}","displayText":"get_v_offset","type":"function","leftLabel":"float","description":" "},{"snippet":"get_v_scroll()${0}","displayText":"get_v_scroll","type":"function","leftLabel":"int","description":" "},{"snippet":"get_variable(${1:variable})${0}","displayText":"get_variable","type":"function","leftLabel":"float","description":" Return a specific variable for the particle system (see VAR_* enum). "},{"snippet":"get_vertices()${0}","displayText":"get_vertices","type":"function","leftLabel":"Vector3Array","description":" "},{"snippet":"get_viewport()${0}","displayText":"get_viewport","type":"function","leftLabel":"RID","description":" Get the viewport RID from the visual server. "},{"snippet":"get_world_2d()${0}","displayText":"get_world_2d","type":"function","leftLabel":"Object","description":" "},{"snippet":"generate_aabb()${0}","displayText":"generate_aabb","type":"function","leftLabel":"","description":" Generate a new visibility AABB, using mesh AABB and instance transforms. Since instance information is stored in the [VisualServer], this function is VERY SLOW and must NOT be used often. "},{"snippet":"get_action_id(${1:action})${0}","displayText":"get_action_id","type":"function","leftLabel":"int","description":" "},{"snippet":"get_animation(${1:name})${0}","displayText":"get_animation","type":"function","leftLabel":"Animation","description":" Get an [Animation] resource by requesting a name. "},{"snippet":"get_ao_radius()${0}","displayText":"get_ao_radius","type":"function","leftLabel":"float","description":" "},{"snippet":"get_axis_lock()${0}","displayText":"get_axis_lock","type":"function","leftLabel":"int","description":" "},{"snippet":"get_bake_flag(${1:flag})${0}","displayText":"get_bake_flag","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_bake_mode()${0}","displayText":"get_bake_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_base_path()${0}","displayText":"get_base_path","type":"function","leftLabel":"NodePath","description":" "},{"snippet":"get_bone_name(${1:bone_idx})${0}","displayText":"get_bone_name","type":"function","leftLabel":"String","description":" Return the name of the bone at index \"index\" "},{"snippet":"get_bone_pose(${1:bone_idx})${0}","displayText":"get_bone_pose","type":"function","leftLabel":"Transform","description":" Return the pose transform for bone \"bone_idx\". "},{"snippet":"get_bone_rest(${1:bone_idx})${0}","displayText":"get_bone_rest","type":"function","leftLabel":"Transform","description":" Return the rest transform for a bone \"bone_idx\". "},{"snippet":"get_cell_item(${1:x}, ${2:y}, ${3:z})${0}","displayText":"get_cell_item","type":"function","leftLabel":"int","description":" "},{"snippet":"get_cell_mode(${1:column})${0}","displayText":"get_cell_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_cell_size()${0}","displayText":"get_cell_size","type":"function","leftLabel":"Vector2","description":" Return the cell size. "},{"snippet":"get_char_size(${1:char}, ${2:next})${0}","displayText":"get_char_size","type":"function","leftLabel":"Vector2","description":" Return the size of a character, optionally taking kerning into account if the next character is provided. "},{"snippet":"get_clip_text()${0}","displayText":"get_clip_text","type":"function","leftLabel":"bool","description":" Return the state of the [i]clip_text[/i] property (see [method set_clip_text]) "},{"snippet":"get_clipboard()${0}","displayText":"get_clipboard","type":"function","leftLabel":"String","description":" Get clipboard from the host OS. "},{"snippet":"get_drag_data(${1:pos})${0}","displayText":"get_drag_data","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_draw_flag(${1:flag})${0}","displayText":"get_draw_flag","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_draw_mode()${0}","displayText":"get_draw_mode","type":"function","leftLabel":"int","description":" Return the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overiding _draw() or connecting to \"draw\" signal. The visual state of the button is defined by the DRAW_* enum. "},{"snippet":"get_edge_damp()${0}","displayText":"get_edge_damp","type":"function","leftLabel":"float","description":" "},{"snippet":"get_edge_meta(${1:idx})${0}","displayText":"get_edge_meta","type":"function","leftLabel":"","description":" "},{"snippet":"get_face_edge(${1:idx}, ${2:edge})${0}","displayText":"get_face_edge","type":"function","leftLabel":"int","description":" "},{"snippet":"get_face_meta(${1:idx})${0}","displayText":"get_face_meta","type":"function","leftLabel":"","description":" "},{"snippet":"get_font_list(${1:arg0})${0}","displayText":"get_font_list","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_icon_list(${1:arg0})${0}","displayText":"get_icon_list","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_item_icon(${1:idx})${0}","displayText":"get_item_icon","type":"function","leftLabel":"Object","description":" Return the icon of the item at index \"idx\". "},{"snippet":"get_item_list()${0}","displayText":"get_item_list","type":"function","leftLabel":"IntArray","description":" Return the list of items. "},{"snippet":"get_item_mesh(${1:id})${0}","displayText":"get_item_mesh","type":"function","leftLabel":"Mesh","description":" Return the mesh of the item. "},{"snippet":"get_item_name(${1:id})${0}","displayText":"get_item_name","type":"function","leftLabel":"String","description":" Return the name of the item. "},{"snippet":"get_item_rect()${0}","displayText":"get_item_rect","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"get_item_text(${1:idx})${0}","displayText":"get_item_text","type":"function","leftLabel":"String","description":" Return the text of the item at index \"idx\". "},{"snippet":"get_limit_end()${0}","displayText":"get_limit_end","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_line_edit()${0}","displayText":"get_line_edit","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_main_loop()${0}","displayText":"get_main_loop","type":"function","leftLabel":"Object","description":" Return the main loop object (see [MainLoop]). "},{"snippet":"get_meta_list()${0}","displayText":"get_meta_list","type":"function","leftLabel":"StringArray","description":" Return the list of metadatas in the object. "},{"snippet":"get_mirroring()${0}","displayText":"get_mirroring","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_mouse_pos()${0}","displayText":"get_mouse_pos","type":"function","leftLabel":"Vector2","description":" Return the global, unscaled, screen pointer coordinates. If the 2D viewport has been scaled, it may not work well with [Camera] or controls. "},{"snippet":"get_multimesh()${0}","displayText":"get_multimesh","type":"function","leftLabel":"Object","description":" Return the [MultiMesh] that is used for instancing. "},{"snippet":"get_node_data()${0}","displayText":"get_node_data","type":"function","leftLabel":"String","description":" "},{"snippet":"get_node_list()${0}","displayText":"get_node_list","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_node_name()${0}","displayText":"get_node_name","type":"function","leftLabel":"String","description":" "},{"snippet":"get_node_type()${0}","displayText":"get_node_type","type":"function","leftLabel":"int","description":" "},{"snippet":"get_packet_ip()${0}","displayText":"get_packet_ip","type":"function","leftLabel":"String","description":" "},{"snippet":"get_pan_depth(${1:voice})${0}","displayText":"get_pan_depth","type":"function","leftLabel":"float","description":" Return the current pan depth for a given voice (not used unless the hardware supports 3D sound) "},{"snippet":"get_parameter(${1:arg0})${0}","displayText":"get_parameter","type":"function","leftLabel":"float","description":" "},{"snippet":"get_parameter(${1:param})${0}","displayText":"get_parameter","type":"function","leftLabel":"","description":" Return a parameter, parameters are defined in the PARAM_* enum. The type of each parameter may change, so it's best to check the enum. "},{"snippet":"get_plot_size()${0}","displayText":"get_plot_size","type":"function","leftLabel":"float","description":" "},{"snippet":"get_point_out(${1:idx})${0}","displayText":"get_point_out","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_point_pos(${1:idx})${0}","displayText":"get_point_pos","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_polyphony()${0}","displayText":"get_polyphony","type":"function","leftLabel":"int","description":" "},{"snippet":"get_projector()${0}","displayText":"get_projector","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_rest_info(${1:shape})${0}","displayText":"get_rest_info","type":"function","leftLabel":"Dictionary","description":" "},{"snippet":"get_shape_rid()${0}","displayText":"get_shape_rid","type":"function","leftLabel":"RID","description":" "},{"snippet":"get_singleton(${1:arg0})${0}","displayText":"get_singleton","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_stiffness()${0}","displayText":"get_stiffness","type":"function","leftLabel":"float","description":" Return the stiffness of the spring joint. "},{"snippet":"get_tab_align()${0}","displayText":"get_tab_align","type":"function","leftLabel":"int","description":" Return tab alignment, from the ALIGN_* enum. "},{"snippet":"get_tab_count()${0}","displayText":"get_tab_count","type":"function","leftLabel":"int","description":" Return the amount of tabs. "},{"snippet":"get_tab_title(${1:tab_idx})${0}","displayText":"get_tab_title","type":"function","leftLabel":"String","description":" Return the title for the tab. Tab titles are by default the children node name, but this can be overriden. "},{"snippet":"get_test_cube()${0}","displayText":"get_test_cube","type":"function","leftLabel":"RID","description":" "},{"snippet":"get_tiles_ids()${0}","displayText":"get_tiles_ids","type":"function","leftLabel":"Array","description":" "},{"snippet":"get_time_left()${0}","displayText":"get_time_left","type":"function","leftLabel":"float","description":" Return the time left for timeout if the timer is active. "},{"snippet":"get_transform()${0}","displayText":"get_transform","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"get_type_list(${1:arg0})${0}","displayText":"get_type_list","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_undo_redo()${0}","displayText":"get_undo_redo","type":"function","leftLabel":"UndoRedo","description":" "},{"snippet":"get_unique_ID()${0}","displayText":"get_unique_ID","type":"function","leftLabel":"String","description":" "},{"snippet":"get_unix_time()${0}","displayText":"get_unix_time","type":"function","leftLabel":"int","description":" "},{"snippet":"get_up_vector()${0}","displayText":"get_up_vector","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_vertex_uv(${1:idx})${0}","displayText":"get_vertex_uv","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_volume_db(${1:voice})${0}","displayText":"get_volume_db","type":"function","leftLabel":"float","description":" "},{"snippet":"get_volume_db()${0}","displayText":"get_volume_db","type":"function","leftLabel":"float","description":" "},{"snippet":"get_wait_time()${0}","displayText":"get_wait_time","type":"function","leftLabel":"float","description":" Return the wait time. When the time is over, it will emit the timeout signal. "},{"snippet":"get_absorption()${0}","displayText":"get_absorption","type":"function","leftLabel":"float","description":" "},{"snippet":"get_background()${0}","displayText":"get_background","type":"function","leftLabel":"int","description":" "},{"snippet":"get_blend_mode()${0}","displayText":"get_blend_mode","type":"function","leftLabel":"int","description":" Return the current blending mode from enum BLEND_MODE_*. "},{"snippet":"get_blend_time(${1:anim_from}, ${2:anim_to})${0}","displayText":"get_blend_time","type":"function","leftLabel":"float","description":" Get the blend time between two animations, referemced by their names. "},{"snippet":"get_bone_count()${0}","displayText":"get_bone_count","type":"function","leftLabel":"int","description":" Return the amount of bones in the skeleton. "},{"snippet":"get_build_mode()${0}","displayText":"get_build_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_camera_pos()${0}","displayText":"get_camera_pos","type":"function","leftLabel":"Vector2","description":" Return the camera position. "},{"snippet":"get_click_mask()${0}","displayText":"get_click_mask","type":"function","leftLabel":"BitMap","description":" "},{"snippet":"get_color_list(${1:arg0})${0}","displayText":"get_color_list","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_cursor_pos()${0}","displayText":"get_cursor_pos","type":"function","leftLabel":"int","description":" Return the cursor position inside the [LineEdit]. "},{"snippet":"get_dark_color()${0}","displayText":"get_dark_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"get_edge_count()${0}","displayText":"get_edge_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_edge_faces(${1:idx})${0}","displayText":"get_edge_faces","type":"function","leftLabel":"IntArray","description":" "},{"snippet":"get_face_count()${0}","displayText":"get_face_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_fixed_flag(${1:flag})${0}","displayText":"get_fixed_flag","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_global_pos()${0}","displayText":"get_global_pos","type":"function","leftLabel":"Vector2","description":" Return the global position of the 2D node. "},{"snippet":"get_hide_on_ok()${0}","displayText":"get_hide_on_ok","type":"function","leftLabel":"bool","description":" Return true if the dialog will be hidden when accepted (default true). "},{"snippet":"get_item_count()${0}","displayText":"get_item_count","type":"function","leftLabel":"int","description":" Return the amount of items. "},{"snippet":"get_item_index(${1:id})${0}","displayText":"get_item_index","type":"function","leftLabel":"int","description":" Find and return the index of the item containing a given id. "},{"snippet":"get_item_shape(${1:id})${0}","displayText":"get_item_shape","type":"function","leftLabel":"Shape","description":" "},{"snippet":"get_layer_mask()${0}","displayText":"get_layer_mask","type":"function","leftLabel":"int","description":" "},{"snippet":"get_light_code()${0}","displayText":"get_light_code","type":"function","leftLabel":"String","description":" "},{"snippet":"get_line_count()${0}","displayText":"get_line_count","type":"function","leftLabel":"int","description":" Return the amount of lines. "},{"snippet":"get_line_width()${0}","displayText":"get_line_width","type":"function","leftLabel":"float","description":" Return the line width for geometry drawn with FLAG_WIREFRAME enabled, or LINE primitives. Note that not all hardware or VisualServer backends support this (like DirectX). "},{"snippet":"get_loop_begin()${0}","displayText":"get_loop_begin","type":"function","leftLabel":"int","description":" Return the loop begin position. "},{"snippet":"get_loop_count()${0}","displayText":"get_loop_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_max_length()${0}","displayText":"get_max_length","type":"function","leftLabel":"int","description":" Return the maximum amount of characters the [LineEdit] can edit. If 0 is returned, no limit exists. "},{"snippet":"get_model_name()${0}","displayText":"get_model_name","type":"function","leftLabel":"String","description":" "},{"snippet":"get_mouse_mode()${0}","displayText":"get_mouse_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_node_count()${0}","displayText":"get_node_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_pan_height(${1:voice})${0}","displayText":"get_pan_height","type":"function","leftLabel":"float","description":" Return the current pan height for a given voice (not used unless the hardware supports 3D sound) "},{"snippet":"get_pause_mode()${0}","displayText":"get_pause_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_pixel_size()${0}","displayText":"get_pixel_size","type":"function","leftLabel":"float","description":" "},{"snippet":"get_point_size()${0}","displayText":"get_point_size","type":"function","leftLabel":"float","description":" "},{"snippet":"get_point_tilt(${1:idx})${0}","displayText":"get_point_tilt","type":"function","leftLabel":"float","description":" "},{"snippet":"get_process_ID()${0}","displayText":"get_process_ID","type":"function","leftLabel":"int","description":" "},{"snippet":"get_projection()${0}","displayText":"get_projection","type":"function","leftLabel":"int","description":" "},{"snippet":"get_randomness(${1:arg0})${0}","displayText":"get_randomness","type":"function","leftLabel":"float","description":" Return the randomness for a specific variable of the particle system. Randomness produces small changes from the default each time a particle is emitted. "},{"snippet":"get_randomness(${1:param})${0}","displayText":"get_randomness","type":"function","leftLabel":"float","description":" "},{"snippet":"get_resolution()${0}","displayText":"get_resolution","type":"function","leftLabel":"int","description":" "},{"snippet":"get_result_rid(${1:idx})${0}","displayText":"get_result_rid","type":"function","leftLabel":"RID","description":" "},{"snippet":"get_saturation()${0}","displayText":"get_saturation","type":"function","leftLabel":"float","description":" "},{"snippet":"get_source_md5(${1:idx})${0}","displayText":"get_source_md5","type":"function","leftLabel":"String","description":" "},{"snippet":"get_space_left()${0}","displayText":"get_space_left","type":"function","leftLabel":"int","description":" "},{"snippet":"get_stream_pos()${0}","displayText":"get_stream_pos","type":"function","leftLabel":"float","description":" "},{"snippet":"get_target_fps()${0}","displayText":"get_target_fps","type":"function","leftLabel":"float","description":" "},{"snippet":"get_text_align()${0}","displayText":"get_text_align","type":"function","leftLabel":"int","description":" "},{"snippet":"get_ticks_msec()${0}","displayText":"get_ticks_msec","type":"function","leftLabel":"int","description":" Return the amount of time passed in milliseconds since the engine started. "},{"snippet":"get_time_scale()${0}","displayText":"get_time_scale","type":"function","leftLabel":"float","description":" "},{"snippet":"get_unit_value()${0}","displayText":"get_unit_value","type":"function","leftLabel":"float","description":" Return value mapped to 0 to 1 (unit) range. "},{"snippet":"get_vertex_uv2(${1:idx})${0}","displayText":"get_vertex_uv2","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_xfade_time()${0}","displayText":"get_xfade_time","type":"function","leftLabel":"float","description":" Return the cross-fade time between random phonemes. "},{"snippet":"globalize_path(${1:path})${0}","displayText":"globalize_path","type":"function","leftLabel":"String","description":" Convert a localized path (res://) to a full native OS path. "},{"snippet":"get_action_list(${1:action})${0}","displayText":"get_action_list","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_ao_strength()${0}","displayText":"get_ao_strength","type":"function","leftLabel":"float","description":" "},{"snippet":"get_baked_light()${0}","displayText":"get_baked_light","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_baked_tilts()${0}","displayText":"get_baked_tilts","type":"function","leftLabel":"RealArray","description":" "},{"snippet":"get_bone_parent(${1:bone_idx})${0}","displayText":"get_bone_parent","type":"function","leftLabel":"int","description":" Return the bone index which is the parent of the bone at \"bone_idx\". If -1, then bone has no parent. Note that the parent bone returned will always be less than \"bone_idx\". "},{"snippet":"get_border_size()${0}","displayText":"get_border_size","type":"function","leftLabel":"int","description":" "},{"snippet":"get_breakpoints()${0}","displayText":"get_breakpoints","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_button_icon(${1:button})${0}","displayText":"get_button_icon","type":"function","leftLabel":"Object","description":" Return the icon of an existing button. "},{"snippet":"get_button_icon()${0}","displayText":"get_button_icon","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_button_list()${0}","displayText":"get_button_list","type":"function","leftLabel":"Array","description":" Return the list of all the buttons in the group. "},{"snippet":"get_button_text(${1:button})${0}","displayText":"get_button_text","type":"function","leftLabel":"String","description":" Return the text of an existing button. "},{"snippet":"get_canvas_item()${0}","displayText":"get_canvas_item","type":"function","leftLabel":"RID","description":" Return the canvas item RID used by [VisualServer] for this item. "},{"snippet":"get_center_size()${0}","displayText":"get_center_size","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_child_count()${0}","displayText":"get_child_count","type":"function","leftLabel":"int","description":" Return the amount of children nodes. "},{"snippet":"get_current_dir()${0}","displayText":"get_current_dir","type":"function","leftLabel":"String","description":" Get the current working directory of the file dialog. "},{"snippet":"get_current_tab()${0}","displayText":"get_current_tab","type":"function","leftLabel":"int","description":" Return the current tab that is being showed. "},{"snippet":"get_custom_aabb()${0}","displayText":"get_custom_aabb","type":"function","leftLabel":"AABB","description":" "},{"snippet":"get_custom_step()${0}","displayText":"get_custom_step","type":"function","leftLabel":"float","description":" "},{"snippet":"get_default_pan()${0}","displayText":"get_default_pan","type":"function","leftLabel":"float","description":" "},{"snippet":"get_drag_margin(${1:margin})${0}","displayText":"get_drag_margin","type":"function","leftLabel":"float","description":" Return the margins needed to drag the camera (see [method set_drag_margin]). "},{"snippet":"get_draw_center()${0}","displayText":"get_draw_center","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_drive_count()${0}","displayText":"get_drive_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_edge_vertex(${1:idx}, ${2:vertex})${0}","displayText":"get_edge_vertex","type":"function","leftLabel":"int","description":" "},{"snippet":"get_endian_swap()${0}","displayText":"get_endian_swap","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_environment(${1:environment})${0}","displayText":"get_environment","type":"function","leftLabel":"String","description":" Return an environment variable. "},{"snippet":"get_environment()${0}","displayText":"get_environment","type":"function","leftLabel":"Environment","description":" "},{"snippet":"get_face_normal(${1:idx})${0}","displayText":"get_face_normal","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_face_vertex(${1:idx}, ${2:vertex})${0}","displayText":"get_face_vertex","type":"function","leftLabel":"int","description":" "},{"snippet":"get_filter_gain(${1:voice})${0}","displayText":"get_filter_gain","type":"function","leftLabel":"float","description":" "},{"snippet":"get_filter_type(${1:voice})${0}","displayText":"get_filter_type","type":"function","leftLabel":"int","description":" Return the current filter type in use (see FILTER_* enum) for a given voice. "},{"snippet":"get_focus_owner()${0}","displayText":"get_focus_owner","type":"function","leftLabel":"Control","description":" Return which control is owning the keyboard focus, or null if no one. "},{"snippet":"get_frame_count()${0}","displayText":"get_frame_count","type":"function","leftLabel":"int","description":" Return the amount of frames. "},{"snippet":"get_global_rect()${0}","displayText":"get_global_rect","type":"function","leftLabel":"Rect2","description":" Return position and size of the Control, relative to the top-left corner of the [i]window[/i] Control. This is a helper (see [method get_global_pos],[method get_size]). "},{"snippet":"get_grid_radius()${0}","displayText":"get_grid_radius","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_half_offset()${0}","displayText":"get_half_offset","type":"function","leftLabel":"int","description":" "},{"snippet":"get_icon_region(${1:column})${0}","displayText":"get_icon_region","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"get_instance_ID()${0}","displayText":"get_instance_ID","type":"function","leftLabel":"int","description":" Return the instance ID. All objects have a unique instance ID. "},{"snippet":"get_light_color()${0}","displayText":"get_light_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"get_limit_begin()${0}","displayText":"get_limit_begin","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_line_height()${0}","displayText":"get_line_height","type":"function","leftLabel":"int","description":" Return the height of a line. "},{"snippet":"get_loop_format()${0}","displayText":"get_loop_format","type":"function","leftLabel":"int","description":" Return the loop format, see LOOP_* enum. "},{"snippet":"get_margin_size(${1:arg0})${0}","displayText":"get_margin_size","type":"function","leftLabel":"float","description":" "},{"snippet":"get_mouse_speed()${0}","displayText":"get_mouse_speed","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_node_offset()${0}","displayText":"get_node_offset","type":"function","leftLabel":"int","description":" "},{"snippet":"get_normal_damp()${0}","displayText":"get_normal_damp","type":"function","leftLabel":"float","description":" "},{"snippet":"get_octant_size()${0}","displayText":"get_octant_size","type":"function","leftLabel":"int","description":" "},{"snippet":"get_packet_port()${0}","displayText":"get_packet_port","type":"function","leftLabel":"int","description":" "},{"snippet":"get_piece_count()${0}","displayText":"get_piece_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_pitch_scale(${1:voice})${0}","displayText":"get_pitch_scale","type":"function","leftLabel":"float","description":" Return the current pitch scale for a given voice. "},{"snippet":"get_pitch_scale()${0}","displayText":"get_pitch_scale","type":"function","leftLabel":"float","description":" "},{"snippet":"get_point_count()${0}","displayText":"get_point_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_region_rect()${0}","displayText":"get_region_rect","type":"function","leftLabel":"Rect2","description":" Return the region rect to read from. "},{"snippet":"get_remote_node()${0}","displayText":"get_remote_node","type":"function","leftLabel":"NodePath","description":" "},{"snippet":"get_render_info(${1:arg0})${0}","displayText":"get_render_info","type":"function","leftLabel":"int","description":" "},{"snippet":"get_rest_length()${0}","displayText":"get_rest_length","type":"function","leftLabel":"float","description":" Return the resting length of the spring joint. The joint will always try to go to back this length when pulled apart. "},{"snippet":"get_reverb_mode()${0}","displayText":"get_reverb_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_reverb_room(${1:voice})${0}","displayText":"get_reverb_room","type":"function","leftLabel":"float","description":" Return the current reverb room type for a given voice (see REVERB_* enum). "},{"snippet":"get_selected_ID()${0}","displayText":"get_selected_ID","type":"function","leftLabel":"int","description":" "},{"snippet":"get_shadow_mode()${0}","displayText":"get_shadow_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_shape_count()${0}","displayText":"get_shape_count","type":"function","leftLabel":"int","description":" Return the amount of shapes in the collision body. "},{"snippet":"get_signal_list()${0}","displayText":"get_signal_list","type":"function","leftLabel":"Array","description":" Return the list of signals as an array of dictionaries. "},{"snippet":"get_simple_path(${1:start}, ${2:end}, ${3:optimize})${0}","displayText":"get_simple_path","type":"function","leftLabel":"Vector3Array","description":" "},{"snippet":"get_sound_space()${0}","displayText":"get_sound_space","type":"function","leftLabel":"RID","description":" "},{"snippet":"get_source_code()${0}","displayText":"get_source_code","type":"function","leftLabel":"String","description":" Return the script source code (if available). "},{"snippet":"get_source_path(${1:idx})${0}","displayText":"get_source_path","type":"function","leftLabel":"String","description":" "},{"snippet":"get_space_state()${0}","displayText":"get_space_state","type":"function","leftLabel":"PhysicsDirectSpaceState","description":" "},{"snippet":"get_stage_count()${0}","displayText":"get_stage_count","type":"function","leftLabel":"int","description":" Return the total amount of stages (calls to [poll] ) needed to completely load this resource. "},{"snippet":"get_stream_name()${0}","displayText":"get_stream_name","type":"function","leftLabel":"String","description":" "},{"snippet":"get_string_size(${1:string})${0}","displayText":"get_string_size","type":"function","leftLabel":"Vector2","description":" Return the size of a string, taking kerning and advance into account. "},{"snippet":"get_target_path()${0}","displayText":"get_target_path","type":"function","leftLabel":"NodePath","description":" "},{"snippet":"get_tempo_scale()${0}","displayText":"get_tempo_scale","type":"function","leftLabel":"float","description":" "},{"snippet":"get_track_count()${0}","displayText":"get_track_count","type":"function","leftLabel":"int","description":" Return the amount of tracks in the animation. "},{"snippet":"get_translation()${0}","displayText":"get_translation","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_unit_offset()${0}","displayText":"get_unit_offset","type":"function","leftLabel":"float","description":" "},{"snippet":"get_update_mode()${0}","displayText":"get_update_mode","type":"function","leftLabel":"int","description":" Return the type of update that the stream uses. Some types of stream may need manual polling. "},{"snippet":"get_vertex_code()${0}","displayText":"get_vertex_code","type":"function","leftLabel":"String","description":" "},{"snippet":"get_vertex_meta(${1:idx})${0}","displayText":"get_vertex_meta","type":"function","leftLabel":"","description":" "},{"snippet":"get_voice_count()${0}","displayText":"get_voice_count","type":"function","leftLabel":"int","description":" Return the amount of simultaneous voices that will be used for playback. "},{"snippet":"generate_normals()${0}","displayText":"generate_normals","type":"function","leftLabel":"","description":" "},{"snippet":"get_baked_length()${0}","displayText":"get_baked_length","type":"function","leftLabel":"float","description":" "},{"snippet":"get_baked_points()${0}","displayText":"get_baked_points","type":"function","leftLabel":"Vector2Array","description":" "},{"snippet":"get_border_blend()${0}","displayText":"get_border_blend","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_button_count()${0}","displayText":"get_button_count","type":"function","leftLabel":"int","description":" Return the amount of buttons in the array. "},{"snippet":"get_button_count(${1:column})${0}","displayText":"get_button_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_close_button()${0}","displayText":"get_close_button","type":"function","leftLabel":"TextureButton","description":" Return the close [TextureButton]. "},{"snippet":"get_cmdline_args()${0}","displayText":"get_cmdline_args","type":"function","leftLabel":"StringArray","description":" Return the commandline passed to the engine. "},{"snippet":"get_color_phases()${0}","displayText":"get_color_phases","type":"function","leftLabel":"int","description":" "},{"snippet":"get_column_title(${1:column})${0}","displayText":"get_column_title","type":"function","leftLabel":"String","description":" "},{"snippet":"get_column_width(${1:arg0})${0}","displayText":"get_column_width","type":"function","leftLabel":"int","description":" "},{"snippet":"get_current_file()${0}","displayText":"get_current_file","type":"function","leftLabel":"String","description":" Get the current selected file of the file dialog (empty if none). "},{"snippet":"get_current_line()${0}","displayText":"get_current_line","type":"function","leftLabel":"int","description":" "},{"snippet":"get_current_path()${0}","displayText":"get_current_path","type":"function","leftLabel":"String","description":" Get the current selected path (directory and file) of the file dialog (empty if none). "},{"snippet":"get_cursor_shape(${1:pos})${0}","displayText":"get_cursor_shape","type":"function","leftLabel":"int","description":" Return the cursor shape at a certain position in the control. "},{"snippet":"get_custom_level()${0}","displayText":"get_custom_level","type":"function","leftLabel":"String","description":" "},{"snippet":"get_default_font()${0}","displayText":"get_default_font","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_dependencies(${1:arg0})${0}","displayText":"get_dependencies","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_emit_timeout()${0}","displayText":"get_emit_timeout","type":"function","leftLabel":"float","description":" "},{"snippet":"get_engine_force()${0}","displayText":"get_engine_force","type":"function","leftLabel":"float","description":" "},{"snippet":"get_frames_drawn()${0}","displayText":"get_frames_drawn","type":"function","leftLabel":"int","description":" Return the total amount of frames drawn. "},{"snippet":"get_gamma_adjust()${0}","displayText":"get_gamma_adjust","type":"function","leftLabel":"float","description":" "},{"snippet":"get_h_size_flags()${0}","displayText":"get_h_size_flags","type":"function","leftLabel":"int","description":" Hint for containers, return horizontal positioning flags. "},{"snippet":"get_inverse_mass()${0}","displayText":"get_inverse_mass","type":"function","leftLabel":"float","description":" Return the inverse of the mass of the body. "},{"snippet":"get_item_submenu(${1:idx})${0}","displayText":"get_item_submenu","type":"function","leftLabel":"String","description":" "},{"snippet":"get_kerning_pair(${1:arg0}, ${2:arg1})${0}","displayText":"get_kerning_pair","type":"function","leftLabel":"int","description":" Return a kerning pair as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character. "},{"snippet":"get_light_shader()${0}","displayText":"get_light_shader","type":"function","leftLabel":"int","description":" "},{"snippet":"get_message_list()${0}","displayText":"get_message_list","type":"function","leftLabel":"StringArray","description":" Return all the messages (keys). "},{"snippet":"get_minimum_size()${0}","displayText":"get_minimum_size","type":"function","leftLabel":"Vector2","description":" Return the minimum size that this stylebox can be shrunk to. "},{"snippet":"get_motion_scale()${0}","displayText":"get_motion_scale","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_next_visible()${0}","displayText":"get_next_visible","type":"function","leftLabel":"TreeItem","description":" "},{"snippet":"get_over_texture()${0}","displayText":"get_over_texture","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_partial_data(${1:bytes})${0}","displayText":"get_partial_data","type":"function","leftLabel":"Array","description":" Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an [Error] code, and a data array. "},{"snippet":"get_piece_offset(${1:idx})${0}","displayText":"get_piece_offset","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_prev_visible()${0}","displayText":"get_prev_visible","type":"function","leftLabel":"TreeItem","description":" "},{"snippet":"get_process_info(${1:arg0})${0}","displayText":"get_process_info","type":"function","leftLabel":"int","description":" "},{"snippet":"get_range_config(${1:column})${0}","displayText":"get_range_config","type":"function","leftLabel":"Dictionary","description":" "},{"snippet":"get_result_count()${0}","displayText":"get_result_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_section_keys(${1:arg0})${0}","displayText":"get_section_keys","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_self_opacity()${0}","displayText":"get_self_opacity","type":"function","leftLabel":"float","description":" Return the canvas item self-opacity. "},{"snippet":"get_shader_param(${1:param})${0}","displayText":"get_shader_param","type":"function","leftLabel":"","description":" "},{"snippet":"get_shadow_param(${1:param})${0}","displayText":"get_shadow_param","type":"function","leftLabel":"float","description":" "},{"snippet":"get_source_count()${0}","displayText":"get_source_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_split_offset()${0}","displayText":"get_split_offset","type":"function","leftLabel":"int","description":" Return the split offset. "},{"snippet":"get_uv_transform()${0}","displayText":"get_uv_transform","type":"function","leftLabel":"Transform","description":" Returns the special transform used to post-transform UV coordinates of the uv_xfrom tecoord mode: TEXCOORD_UV_TRANSFORM. "},{"snippet":"get_v_size_flags()${0}","displayText":"get_v_size_flags","type":"function","leftLabel":"int","description":" Hint for containers, return vertical positioning flags. "},{"snippet":"get_vertex_bones(${1:idx})${0}","displayText":"get_vertex_bones","type":"function","leftLabel":"IntArray","description":" "},{"snippet":"get_vertex_color(${1:idx})${0}","displayText":"get_vertex_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"get_vertex_count()${0}","displayText":"get_vertex_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_vertex_edges(${1:idx})${0}","displayText":"get_vertex_edges","type":"function","leftLabel":"IntArray","description":" "},{"snippet":"get_vertex_faces(${1:idx})${0}","displayText":"get_vertex_faces","type":"function","leftLabel":"IntArray","description":" "},{"snippet":"get_visible_name()${0}","displayText":"get_visible_name","type":"function","leftLabel":"String","description":" "},{"snippet":"get_visible_rect()${0}","displayText":"get_visible_rect","type":"function","leftLabel":"Rect2","description":" Return the final, visuble rect in global screen coordinates. "},{"snippet":"grab_click_focus()${0}","displayText":"grab_click_focus","type":"function","leftLabel":"","description":" "},{"snippet":"get_accelerometer()${0}","displayText":"get_accelerometer","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_applied_force()${0}","displayText":"get_applied_force","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_bake_interval()${0}","displayText":"get_bake_interval","type":"function","leftLabel":"float","description":" "},{"snippet":"get_closest_point(${1:to_point})${0}","displayText":"get_closest_point","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_closest_point(${1:point})${0}","displayText":"get_closest_point","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_collision_pos()${0}","displayText":"get_collision_pos","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_connect_range()${0}","displayText":"get_connect_range","type":"function","leftLabel":"float","description":" Return the range for auto-connecting two portals from different rooms sharing the same space. "},{"snippet":"get_constant_list(${1:arg0})${0}","displayText":"get_constant_list","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_contact_count()${0}","displayText":"get_contact_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_edited_column()${0}","displayText":"get_edited_column","type":"function","leftLabel":"int","description":" "},{"snippet":"get_explosiveness()${0}","displayText":"get_explosiveness","type":"function","leftLabel":"float","description":" "},{"snippet":"get_filter_cutoff(${1:voice})${0}","displayText":"get_filter_cutoff","type":"function","leftLabel":"float","description":" Return the current filter cutoff for a given voice. Cutoff goes from 0 to 22khz. "},{"snippet":"get_fragment_code()${0}","displayText":"get_fragment_code","type":"function","leftLabel":"String","description":" "},{"snippet":"get_friction_slip()${0}","displayText":"get_friction_slip","type":"function","leftLabel":"float","description":" "},{"snippet":"get_geometry_hint()${0}","displayText":"get_geometry_hint","type":"function","leftLabel":"Vector3Array","description":" "},{"snippet":"get_hover_texture()${0}","displayText":"get_hover_texture","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_intersections(${1:from}, ${2:to})${0}","displayText":"get_intersections","type":"function","leftLabel":"Vector2Array","description":" "},{"snippet":"get_invert_border()${0}","displayText":"get_invert_border","type":"function","leftLabel":"float","description":" "},{"snippet":"get_item_metadata(${1:idx})${0}","displayText":"get_item_metadata","type":"function","leftLabel":"","description":" "},{"snippet":"get_message_count()${0}","displayText":"get_message_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_next_selected(${1:from})${0}","displayText":"get_next_selected","type":"function","leftLabel":"TreeItem","description":" "},{"snippet":"get_pascal_string()${0}","displayText":"get_pascal_string","type":"function","leftLabel":"String","description":" "},{"snippet":"get_piece_texture(${1:idx})${0}","displayText":"get_piece_texture","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_point_penalty(${1:idx})${0}","displayText":"get_point_penalty","type":"function","leftLabel":"float","description":" "},{"snippet":"get_polygon_count()${0}","displayText":"get_polygon_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_property_list()${0}","displayText":"get_property_list","type":"function","leftLabel":"Array","description":" Return the list of properties as an array of dictionaries, dictionaries countain: name:String, type:int (see TYPE_* enum in globals) and optionally: hint:int (see PROPERTY_HINT_* in globals), hint_string:String, usage:int (see PROPERTY_USAGE_* in globals). "},{"snippet":"get_quadrant_size()${0}","displayText":"get_quadrant_size","type":"function","leftLabel":"int","description":" Return the quadrant size, this optimizes drawing by batching chunks of map at draw/cull time. "},{"snippet":"get_resource_list()${0}","displayText":"get_resource_list","type":"function","leftLabel":"StringArray","description":" Return the list of resources inside the preloader. "},{"snippet":"get_response_code()${0}","displayText":"get_response_code","type":"function","leftLabel":"int","description":" "},{"snippet":"get_result_object(${1:idx})${0}","displayText":"get_result_object","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_rotation_mode()${0}","displayText":"get_rotation_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_scroll_offset()${0}","displayText":"get_scroll_offset","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_size_override()${0}","displayText":"get_size_override","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_skeleton_path()${0}","displayText":"get_skeleton_path","type":"function","leftLabel":"NodePath","description":" "},{"snippet":"get_sprite_frames()${0}","displayText":"get_sprite_frames","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_stretch_ratio()${0}","displayText":"get_stretch_ratio","type":"function","leftLabel":"float","description":" Hint for containers, return the stretch ratio. This value is relative to other stretch ratio, so if this control has 2 and another has 1, this one will be twice as big. "},{"snippet":"get_stylebox_list(${1:arg0})${0}","displayText":"get_stylebox_list","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_surface_count()${0}","displayText":"get_surface_count","type":"function","leftLabel":"int","description":" Return the amount of surfaces that the [Mesh] holds. "},{"snippet":"get_texcoord_mode(${1:param})${0}","displayText":"get_texcoord_mode","type":"function","leftLabel":"int","description":" Return the texture coordinate mode. Each texture param (from the PARAM_* enum) has one. It defines how the textures are mapped to the object. "},{"snippet":"get_texture_scale()${0}","displayText":"get_texture_scale","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_total_density()${0}","displayText":"get_total_density","type":"function","leftLabel":"float","description":" "},{"snippet":"get_total_gravity()${0}","displayText":"get_total_gravity","type":"function","leftLabel":"Vector2","description":" Return the total gravity vector being currently applied to this body. "},{"snippet":"get_under_texture()${0}","displayText":"get_under_texture","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_vertex_normal(${1:idx})${0}","displayText":"get_vertex_normal","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_viewport_path()${0}","displayText":"get_viewport_path","type":"function","leftLabel":"NodePath","description":" "},{"snippet":"get_viewport_rect()${0}","displayText":"get_viewport_rect","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"get_action_from_id(${1:id})${0}","displayText":"get_action_from_id","type":"function","leftLabel":"String","description":" "},{"snippet":"get_alpha_cut_mode()${0}","displayText":"get_alpha_cut_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_animation_list()${0}","displayText":"get_animation_list","type":"function","leftLabel":"StringArray","description":" Get the list of names of the animations stored in the player. "},{"snippet":"get_attribute_name(${1:arg0})${0}","displayText":"get_attribute_name","type":"function","leftLabel":"String","description":" "},{"snippet":"get_bone_transform(${1:bone_idx})${0}","displayText":"get_bone_transform","type":"function","leftLabel":"Transform","description":" "},{"snippet":"get_click_on_press()${0}","displayText":"get_click_on_press","type":"function","leftLabel":"bool","description":" Return the state of the click_on_press property (see [method set_click_on_press]). "},{"snippet":"get_collider_shape()${0}","displayText":"get_collider_shape","type":"function","leftLabel":"int","description":" "},{"snippet":"get_connected_host()${0}","displayText":"get_connected_host","type":"function","leftLabel":"String","description":" "},{"snippet":"get_connected_port()${0}","displayText":"get_connected_port","type":"function","leftLabel":"int","description":" "},{"snippet":"get_default_chorus()${0}","displayText":"get_default_chorus","type":"function","leftLabel":"float","description":" "},{"snippet":"get_default_margin(${1:margin})${0}","displayText":"get_default_margin","type":"function","leftLabel":"float","description":" Return the default offset of the margin \"margin\" (see MARGIN_* enum) of a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded. "},{"snippet":"get_default_reverb()${0}","displayText":"get_default_reverb","type":"function","leftLabel":"float","description":" "},{"snippet":"get_default_volume()${0}","displayText":"get_default_volume","type":"function","leftLabel":"float","description":" "},{"snippet":"get_disable_radius()${0}","displayText":"get_disable_radius","type":"function","leftLabel":"float","description":" "},{"snippet":"get_disabled_color()${0}","displayText":"get_disabled_color","type":"function","leftLabel":"Color","description":" Return the color for when the portal goes beyond the disable distance (see [method set_disable_distance]) and becomes disabled. "},{"snippet":"get_draw_range_end()${0}","displayText":"get_draw_range_end","type":"function","leftLabel":"float","description":" "},{"snippet":"get_emissor_offset()${0}","displayText":"get_emissor_offset","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_focused_button()${0}","displayText":"get_focused_button","type":"function","leftLabel":"BaseButton","description":" Return the focused button. "},{"snippet":"get_gravity_normal()${0}","displayText":"get_gravity_normal","type":"function","leftLabel":"Vector3","description":" Return the normal vector towards where gravity is pulling (by default, negative Y). "},{"snippet":"get_gravity_vector()${0}","displayText":"get_gravity_vector","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_icon_max_width(${1:column})${0}","displayText":"get_icon_max_width","type":"function","leftLabel":"int","description":" "},{"snippet":"get_initial_offset()${0}","displayText":"get_initial_offset","type":"function","leftLabel":"float","description":" Set the final offset of the groove on body A. "},{"snippet":"get_instance_color(${1:arg0})${0}","displayText":"get_instance_color","type":"function","leftLabel":"Color","description":" Get the color of a specific instance. "},{"snippet":"get_instance_count()${0}","displayText":"get_instance_count","type":"function","leftLabel":"int","description":" Return the amount of instnces that is going to be drawn. "},{"snippet":"get_item_area_rect(${1:item}, ${2:column})${0}","displayText":"get_item_area_rect","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"get_nodes_in_group(${1:arg0})${0}","displayText":"get_nodes_in_group","type":"function","leftLabel":"Array","description":" "},{"snippet":"get_normal_texture()${0}","displayText":"get_normal_texture","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_packet_address()${0}","displayText":"get_packet_address","type":"function","leftLabel":"int","description":" "},{"snippet":"get_parent_control()${0}","displayText":"get_parent_control","type":"function","leftLabel":"Control","description":" "},{"snippet":"get_parent_spatial()${0}","displayText":"get_parent_spatial","type":"function","leftLabel":"Object","description":" Return the parent [Spatial], or an empty [Object] if no parent exists or parent is not of type [Spatial]. "},{"snippet":"get_particles_path()${0}","displayText":"get_particles_path","type":"function","leftLabel":"NodePath","description":" "},{"snippet":"get_pressed_button()${0}","displayText":"get_pressed_button","type":"function","leftLabel":"BaseButton","description":" Return the pressed button. "},{"snippet":"get_rounded_values()${0}","displayText":"get_rounded_values","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_sample_library()${0}","displayText":"get_sample_library","type":"function","leftLabel":"SampleLibrary","description":" "},{"snippet":"get_sampler_octree()${0}","displayText":"get_sampler_octree","type":"function","leftLabel":"IntArray","description":" "},{"snippet":"get_screen_capture()${0}","displayText":"get_screen_capture","type":"function","leftLabel":"Image","description":" "},{"snippet":"get_selection_text()${0}","displayText":"get_selection_text","type":"function","leftLabel":"String","description":" Return the text inside the selection. "},{"snippet":"get_texture_offset()${0}","displayText":"get_texture_offset","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_texture_repeat()${0}","displayText":"get_texture_repeat","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_true_bit_count()${0}","displayText":"get_true_bit_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_unused_area_id()${0}","displayText":"get_unused_area_id","type":"function","leftLabel":"int","description":" "},{"snippet":"get_vertex_tangent(${1:idx})${0}","displayText":"get_vertex_tangent","type":"function","leftLabel":"Plane","description":" "},{"snippet":"get_vertex_weights(${1:idx})${0}","displayText":"get_vertex_weights","type":"function","leftLabel":"RealArray","description":" "},{"snippet":"get_visible_layers()${0}","displayText":"get_visible_layers","type":"function","leftLabel":"int","description":" "},{"snippet":"get_attribute_count()${0}","displayText":"get_attribute_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_attribute_value(${1:arg0})${0}","displayText":"get_attribute_value","type":"function","leftLabel":"String","description":" "},{"snippet":"get_collision_point()${0}","displayText":"get_collision_point","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_color_phase_pos(${1:phase})${0}","displayText":"get_color_phase_pos","type":"function","leftLabel":"float","description":" "},{"snippet":"get_custom_bg_color(${1:column})${0}","displayText":"get_custom_bg_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"get_depth_draw_mode()${0}","displayText":"get_depth_draw_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_emission_points()${0}","displayText":"get_emission_points","type":"function","leftLabel":"Vector3Array","description":" "},{"snippet":"get_executable_path()${0}","displayText":"get_executable_path","type":"function","leftLabel":"String","description":" Return the path to the current engine executable. "},{"snippet":"get_final_transform()${0}","displayText":"get_final_transform","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"get_focus_neighbour(${1:margin})${0}","displayText":"get_focus_neighbour","type":"function","leftLabel":"NodePath","description":" Return the forced neighbour for moving the input focus to. When pressing TAB or directional/joypad directions focus is moved to the next control in that direction. However, the neighbour to move to can be forced with this function. "},{"snippet":"get_focused_texture()${0}","displayText":"get_focused_texture","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_import_metadata()${0}","displayText":"get_import_metadata","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_inverse_inertia()${0}","displayText":"get_inverse_inertia","type":"function","leftLabel":"float","description":" Return the inverse of the inertia of the body. "},{"snippet":"get_linear_velocity()${0}","displayText":"get_linear_velocity","type":"function","leftLabel":"Vector2","description":" Return the current linear velocity of the body. "},{"snippet":"get_local_addresses()${0}","displayText":"get_local_addresses","type":"function","leftLabel":"Array","description":" "},{"snippet":"get_navigation_mesh()${0}","displayText":"get_navigation_mesh","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_percent_visible()${0}","displayText":"get_percent_visible","type":"function","leftLabel":"float","description":" "},{"snippet":"get_pressed_texture()${0}","displayText":"get_pressed_texture","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_processor_count()${0}","displayText":"get_processor_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_selected_column()${0}","displayText":"get_selected_column","type":"function","leftLabel":"int","description":" "},{"snippet":"get_shape_transform(${1:shape_idx})${0}","displayText":"get_shape_transform","type":"function","leftLabel":"Transform","description":" "},{"snippet":"get_solver_priority()${0}","displayText":"get_solver_priority","type":"function","leftLabel":"int","description":" "},{"snippet":"get_texture_pressed()${0}","displayText":"get_texture_pressed","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_uv84_normal_bit(${1:normal})${0}","displayText":"get_uv84_normal_bit","type":"function","leftLabel":"int","description":" "},{"snippet":"get_video_mode_size(${1:screen})${0}","displayText":"get_video_mode_size","type":"function","leftLabel":"Vector2","description":" Return the current video mode size. "},{"snippet":"get_visibility_aabb()${0}","displayText":"get_visibility_aabb","type":"function","leftLabel":"AABB","description":" Return the current visibility AABB. "},{"snippet":"get_visibility_mode()${0}","displayText":"get_visibility_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"groove_joint_create(${1:groove1_a}, ${2:groove2_a}, ${3:anchor_b}, ${4:body_a}, ${5:body_b})${0}","displayText":"groove_joint_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"get_angular_velocity()${0}","displayText":"get_angular_velocity","type":"function","leftLabel":"float","description":" Return the body angular velocity. This changes by physics granularity. See [set_angular_velocity]. "},{"snippet":"get_background_param(${1:param})${0}","displayText":"get_background_param","type":"function","leftLabel":"","description":" "},{"snippet":"get_bone_custom_pose(${1:bone_idx})${0}","displayText":"get_bone_custom_pose","type":"function","leftLabel":"Transform","description":" "},{"snippet":"get_bone_global_pose(${1:bone_idx})${0}","displayText":"get_bone_global_pose","type":"function","leftLabel":"Transform","description":" "},{"snippet":"get_camera_transform()${0}","displayText":"get_camera_transform","type":"function","leftLabel":"Transform","description":" Get the camera transform. Subclassed cameras (such as CharacterCamera) may provide different transforms than the [Node] transform. "},{"snippet":"get_canvas_transform()${0}","displayText":"get_canvas_transform","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"get_cell_subdivision()${0}","displayText":"get_cell_subdivision","type":"function","leftLabel":"int","description":" "},{"snippet":"get_colliding_bodies()${0}","displayText":"get_colliding_bodies","type":"function","leftLabel":"Array","description":" "},{"snippet":"get_collision_bounce()${0}","displayText":"get_collision_bounce","type":"function","leftLabel":"float","description":" "},{"snippet":"get_collision_margin()${0}","displayText":"get_collision_margin","type":"function","leftLabel":"float","description":" "},{"snippet":"get_collision_normal()${0}","displayText":"get_collision_normal","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_contact_collider(${1:contact_idx})${0}","displayText":"get_contact_collider","type":"function","leftLabel":"RID","description":" "},{"snippet":"get_custom_transform()${0}","displayText":"get_custom_transform","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"get_disable_distance()${0}","displayText":"get_disable_distance","type":"function","leftLabel":"float","description":" Return the distance threshold for disabling the portal. Every time that the portal goes beyond \"distance\", it disables itself, becoming the opaque color (see [method set_disabled_color]). "},{"snippet":"get_disabled_texture()${0}","displayText":"get_disabled_texture","type":"function","leftLabel":"Texture","description":" "},{"snippet":"get_draw_range_begin()${0}","displayText":"get_draw_range_begin","type":"function","leftLabel":"float","description":" "},{"snippet":"get_filter_resonance(${1:voice})${0}","displayText":"get_filter_resonance","type":"function","leftLabel":"float","description":" Return the current filter resonance for a given voice. Resonance goes from 0 up. "},{"snippet":"get_follow_smoothing()${0}","displayText":"get_follow_smoothing","type":"function","leftLabel":"float","description":" "},{"snippet":"get_global_transform()${0}","displayText":"get_global_transform","type":"function","leftLabel":"Transform","description":" Return the gloal transform, relative to worldspace. "},{"snippet":"get_initial_velocity()${0}","displayText":"get_initial_velocity","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_item_accelerator(${1:idx})${0}","displayText":"get_item_accelerator","type":"function","leftLabel":"int","description":" Return the accelerator of the item at index \"idx\". Accelerators are special combinations of keys that activate the item, no matter which control is focused. "},{"snippet":"get_keep_aspect_mode()${0}","displayText":"get_keep_aspect_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_object_type_mask()${0}","displayText":"get_object_type_mask","type":"function","leftLabel":"int","description":" "},{"snippet":"get_parent_area_size()${0}","displayText":"get_parent_area_size","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_pre_process_time()${0}","displayText":"get_pre_process_time","type":"function","leftLabel":"float","description":" "},{"snippet":"get_progress_texture()${0}","displayText":"get_progress_texture","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_response_headers()${0}","displayText":"get_response_headers","type":"function","leftLabel":"StringArray","description":" "},{"snippet":"get_result_object_id(${1:idx})${0}","displayText":"get_result_object_id","type":"function","leftLabel":"int","description":" "},{"snippet":"get_texture_rotation()${0}","displayText":"get_texture_rotation","type":"function","leftLabel":"float","description":" "},{"snippet":"get_ticks_on_borders()${0}","displayText":"get_ticks_on_borders","type":"function","leftLabel":"bool","description":" Return true if ticks are visible on borders. "},{"snippet":"get_cell_extra_margin()${0}","displayText":"get_cell_extra_margin","type":"function","leftLabel":"float","description":" "},{"snippet":"get_channel_volumeidx(${1:arg0})${0}","displayText":"get_channel_volumeidx","type":"function","leftLabel":"float","description":" "},{"snippet":"get_collider_metadata()${0}","displayText":"get_collider_metadata","type":"function","leftLabel":"","description":" "},{"snippet":"get_collider_velocity()${0}","displayText":"get_collider_velocity","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_color_phase_color(${1:phase})${0}","displayText":"get_color_phase_color","type":"function","leftLabel":"Color","description":" "},{"snippet":"get_contact_local_pos(${1:contact_idx})${0}","displayText":"get_contact_local_pos","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_current_animation()${0}","displayText":"get_current_animation","type":"function","leftLabel":"String","description":" Return the name of the animation being played. "},{"snippet":"get_custom_popup_rect()${0}","displayText":"get_custom_popup_rect","type":"function","leftLabel":"Rect2","description":" "},{"snippet":"get_default_pan_depth()${0}","displayText":"get_default_pan_depth","type":"function","leftLabel":"float","description":" "},{"snippet":"get_default_volume_db()${0}","displayText":"get_default_volume_db","type":"function","leftLabel":"float","description":" "},{"snippet":"get_edited_scene_root()${0}","displayText":"get_edited_scene_root","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_energy_multiplier()${0}","displayText":"get_energy_multiplier","type":"function","leftLabel":"float","description":" "},{"snippet":"get_frames_per_second()${0}","displayText":"get_frames_per_second","type":"function","leftLabel":"float","description":" "},{"snippet":"get_material_override()${0}","displayText":"get_material_override","type":"function","leftLabel":"Object","description":" Return the material override for the whole geometry. "},{"snippet":"get_morph_target_mode()${0}","displayText":"get_morph_target_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_morph_target_name(${1:index})${0}","displayText":"get_morph_target_name","type":"function","leftLabel":"String","description":" "},{"snippet":"get_mouse_button_mask()${0}","displayText":"get_mouse_button_mask","type":"function","leftLabel":"int","description":" "},{"snippet":"get_node_and_resource(${1:path})${0}","displayText":"get_node_and_resource","type":"function","leftLabel":"Array","description":" "},{"snippet":"get_scroll_base_scale()${0}","displayText":"get_scroll_base_scale","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_selected_metadata()${0}","displayText":"get_selected_metadata","type":"function","leftLabel":"","description":" "},{"snippet":"get_selection_to_line()${0}","displayText":"get_selection_to_line","type":"function","leftLabel":"int","description":" Return the selection end line. "},{"snippet":"get_suspension_travel()${0}","displayText":"get_suspension_travel","type":"function","leftLabel":"float","description":" "},{"snippet":"get_word_under_cursor()${0}","displayText":"get_word_under_cursor","type":"function","leftLabel":"String","description":" "},{"snippet":"get_collision_friction()${0}","displayText":"get_collision_friction","type":"function","leftLabel":"float","description":" "},{"snippet":"get_custom_solver_bias()${0}","displayText":"get_custom_solver_bias","type":"function","leftLabel":"float","description":" Return the custom solver bias. No need to change this unless you really know what you are doing. "},{"snippet":"get_damping_relaxation()${0}","displayText":"get_damping_relaxation","type":"function","leftLabel":"float","description":" "},{"snippet":"get_default_blend_time()${0}","displayText":"get_default_blend_time","type":"function","leftLabel":"float","description":" Return the default blend time between animations. "},{"snippet":"get_default_pan_height()${0}","displayText":"get_default_pan_height","type":"function","leftLabel":"float","description":" "},{"snippet":"get_expand_margin_size(${1:arg0})${0}","displayText":"get_expand_margin_size","type":"function","leftLabel":"float","description":" "},{"snippet":"get_instance_transform(${1:arg0})${0}","displayText":"get_instance_transform","type":"function","leftLabel":"Transform","description":" Return the transform of a specific instance. "},{"snippet":"get_morph_target_count()${0}","displayText":"get_morph_target_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_overlapping_bodies()${0}","displayText":"get_overlapping_bodies","type":"function","leftLabel":"Array","description":" "},{"snippet":"get_pitch_random_scale()${0}","displayText":"get_pitch_random_scale","type":"function","leftLabel":"float","description":" Return the pitch random scaling. "},{"snippet":"get_position_in_parent()${0}","displayText":"get_position_in_parent","type":"function","leftLabel":"int","description":" "},{"snippet":"get_process_delta_time()${0}","displayText":"get_process_delta_time","type":"function","leftLabel":"float","description":" Return the time elapsed (in seconds) since the last process callback. This is almost always different each time. "},{"snippet":"get_random_pitch_scale()${0}","displayText":"get_random_pitch_scale","type":"function","leftLabel":"float","description":" "},{"snippet":"get_scroll_base_offset()${0}","displayText":"get_scroll_base_offset","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_tween_process_mode()${0}","displayText":"get_tween_process_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_viewport_transform()${0}","displayText":"get_viewport_transform","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"get_contact_collider_id(${1:contact_idx})${0}","displayText":"get_contact_collider_id","type":"function","leftLabel":"int","description":" Return the object id of the collider. "},{"snippet":"get_contact_local_shape(${1:contact_idx})${0}","displayText":"get_contact_local_shape","type":"function","leftLabel":"int","description":" Return the local shape index of the collision. "},{"snippet":"get_cubic_interpolation()${0}","displayText":"get_cubic_interpolation","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_custom_minimum_size()${0}","displayText":"get_custom_minimum_size","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_damping_compression()${0}","displayText":"get_damping_compression","type":"function","leftLabel":"float","description":" "},{"snippet":"get_default_filter_gain()${0}","displayText":"get_default_filter_gain","type":"function","leftLabel":"float","description":" "},{"snippet":"get_default_filter_type()${0}","displayText":"get_default_filter_type","type":"function","leftLabel":"int","description":" "},{"snippet":"get_default_pitch_scale()${0}","displayText":"get_default_pitch_scale","type":"function","leftLabel":"float","description":" "},{"snippet":"get_default_reverb_room()${0}","displayText":"get_default_reverb_room","type":"function","leftLabel":"float","description":" "},{"snippet":"get_last_unused_item_id()${0}","displayText":"get_last_unused_item_id","type":"function","leftLabel":"int","description":" Get an unused id for a new item. "},{"snippet":"get_last_unused_tile_id()${0}","displayText":"get_last_unused_tile_id","type":"function","leftLabel":"int","description":" Find an empty id for creating a new tile. "},{"snippet":"get_pending_frame_count()${0}","displayText":"get_pending_frame_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_render_target_vflip()${0}","displayText":"get_render_target_vflip","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_resolve_item_status(${1:id})${0}","displayText":"get_resolve_item_status","type":"function","leftLabel":"int","description":" Return the status of hostname queued for resolving, given it's queue ID. Returned status can be any of the RESOLVER_STATUS_* enumeration. "},{"snippet":"get_result_object_shape(${1:idx})${0}","displayText":"get_result_object_shape","type":"function","leftLabel":"int","description":" "},{"snippet":"get_selection_from_line()${0}","displayText":"get_selection_from_line","type":"function","leftLabel":"int","description":" Return the selection begin line. "},{"snippet":"get_selection_to_column()${0}","displayText":"get_selection_to_column","type":"function","leftLabel":"int","description":" Return the selection end column. "},{"snippet":"get_space_override_mode()${0}","displayText":"get_space_override_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_static_memory_usage()${0}","displayText":"get_static_memory_usage","type":"function","leftLabel":"int","description":" "},{"snippet":"get_baked_light_instance()${0}","displayText":"get_baked_light_instance","type":"function","leftLabel":"RID","description":" "},{"snippet":"get_camera_screen_center()${0}","displayText":"get_camera_screen_center","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_closest_point_normal(${1:to_point})${0}","displayText":"get_closest_point_normal","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_collision_layer_mask()${0}","displayText":"get_collision_layer_mask","type":"function","leftLabel":"int","description":" "},{"snippet":"get_contact_collider_pos(${1:contact_idx})${0}","displayText":"get_contact_collider_pos","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_contact_local_normal(${1:contact_idx})${0}","displayText":"get_contact_local_normal","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_default_cursor_shape()${0}","displayText":"get_default_cursor_shape","type":"function","leftLabel":"int","description":" Return the default cursor shape for this control. See enum CURSOR_* for the list of shapes. "},{"snippet":"get_dynamic_memory_usage()${0}","displayText":"get_dynamic_memory_usage","type":"function","leftLabel":"int","description":" Return the total amount of dynamic memory used (only works in debug). "},{"snippet":"get_fullscreen_mode_list(${1:screen})${0}","displayText":"get_fullscreen_mode_list","type":"function","leftLabel":"Array","description":" Return the list of fullscreen modes. "},{"snippet":"get_pressed_button_index()${0}","displayText":"get_pressed_button_index","type":"function","leftLabel":"int","description":" Return the index of the pressed button (by tree order). "},{"snippet":"get_render_target_filter()${0}","displayText":"get_render_target_filter","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_resolve_item_address(${1:id})${0}","displayText":"get_resolve_item_address","type":"function","leftLabel":"String","description":" Return a resolved item address, or an empty string if an error happened or resolution didn't happen yet (see [method get_resolve_item_status]). "},{"snippet":"get_response_body_length()${0}","displayText":"get_response_body_length","type":"function","leftLabel":"int","description":" "},{"snippet":"get_suspension_max_force()${0}","displayText":"get_suspension_max_force","type":"function","leftLabel":"float","description":" "},{"snippet":"get_suspension_stiffness()${0}","displayText":"get_suspension_stiffness","type":"function","leftLabel":"float","description":" "},{"snippet":"get_capture_input_on_drag()${0}","displayText":"get_capture_input_on_drag","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_cell_item_orientation(${1:x}, ${2:y}, ${3:z})${0}","displayText":"get_cell_item_orientation","type":"function","leftLabel":"int","description":" "},{"snippet":"get_combined_minimum_size()${0}","displayText":"get_combined_minimum_size","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_current_animation_pos()${0}","displayText":"get_current_animation_pos","type":"function","leftLabel":"float","description":" Get the position (in seconds) of the currently being played animation. "},{"snippet":"get_default_filter_cutoff()${0}","displayText":"get_default_filter_cutoff","type":"function","leftLabel":"float","description":" "},{"snippet":"get_emission_half_extents()${0}","displayText":"get_emission_half_extents","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"get_iterations_per_second()${0}","displayText":"get_iterations_per_second","type":"function","leftLabel":"int","description":" Return the amount of fixed iterations per second (for fixed process and physics). "},{"snippet":"get_lossy_storage_quality()${0}","displayText":"get_lossy_storage_quality","type":"function","leftLabel":"float","description":" "},{"snippet":"get_max_contacts_reported()${0}","displayText":"get_max_contacts_reported","type":"function","leftLabel":"int","description":" "},{"snippet":"get_named_attribute_value(${1:arg0})${0}","displayText":"get_named_attribute_value","type":"function","leftLabel":"String","description":" "},{"snippet":"get_recognized_extensions(${1:type})${0}","displayText":"get_recognized_extensions","type":"function","leftLabel":"StringArray","description":" Return the list of extensions available for saving a resource of a given type. "},{"snippet":"get_render_target_texture()${0}","displayText":"get_render_target_texture","type":"function","leftLabel":"RenderTargetTexture","description":" "},{"snippet":"get_selection_from_column()${0}","displayText":"get_selection_from_column","type":"function","leftLabel":"int","description":" Return the selection begin column. "},{"snippet":"get_total_character_count()${0}","displayText":"get_total_character_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_animation_process_mode()${0}","displayText":"get_animation_process_mode","type":"function","leftLabel":"int","description":" Return the mode in which the animation player processes. See [method set_animation_process_mode]. "},{"snippet":"get_available_packet_count()${0}","displayText":"get_available_packet_count","type":"function","leftLabel":"int","description":" "},{"snippet":"get_baked_light_texture_id()${0}","displayText":"get_baked_light_texture_id","type":"function","leftLabel":"int","description":" "},{"snippet":"get_channel_last_note_time(${1:arg0})${0}","displayText":"get_channel_last_note_time","type":"function","leftLabel":"float","description":" "},{"snippet":"get_contact_collider_shape(${1:contact_idx})${0}","displayText":"get_contact_collider_shape","type":"function","leftLabel":"int","description":" "},{"snippet":"get_emission_base_velocity()${0}","displayText":"get_emission_base_velocity","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_fx_global_volume_scale()${0}","displayText":"get_fx_global_volume_scale","type":"function","leftLabel":"float","description":" "},{"snippet":"get_initial_lattice_subdiv()${0}","displayText":"get_initial_lattice_subdiv","type":"function","leftLabel":"int","description":" "},{"snippet":"get_physics_object_picking()${0}","displayText":"get_physics_object_picking","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_suspension_rest_length()${0}","displayText":"get_suspension_rest_length","type":"function","leftLabel":"float","description":" "},{"snippet":"generic_6dof_joint_get_flag(${1:joint}, ${2:axis}, ${3:flag})${0}","displayText":"generic_6dof_joint_get_flag","type":"function","leftLabel":"bool","description":" "},{"snippet":"generic_6dof_joint_set_flag(${1:joint}, ${2:axis}, ${3:flag}, ${4:enable})${0}","displayText":"generic_6dof_joint_set_flag","type":"function","leftLabel":"","description":" "},{"snippet":"get_contact_collider_object(${1:contact_idx})${0}","displayText":"get_contact_collider_object","type":"function","leftLabel":"Object","description":" "},{"snippet":"get_global_canvas_transform()${0}","displayText":"get_global_canvas_transform","type":"function","leftLabel":"Matrix32","description":" "},{"snippet":"generic_6dof_joint_get_param(${1:joint}, ${2:axis}, ${3:param})${0}","displayText":"generic_6dof_joint_get_param","type":"function","leftLabel":"float","description":" "},{"snippet":"generic_6dof_joint_set_param(${1:joint}, ${2:axis}, ${3:param}, ${4:value})${0}","displayText":"generic_6dof_joint_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"get_closest_point_to_segment(${1:start}, ${2:end})${0}","displayText":"get_closest_point_to_segment","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_closest_point_to_segment(${1:point}, ${2:s1}, ${3:s2})${0}","displayText":"get_closest_point_to_segment","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_constant_linear_velocity()${0}","displayText":"get_constant_linear_velocity","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_current_animation_length()${0}","displayText":"get_current_animation_length","type":"function","leftLabel":"float","description":" Get the length (in seconds) of the currently being played animation. "},{"snippet":"get_default_filter_resonance()${0}","displayText":"get_default_filter_resonance","type":"function","leftLabel":"float","description":" "},{"snippet":"get_fixed_process_delta_time()${0}","displayText":"get_fixed_process_delta_time","type":"function","leftLabel":"float","description":" Return the time elapsed since the last fixed frame. This is always the same in fixed proecssing unless the frames per second is changed in [OS]. "},{"snippet":"get_static_memory_peak_usage()${0}","displayText":"get_static_memory_peak_usage","type":"function","leftLabel":"int","description":" Return the max amount of static memory used (only works in debug). "},{"snippet":"get_bound_child_nodes_to_bone(${1:bone_idx})${0}","displayText":"get_bound_child_nodes_to_bone","type":"function","leftLabel":"Array","description":" Deprecated soon. "},{"snippet":"get_constant_angular_velocity()${0}","displayText":"get_constant_angular_velocity","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_render_target_gen_mipmaps()${0}","displayText":"get_render_target_gen_mipmaps","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_render_target_update_mode()${0}","displayText":"get_render_target_update_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"get_named_attribute_value_safe(${1:arg0})${0}","displayText":"get_named_attribute_value_safe","type":"function","leftLabel":"String","description":" "},{"snippet":"get_stream_global_volume_scale()${0}","displayText":"get_stream_global_volume_scale","type":"function","leftLabel":"float","description":" Return the global scale for stream playback. "},{"snippet":"get_recognized_extensions_for_type(${1:type})${0}","displayText":"get_recognized_extensions_for_type","type":"function","leftLabel":"StringArray","description":" Return the list of recognized extensions for a resource type. "},{"snippet":"get_response_headers_as_dictionary()${0}","displayText":"get_response_headers_as_dictionary","type":"function","leftLabel":"Dictionary","description":" "},{"snippet":"get_transfer_lightmaps_only_to_uv2()${0}","displayText":"get_transfer_lightmaps_only_to_uv2","type":"function","leftLabel":"bool","description":" "},{"snippet":"get_closest_points_between_segments(${1:p1}, ${2:p2}, ${3:q1}, ${4:q2})${0}","displayText":"get_closest_points_between_segments","type":"function","leftLabel":"Vector3Array","description":" "},{"snippet":"get_contact_collider_shape_metadata(${1:contact_idx})${0}","displayText":"get_contact_collider_shape_metadata","type":"function","leftLabel":"","description":" "},{"snippet":"get_event_voice_global_volume_scale()${0}","displayText":"get_event_voice_global_volume_scale","type":"function","leftLabel":"float","description":" "},{"snippet":"get_contact_collider_velocity_at_pos(${1:contact_idx})${0}","displayText":"get_contact_collider_velocity_at_pos","type":"function","leftLabel":"Vector3","description":" "},{"snippet":"get_closest_points_between_segments_2d(${1:p1}, ${2:q1}, ${3:p2}, ${4:q2})${0}","displayText":"get_closest_points_between_segments_2d","type":"function","leftLabel":"Vector2Array","description":" "},{"snippet":"get_continuous_collision_detection_mode()${0}","displayText":"get_continuous_collision_detection_mode","type":"function","leftLabel":"int","description":" "}],"q":[{"snippet":"quit()${0}","displayText":"quit","type":"function","leftLabel":"","description":" "},{"snippet":"queue(${1:name})${0}","displayText":"queue","type":"function","leftLabel":"","description":" Queue an animation for playback once the current one is done. "},{"snippet":"queue_free()${0}","displayText":"queue_free","type":"function","leftLabel":"","description":" "},{"snippet":"queue_sort()${0}","displayText":"queue_sort","type":"function","leftLabel":"","description":" Queue resort of the contained children. This is called automatically anyway, but can be called upon request. "},{"snippet":"queue_delete(${1:obj})${0}","displayText":"queue_delete","type":"function","leftLabel":"","description":" "},{"snippet":"queue_screen_capture()${0}","displayText":"queue_screen_capture","type":"function","leftLabel":"","description":" "}],"o":[{"snippet":"open(${1:file})${0}","displayText":"open","type":"function","leftLabel":"int","description":" "},{"snippet":"open(${1:path}, ${2:flags})${0}","displayText":"open","type":"function","leftLabel":"int","description":" "},{"snippet":"open(${1:path})${0}","displayText":"open","type":"function","leftLabel":"int","description":" "},{"snippet":"open_buffer(${1:buffer})${0}","displayText":"open_buffer","type":"function","leftLabel":"int","description":" "},{"snippet":"open_encrypted(${1:path}, ${2:mode_flags}, ${3:key})${0}","displayText":"open_encrypted","type":"function","leftLabel":"int","description":" "},{"snippet":"oneshot_node_stop(${1:id})${0}","displayText":"oneshot_node_stop","type":"function","leftLabel":"","description":" "},{"snippet":"oneshot_node_start(${1:id})${0}","displayText":"oneshot_node_start","type":"function","leftLabel":"","description":" "},{"snippet":"oneshot_node_is_active(${1:id})${0}","displayText":"oneshot_node_is_active","type":"function","leftLabel":"bool","description":" "},{"snippet":"open_encrypted_with_pass(${1:path}, ${2:mode_flags}, ${3:pass})${0}","displayText":"open_encrypted_with_pass","type":"function","leftLabel":"int","description":" "},{"snippet":"oneshot_node_get_fadein_time(${1:id})${0}","displayText":"oneshot_node_get_fadein_time","type":"function","leftLabel":"float","description":" "},{"snippet":"oneshot_node_has_autorestart(${1:id})${0}","displayText":"oneshot_node_has_autorestart","type":"function","leftLabel":"bool","description":" "},{"snippet":"oneshot_node_set_autorestart(${1:id}, ${2:enable})${0}","displayText":"oneshot_node_set_autorestart","type":"function","leftLabel":"","description":" "},{"snippet":"oneshot_node_set_fadein_time(${1:id}, ${2:time_sec})${0}","displayText":"oneshot_node_set_fadein_time","type":"function","leftLabel":"","description":" "},{"snippet":"oneshot_node_set_filter_path(${1:id}, ${2:path}, ${3:enable})${0}","displayText":"oneshot_node_set_filter_path","type":"function","leftLabel":"","description":" "},{"snippet":"oneshot_node_get_fadeout_time(${1:id})${0}","displayText":"oneshot_node_get_fadeout_time","type":"function","leftLabel":"float","description":" "},{"snippet":"oneshot_node_set_fadeout_time(${1:id}, ${2:time_sec})${0}","displayText":"oneshot_node_set_fadeout_time","type":"function","leftLabel":"","description":" "},{"snippet":"oneshot_node_get_autorestart_delay(${1:id})${0}","displayText":"oneshot_node_get_autorestart_delay","type":"function","leftLabel":"float","description":" "},{"snippet":"oneshot_node_set_autorestart_delay(${1:id}, ${2:delay_sec})${0}","displayText":"oneshot_node_set_autorestart_delay","type":"function","leftLabel":"","description":" "},{"snippet":"oneshot_node_get_autorestart_random_delay(${1:id})${0}","displayText":"oneshot_node_get_autorestart_random_delay","type":"function","leftLabel":"float","description":" "},{"snippet":"oneshot_node_set_autorestart_random_delay(${1:id}, ${2:rand_sec})${0}","displayText":"oneshot_node_set_autorestart_random_delay","type":"function","leftLabel":"","description":" "}],"b":[{"snippet":"begin(${1:primitive}, ${2:texture})${0}","displayText":"begin","type":"function","leftLabel":"","description":" "},{"snippet":"begin(${1:primitive})${0}","displayText":"begin","type":"function","leftLabel":"","description":" "},{"snippet":"body_exit(${1:body})${0}","displayText":"body_exit","type":"method","leftLabel":"signal","description":"     "},{"snippet":"broadcast(${1:name}, ${2:parameters})${0}","displayText":"broadcast","type":"method","leftLabel":"signal","description":"       "},{"snippet":"body_enter(${1:body})${0}","displayText":"body_enter","type":"method","leftLabel":"signal","description":"     "},{"snippet":"body_create(${1:mode}, ${2:init_sleeping})${0}","displayText":"body_create","type":"function","leftLabel":"RID","description":" "},{"snippet":"bake_geometry()${0}","displayText":"bake_geometry","type":"function","leftLabel":"","description":" "},{"snippet":"body_get_mode(${1:body})${0}","displayText":"body_get_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"body_get_mode(${1:body}, ${2:arg1})${0}","displayText":"body_get_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"body_set_mode(${1:body}, ${2:mode})${0}","displayText":"body_set_mode","type":"function","leftLabel":"","description":" "},{"snippet":"body_add_shape(${1:body}, ${2:shape}, ${3:transform})${0}","displayText":"body_add_shape","type":"function","leftLabel":"","description":" "},{"snippet":"body_get_param(${1:body}, ${2:param})${0}","displayText":"body_get_param","type":"function","leftLabel":"float","description":" "},{"snippet":"body_get_shape(${1:body}, ${2:shape_idx})${0}","displayText":"body_get_shape","type":"function","leftLabel":"RID","description":" "},{"snippet":"body_get_space(${1:body})${0}","displayText":"body_get_space","type":"function","leftLabel":"RID","description":" "},{"snippet":"body_get_state(${1:body}, ${2:state})${0}","displayText":"body_get_state","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_param(${1:body}, ${2:param}, ${3:value})${0}","displayText":"body_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_shape(${1:body}, ${2:shape_idx}, ${3:shape})${0}","displayText":"body_set_shape","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_space(${1:body}, ${2:space})${0}","displayText":"body_set_space","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_state(${1:body}, ${2:state}, ${3:value})${0}","displayText":"body_set_state","type":"function","leftLabel":"","description":" "},{"snippet":"button_pressed(${1:item}, ${2:column}, ${3:id})${0}","displayText":"button_pressed","type":"method","leftLabel":"signal","description":"         "},{"snippet":"body_exit_shape(${1:body_id}, ${2:body}, ${3:body_shape}, ${4:local_shape})${0}","displayText":"body_exit_shape","type":"method","leftLabel":"signal","description":"           "},{"snippet":"body_exit_shape(${1:body_id}, ${2:body}, ${3:body_shape}, ${4:area_shape})${0}","displayText":"body_exit_shape","type":"method","leftLabel":"signal","description":"           "},{"snippet":"button_selected(${1:button})${0}","displayText":"button_selected","type":"method","leftLabel":"signal","description":"    A Button was selected (returns the index).  "},{"snippet":"body_enter_shape(${1:body_id}, ${2:body}, ${3:body_shape}, ${4:local_shape})${0}","displayText":"body_enter_shape","type":"method","leftLabel":"signal","description":"          Emitted when a new body sub-shape enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.  "},{"snippet":"body_enter_shape(${1:body_id}, ${2:body}, ${3:body_shape}, ${4:area_shape})${0}","displayText":"body_enter_shape","type":"method","leftLabel":"signal","description":"           "},{"snippet":"build_box_planes(${1:extents})${0}","displayText":"build_box_planes","type":"function","leftLabel":"Array","description":" "},{"snippet":"base64_to_variant(${1:base64_str})${0}","displayText":"base64_to_variant","type":"function","leftLabel":"","description":" "},{"snippet":"body_clear_shapes(${1:body})${0}","displayText":"body_clear_shapes","type":"function","leftLabel":"","description":" "},{"snippet":"body_remove_shape(${1:body}, ${2:shape_idx})${0}","displayText":"body_remove_shape","type":"function","leftLabel":"","description":" "},{"snippet":"body_apply_impulse(${1:body}, ${2:pos}, ${3:impulse})${0}","displayText":"body_apply_impulse","type":"function","leftLabel":"","description":" "},{"snippet":"body_get_axis_lock(${1:body})${0}","displayText":"body_get_axis_lock","type":"function","leftLabel":"int","description":" "},{"snippet":"body_set_axis_lock(${1:body}, ${2:axis})${0}","displayText":"body_set_axis_lock","type":"function","leftLabel":"","description":" "},{"snippet":"baked_light_changed()${0}","displayText":"baked_light_changed","type":"method","leftLabel":"signal","description":"   "},{"snippet":"body_get_layer_mask(${1:body}, ${2:arg1})${0}","displayText":"body_get_layer_mask","type":"function","leftLabel":"int","description":" "},{"snippet":"body_set_layer_mask(${1:body}, ${2:mask})${0}","displayText":"body_set_layer_mask","type":"function","leftLabel":"","description":" "},{"snippet":"body_get_shape_count(${1:body})${0}","displayText":"body_get_shape_count","type":"function","leftLabel":"int","description":" "},{"snippet":"body_is_ray_pickable(${1:body})${0}","displayText":"body_is_ray_pickable","type":"function","leftLabel":"bool","description":" "},{"snippet":"build_capsule_planes(${1:radius}, ${2:height}, ${3:sides}, ${4:lats}, ${5:axis})${0}","displayText":"build_capsule_planes","type":"function","leftLabel":"Array","description":" "},{"snippet":"black_bars_set_images(${1:left}, ${2:top}, ${3:right}, ${4:bottom})${0}","displayText":"black_bars_set_images","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_ray_pickable(${1:body}, ${2:enable})${0}","displayText":"body_set_ray_pickable","type":"function","leftLabel":"","description":" "},{"snippet":"build_cylinder_planes(${1:radius}, ${2:height}, ${3:sides}, ${4:axis})${0}","displayText":"build_cylinder_planes","type":"function","leftLabel":"Array","description":" "},{"snippet":"black_bars_set_margins(${1:left}, ${2:top}, ${3:right}, ${4:bottom})${0}","displayText":"black_bars_set_margins","type":"function","leftLabel":"","description":" "},{"snippet":"blend2_node_get_amount(${1:id})${0}","displayText":"blend2_node_get_amount","type":"function","leftLabel":"float","description":" "},{"snippet":"blend2_node_set_amount(${1:id}, ${2:blend})${0}","displayText":"blend2_node_set_amount","type":"function","leftLabel":"","description":" "},{"snippet":"blend3_node_get_amount(${1:id})${0}","displayText":"blend3_node_get_amount","type":"function","leftLabel":"float","description":" "},{"snippet":"blend3_node_set_amount(${1:id}, ${2:blend})${0}","displayText":"blend3_node_set_amount","type":"function","leftLabel":"","description":" "},{"snippet":"blend4_node_get_amount(${1:id})${0}","displayText":"blend4_node_get_amount","type":"function","leftLabel":"Vector2","description":" "},{"snippet":"blend4_node_set_amount(${1:id}, ${2:blend})${0}","displayText":"blend4_node_set_amount","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_axis_velocity(${1:body}, ${2:axis_velocity})${0}","displayText":"body_set_axis_velocity","type":"function","leftLabel":"","description":" "},{"snippet":"bind_child_node_to_bone(${1:bone_idx}, ${2:node})${0}","displayText":"bind_child_node_to_bone","type":"function","leftLabel":"","description":" Deprecated soon. "},{"snippet":"body_get_collision_mask(${1:body}, ${2:arg1})${0}","displayText":"body_get_collision_mask","type":"function","leftLabel":"int","description":" "},{"snippet":"body_get_shape_metadata(${1:body}, ${2:shape_idx})${0}","displayText":"body_get_shape_metadata","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_collision_mask(${1:body}, ${2:mask})${0}","displayText":"body_set_collision_mask","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_shape_metadata(${1:body}, ${2:shape_idx}, ${3:metadata})${0}","displayText":"body_set_shape_metadata","type":"function","leftLabel":"","description":" "},{"snippet":"body_get_shape_transform(${1:body}, ${2:shape_idx})${0}","displayText":"body_get_shape_transform","type":"function","leftLabel":"Transform","description":" "},{"snippet":"body_set_shape_transform(${1:body}, ${2:shape_idx}, ${3:transform})${0}","displayText":"body_set_shape_transform","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_shape_as_trigger(${1:body}, ${2:shape_idx}, ${3:enable})${0}","displayText":"body_set_shape_as_trigger","type":"function","leftLabel":"","description":" "},{"snippet":"blend2_node_set_filter_path(${1:id}, ${2:path}, ${3:enable})${0}","displayText":"blend2_node_set_filter_path","type":"function","leftLabel":"","description":" "},{"snippet":"body_get_object_instance_ID(${1:body})${0}","displayText":"body_get_object_instance_ID","type":"function","leftLabel":"int","description":" "},{"snippet":"body_add_collision_exception(${1:body}, ${2:excepted_body})${0}","displayText":"body_add_collision_exception","type":"function","leftLabel":"","description":" "},{"snippet":"body_is_shape_set_as_trigger(${1:body}, ${2:shape_idx})${0}","displayText":"body_is_shape_set_as_trigger","type":"function","leftLabel":"bool","description":" "},{"snippet":"body_attach_object_instance_ID(${1:body}, ${2:id})${0}","displayText":"body_attach_object_instance_ID","type":"function","leftLabel":"","description":" "},{"snippet":"body_get_max_contacts_reported(${1:body})${0}","displayText":"body_get_max_contacts_reported","type":"function","leftLabel":"int","description":" "},{"snippet":"body_set_max_contacts_reported(${1:body}, ${2:amount})${0}","displayText":"body_set_max_contacts_reported","type":"function","leftLabel":"","description":" "},{"snippet":"body_remove_collision_exception(${1:body}, ${2:excepted_body})${0}","displayText":"body_remove_collision_exception","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_omit_force_integration(${1:body}, ${2:enable})${0}","displayText":"body_set_omit_force_integration","type":"function","leftLabel":"","description":" "},{"snippet":"body_is_omitting_force_integration(${1:body})${0}","displayText":"body_is_omitting_force_integration","type":"function","leftLabel":"bool","description":" "},{"snippet":"body_set_force_integration_callback(${1:body}, ${2:receiver}, ${3:method}, ${4:userdata})${0}","displayText":"body_set_force_integration_callback","type":"function","leftLabel":"","description":" "},{"snippet":"body_set_force_integration_callback(${1:body}, ${2:receiver}, ${3:method}, ${4:arg3})${0}","displayText":"body_set_force_integration_callback","type":"function","leftLabel":"","description":" "},{"snippet":"body_get_continuous_collision_detection_mode(${1:body})${0}","displayText":"body_get_continuous_collision_detection_mode","type":"function","leftLabel":"int","description":" "},{"snippet":"body_set_continuous_collision_detection_mode(${1:body}, ${2:mode})${0}","displayText":"body_set_continuous_collision_detection_mode","type":"function","leftLabel":"","description":" "},{"snippet":"body_is_continuous_collision_detection_enabled(${1:body})${0}","displayText":"body_is_continuous_collision_detection_enabled","type":"function","leftLabel":"bool","description":" "},{"snippet":"body_set_enable_continuous_collision_detection(${1:body}, ${2:enable})${0}","displayText":"body_set_enable_continuous_collision_detection","type":"function","leftLabel":"","description":" "}],"u":[{"snippet":"undo()${0}","displayText":"undo","type":"function","leftLabel":"","description":" Perform undo operation. "},{"snippet":"unlock()${0}","displayText":"unlock","type":"function","leftLabel":"","description":" "},{"snippet":"update()${0}","displayText":"update","type":"function","leftLabel":"","description":" Queue the CanvasItem for update. NOTIFICATION_DRAW will be called on idle time to request redraw. "},{"snippet":"unshare()${0}","displayText":"unshare","type":"function","leftLabel":"","description":" "},{"snippet":"unreference()${0}","displayText":"unreference","type":"function","leftLabel":"bool","description":" Decrease the internal reference counter. Use this only if you really know what you are doing. "},{"snippet":"update_gizmo()${0}","displayText":"update_gizmo","type":"function","leftLabel":"","description":" "},{"snippet":"update_worlds()${0}","displayText":"update_worlds","type":"function","leftLabel":"","description":" "},{"snippet":"unhandled_input(${1:local_event})${0}","displayText":"unhandled_input","type":"function","leftLabel":"","description":" "},{"snippet":"unproject_position(${1:world_point})${0}","displayText":"unproject_position","type":"function","leftLabel":"Vector2","description":" Return how a 3D point in worldpsace maps to a 2D coordinate in the [Viewport] rectangle. "},{"snippet":"unbind_child_node_from_bone(${1:bone_idx}, ${2:node})${0}","displayText":"unbind_child_node_from_bone","type":"function","leftLabel":"","description":" Deprecated soon. "}],"_":[{"snippet":"_get(${1:property})${0}","displayText":"_get","type":"function","leftLabel":"","description":" Return a property, return null if the property does not exist. "},{"snippet":"_run()${0}","displayText":"_run","type":"function","leftLabel":"","description":" "},{"snippet":"_set(${1:property}, ${2:value})${0}","displayText":"_set","type":"function","leftLabel":"","description":" Set a property. Return true if the property was found. "},{"snippet":"_draw()${0}","displayText":"_draw","type":"function","leftLabel":"","description":" Called (if exists) to draw the canvas item. "},{"snippet":"_init()${0}","displayText":"_init","type":"function","leftLabel":"","description":" "},{"snippet":"_input(${1:event})${0}","displayText":"_input","type":"function","leftLabel":"","description":" Called when any input happens (also must enable with [method set_process_input] or the property). "},{"snippet":"_ready()${0}","displayText":"_ready","type":"function","leftLabel":"","description":" Called when ready (entered scene and children entered too). "},{"snippet":"_process(${1:delta})${0}","displayText":"_process","type":"function","leftLabel":"","description":" Called for processing. This is called every frame, with the delta time from the previous frame. "},{"snippet":"_exit_tree()${0}","displayText":"_exit_tree","type":"function","leftLabel":"","description":" "},{"snippet":"_enter_tree()${0}","displayText":"_enter_tree","type":"function","leftLabel":"","description":" "},{"snippet":"_input_event(${1:camera}, ${2:event}, ${3:click_pos}, ${4:click_normal}, ${5:shape_idx})${0}","displayText":"_input_event","type":"function","leftLabel":"","description":" "},{"snippet":"_input_event(${1:event})${0}","displayText":"_input_event","type":"function","leftLabel":"","description":" Called when an input event reaches the control. "},{"snippet":"_notification(${1:what})${0}","displayText":"_notification","type":"function","leftLabel":"","description":" Notification request, the notification id is received. "},{"snippet":"_fixed_process(${1:delta})${0}","displayText":"_fixed_process","type":"function","leftLabel":"","description":" Called for fixed processing (synced to the physics). "},{"snippet":"_unhandled_input(${1:event})${0}","displayText":"_unhandled_input","type":"function","leftLabel":"","description":" Called when any input happens that was not handled by something else (also must enable with [method set_process_unhandled_input] or the property). "},{"snippet":"_integrate_forces(${1:state})${0}","displayText":"_integrate_forces","type":"function","leftLabel":"","description":" Override this function to use a custom force integrator. This allows to hook up to the physics processing and alter the simulation state for the object on every frame. "},{"snippet":"_get_property_list()${0}","displayText":"_get_property_list","type":"function","leftLabel":"Array","description":" Return the property list, array of dictionaries, dictionaries must countain: name:String, type:int (see TYPE_* enum in globals) and optionally: hint:int (see PROPERTY_HINT_* in globals), hint_string:String, usage:int (see PROPERTY_USAGE_* in globals). "},{"snippet":"_unhandled_key_input(${1:key_event})${0}","displayText":"_unhandled_key_input","type":"function","leftLabel":"","description":" Called when any key input happens that was not handled by something else. "}],"j":[{"snippet":"joint_get_type(${1:joint})${0}","displayText":"joint_get_type","type":"function","leftLabel":"int","description":" "},{"snippet":"joint_get_param(${1:joint}, ${2:param})${0}","displayText":"joint_get_param","type":"function","leftLabel":"float","description":" "},{"snippet":"joint_set_param(${1:joint}, ${2:param}, ${3:value})${0}","displayText":"joint_set_param","type":"function","leftLabel":"","description":" "},{"snippet":"joint_create_pin(${1:body_A}, ${2:local_A}, ${3:body_B}, ${4:local_B})${0}","displayText":"joint_create_pin","type":"function","leftLabel":"RID","description":" "},{"snippet":"joint_create_hinge(${1:body_A}, ${2:hinge_A}, ${3:body_B}, ${4:hinge_B})${0}","displayText":"joint_create_hinge","type":"function","leftLabel":"RID","description":" "},{"snippet":"joint_create_slider(${1:body_A}, ${2:local_ref_A}, ${3:body_B}, ${4:local_ref_B})${0}","displayText":"joint_create_slider","type":"function","leftLabel":"RID","description":" "},{"snippet":"joy_connection_changed(${1:index}, ${2:connected})${0}","displayText":"joy_connection_changed","type":"method","leftLabel":"signal","description":"       "},{"snippet":"joint_create_cone_twist(${1:body_A}, ${2:local_ref_A}, ${3:body_B}, ${4:local_ref_B})${0}","displayText":"joint_create_cone_twist","type":"function","leftLabel":"RID","description":" "},{"snippet":"joint_create_generic_6dof(${1:body_A}, ${2:local_ref_A}, ${3:body_B}, ${4:local_ref_B})${0}","displayText":"joint_create_generic_6dof","type":"function","leftLabel":"RID","description":" "},{"snippet":"joint_get_solver_priority(${1:joint})${0}","displayText":"joint_get_solver_priority","type":"function","leftLabel":"int","description":" "},{"snippet":"joint_set_solver_priority(${1:joint}, ${2:priority})${0}","displayText":"joint_set_solver_priority","type":"function","leftLabel":"","description":" "}],"k":[{"snippet":"kill(${1:pid})${0}","displayText":"kill","type":"function","leftLabel":"int","description":" Kill a process ID. "}],"X":[{"snippet":"XL_MESSAGE(${1:message})${0}","displayText":"XL_MESSAGE","type":"function","leftLabel":"String","description":" Deprecated, will go away. "}]}}